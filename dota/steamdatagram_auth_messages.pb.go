// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steamdatagram_auth_messages.proto

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CMsgSteamDatagramCertificate_EKeyType int32

const (
	CMsgSteamDatagramCertificate_INVALID CMsgSteamDatagramCertificate_EKeyType = 0
	CMsgSteamDatagramCertificate_ED25519 CMsgSteamDatagramCertificate_EKeyType = 1
)

var CMsgSteamDatagramCertificate_EKeyType_name = map[int32]string{
	0: "INVALID",
	1: "ED25519",
}
var CMsgSteamDatagramCertificate_EKeyType_value = map[string]int32{
	"INVALID": 0,
	"ED25519": 1,
}

func (x CMsgSteamDatagramCertificate_EKeyType) Enum() *CMsgSteamDatagramCertificate_EKeyType {
	p := new(CMsgSteamDatagramCertificate_EKeyType)
	*p = x
	return p
}
func (x CMsgSteamDatagramCertificate_EKeyType) String() string {
	return proto.EnumName(CMsgSteamDatagramCertificate_EKeyType_name, int32(x))
}
func (x *CMsgSteamDatagramCertificate_EKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramCertificate_EKeyType_value, data, "CMsgSteamDatagramCertificate_EKeyType")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramCertificate_EKeyType(value)
	return nil
}
func (CMsgSteamDatagramCertificate_EKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor36, []int{2, 0}
}

type CMsgSteamDatagramRelayAuthTicket struct {
	TimeExpiry         *uint32                                        `protobuf:"fixed32,1,opt,name=time_expiry,json=timeExpiry" json:"time_expiry,omitempty"`
	AuthorizedSteamId  *uint64                                        `protobuf:"fixed64,2,opt,name=authorized_steam_id,json=authorizedSteamId" json:"authorized_steam_id,omitempty"`
	AuthorizedPublicIp *uint32                                        `protobuf:"fixed32,3,opt,name=authorized_public_ip,json=authorizedPublicIp" json:"authorized_public_ip,omitempty"`
	GameserverSteamId  *uint64                                        `protobuf:"fixed64,4,opt,name=gameserver_steam_id,json=gameserverSteamId" json:"gameserver_steam_id,omitempty"`
	GameserverNetId    *uint64                                        `protobuf:"fixed64,5,opt,name=gameserver_net_id,json=gameserverNetId" json:"gameserver_net_id,omitempty"`
	LegacySignature    []byte                                         `protobuf:"bytes,6,opt,name=legacy_signature,json=legacySignature" json:"legacy_signature,omitempty"`
	AppId              *uint32                                        `protobuf:"varint,7,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	GameserverPopId    *uint32                                        `protobuf:"fixed32,9,opt,name=gameserver_pop_id,json=gameserverPopId" json:"gameserver_pop_id,omitempty"`
	VirtualPort        *uint32                                        `protobuf:"varint,10,opt,name=virtual_port,json=virtualPort" json:"virtual_port,omitempty"`
	ExtraFields        []*CMsgSteamDatagramRelayAuthTicket_ExtraField `protobuf:"bytes,8,rep,name=extra_fields,json=extraFields" json:"extra_fields,omitempty"`
	XXX_unrecognized   []byte                                         `json:"-"`
}

func (m *CMsgSteamDatagramRelayAuthTicket) Reset()         { *m = CMsgSteamDatagramRelayAuthTicket{} }
func (m *CMsgSteamDatagramRelayAuthTicket) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramRelayAuthTicket) ProtoMessage()    {}
func (*CMsgSteamDatagramRelayAuthTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor36, []int{0}
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetTimeExpiry() uint32 {
	if m != nil && m.TimeExpiry != nil {
		return *m.TimeExpiry
	}
	return 0
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetAuthorizedSteamId() uint64 {
	if m != nil && m.AuthorizedSteamId != nil {
		return *m.AuthorizedSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetAuthorizedPublicIp() uint32 {
	if m != nil && m.AuthorizedPublicIp != nil {
		return *m.AuthorizedPublicIp
	}
	return 0
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetGameserverSteamId() uint64 {
	if m != nil && m.GameserverSteamId != nil {
		return *m.GameserverSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetGameserverNetId() uint64 {
	if m != nil && m.GameserverNetId != nil {
		return *m.GameserverNetId
	}
	return 0
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetLegacySignature() []byte {
	if m != nil {
		return m.LegacySignature
	}
	return nil
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetAppId() uint32 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetGameserverPopId() uint32 {
	if m != nil && m.GameserverPopId != nil {
		return *m.GameserverPopId
	}
	return 0
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetVirtualPort() uint32 {
	if m != nil && m.VirtualPort != nil {
		return *m.VirtualPort
	}
	return 0
}

func (m *CMsgSteamDatagramRelayAuthTicket) GetExtraFields() []*CMsgSteamDatagramRelayAuthTicket_ExtraField {
	if m != nil {
		return m.ExtraFields
	}
	return nil
}

type CMsgSteamDatagramRelayAuthTicket_ExtraField struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StringValue      *string `protobuf:"bytes,2,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	Int64Value       *int64  `protobuf:"zigzag64,3,opt,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Fixed64Value     *uint64 `protobuf:"fixed64,5,opt,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramRelayAuthTicket_ExtraField) Reset() {
	*m = CMsgSteamDatagramRelayAuthTicket_ExtraField{}
}
func (m *CMsgSteamDatagramRelayAuthTicket_ExtraField) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramRelayAuthTicket_ExtraField) ProtoMessage() {}
func (*CMsgSteamDatagramRelayAuthTicket_ExtraField) Descriptor() ([]byte, []int) {
	return fileDescriptor36, []int{0, 0}
}

func (m *CMsgSteamDatagramRelayAuthTicket_ExtraField) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgSteamDatagramRelayAuthTicket_ExtraField) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *CMsgSteamDatagramRelayAuthTicket_ExtraField) GetInt64Value() int64 {
	if m != nil && m.Int64Value != nil {
		return *m.Int64Value
	}
	return 0
}

func (m *CMsgSteamDatagramRelayAuthTicket_ExtraField) GetFixed64Value() uint64 {
	if m != nil && m.Fixed64Value != nil {
		return *m.Fixed64Value
	}
	return 0
}

type CMsgSteamDatagramSignedRelayAuthTicket struct {
	ReservedDoNotUse *uint64 `protobuf:"fixed64,1,opt,name=reserved_do_not_use,json=reservedDoNotUse" json:"reserved_do_not_use,omitempty"`
	KeyId            *uint64 `protobuf:"fixed64,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	Ticket           []byte  `protobuf:"bytes,3,opt,name=ticket" json:"ticket,omitempty"`
	Signature        []byte  `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramSignedRelayAuthTicket) Reset() {
	*m = CMsgSteamDatagramSignedRelayAuthTicket{}
}
func (m *CMsgSteamDatagramSignedRelayAuthTicket) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramSignedRelayAuthTicket) ProtoMessage()    {}
func (*CMsgSteamDatagramSignedRelayAuthTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor36, []int{1}
}

func (m *CMsgSteamDatagramSignedRelayAuthTicket) GetReservedDoNotUse() uint64 {
	if m != nil && m.ReservedDoNotUse != nil {
		return *m.ReservedDoNotUse
	}
	return 0
}

func (m *CMsgSteamDatagramSignedRelayAuthTicket) GetKeyId() uint64 {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return 0
}

func (m *CMsgSteamDatagramSignedRelayAuthTicket) GetTicket() []byte {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *CMsgSteamDatagramSignedRelayAuthTicket) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type CMsgSteamDatagramCertificate struct {
	KeyType                 *CMsgSteamDatagramCertificate_EKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=dota.CMsgSteamDatagramCertificate_EKeyType,def=0" json:"key_type,omitempty"`
	KeyData                 []byte                                 `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	SteamId                 *uint64                                `protobuf:"fixed64,4,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	GameserverDatacenterIds []uint32                               `protobuf:"fixed32,5,rep,name=gameserver_datacenter_ids,json=gameserverDatacenterIds" json:"gameserver_datacenter_ids,omitempty"`
	TimeCreated             *uint32                                `protobuf:"fixed32,8,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeExpiry              *uint32                                `protobuf:"fixed32,9,opt,name=time_expiry,json=timeExpiry" json:"time_expiry,omitempty"`
	AppId                   *uint32                                `protobuf:"varint,10,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	XXX_unrecognized        []byte                                 `json:"-"`
}

func (m *CMsgSteamDatagramCertificate) Reset()                    { *m = CMsgSteamDatagramCertificate{} }
func (m *CMsgSteamDatagramCertificate) String() string            { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramCertificate) ProtoMessage()               {}
func (*CMsgSteamDatagramCertificate) Descriptor() ([]byte, []int) { return fileDescriptor36, []int{2} }

const Default_CMsgSteamDatagramCertificate_KeyType CMsgSteamDatagramCertificate_EKeyType = CMsgSteamDatagramCertificate_INVALID

func (m *CMsgSteamDatagramCertificate) GetKeyType() CMsgSteamDatagramCertificate_EKeyType {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return Default_CMsgSteamDatagramCertificate_KeyType
}

func (m *CMsgSteamDatagramCertificate) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func (m *CMsgSteamDatagramCertificate) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CMsgSteamDatagramCertificate) GetGameserverDatacenterIds() []uint32 {
	if m != nil {
		return m.GameserverDatacenterIds
	}
	return nil
}

func (m *CMsgSteamDatagramCertificate) GetTimeCreated() uint32 {
	if m != nil && m.TimeCreated != nil {
		return *m.TimeCreated
	}
	return 0
}

func (m *CMsgSteamDatagramCertificate) GetTimeExpiry() uint32 {
	if m != nil && m.TimeExpiry != nil {
		return *m.TimeExpiry
	}
	return 0
}

func (m *CMsgSteamDatagramCertificate) GetAppId() uint32 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

type CMsgSteamDatagramCertificateSigned struct {
	Cert             []byte  `protobuf:"bytes,4,opt,name=cert" json:"cert,omitempty"`
	CaKeyId          *uint64 `protobuf:"fixed64,5,opt,name=ca_key_id,json=caKeyId" json:"ca_key_id,omitempty"`
	CaSignature      []byte  `protobuf:"bytes,6,opt,name=ca_signature,json=caSignature" json:"ca_signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramCertificateSigned) Reset()         { *m = CMsgSteamDatagramCertificateSigned{} }
func (m *CMsgSteamDatagramCertificateSigned) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramCertificateSigned) ProtoMessage()    {}
func (*CMsgSteamDatagramCertificateSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor36, []int{3}
}

func (m *CMsgSteamDatagramCertificateSigned) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CMsgSteamDatagramCertificateSigned) GetCaKeyId() uint64 {
	if m != nil && m.CaKeyId != nil {
		return *m.CaKeyId
	}
	return 0
}

func (m *CMsgSteamDatagramCertificateSigned) GetCaSignature() []byte {
	if m != nil {
		return m.CaSignature
	}
	return nil
}

type CMsgSteamDatagramCachedCredentialsForApp struct {
	PrivateKey       []byte   `protobuf:"bytes,1,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	Cert             []byte   `protobuf:"bytes,2,opt,name=cert" json:"cert,omitempty"`
	RelayTickets     [][]byte `protobuf:"bytes,3,rep,name=relay_tickets,json=relayTickets" json:"relay_tickets,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgSteamDatagramCachedCredentialsForApp) Reset() {
	*m = CMsgSteamDatagramCachedCredentialsForApp{}
}
func (m *CMsgSteamDatagramCachedCredentialsForApp) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramCachedCredentialsForApp) ProtoMessage()    {}
func (*CMsgSteamDatagramCachedCredentialsForApp) Descriptor() ([]byte, []int) {
	return fileDescriptor36, []int{4}
}

func (m *CMsgSteamDatagramCachedCredentialsForApp) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *CMsgSteamDatagramCachedCredentialsForApp) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CMsgSteamDatagramCachedCredentialsForApp) GetRelayTickets() [][]byte {
	if m != nil {
		return m.RelayTickets
	}
	return nil
}

func init() {
	proto.RegisterType((*CMsgSteamDatagramRelayAuthTicket)(nil), "dota.CMsgSteamDatagramRelayAuthTicket")
	proto.RegisterType((*CMsgSteamDatagramRelayAuthTicket_ExtraField)(nil), "dota.CMsgSteamDatagramRelayAuthTicket.ExtraField")
	proto.RegisterType((*CMsgSteamDatagramSignedRelayAuthTicket)(nil), "dota.CMsgSteamDatagramSignedRelayAuthTicket")
	proto.RegisterType((*CMsgSteamDatagramCertificate)(nil), "dota.CMsgSteamDatagramCertificate")
	proto.RegisterType((*CMsgSteamDatagramCertificateSigned)(nil), "dota.CMsgSteamDatagramCertificateSigned")
	proto.RegisterType((*CMsgSteamDatagramCachedCredentialsForApp)(nil), "dota.CMsgSteamDatagramCachedCredentialsForApp")
	proto.RegisterEnum("dota.CMsgSteamDatagramCertificate_EKeyType", CMsgSteamDatagramCertificate_EKeyType_name, CMsgSteamDatagramCertificate_EKeyType_value)
}

func init() { proto.RegisterFile("steamdatagram_auth_messages.proto", fileDescriptor36) }

var fileDescriptor36 = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x6e, 0xf3, 0x44,
	0x14, 0xfd, 0xdc, 0xfc, 0xdf, 0xb8, 0x7c, 0x61, 0xca, 0x8f, 0x5b, 0x55, 0xc2, 0x4d, 0x11, 0x32,
	0x20, 0x22, 0x5a, 0x51, 0x24, 0xba, 0x2b, 0x49, 0x2a, 0x45, 0x85, 0x52, 0xb9, 0xa5, 0xdb, 0xd1,
	0xe0, 0xb9, 0x4d, 0x47, 0x49, 0xec, 0xd1, 0xcc, 0x24, 0xd4, 0xac, 0x58, 0xb0, 0xe1, 0x3d, 0x78,
	0x32, 0x9e, 0x81, 0x07, 0x40, 0x33, 0x76, 0xe2, 0xa8, 0x11, 0x7c, 0x3b, 0xfb, 0xdc, 0x33, 0xf7,
	0xdc, 0x99, 0x73, 0x2e, 0x9c, 0x68, 0x83, 0x6c, 0xc1, 0x99, 0x61, 0x53, 0xc5, 0x16, 0x94, 0x2d,
	0xcd, 0x33, 0x5d, 0xa0, 0xd6, 0x6c, 0x8a, 0x7a, 0x20, 0x55, 0x66, 0x32, 0x52, 0xe7, 0x99, 0x61,
	0xfd, 0x7f, 0xea, 0x10, 0x0e, 0x7f, 0xd4, 0xd3, 0x7b, 0xcb, 0x1f, 0x95, 0xfc, 0x18, 0xe7, 0x2c,
	0xbf, 0x5a, 0x9a, 0xe7, 0x07, 0x91, 0xcc, 0xd0, 0x90, 0x4f, 0xa0, 0x6b, 0xc4, 0x02, 0x29, 0xbe,
	0x48, 0xa1, 0xf2, 0xc0, 0x0b, 0xbd, 0xa8, 0x15, 0x83, 0x85, 0xc6, 0x0e, 0x21, 0x03, 0x38, 0xb0,
	0x12, 0x99, 0x12, 0xbf, 0x21, 0xa7, 0x4e, 0x9b, 0x0a, 0x1e, 0xec, 0x85, 0x5e, 0xd4, 0x8c, 0xdf,
	0xaf, 0x4a, 0x4e, 0x65, 0xc2, 0xc9, 0xd7, 0xf0, 0xc1, 0x16, 0x5f, 0x2e, 0x7f, 0x99, 0x8b, 0x84,
	0x0a, 0x19, 0xd4, 0x5c, 0x67, 0x52, 0xd5, 0xee, 0x5c, 0x69, 0x22, 0xad, 0xc2, 0x94, 0x2d, 0x50,
	0xa3, 0x5a, 0xa1, 0xaa, 0x14, 0xea, 0x85, 0x42, 0x55, 0x5a, 0x2b, 0x7c, 0x01, 0x5b, 0x20, 0x4d,
	0xd1, 0x58, 0x76, 0xc3, 0xb1, 0xdf, 0x56, 0x85, 0x5b, 0x34, 0x13, 0x4e, 0x3e, 0x87, 0xde, 0x1c,
	0xa7, 0x2c, 0xc9, 0xa9, 0x16, 0xd3, 0x94, 0x99, 0xa5, 0xc2, 0xa0, 0x19, 0x7a, 0x91, 0x1f, 0xbf,
	0x2d, 0xf0, 0xfb, 0x35, 0x4c, 0x3e, 0x84, 0x26, 0x93, 0xd2, 0xf6, 0x6a, 0x85, 0x5e, 0xb4, 0x1f,
	0x37, 0x98, 0x94, 0x3b, 0x6a, 0x32, 0x73, 0x8c, 0x8e, 0xbb, 0xcc, 0x96, 0xda, 0x5d, 0x66, 0xb9,
	0x27, 0xe0, 0xaf, 0x84, 0x32, 0x4b, 0x36, 0xa7, 0x32, 0x53, 0x26, 0x00, 0xd7, 0xa8, 0x5b, 0x62,
	0x77, 0x99, 0x32, 0xe4, 0x01, 0x7c, 0x7c, 0x31, 0x8a, 0xd1, 0x27, 0x81, 0x73, 0xae, 0x83, 0x76,
	0x58, 0x8b, 0xba, 0xe7, 0x67, 0x03, 0xeb, 0xd8, 0xe0, 0x5d, 0x6e, 0x0d, 0xc6, 0xf6, 0xe8, 0xb5,
	0x3d, 0x19, 0x77, 0x71, 0xf3, 0xad, 0x8f, 0xfe, 0xf4, 0x00, 0xaa, 0x1a, 0x21, 0x50, 0x4f, 0xd9,
	0x02, 0x9d, 0x9b, 0x9d, 0xd8, 0x7d, 0xdb, 0xd9, 0xb4, 0x51, 0x22, 0x9d, 0xd2, 0x15, 0x9b, 0x2f,
	0xd1, 0x19, 0xd8, 0x89, 0xbb, 0x05, 0xf6, 0x68, 0x21, 0x9b, 0x05, 0x91, 0x9a, 0x6f, 0xbf, 0x29,
	0x19, 0xd6, 0x31, 0x12, 0x83, 0x83, 0x0a, 0xc2, 0x29, 0xec, 0x3f, 0x89, 0x17, 0xe4, 0x1b, 0x4a,
	0xf1, 0xea, 0x7e, 0x09, 0x3a, 0x52, 0xff, 0x2f, 0x0f, 0x3e, 0xdb, 0xb9, 0x88, 0x7d, 0x66, 0xe4,
	0xaf, 0xc3, 0xf7, 0x15, 0x1c, 0xa8, 0xe2, 0x01, 0x39, 0xe5, 0x19, 0x4d, 0x33, 0x43, 0x97, 0xba,
	0x18, 0xbb, 0x19, 0xf7, 0xd6, 0xa5, 0x51, 0x76, 0x9b, 0x99, 0x9f, 0xb5, 0x73, 0x68, 0x86, 0x79,
	0x95, 0xbe, 0xc6, 0x0c, 0xf3, 0x09, 0x27, 0x1f, 0x41, 0xd3, 0xb8, 0x7e, 0x6e, 0x62, 0x3f, 0x2e,
	0xff, 0xc8, 0x31, 0x74, 0x2a, 0xd3, 0xeb, 0xae, 0x54, 0x01, 0xfd, 0xbf, 0xf7, 0xe0, 0x78, 0x67,
	0xcc, 0x21, 0x2a, 0x23, 0x9e, 0x44, 0xc2, 0x0c, 0x92, 0x9f, 0xa0, 0x6d, 0xd5, 0x4c, 0x2e, 0x8b,
	0x89, 0xde, 0x3b, 0xff, 0xf2, 0x3f, 0x5c, 0xda, 0x3a, 0x35, 0x18, 0xdf, 0x60, 0xfe, 0x90, 0x4b,
	0xbc, 0x6c, 0x4d, 0x6e, 0x1f, 0xaf, 0x7e, 0x98, 0x8c, 0xe2, 0xd6, 0xac, 0x40, 0xc8, 0x61, 0xd1,
	0xd0, 0x6e, 0xae, 0xbb, 0x80, 0xef, 0x4a, 0xb6, 0x89, 0x2d, 0xbd, 0xca, 0x7d, 0x4b, 0x97, 0x69,
	0xbf, 0x84, 0xc3, 0xad, 0xfc, 0xd9, 0xc3, 0x09, 0xa6, 0x06, 0x15, 0x15, 0x5c, 0x07, 0x8d, 0xb0,
	0x16, 0xb5, 0xe2, 0x8f, 0x2b, 0xc2, 0x68, 0x53, 0x9f, 0x70, 0x6d, 0x3d, 0x77, 0xcb, 0x9d, 0x28,
	0x64, 0x06, 0x79, 0xd0, 0x76, 0xb1, 0x75, 0x0b, 0x3f, 0x2c, 0xa0, 0xd7, 0xfb, 0xdf, 0xd9, 0xd9,
	0xff, 0x6a, 0x2d, 0x60, 0x6b, 0x2d, 0xfa, 0x9f, 0x42, 0x7b, 0x7d, 0x55, 0xd2, 0x85, 0xf5, 0x65,
	0x7b, 0x6f, 0xec, 0xcf, 0x78, 0x74, 0x7e, 0x71, 0x71, 0xf6, 0x5d, 0xcf, 0xeb, 0xff, 0x0a, 0xfd,
	0xff, 0x7b, 0xad, 0x22, 0x15, 0x36, 0xae, 0x09, 0x2a, 0x53, 0x7a, 0xe4, 0xbe, 0xc9, 0x11, 0x74,
	0x12, 0x46, 0x4b, 0xbb, 0x8b, 0x98, 0xb5, 0x12, 0x76, 0xe3, 0x0c, 0x3f, 0x01, 0x3f, 0x61, 0x3b,
	0x0b, 0xdd, 0x4d, 0xd8, 0x66, 0x99, 0xfb, 0x7f, 0x78, 0x10, 0xed, 0x2a, 0xb3, 0xe4, 0x19, 0xf9,
	0x50, 0x21, 0xc7, 0xd4, 0x08, 0x36, 0xd7, 0xd7, 0x99, 0xba, 0x92, 0xd2, 0xbe, 0x81, 0x54, 0x62,
	0xc5, 0x0c, 0x5a, 0x41, 0x67, 0xb6, 0x1f, 0x43, 0x09, 0xdd, 0x60, 0xbe, 0x19, 0x70, 0x6f, 0x6b,
	0xc0, 0x53, 0xd8, 0x57, 0x36, 0xce, 0xb4, 0x48, 0x9b, 0x0e, 0x6a, 0x61, 0x2d, 0xf2, 0x63, 0xdf,
	0x81, 0x45, 0xbe, 0xf5, 0xf7, 0xb5, 0xdf, 0xbd, 0x37, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xea,
	0x36, 0xe1, 0x34, 0xb1, 0x05, 0x00, 0x00,
}
