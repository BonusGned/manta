// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_gcmessages_common_bot_script.proto

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CMsgBotWorldState_UnitType int32

const (
	CMsgBotWorldState_INVALID      CMsgBotWorldState_UnitType = 0
	CMsgBotWorldState_HERO         CMsgBotWorldState_UnitType = 1
	CMsgBotWorldState_CREEP_HERO   CMsgBotWorldState_UnitType = 2
	CMsgBotWorldState_LANE_CREEP   CMsgBotWorldState_UnitType = 3
	CMsgBotWorldState_JUNGLE_CREEP CMsgBotWorldState_UnitType = 4
	CMsgBotWorldState_ROSHAN       CMsgBotWorldState_UnitType = 5
	CMsgBotWorldState_TOWER        CMsgBotWorldState_UnitType = 6
	CMsgBotWorldState_BARRACKS     CMsgBotWorldState_UnitType = 7
	CMsgBotWorldState_SHRINE       CMsgBotWorldState_UnitType = 8
	CMsgBotWorldState_FORT         CMsgBotWorldState_UnitType = 9
	CMsgBotWorldState_BUILDING     CMsgBotWorldState_UnitType = 10
	CMsgBotWorldState_COURIER      CMsgBotWorldState_UnitType = 11
	CMsgBotWorldState_WARD         CMsgBotWorldState_UnitType = 12
)

var CMsgBotWorldState_UnitType_name = map[int32]string{
	0:  "INVALID",
	1:  "HERO",
	2:  "CREEP_HERO",
	3:  "LANE_CREEP",
	4:  "JUNGLE_CREEP",
	5:  "ROSHAN",
	6:  "TOWER",
	7:  "BARRACKS",
	8:  "SHRINE",
	9:  "FORT",
	10: "BUILDING",
	11: "COURIER",
	12: "WARD",
}
var CMsgBotWorldState_UnitType_value = map[string]int32{
	"INVALID":      0,
	"HERO":         1,
	"CREEP_HERO":   2,
	"LANE_CREEP":   3,
	"JUNGLE_CREEP": 4,
	"ROSHAN":       5,
	"TOWER":        6,
	"BARRACKS":     7,
	"SHRINE":       8,
	"FORT":         9,
	"BUILDING":     10,
	"COURIER":      11,
	"WARD":         12,
}

func (x CMsgBotWorldState_UnitType) Enum() *CMsgBotWorldState_UnitType {
	p := new(CMsgBotWorldState_UnitType)
	*p = x
	return p
}
func (x CMsgBotWorldState_UnitType) String() string {
	return proto.EnumName(CMsgBotWorldState_UnitType_name, int32(x))
}
func (x *CMsgBotWorldState_UnitType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgBotWorldState_UnitType_value, data, "CMsgBotWorldState_UnitType")
	if err != nil {
		return err
	}
	*x = CMsgBotWorldState_UnitType(value)
	return nil
}
func (CMsgBotWorldState_UnitType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 0}
}

type CMsgBotWorldState struct {
	TeamId              *uint32                                 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	GameTime            *float32                                `protobuf:"fixed32,2,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	DotaTime            *float32                                `protobuf:"fixed32,3,opt,name=dota_time,json=dotaTime" json:"dota_time,omitempty"`
	GameState           *uint32                                 `protobuf:"varint,4,opt,name=game_state,json=gameState" json:"game_state,omitempty"`
	HeroPickState       *uint32                                 `protobuf:"varint,5,opt,name=hero_pick_state,json=heroPickState" json:"hero_pick_state,omitempty"`
	TimeOfDay           *float32                                `protobuf:"fixed32,6,opt,name=time_of_day,json=timeOfDay" json:"time_of_day,omitempty"`
	GlyphCooldown       *float32                                `protobuf:"fixed32,7,opt,name=glyph_cooldown,json=glyphCooldown" json:"glyph_cooldown,omitempty"`
	GlyphCooldownEnemy  *uint32                                 `protobuf:"varint,8,opt,name=glyph_cooldown_enemy,json=glyphCooldownEnemy" json:"glyph_cooldown_enemy,omitempty"`
	Players             []*CMsgBotWorldState_Player             `protobuf:"bytes,10,rep,name=players" json:"players,omitempty"`
	Units               []*CMsgBotWorldState_Unit               `protobuf:"bytes,11,rep,name=units" json:"units,omitempty"`
	DroppedItems        []*CMsgBotWorldState_DroppedItem        `protobuf:"bytes,12,rep,name=dropped_items,json=droppedItems" json:"dropped_items,omitempty"`
	RuneInfos           []*CMsgBotWorldState_RuneInfo           `protobuf:"bytes,13,rep,name=rune_infos,json=runeInfos" json:"rune_infos,omitempty"`
	IncomingTeleports   []*CMsgBotWorldState_TeleportInfo       `protobuf:"bytes,14,rep,name=incoming_teleports,json=incomingTeleports" json:"incoming_teleports,omitempty"`
	LinearProjectiles   []*CMsgBotWorldState_LinearProjectile   `protobuf:"bytes,15,rep,name=linear_projectiles,json=linearProjectiles" json:"linear_projectiles,omitempty"`
	AvoidanceZones      []*CMsgBotWorldState_AvoidanceZone      `protobuf:"bytes,16,rep,name=avoidance_zones,json=avoidanceZones" json:"avoidance_zones,omitempty"`
	AbilityEvents       []*CMsgBotWorldState_EventAbility       `protobuf:"bytes,20,rep,name=ability_events,json=abilityEvents" json:"ability_events,omitempty"`
	DamageEvents        []*CMsgBotWorldState_EventDamage        `protobuf:"bytes,21,rep,name=damage_events,json=damageEvents" json:"damage_events,omitempty"`
	CourierKilledEvents []*CMsgBotWorldState_EventCourierKilled `protobuf:"bytes,22,rep,name=courier_killed_events,json=courierKilledEvents" json:"courier_killed_events,omitempty"`
	RoshanKilledEvents  []*CMsgBotWorldState_EventRoshanKilled  `protobuf:"bytes,23,rep,name=roshan_killed_events,json=roshanKilledEvents" json:"roshan_killed_events,omitempty"`
	TreeEvents          []*CMsgBotWorldState_EventTree          `protobuf:"bytes,24,rep,name=tree_events,json=treeEvents" json:"tree_events,omitempty"`
	XXX_unrecognized    []byte                                  `json:"-"`
}

func (m *CMsgBotWorldState) Reset()                    { *m = CMsgBotWorldState{} }
func (m *CMsgBotWorldState) String() string            { return proto.CompactTextString(m) }
func (*CMsgBotWorldState) ProtoMessage()               {}
func (*CMsgBotWorldState) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0} }

func (m *CMsgBotWorldState) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgBotWorldState) GetGameTime() float32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CMsgBotWorldState) GetDotaTime() float32 {
	if m != nil && m.DotaTime != nil {
		return *m.DotaTime
	}
	return 0
}

func (m *CMsgBotWorldState) GetGameState() uint32 {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return 0
}

func (m *CMsgBotWorldState) GetHeroPickState() uint32 {
	if m != nil && m.HeroPickState != nil {
		return *m.HeroPickState
	}
	return 0
}

func (m *CMsgBotWorldState) GetTimeOfDay() float32 {
	if m != nil && m.TimeOfDay != nil {
		return *m.TimeOfDay
	}
	return 0
}

func (m *CMsgBotWorldState) GetGlyphCooldown() float32 {
	if m != nil && m.GlyphCooldown != nil {
		return *m.GlyphCooldown
	}
	return 0
}

func (m *CMsgBotWorldState) GetGlyphCooldownEnemy() uint32 {
	if m != nil && m.GlyphCooldownEnemy != nil {
		return *m.GlyphCooldownEnemy
	}
	return 0
}

func (m *CMsgBotWorldState) GetPlayers() []*CMsgBotWorldState_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgBotWorldState) GetUnits() []*CMsgBotWorldState_Unit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *CMsgBotWorldState) GetDroppedItems() []*CMsgBotWorldState_DroppedItem {
	if m != nil {
		return m.DroppedItems
	}
	return nil
}

func (m *CMsgBotWorldState) GetRuneInfos() []*CMsgBotWorldState_RuneInfo {
	if m != nil {
		return m.RuneInfos
	}
	return nil
}

func (m *CMsgBotWorldState) GetIncomingTeleports() []*CMsgBotWorldState_TeleportInfo {
	if m != nil {
		return m.IncomingTeleports
	}
	return nil
}

func (m *CMsgBotWorldState) GetLinearProjectiles() []*CMsgBotWorldState_LinearProjectile {
	if m != nil {
		return m.LinearProjectiles
	}
	return nil
}

func (m *CMsgBotWorldState) GetAvoidanceZones() []*CMsgBotWorldState_AvoidanceZone {
	if m != nil {
		return m.AvoidanceZones
	}
	return nil
}

func (m *CMsgBotWorldState) GetAbilityEvents() []*CMsgBotWorldState_EventAbility {
	if m != nil {
		return m.AbilityEvents
	}
	return nil
}

func (m *CMsgBotWorldState) GetDamageEvents() []*CMsgBotWorldState_EventDamage {
	if m != nil {
		return m.DamageEvents
	}
	return nil
}

func (m *CMsgBotWorldState) GetCourierKilledEvents() []*CMsgBotWorldState_EventCourierKilled {
	if m != nil {
		return m.CourierKilledEvents
	}
	return nil
}

func (m *CMsgBotWorldState) GetRoshanKilledEvents() []*CMsgBotWorldState_EventRoshanKilled {
	if m != nil {
		return m.RoshanKilledEvents
	}
	return nil
}

func (m *CMsgBotWorldState) GetTreeEvents() []*CMsgBotWorldState_EventTree {
	if m != nil {
		return m.TreeEvents
	}
	return nil
}

type CMsgBotWorldState_Vector struct {
	X                *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y                *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	Z                *float32 `protobuf:"fixed32,3,req,name=z" json:"z,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgBotWorldState_Vector) Reset()                    { *m = CMsgBotWorldState_Vector{} }
func (m *CMsgBotWorldState_Vector) String() string            { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_Vector) ProtoMessage()               {}
func (*CMsgBotWorldState_Vector) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0, 0} }

func (m *CMsgBotWorldState_Vector) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CMsgBotWorldState_Vector) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CMsgBotWorldState_Vector) GetZ() float32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

type CMsgBotWorldState_Player struct {
	PlayerId         *int32   `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	HeroId           *uint32  `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	IsAlive          *bool    `protobuf:"varint,3,opt,name=is_alive,json=isAlive" json:"is_alive,omitempty"`
	RespawnTime      *float32 `protobuf:"fixed32,4,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	Kills            *uint32  `protobuf:"varint,5,opt,name=kills" json:"kills,omitempty"`
	Deaths           *uint32  `protobuf:"varint,6,opt,name=deaths" json:"deaths,omitempty"`
	Assists          *uint32  `protobuf:"varint,7,opt,name=assists" json:"assists,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgBotWorldState_Player) Reset()                    { *m = CMsgBotWorldState_Player{} }
func (m *CMsgBotWorldState_Player) String() string            { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_Player) ProtoMessage()               {}
func (*CMsgBotWorldState_Player) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0, 1} }

func (m *CMsgBotWorldState_Player) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_Player) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CMsgBotWorldState_Player) GetIsAlive() bool {
	if m != nil && m.IsAlive != nil {
		return *m.IsAlive
	}
	return false
}

func (m *CMsgBotWorldState_Player) GetRespawnTime() float32 {
	if m != nil && m.RespawnTime != nil {
		return *m.RespawnTime
	}
	return 0
}

func (m *CMsgBotWorldState_Player) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgBotWorldState_Player) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgBotWorldState_Player) GetAssists() uint32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

type CMsgBotWorldState_Ability struct {
	Handle            *uint32  `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
	AbilityId         *uint32  `protobuf:"varint,2,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Slot              *uint32  `protobuf:"varint,3,opt,name=slot" json:"slot,omitempty"`
	CasterHandle      *uint32  `protobuf:"varint,5,opt,name=caster_handle,json=casterHandle" json:"caster_handle,omitempty"`
	Level             *uint32  `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
	CastRange         *uint32  `protobuf:"varint,10,opt,name=cast_range,json=castRange" json:"cast_range,omitempty"`
	ChannelTime       *float32 `protobuf:"fixed32,11,opt,name=channel_time,json=channelTime" json:"channel_time,omitempty"`
	CooldownRemaining *float32 `protobuf:"fixed32,12,opt,name=cooldown_remaining,json=cooldownRemaining" json:"cooldown_remaining,omitempty"`
	IsActivated       *bool    `protobuf:"varint,20,opt,name=is_activated,json=isActivated" json:"is_activated,omitempty"`
	IsToggled         *bool    `protobuf:"varint,21,opt,name=is_toggled,json=isToggled" json:"is_toggled,omitempty"`
	IsInAbilityPhase  *bool    `protobuf:"varint,22,opt,name=is_in_ability_phase,json=isInAbilityPhase" json:"is_in_ability_phase,omitempty"`
	IsChanneling      *bool    `protobuf:"varint,23,opt,name=is_channeling,json=isChanneling" json:"is_channeling,omitempty"`
	IsStolen          *bool    `protobuf:"varint,24,opt,name=is_stolen,json=isStolen" json:"is_stolen,omitempty"`
	Charges           *uint32  `protobuf:"varint,30,opt,name=charges" json:"charges,omitempty"`
	SecondaryCharges  *uint32  `protobuf:"varint,31,opt,name=secondary_charges,json=secondaryCharges" json:"secondary_charges,omitempty"`
	IsCombinedLocked  *bool    `protobuf:"varint,40,opt,name=is_combined_locked,json=isCombinedLocked" json:"is_combined_locked,omitempty"`
	PowerTreadsStat   *uint32  `protobuf:"varint,50,opt,name=power_treads_stat,json=powerTreadsStat" json:"power_treads_stat,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *CMsgBotWorldState_Ability) Reset()                    { *m = CMsgBotWorldState_Ability{} }
func (m *CMsgBotWorldState_Ability) String() string            { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_Ability) ProtoMessage()               {}
func (*CMsgBotWorldState_Ability) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0, 2} }

func (m *CMsgBotWorldState_Ability) GetHandle() uint32 {
	if m != nil && m.Handle != nil {
		return *m.Handle
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetCasterHandle() uint32 {
	if m != nil && m.CasterHandle != nil {
		return *m.CasterHandle
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetCastRange() uint32 {
	if m != nil && m.CastRange != nil {
		return *m.CastRange
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetChannelTime() float32 {
	if m != nil && m.ChannelTime != nil {
		return *m.ChannelTime
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetCooldownRemaining() float32 {
	if m != nil && m.CooldownRemaining != nil {
		return *m.CooldownRemaining
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetIsActivated() bool {
	if m != nil && m.IsActivated != nil {
		return *m.IsActivated
	}
	return false
}

func (m *CMsgBotWorldState_Ability) GetIsToggled() bool {
	if m != nil && m.IsToggled != nil {
		return *m.IsToggled
	}
	return false
}

func (m *CMsgBotWorldState_Ability) GetIsInAbilityPhase() bool {
	if m != nil && m.IsInAbilityPhase != nil {
		return *m.IsInAbilityPhase
	}
	return false
}

func (m *CMsgBotWorldState_Ability) GetIsChanneling() bool {
	if m != nil && m.IsChanneling != nil {
		return *m.IsChanneling
	}
	return false
}

func (m *CMsgBotWorldState_Ability) GetIsStolen() bool {
	if m != nil && m.IsStolen != nil {
		return *m.IsStolen
	}
	return false
}

func (m *CMsgBotWorldState_Ability) GetCharges() uint32 {
	if m != nil && m.Charges != nil {
		return *m.Charges
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetSecondaryCharges() uint32 {
	if m != nil && m.SecondaryCharges != nil {
		return *m.SecondaryCharges
	}
	return 0
}

func (m *CMsgBotWorldState_Ability) GetIsCombinedLocked() bool {
	if m != nil && m.IsCombinedLocked != nil {
		return *m.IsCombinedLocked
	}
	return false
}

func (m *CMsgBotWorldState_Ability) GetPowerTreadsStat() uint32 {
	if m != nil && m.PowerTreadsStat != nil {
		return *m.PowerTreadsStat
	}
	return 0
}

type CMsgBotWorldState_DroppedItem struct {
	ItemId           *uint32                   `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	Location         *CMsgBotWorldState_Vector `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgBotWorldState_DroppedItem) Reset()         { *m = CMsgBotWorldState_DroppedItem{} }
func (m *CMsgBotWorldState_DroppedItem) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_DroppedItem) ProtoMessage()    {}
func (*CMsgBotWorldState_DroppedItem) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 3}
}

func (m *CMsgBotWorldState_DroppedItem) GetItemId() uint32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CMsgBotWorldState_DroppedItem) GetLocation() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

type CMsgBotWorldState_RuneInfo struct {
	Type             *int32                    `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Location         *CMsgBotWorldState_Vector `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	Status           *uint32                   `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	TimeSinceSeen    *float32                  `protobuf:"fixed32,4,opt,name=time_since_seen,json=timeSinceSeen" json:"time_since_seen,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgBotWorldState_RuneInfo) Reset()                    { *m = CMsgBotWorldState_RuneInfo{} }
func (m *CMsgBotWorldState_RuneInfo) String() string            { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_RuneInfo) ProtoMessage()               {}
func (*CMsgBotWorldState_RuneInfo) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0, 4} }

func (m *CMsgBotWorldState_RuneInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CMsgBotWorldState_RuneInfo) GetLocation() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CMsgBotWorldState_RuneInfo) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *CMsgBotWorldState_RuneInfo) GetTimeSinceSeen() float32 {
	if m != nil && m.TimeSinceSeen != nil {
		return *m.TimeSinceSeen
	}
	return 0
}

type CMsgBotWorldState_TeleportInfo struct {
	PlayerId         *int32                    `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	Location         *CMsgBotWorldState_Vector `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	TimeRemaning     *float32                  `protobuf:"fixed32,3,opt,name=time_remaning,json=timeRemaning" json:"time_remaning,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgBotWorldState_TeleportInfo) Reset()         { *m = CMsgBotWorldState_TeleportInfo{} }
func (m *CMsgBotWorldState_TeleportInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_TeleportInfo) ProtoMessage()    {}
func (*CMsgBotWorldState_TeleportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 5}
}

func (m *CMsgBotWorldState_TeleportInfo) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_TeleportInfo) GetLocation() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CMsgBotWorldState_TeleportInfo) GetTimeRemaning() float32 {
	if m != nil && m.TimeRemaning != nil {
		return *m.TimeRemaning
	}
	return 0
}

type CMsgBotWorldState_Modifier struct {
	Name                  *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StackCount            *uint32  `protobuf:"varint,2,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
	AbilityHandle         *uint32  `protobuf:"varint,3,opt,name=ability_handle,json=abilityHandle" json:"ability_handle,omitempty"`
	AbilityId             *uint32  `protobuf:"varint,4,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	RemainingDuration     *float32 `protobuf:"fixed32,5,opt,name=remaining_duration,json=remainingDuration" json:"remaining_duration,omitempty"`
	AuxiliaryUnitsHandles []uint32 `protobuf:"varint,6,rep,name=auxiliary_units_handles,json=auxiliaryUnitsHandles" json:"auxiliary_units_handles,omitempty"`
	XXX_unrecognized      []byte   `json:"-"`
}

func (m *CMsgBotWorldState_Modifier) Reset()                    { *m = CMsgBotWorldState_Modifier{} }
func (m *CMsgBotWorldState_Modifier) String() string            { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_Modifier) ProtoMessage()               {}
func (*CMsgBotWorldState_Modifier) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0, 6} }

func (m *CMsgBotWorldState_Modifier) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgBotWorldState_Modifier) GetStackCount() uint32 {
	if m != nil && m.StackCount != nil {
		return *m.StackCount
	}
	return 0
}

func (m *CMsgBotWorldState_Modifier) GetAbilityHandle() uint32 {
	if m != nil && m.AbilityHandle != nil {
		return *m.AbilityHandle
	}
	return 0
}

func (m *CMsgBotWorldState_Modifier) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *CMsgBotWorldState_Modifier) GetRemainingDuration() float32 {
	if m != nil && m.RemainingDuration != nil {
		return *m.RemainingDuration
	}
	return 0
}

func (m *CMsgBotWorldState_Modifier) GetAuxiliaryUnitsHandles() []uint32 {
	if m != nil {
		return m.AuxiliaryUnitsHandles
	}
	return nil
}

type CMsgBotWorldState_LinearProjectile struct {
	Handle           *uint32                   `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
	CasterHandle     *uint32                   `protobuf:"varint,2,opt,name=caster_handle,json=casterHandle" json:"caster_handle,omitempty"`
	CasterPlayerId   *int32                    `protobuf:"varint,3,opt,name=caster_player_id,json=casterPlayerId" json:"caster_player_id,omitempty"`
	AbilityHandle    *uint32                   `protobuf:"varint,4,opt,name=ability_handle,json=abilityHandle" json:"ability_handle,omitempty"`
	AbilityId        *uint32                   `protobuf:"varint,5,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Location         *CMsgBotWorldState_Vector `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	Velocity         *CMsgBotWorldState_Vector `protobuf:"bytes,7,opt,name=velocity" json:"velocity,omitempty"`
	Radius           *uint32                   `protobuf:"varint,8,opt,name=radius" json:"radius,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgBotWorldState_LinearProjectile) Reset()         { *m = CMsgBotWorldState_LinearProjectile{} }
func (m *CMsgBotWorldState_LinearProjectile) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_LinearProjectile) ProtoMessage()    {}
func (*CMsgBotWorldState_LinearProjectile) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 7}
}

func (m *CMsgBotWorldState_LinearProjectile) GetHandle() uint32 {
	if m != nil && m.Handle != nil {
		return *m.Handle
	}
	return 0
}

func (m *CMsgBotWorldState_LinearProjectile) GetCasterHandle() uint32 {
	if m != nil && m.CasterHandle != nil {
		return *m.CasterHandle
	}
	return 0
}

func (m *CMsgBotWorldState_LinearProjectile) GetCasterPlayerId() int32 {
	if m != nil && m.CasterPlayerId != nil {
		return *m.CasterPlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_LinearProjectile) GetAbilityHandle() uint32 {
	if m != nil && m.AbilityHandle != nil {
		return *m.AbilityHandle
	}
	return 0
}

func (m *CMsgBotWorldState_LinearProjectile) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *CMsgBotWorldState_LinearProjectile) GetLocation() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CMsgBotWorldState_LinearProjectile) GetVelocity() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Velocity
	}
	return nil
}

func (m *CMsgBotWorldState_LinearProjectile) GetRadius() uint32 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return 0
}

type CMsgBotWorldState_TrackingProjectile struct {
	CasterHandle     *uint32                   `protobuf:"varint,1,opt,name=caster_handle,json=casterHandle" json:"caster_handle,omitempty"`
	CasterPlayerId   *int32                    `protobuf:"varint,2,opt,name=caster_player_id,json=casterPlayerId" json:"caster_player_id,omitempty"`
	AbilityHandle    *uint32                   `protobuf:"varint,3,opt,name=ability_handle,json=abilityHandle" json:"ability_handle,omitempty"`
	AbilityId        *uint32                   `protobuf:"varint,4,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Location         *CMsgBotWorldState_Vector `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	Velocity         *uint32                   `protobuf:"varint,6,opt,name=velocity" json:"velocity,omitempty"`
	IsDodgeable      *bool                     `protobuf:"varint,7,opt,name=is_dodgeable,json=isDodgeable" json:"is_dodgeable,omitempty"`
	IsAttack         *bool                     `protobuf:"varint,8,opt,name=is_attack,json=isAttack" json:"is_attack,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgBotWorldState_TrackingProjectile) Reset()         { *m = CMsgBotWorldState_TrackingProjectile{} }
func (m *CMsgBotWorldState_TrackingProjectile) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_TrackingProjectile) ProtoMessage()    {}
func (*CMsgBotWorldState_TrackingProjectile) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 8}
}

func (m *CMsgBotWorldState_TrackingProjectile) GetCasterHandle() uint32 {
	if m != nil && m.CasterHandle != nil {
		return *m.CasterHandle
	}
	return 0
}

func (m *CMsgBotWorldState_TrackingProjectile) GetCasterPlayerId() int32 {
	if m != nil && m.CasterPlayerId != nil {
		return *m.CasterPlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_TrackingProjectile) GetAbilityHandle() uint32 {
	if m != nil && m.AbilityHandle != nil {
		return *m.AbilityHandle
	}
	return 0
}

func (m *CMsgBotWorldState_TrackingProjectile) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *CMsgBotWorldState_TrackingProjectile) GetLocation() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CMsgBotWorldState_TrackingProjectile) GetVelocity() uint32 {
	if m != nil && m.Velocity != nil {
		return *m.Velocity
	}
	return 0
}

func (m *CMsgBotWorldState_TrackingProjectile) GetIsDodgeable() bool {
	if m != nil && m.IsDodgeable != nil {
		return *m.IsDodgeable
	}
	return false
}

func (m *CMsgBotWorldState_TrackingProjectile) GetIsAttack() bool {
	if m != nil && m.IsAttack != nil {
		return *m.IsAttack
	}
	return false
}

type CMsgBotWorldState_AvoidanceZone struct {
	Location         *CMsgBotWorldState_Vector `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	CasterHandle     *uint32                   `protobuf:"varint,2,opt,name=caster_handle,json=casterHandle" json:"caster_handle,omitempty"`
	CasterPlayerId   *int32                    `protobuf:"varint,3,opt,name=caster_player_id,json=casterPlayerId" json:"caster_player_id,omitempty"`
	AbilityHandle    *uint32                   `protobuf:"varint,4,opt,name=ability_handle,json=abilityHandle" json:"ability_handle,omitempty"`
	AbilityId        *uint32                   `protobuf:"varint,5,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Radius           *uint32                   `protobuf:"varint,6,opt,name=radius" json:"radius,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgBotWorldState_AvoidanceZone) Reset()         { *m = CMsgBotWorldState_AvoidanceZone{} }
func (m *CMsgBotWorldState_AvoidanceZone) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_AvoidanceZone) ProtoMessage()    {}
func (*CMsgBotWorldState_AvoidanceZone) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 9}
}

func (m *CMsgBotWorldState_AvoidanceZone) GetLocation() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CMsgBotWorldState_AvoidanceZone) GetCasterHandle() uint32 {
	if m != nil && m.CasterHandle != nil {
		return *m.CasterHandle
	}
	return 0
}

func (m *CMsgBotWorldState_AvoidanceZone) GetCasterPlayerId() int32 {
	if m != nil && m.CasterPlayerId != nil {
		return *m.CasterPlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_AvoidanceZone) GetAbilityHandle() uint32 {
	if m != nil && m.AbilityHandle != nil {
		return *m.AbilityHandle
	}
	return 0
}

func (m *CMsgBotWorldState_AvoidanceZone) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *CMsgBotWorldState_AvoidanceZone) GetRadius() uint32 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return 0
}

type CMsgBotWorldState_EventAbility struct {
	AbilityId        *uint32                   `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	PlayerId         *int32                    `protobuf:"varint,2,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	UnitHandle       *uint32                   `protobuf:"varint,3,opt,name=unit_handle,json=unitHandle" json:"unit_handle,omitempty"`
	Location         *CMsgBotWorldState_Vector `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	IsChannelStart   *bool                     `protobuf:"varint,5,opt,name=is_channel_start,json=isChannelStart" json:"is_channel_start,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgBotWorldState_EventAbility) Reset()         { *m = CMsgBotWorldState_EventAbility{} }
func (m *CMsgBotWorldState_EventAbility) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_EventAbility) ProtoMessage()    {}
func (*CMsgBotWorldState_EventAbility) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 10}
}

func (m *CMsgBotWorldState_EventAbility) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *CMsgBotWorldState_EventAbility) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_EventAbility) GetUnitHandle() uint32 {
	if m != nil && m.UnitHandle != nil {
		return *m.UnitHandle
	}
	return 0
}

func (m *CMsgBotWorldState_EventAbility) GetLocation() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CMsgBotWorldState_EventAbility) GetIsChannelStart() bool {
	if m != nil && m.IsChannelStart != nil {
		return *m.IsChannelStart
	}
	return false
}

type CMsgBotWorldState_EventDamage struct {
	Damage             *uint32 `protobuf:"varint,1,opt,name=damage" json:"damage,omitempty"`
	VictimPlayerId     *int32  `protobuf:"varint,2,opt,name=victim_player_id,json=victimPlayerId" json:"victim_player_id,omitempty"`
	VictimUnitHandle   *uint32 `protobuf:"varint,3,opt,name=victim_unit_handle,json=victimUnitHandle" json:"victim_unit_handle,omitempty"`
	AttackerPlayerId   *int32  `protobuf:"varint,4,opt,name=attacker_player_id,json=attackerPlayerId" json:"attacker_player_id,omitempty"`
	AttackerUnitHandle *uint32 `protobuf:"varint,5,opt,name=attacker_unit_handle,json=attackerUnitHandle" json:"attacker_unit_handle,omitempty"`
	AbilityId          *uint32 `protobuf:"varint,6,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *CMsgBotWorldState_EventDamage) Reset()         { *m = CMsgBotWorldState_EventDamage{} }
func (m *CMsgBotWorldState_EventDamage) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_EventDamage) ProtoMessage()    {}
func (*CMsgBotWorldState_EventDamage) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 11}
}

func (m *CMsgBotWorldState_EventDamage) GetDamage() uint32 {
	if m != nil && m.Damage != nil {
		return *m.Damage
	}
	return 0
}

func (m *CMsgBotWorldState_EventDamage) GetVictimPlayerId() int32 {
	if m != nil && m.VictimPlayerId != nil {
		return *m.VictimPlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_EventDamage) GetVictimUnitHandle() uint32 {
	if m != nil && m.VictimUnitHandle != nil {
		return *m.VictimUnitHandle
	}
	return 0
}

func (m *CMsgBotWorldState_EventDamage) GetAttackerPlayerId() int32 {
	if m != nil && m.AttackerPlayerId != nil {
		return *m.AttackerPlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_EventDamage) GetAttackerUnitHandle() uint32 {
	if m != nil && m.AttackerUnitHandle != nil {
		return *m.AttackerUnitHandle
	}
	return 0
}

func (m *CMsgBotWorldState_EventDamage) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

type CMsgBotWorldState_EventCourierKilled struct {
	TeamId            *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	CourierUnitHandle *uint32 `protobuf:"varint,2,opt,name=courier_unit_handle,json=courierUnitHandle" json:"courier_unit_handle,omitempty"`
	KillerPlayerId    *int32  `protobuf:"varint,3,opt,name=killer_player_id,json=killerPlayerId" json:"killer_player_id,omitempty"`
	KillerUnitHandle  *uint32 `protobuf:"varint,4,opt,name=killer_unit_handle,json=killerUnitHandle" json:"killer_unit_handle,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CMsgBotWorldState_EventCourierKilled) Reset()         { *m = CMsgBotWorldState_EventCourierKilled{} }
func (m *CMsgBotWorldState_EventCourierKilled) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_EventCourierKilled) ProtoMessage()    {}
func (*CMsgBotWorldState_EventCourierKilled) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 12}
}

func (m *CMsgBotWorldState_EventCourierKilled) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgBotWorldState_EventCourierKilled) GetCourierUnitHandle() uint32 {
	if m != nil && m.CourierUnitHandle != nil {
		return *m.CourierUnitHandle
	}
	return 0
}

func (m *CMsgBotWorldState_EventCourierKilled) GetKillerPlayerId() int32 {
	if m != nil && m.KillerPlayerId != nil {
		return *m.KillerPlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_EventCourierKilled) GetKillerUnitHandle() uint32 {
	if m != nil && m.KillerUnitHandle != nil {
		return *m.KillerUnitHandle
	}
	return 0
}

type CMsgBotWorldState_EventRoshanKilled struct {
	KillerPlayerId   *int32  `protobuf:"varint,1,opt,name=killer_player_id,json=killerPlayerId" json:"killer_player_id,omitempty"`
	KillerUnitHandle *uint32 `protobuf:"varint,2,opt,name=killer_unit_handle,json=killerUnitHandle" json:"killer_unit_handle,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgBotWorldState_EventRoshanKilled) Reset()         { *m = CMsgBotWorldState_EventRoshanKilled{} }
func (m *CMsgBotWorldState_EventRoshanKilled) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_EventRoshanKilled) ProtoMessage()    {}
func (*CMsgBotWorldState_EventRoshanKilled) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 13}
}

func (m *CMsgBotWorldState_EventRoshanKilled) GetKillerPlayerId() int32 {
	if m != nil && m.KillerPlayerId != nil {
		return *m.KillerPlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_EventRoshanKilled) GetKillerUnitHandle() uint32 {
	if m != nil && m.KillerUnitHandle != nil {
		return *m.KillerUnitHandle
	}
	return 0
}

type CMsgBotWorldState_EventTree struct {
	TreeId           *uint32                   `protobuf:"varint,1,opt,name=tree_id,json=treeId" json:"tree_id,omitempty"`
	Destroyed        *bool                     `protobuf:"varint,2,opt,name=destroyed" json:"destroyed,omitempty"`
	Respawned        *bool                     `protobuf:"varint,3,opt,name=respawned" json:"respawned,omitempty"`
	Location         *CMsgBotWorldState_Vector `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Delayed          *bool                     `protobuf:"varint,5,opt,name=delayed" json:"delayed,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgBotWorldState_EventTree) Reset()         { *m = CMsgBotWorldState_EventTree{} }
func (m *CMsgBotWorldState_EventTree) String() string { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_EventTree) ProtoMessage()    {}
func (*CMsgBotWorldState_EventTree) Descriptor() ([]byte, []int) {
	return fileDescriptor18, []int{0, 14}
}

func (m *CMsgBotWorldState_EventTree) GetTreeId() uint32 {
	if m != nil && m.TreeId != nil {
		return *m.TreeId
	}
	return 0
}

func (m *CMsgBotWorldState_EventTree) GetDestroyed() bool {
	if m != nil && m.Destroyed != nil {
		return *m.Destroyed
	}
	return false
}

func (m *CMsgBotWorldState_EventTree) GetRespawned() bool {
	if m != nil && m.Respawned != nil {
		return *m.Respawned
	}
	return false
}

func (m *CMsgBotWorldState_EventTree) GetLocation() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CMsgBotWorldState_EventTree) GetDelayed() bool {
	if m != nil && m.Delayed != nil {
		return *m.Delayed
	}
	return false
}

type CMsgBotWorldState_Unit struct {
	Handle                      *uint32                                 `protobuf:"varint,1,opt,name=handle" json:"handle,omitempty"`
	UnitType                    *CMsgBotWorldState_UnitType             `protobuf:"varint,2,opt,name=unit_type,json=unitType,enum=dota.CMsgBotWorldState_UnitType,def=0" json:"unit_type,omitempty"`
	Name                        *string                                 `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	TeamId                      *uint32                                 `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Level                       *uint32                                 `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`
	Location                    *CMsgBotWorldState_Vector               `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	IsAlive                     *bool                                   `protobuf:"varint,7,opt,name=is_alive,json=isAlive" json:"is_alive,omitempty"`
	PlayerId                    *int32                                  `protobuf:"varint,8,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	BoundingRadius              *uint32                                 `protobuf:"varint,10,opt,name=bounding_radius,json=boundingRadius" json:"bounding_radius,omitempty"`
	Facing                      *uint32                                 `protobuf:"varint,11,opt,name=facing" json:"facing,omitempty"`
	GroundHeight                *uint32                                 `protobuf:"varint,12,opt,name=ground_height,json=groundHeight" json:"ground_height,omitempty"`
	VisionRangeDaytime          *uint32                                 `protobuf:"varint,15,opt,name=vision_range_daytime,json=visionRangeDaytime" json:"vision_range_daytime,omitempty"`
	VisionRangeNighttime        *uint32                                 `protobuf:"varint,16,opt,name=vision_range_nighttime,json=visionRangeNighttime" json:"vision_range_nighttime,omitempty"`
	Health                      *uint32                                 `protobuf:"varint,20,opt,name=health" json:"health,omitempty"`
	HealthMax                   *uint32                                 `protobuf:"varint,21,opt,name=health_max,json=healthMax" json:"health_max,omitempty"`
	HealthRegen                 *float32                                `protobuf:"fixed32,22,opt,name=health_regen,json=healthRegen" json:"health_regen,omitempty"`
	Mana                        *uint32                                 `protobuf:"varint,25,opt,name=mana" json:"mana,omitempty"`
	ManaMax                     *uint32                                 `protobuf:"varint,26,opt,name=mana_max,json=manaMax" json:"mana_max,omitempty"`
	ManaRegen                   *float32                                `protobuf:"fixed32,27,opt,name=mana_regen,json=manaRegen" json:"mana_regen,omitempty"`
	BaseMovementSpeed           *uint32                                 `protobuf:"varint,30,opt,name=base_movement_speed,json=baseMovementSpeed" json:"base_movement_speed,omitempty"`
	CurrentMovementSpeed        *uint32                                 `protobuf:"varint,31,opt,name=current_movement_speed,json=currentMovementSpeed" json:"current_movement_speed,omitempty"`
	AnimActivity                *int32                                  `protobuf:"varint,35,opt,name=anim_activity,json=animActivity" json:"anim_activity,omitempty"`
	AnimCycle                   *float32                                `protobuf:"fixed32,36,opt,name=anim_cycle,json=animCycle" json:"anim_cycle,omitempty"`
	BaseDamage                  *uint32                                 `protobuf:"varint,40,opt,name=base_damage,json=baseDamage" json:"base_damage,omitempty"`
	BaseDamageVariance          *uint32                                 `protobuf:"varint,41,opt,name=base_damage_variance,json=baseDamageVariance" json:"base_damage_variance,omitempty"`
	BonusDamage                 *uint32                                 `protobuf:"varint,42,opt,name=bonus_damage,json=bonusDamage" json:"bonus_damage,omitempty"`
	AttackDamage                *uint32                                 `protobuf:"varint,43,opt,name=attack_damage,json=attackDamage" json:"attack_damage,omitempty"`
	AttackRange                 *uint32                                 `protobuf:"varint,44,opt,name=attack_range,json=attackRange" json:"attack_range,omitempty"`
	AttackSpeed                 *float32                                `protobuf:"fixed32,45,opt,name=attack_speed,json=attackSpeed" json:"attack_speed,omitempty"`
	AttackAnimPoint             *float32                                `protobuf:"fixed32,46,opt,name=attack_anim_point,json=attackAnimPoint" json:"attack_anim_point,omitempty"`
	AttackAcquisitionRange      *uint32                                 `protobuf:"varint,47,opt,name=attack_acquisition_range,json=attackAcquisitionRange" json:"attack_acquisition_range,omitempty"`
	AttackProjectileSpeed       *uint32                                 `protobuf:"varint,48,opt,name=attack_projectile_speed,json=attackProjectileSpeed" json:"attack_projectile_speed,omitempty"`
	AttackTargetHandle          *uint32                                 `protobuf:"varint,49,opt,name=attack_target_handle,json=attackTargetHandle" json:"attack_target_handle,omitempty"`
	BountyXp                    *uint32                                 `protobuf:"varint,60,opt,name=bounty_xp,json=bountyXp" json:"bounty_xp,omitempty"`
	BountyGoldMin               *uint32                                 `protobuf:"varint,61,opt,name=bounty_gold_min,json=bountyGoldMin" json:"bounty_gold_min,omitempty"`
	BountyGoldMax               *uint32                                 `protobuf:"varint,62,opt,name=bounty_gold_max,json=bountyGoldMax" json:"bounty_gold_max,omitempty"`
	IsChanneling                *bool                                   `protobuf:"varint,65,opt,name=is_channeling,json=isChanneling" json:"is_channeling,omitempty"`
	ActiveAbilityHandle         *uint32                                 `protobuf:"varint,66,opt,name=active_ability_handle,json=activeAbilityHandle" json:"active_ability_handle,omitempty"`
	IsAttackImmune              *bool                                   `protobuf:"varint,70,opt,name=is_attack_immune,json=isAttackImmune" json:"is_attack_immune,omitempty"`
	IsBlind                     *bool                                   `protobuf:"varint,71,opt,name=is_blind,json=isBlind" json:"is_blind,omitempty"`
	IsBlockDisabled             *bool                                   `protobuf:"varint,72,opt,name=is_block_disabled,json=isBlockDisabled" json:"is_block_disabled,omitempty"`
	IsDisarmed                  *bool                                   `protobuf:"varint,73,opt,name=is_disarmed,json=isDisarmed" json:"is_disarmed,omitempty"`
	IsDominated                 *bool                                   `protobuf:"varint,74,opt,name=is_dominated,json=isDominated" json:"is_dominated,omitempty"`
	IsEvadeDisabled             *bool                                   `protobuf:"varint,75,opt,name=is_evade_disabled,json=isEvadeDisabled" json:"is_evade_disabled,omitempty"`
	IsHexed                     *bool                                   `protobuf:"varint,76,opt,name=is_hexed,json=isHexed" json:"is_hexed,omitempty"`
	IsInvisible                 *bool                                   `protobuf:"varint,77,opt,name=is_invisible,json=isInvisible" json:"is_invisible,omitempty"`
	IsInvulnerable              *bool                                   `protobuf:"varint,78,opt,name=is_invulnerable,json=isInvulnerable" json:"is_invulnerable,omitempty"`
	IsMagicImmune               *bool                                   `protobuf:"varint,79,opt,name=is_magic_immune,json=isMagicImmune" json:"is_magic_immune,omitempty"`
	IsMuted                     *bool                                   `protobuf:"varint,80,opt,name=is_muted,json=isMuted" json:"is_muted,omitempty"`
	IsNightmared                *bool                                   `protobuf:"varint,82,opt,name=is_nightmared,json=isNightmared" json:"is_nightmared,omitempty"`
	IsRooted                    *bool                                   `protobuf:"varint,83,opt,name=is_rooted,json=isRooted" json:"is_rooted,omitempty"`
	IsSilenced                  *bool                                   `protobuf:"varint,84,opt,name=is_silenced,json=isSilenced" json:"is_silenced,omitempty"`
	IsSpeciallyDeniable         *bool                                   `protobuf:"varint,85,opt,name=is_specially_deniable,json=isSpeciallyDeniable" json:"is_specially_deniable,omitempty"`
	IsStunned                   *bool                                   `protobuf:"varint,86,opt,name=is_stunned,json=isStunned" json:"is_stunned,omitempty"`
	IsUnableToMiss              *bool                                   `protobuf:"varint,87,opt,name=is_unable_to_miss,json=isUnableToMiss" json:"is_unable_to_miss,omitempty"`
	HasScepter                  *bool                                   `protobuf:"varint,88,opt,name=has_scepter,json=hasScepter" json:"has_scepter,omitempty"`
	Abilities                   []*CMsgBotWorldState_Ability            `protobuf:"bytes,90,rep,name=abilities" json:"abilities,omitempty"`
	Items                       []*CMsgBotWorldState_Ability            `protobuf:"bytes,91,rep,name=items" json:"items,omitempty"`
	Modifiers                   []*CMsgBotWorldState_Modifier           `protobuf:"bytes,92,rep,name=modifiers" json:"modifiers,omitempty"`
	IncomingTrackingProjectiles []*CMsgBotWorldState_TrackingProjectile `protobuf:"bytes,93,rep,name=incoming_tracking_projectiles,json=incomingTrackingProjectiles" json:"incoming_tracking_projectiles,omitempty"`
	ActionType                  *uint32                                 `protobuf:"varint,100,opt,name=action_type,json=actionType" json:"action_type,omitempty"`
	AbilityTargetHandle         *uint32                                 `protobuf:"varint,101,opt,name=ability_target_handle,json=abilityTargetHandle" json:"ability_target_handle,omitempty"`
	PrimaryAttribute            *uint32                                 `protobuf:"varint,110,opt,name=primary_attribute,json=primaryAttribute" json:"primary_attribute,omitempty"`
	IsIllusion                  *bool                                   `protobuf:"varint,111,opt,name=is_illusion,json=isIllusion" json:"is_illusion,omitempty"`
	RespawnTime                 *uint32                                 `protobuf:"varint,112,opt,name=respawn_time,json=respawnTime" json:"respawn_time,omitempty"`
	BuybackCost                 *uint32                                 `protobuf:"varint,113,opt,name=buyback_cost,json=buybackCost" json:"buyback_cost,omitempty"`
	BuybackCooldown             *float32                                `protobuf:"fixed32,114,opt,name=buyback_cooldown,json=buybackCooldown" json:"buyback_cooldown,omitempty"`
	SpellAmplification          *float32                                `protobuf:"fixed32,115,opt,name=spell_amplification,json=spellAmplification" json:"spell_amplification,omitempty"`
	Armor                       *float32                                `protobuf:"fixed32,116,opt,name=armor" json:"armor,omitempty"`
	MagicResist                 *float32                                `protobuf:"fixed32,117,opt,name=magic_resist,json=magicResist" json:"magic_resist,omitempty"`
	Evasion                     *float32                                `protobuf:"fixed32,118,opt,name=evasion" json:"evasion,omitempty"`
	XpNeededToLevel             *uint32                                 `protobuf:"varint,120,opt,name=xp_needed_to_level,json=xpNeededToLevel" json:"xp_needed_to_level,omitempty"`
	AbilityPoints               *uint32                                 `protobuf:"varint,121,opt,name=ability_points,json=abilityPoints" json:"ability_points,omitempty"`
	ReliableGold                *uint32                                 `protobuf:"varint,122,opt,name=reliable_gold,json=reliableGold" json:"reliable_gold,omitempty"`
	UnreliableGold              *uint32                                 `protobuf:"varint,123,opt,name=unreliable_gold,json=unreliableGold" json:"unreliable_gold,omitempty"`
	LastHits                    *uint32                                 `protobuf:"varint,124,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                      *uint32                                 `protobuf:"varint,125,opt,name=denies" json:"denies,omitempty"`
	NetWorth                    *uint32                                 `protobuf:"varint,126,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	Strength                    *uint32                                 `protobuf:"varint,127,opt,name=strength" json:"strength,omitempty"`
	Agility                     *uint32                                 `protobuf:"varint,128,opt,name=agility" json:"agility,omitempty"`
	Intelligence                *uint32                                 `protobuf:"varint,129,opt,name=intelligence" json:"intelligence,omitempty"`
	RemainingLifespan           *float32                                `protobuf:"fixed32,130,opt,name=remaining_lifespan,json=remainingLifespan" json:"remaining_lifespan,omitempty"`
	FlyingCourier               *bool                                   `protobuf:"varint,140,opt,name=flying_courier,json=flyingCourier" json:"flying_courier,omitempty"`
	ShrineCooldown              *float32                                `protobuf:"fixed32,150,opt,name=shrine_cooldown,json=shrineCooldown" json:"shrine_cooldown,omitempty"`
	IsShrineHealing             *bool                                   `protobuf:"varint,151,opt,name=is_shrine_healing,json=isShrineHealing" json:"is_shrine_healing,omitempty"`
	XXX_unrecognized            []byte                                  `json:"-"`
}

func (m *CMsgBotWorldState_Unit) Reset()                    { *m = CMsgBotWorldState_Unit{} }
func (m *CMsgBotWorldState_Unit) String() string            { return proto.CompactTextString(m) }
func (*CMsgBotWorldState_Unit) ProtoMessage()               {}
func (*CMsgBotWorldState_Unit) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0, 15} }

const Default_CMsgBotWorldState_Unit_UnitType CMsgBotWorldState_UnitType = CMsgBotWorldState_INVALID

func (m *CMsgBotWorldState_Unit) GetHandle() uint32 {
	if m != nil && m.Handle != nil {
		return *m.Handle
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetUnitType() CMsgBotWorldState_UnitType {
	if m != nil && m.UnitType != nil {
		return *m.UnitType
	}
	return Default_CMsgBotWorldState_Unit_UnitType
}

func (m *CMsgBotWorldState_Unit) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgBotWorldState_Unit) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetLocation() *CMsgBotWorldState_Vector {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CMsgBotWorldState_Unit) GetIsAlive() bool {
	if m != nil && m.IsAlive != nil {
		return *m.IsAlive
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetPlayerId() int32 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBoundingRadius() uint32 {
	if m != nil && m.BoundingRadius != nil {
		return *m.BoundingRadius
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetFacing() uint32 {
	if m != nil && m.Facing != nil {
		return *m.Facing
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetGroundHeight() uint32 {
	if m != nil && m.GroundHeight != nil {
		return *m.GroundHeight
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetVisionRangeDaytime() uint32 {
	if m != nil && m.VisionRangeDaytime != nil {
		return *m.VisionRangeDaytime
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetVisionRangeNighttime() uint32 {
	if m != nil && m.VisionRangeNighttime != nil {
		return *m.VisionRangeNighttime
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetHealth() uint32 {
	if m != nil && m.Health != nil {
		return *m.Health
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetHealthMax() uint32 {
	if m != nil && m.HealthMax != nil {
		return *m.HealthMax
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetHealthRegen() float32 {
	if m != nil && m.HealthRegen != nil {
		return *m.HealthRegen
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetMana() uint32 {
	if m != nil && m.Mana != nil {
		return *m.Mana
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetManaMax() uint32 {
	if m != nil && m.ManaMax != nil {
		return *m.ManaMax
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetManaRegen() float32 {
	if m != nil && m.ManaRegen != nil {
		return *m.ManaRegen
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBaseMovementSpeed() uint32 {
	if m != nil && m.BaseMovementSpeed != nil {
		return *m.BaseMovementSpeed
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetCurrentMovementSpeed() uint32 {
	if m != nil && m.CurrentMovementSpeed != nil {
		return *m.CurrentMovementSpeed
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAnimActivity() int32 {
	if m != nil && m.AnimActivity != nil {
		return *m.AnimActivity
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAnimCycle() float32 {
	if m != nil && m.AnimCycle != nil {
		return *m.AnimCycle
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBaseDamage() uint32 {
	if m != nil && m.BaseDamage != nil {
		return *m.BaseDamage
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBaseDamageVariance() uint32 {
	if m != nil && m.BaseDamageVariance != nil {
		return *m.BaseDamageVariance
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBonusDamage() uint32 {
	if m != nil && m.BonusDamage != nil {
		return *m.BonusDamage
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAttackDamage() uint32 {
	if m != nil && m.AttackDamage != nil {
		return *m.AttackDamage
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAttackRange() uint32 {
	if m != nil && m.AttackRange != nil {
		return *m.AttackRange
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAttackSpeed() float32 {
	if m != nil && m.AttackSpeed != nil {
		return *m.AttackSpeed
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAttackAnimPoint() float32 {
	if m != nil && m.AttackAnimPoint != nil {
		return *m.AttackAnimPoint
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAttackAcquisitionRange() uint32 {
	if m != nil && m.AttackAcquisitionRange != nil {
		return *m.AttackAcquisitionRange
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAttackProjectileSpeed() uint32 {
	if m != nil && m.AttackProjectileSpeed != nil {
		return *m.AttackProjectileSpeed
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAttackTargetHandle() uint32 {
	if m != nil && m.AttackTargetHandle != nil {
		return *m.AttackTargetHandle
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBountyXp() uint32 {
	if m != nil && m.BountyXp != nil {
		return *m.BountyXp
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBountyGoldMin() uint32 {
	if m != nil && m.BountyGoldMin != nil {
		return *m.BountyGoldMin
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBountyGoldMax() uint32 {
	if m != nil && m.BountyGoldMax != nil {
		return *m.BountyGoldMax
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetIsChanneling() bool {
	if m != nil && m.IsChanneling != nil {
		return *m.IsChanneling
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetActiveAbilityHandle() uint32 {
	if m != nil && m.ActiveAbilityHandle != nil {
		return *m.ActiveAbilityHandle
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetIsAttackImmune() bool {
	if m != nil && m.IsAttackImmune != nil {
		return *m.IsAttackImmune
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsBlind() bool {
	if m != nil && m.IsBlind != nil {
		return *m.IsBlind
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsBlockDisabled() bool {
	if m != nil && m.IsBlockDisabled != nil {
		return *m.IsBlockDisabled
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsDisarmed() bool {
	if m != nil && m.IsDisarmed != nil {
		return *m.IsDisarmed
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsDominated() bool {
	if m != nil && m.IsDominated != nil {
		return *m.IsDominated
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsEvadeDisabled() bool {
	if m != nil && m.IsEvadeDisabled != nil {
		return *m.IsEvadeDisabled
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsHexed() bool {
	if m != nil && m.IsHexed != nil {
		return *m.IsHexed
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsInvisible() bool {
	if m != nil && m.IsInvisible != nil {
		return *m.IsInvisible
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsInvulnerable() bool {
	if m != nil && m.IsInvulnerable != nil {
		return *m.IsInvulnerable
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsMagicImmune() bool {
	if m != nil && m.IsMagicImmune != nil {
		return *m.IsMagicImmune
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsMuted() bool {
	if m != nil && m.IsMuted != nil {
		return *m.IsMuted
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsNightmared() bool {
	if m != nil && m.IsNightmared != nil {
		return *m.IsNightmared
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsRooted() bool {
	if m != nil && m.IsRooted != nil {
		return *m.IsRooted
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsSilenced() bool {
	if m != nil && m.IsSilenced != nil {
		return *m.IsSilenced
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsSpeciallyDeniable() bool {
	if m != nil && m.IsSpeciallyDeniable != nil {
		return *m.IsSpeciallyDeniable
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsStunned() bool {
	if m != nil && m.IsStunned != nil {
		return *m.IsStunned
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetIsUnableToMiss() bool {
	if m != nil && m.IsUnableToMiss != nil {
		return *m.IsUnableToMiss
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetHasScepter() bool {
	if m != nil && m.HasScepter != nil {
		return *m.HasScepter
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetAbilities() []*CMsgBotWorldState_Ability {
	if m != nil {
		return m.Abilities
	}
	return nil
}

func (m *CMsgBotWorldState_Unit) GetItems() []*CMsgBotWorldState_Ability {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *CMsgBotWorldState_Unit) GetModifiers() []*CMsgBotWorldState_Modifier {
	if m != nil {
		return m.Modifiers
	}
	return nil
}

func (m *CMsgBotWorldState_Unit) GetIncomingTrackingProjectiles() []*CMsgBotWorldState_TrackingProjectile {
	if m != nil {
		return m.IncomingTrackingProjectiles
	}
	return nil
}

func (m *CMsgBotWorldState_Unit) GetActionType() uint32 {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAbilityTargetHandle() uint32 {
	if m != nil && m.AbilityTargetHandle != nil {
		return *m.AbilityTargetHandle
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetPrimaryAttribute() uint32 {
	if m != nil && m.PrimaryAttribute != nil {
		return *m.PrimaryAttribute
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetIsIllusion() bool {
	if m != nil && m.IsIllusion != nil {
		return *m.IsIllusion
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetRespawnTime() uint32 {
	if m != nil && m.RespawnTime != nil {
		return *m.RespawnTime
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBuybackCost() uint32 {
	if m != nil && m.BuybackCost != nil {
		return *m.BuybackCost
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetBuybackCooldown() float32 {
	if m != nil && m.BuybackCooldown != nil {
		return *m.BuybackCooldown
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetSpellAmplification() float32 {
	if m != nil && m.SpellAmplification != nil {
		return *m.SpellAmplification
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetArmor() float32 {
	if m != nil && m.Armor != nil {
		return *m.Armor
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetMagicResist() float32 {
	if m != nil && m.MagicResist != nil {
		return *m.MagicResist
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetEvasion() float32 {
	if m != nil && m.Evasion != nil {
		return *m.Evasion
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetXpNeededToLevel() uint32 {
	if m != nil && m.XpNeededToLevel != nil {
		return *m.XpNeededToLevel
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAbilityPoints() uint32 {
	if m != nil && m.AbilityPoints != nil {
		return *m.AbilityPoints
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetReliableGold() uint32 {
	if m != nil && m.ReliableGold != nil {
		return *m.ReliableGold
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetUnreliableGold() uint32 {
	if m != nil && m.UnreliableGold != nil {
		return *m.UnreliableGold
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetLastHits() uint32 {
	if m != nil && m.LastHits != nil {
		return *m.LastHits
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetDenies() uint32 {
	if m != nil && m.Denies != nil {
		return *m.Denies
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetNetWorth() uint32 {
	if m != nil && m.NetWorth != nil {
		return *m.NetWorth
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetStrength() uint32 {
	if m != nil && m.Strength != nil {
		return *m.Strength
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetAgility() uint32 {
	if m != nil && m.Agility != nil {
		return *m.Agility
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetIntelligence() uint32 {
	if m != nil && m.Intelligence != nil {
		return *m.Intelligence
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetRemainingLifespan() float32 {
	if m != nil && m.RemainingLifespan != nil {
		return *m.RemainingLifespan
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetFlyingCourier() bool {
	if m != nil && m.FlyingCourier != nil {
		return *m.FlyingCourier
	}
	return false
}

func (m *CMsgBotWorldState_Unit) GetShrineCooldown() float32 {
	if m != nil && m.ShrineCooldown != nil {
		return *m.ShrineCooldown
	}
	return 0
}

func (m *CMsgBotWorldState_Unit) GetIsShrineHealing() bool {
	if m != nil && m.IsShrineHealing != nil {
		return *m.IsShrineHealing
	}
	return false
}

func init() {
	proto.RegisterType((*CMsgBotWorldState)(nil), "dota.CMsgBotWorldState")
	proto.RegisterType((*CMsgBotWorldState_Vector)(nil), "dota.CMsgBotWorldState.Vector")
	proto.RegisterType((*CMsgBotWorldState_Player)(nil), "dota.CMsgBotWorldState.Player")
	proto.RegisterType((*CMsgBotWorldState_Ability)(nil), "dota.CMsgBotWorldState.Ability")
	proto.RegisterType((*CMsgBotWorldState_DroppedItem)(nil), "dota.CMsgBotWorldState.DroppedItem")
	proto.RegisterType((*CMsgBotWorldState_RuneInfo)(nil), "dota.CMsgBotWorldState.RuneInfo")
	proto.RegisterType((*CMsgBotWorldState_TeleportInfo)(nil), "dota.CMsgBotWorldState.TeleportInfo")
	proto.RegisterType((*CMsgBotWorldState_Modifier)(nil), "dota.CMsgBotWorldState.Modifier")
	proto.RegisterType((*CMsgBotWorldState_LinearProjectile)(nil), "dota.CMsgBotWorldState.LinearProjectile")
	proto.RegisterType((*CMsgBotWorldState_TrackingProjectile)(nil), "dota.CMsgBotWorldState.TrackingProjectile")
	proto.RegisterType((*CMsgBotWorldState_AvoidanceZone)(nil), "dota.CMsgBotWorldState.AvoidanceZone")
	proto.RegisterType((*CMsgBotWorldState_EventAbility)(nil), "dota.CMsgBotWorldState.EventAbility")
	proto.RegisterType((*CMsgBotWorldState_EventDamage)(nil), "dota.CMsgBotWorldState.EventDamage")
	proto.RegisterType((*CMsgBotWorldState_EventCourierKilled)(nil), "dota.CMsgBotWorldState.EventCourierKilled")
	proto.RegisterType((*CMsgBotWorldState_EventRoshanKilled)(nil), "dota.CMsgBotWorldState.EventRoshanKilled")
	proto.RegisterType((*CMsgBotWorldState_EventTree)(nil), "dota.CMsgBotWorldState.EventTree")
	proto.RegisterType((*CMsgBotWorldState_Unit)(nil), "dota.CMsgBotWorldState.Unit")
	proto.RegisterEnum("dota.CMsgBotWorldState_UnitType", CMsgBotWorldState_UnitType_name, CMsgBotWorldState_UnitType_value)
}

func init() { proto.RegisterFile("dota_gcmessages_common_bot_script.proto", fileDescriptor18) }

var fileDescriptor18 = []byte{
	// 3104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x5b, 0x73, 0x1b, 0xc7,
	0xb1, 0x36, 0x28, 0x5e, 0x80, 0x01, 0x40, 0x82, 0x23, 0x4a, 0x1a, 0x41, 0xb6, 0x25, 0x5b, 0xbe,
	0x50, 0x37, 0x5a, 0x47, 0x75, 0xce, 0x29, 0x97, 0xeb, 0xd8, 0xa7, 0x20, 0x92, 0x16, 0x61, 0x91,
	0x14, 0x6b, 0x41, 0x49, 0x2e, 0x3b, 0xc9, 0xd6, 0x70, 0x77, 0x08, 0x4c, 0xb8, 0x3b, 0x0b, 0xef,
	0x2c, 0x28, 0x42, 0xb9, 0x39, 0x79, 0xf6, 0x73, 0x52, 0x95, 0xbf, 0x91, 0x4a, 0xde, 0x53, 0x95,
	0xf7, 0x54, 0xaa, 0xf2, 0x33, 0xf2, 0x03, 0xf2, 0x90, 0x4a, 0x52, 0xdd, 0x3d, 0x0b, 0x2c, 0x48,
	0x91, 0x91, 0xa2, 0x97, 0x3c, 0x01, 0xfd, 0x75, 0x4f, 0xcf, 0x4c, 0x4f, 0x4f, 0x5f, 0x66, 0xd9,
	0x87, 0x61, 0x92, 0x49, 0xbf, 0x1b, 0xc4, 0xca, 0x5a, 0xd9, 0x55, 0xd6, 0x0f, 0x92, 0x38, 0x4e,
	0x8c, 0xbf, 0x97, 0x64, 0xbe, 0x0d, 0x52, 0xdd, 0xcf, 0x56, 0xfa, 0x69, 0x92, 0x25, 0x7c, 0x1a,
	0x04, 0xdf, 0xfd, 0xc7, 0x67, 0x6c, 0x71, 0x75, 0xcb, 0x76, 0xef, 0x27, 0xd9, 0xd3, 0x24, 0x8d,
	0xc2, 0x4e, 0x26, 0x33, 0xc5, 0x2f, 0xb1, 0xb9, 0x4c, 0xc9, 0xd8, 0xd7, 0xa1, 0x28, 0x5d, 0x2b,
	0x2d, 0xd7, 0xbd, 0x59, 0x20, 0xdb, 0x21, 0xbf, 0xc2, 0x2a, 0x5d, 0x19, 0x2b, 0x3f, 0xd3, 0xb1,
	0x12, 0x53, 0xd7, 0x4a, 0xcb, 0x53, 0x5e, 0x19, 0x80, 0x5d, 0x1d, 0x2b, 0x60, 0xe2, 0xe4, 0xc8,
	0x3c, 0x47, 0x4c, 0x00, 0x90, 0xf9, 0x16, 0x63, 0x38, 0xd2, 0xc2, 0x04, 0x62, 0x1a, 0xb5, 0xa2,
	0x2e, 0x9a, 0xf1, 0x03, 0xb6, 0xd0, 0x53, 0x69, 0xe2, 0xf7, 0x75, 0x70, 0xe0, 0x64, 0x66, 0x50,
	0xa6, 0x0e, 0xf0, 0x8e, 0x0e, 0x0e, 0x48, 0xee, 0x6d, 0x56, 0x05, 0xf5, 0x7e, 0xb2, 0xef, 0x87,
	0x72, 0x28, 0x66, 0x71, 0x96, 0x0a, 0x40, 0x8f, 0xf6, 0xd7, 0xe4, 0x90, 0xbf, 0xcf, 0xe6, 0xbb,
	0xd1, 0xb0, 0xdf, 0xf3, 0x83, 0x24, 0x89, 0xc2, 0xe4, 0x99, 0x11, 0x73, 0x28, 0x52, 0x47, 0x74,
	0xd5, 0x81, 0xfc, 0x2e, 0x5b, 0x9a, 0x14, 0xf3, 0x95, 0x51, 0xf1, 0x50, 0x94, 0x71, 0x4e, 0x3e,
	0x21, 0xbc, 0x0e, 0x1c, 0xfe, 0x31, 0x9b, 0xeb, 0x47, 0x72, 0xa8, 0x52, 0x2b, 0xd8, 0xb5, 0x73,
	0xcb, 0xd5, 0x7b, 0x6f, 0xaf, 0xc0, 0xde, 0x56, 0x4e, 0x18, 0x6f, 0x65, 0x07, 0xc5, 0xbc, 0x5c,
	0x9c, 0xdf, 0x63, 0x33, 0x03, 0xa3, 0x33, 0x2b, 0xaa, 0x38, 0xee, 0xcd, 0xd3, 0xc6, 0x3d, 0x36,
	0x3a, 0xf3, 0x48, 0x94, 0x6f, 0xb0, 0x7a, 0x98, 0x26, 0xfd, 0xbe, 0x0a, 0x7d, 0x9d, 0xa9, 0xd8,
	0x8a, 0x1a, 0x8e, 0xbd, 0x7e, 0xda, 0xd8, 0x35, 0x12, 0x6e, 0x67, 0x2a, 0xf6, 0x6a, 0xe1, 0x98,
	0xb0, 0xfc, 0xff, 0x19, 0x4b, 0x07, 0x46, 0xf9, 0xda, 0xec, 0x27, 0x56, 0xd4, 0x51, 0xcd, 0xb5,
	0xd3, 0xd4, 0x78, 0x03, 0xa3, 0xda, 0x66, 0x3f, 0xf1, 0x2a, 0xa9, 0xfb, 0x67, 0x79, 0x87, 0x71,
	0x6d, 0x82, 0x24, 0xd6, 0xa6, 0xeb, 0x67, 0x2a, 0x52, 0xfd, 0x24, 0xcd, 0xac, 0x98, 0x47, 0x45,
	0xef, 0x9d, 0xa6, 0x68, 0xd7, 0x09, 0xa2, 0xb2, 0xc5, 0x7c, 0x7c, 0x8e, 0x5a, 0xfe, 0x94, 0xf1,
	0x48, 0x1b, 0x25, 0x53, 0xbf, 0x9f, 0x26, 0x3f, 0x54, 0x41, 0xa6, 0x23, 0x65, 0xc5, 0x02, 0x2a,
	0x5d, 0x3e, 0x4d, 0xe9, 0x26, 0x8e, 0xd8, 0x19, 0x0d, 0xf0, 0x16, 0xa3, 0x63, 0x88, 0xe5, 0xdb,
	0x6c, 0x41, 0x1e, 0x26, 0x3a, 0x94, 0x26, 0x50, 0xfe, 0xf3, 0xc4, 0x28, 0x2b, 0x1a, 0xa8, 0xf5,
	0xfd, 0xd3, 0xb4, 0xb6, 0x72, 0xf1, 0xaf, 0x12, 0xa3, 0xbc, 0x79, 0x59, 0x24, 0x2d, 0x7f, 0xc8,
	0xe6, 0xe5, 0x9e, 0x8e, 0x74, 0x36, 0xf4, 0xd5, 0xa1, 0x32, 0x99, 0x15, 0x4b, 0x67, 0xef, 0x7c,
	0x1d, 0xa4, 0x5a, 0x34, 0xc4, 0xab, 0xbb, 0xb1, 0x08, 0xd2, 0xa9, 0xca, 0x58, 0x76, 0x55, 0xae,
	0xeb, 0xc2, 0xd9, 0xa7, 0x8a, 0xc3, 0xd6, 0x70, 0x84, 0x57, 0xa3, 0x91, 0x4e, 0xd3, 0x0f, 0xd8,
	0x85, 0x20, 0x19, 0xa4, 0x5a, 0xa5, 0xfe, 0x81, 0x8e, 0x22, 0x15, 0xe6, 0x1a, 0x2f, 0xa2, 0xc6,
	0x9b, 0x67, 0x6a, 0x5c, 0xa5, 0x91, 0x0f, 0x71, 0xa0, 0x77, 0x3e, 0x28, 0x92, 0x4e, 0xff, 0xd7,
	0x6c, 0x29, 0x4d, 0x6c, 0x4f, 0x9a, 0x63, 0xea, 0x2f, 0xa1, 0xfa, 0x1b, 0x67, 0xaa, 0xf7, 0x70,
	0xa0, 0xd3, 0xce, 0xd3, 0x02, 0xe5, 0x94, 0xdf, 0x67, 0xd5, 0x2c, 0x55, 0x23, 0x23, 0x08, 0xd4,
	0xf9, 0xce, 0x99, 0x3a, 0x77, 0x53, 0xa5, 0x3c, 0x06, 0xa3, 0x48, 0x47, 0xf3, 0x1e, 0x9b, 0x7d,
	0xa2, 0x82, 0x2c, 0x49, 0x79, 0x8d, 0x95, 0x8e, 0x44, 0xe9, 0xda, 0xd4, 0xf2, 0x94, 0x57, 0x3a,
	0x02, 0x6a, 0x28, 0xa6, 0x88, 0x1a, 0x02, 0xf5, 0x5c, 0x9c, 0x23, 0xea, 0x79, 0xf3, 0x0f, 0x25,
	0x36, 0x4b, 0x97, 0x13, 0x42, 0x15, 0x5d, 0xcf, 0x3c, 0xc4, 0xcd, 0x78, 0x65, 0x02, 0xda, 0x21,
	0x44, 0x3f, 0x8c, 0x45, 0x3a, 0xc4, 0x10, 0x57, 0xf7, 0x66, 0x81, 0x6c, 0x87, 0xfc, 0x32, 0x2b,
	0x6b, 0xeb, 0xcb, 0x48, 0x1f, 0x52, 0x7c, 0x2b, 0x7b, 0x73, 0xda, 0xb6, 0x80, 0xe4, 0xef, 0xb0,
	0x5a, 0xaa, 0x6c, 0x5f, 0x3e, 0x33, 0x14, 0xfe, 0xa6, 0x31, 0xea, 0x54, 0x1d, 0x86, 0x11, 0x70,
	0x89, 0xcd, 0x80, 0x31, 0xad, 0x0b, 0x6c, 0x44, 0xf0, 0x8b, 0x6c, 0x36, 0x54, 0x32, 0xeb, 0x59,
	0x8c, 0x65, 0x75, 0xcf, 0x51, 0x5c, 0xb0, 0x39, 0x69, 0xad, 0xb6, 0x99, 0xc5, 0x08, 0x56, 0xf7,
	0x72, 0xb2, 0xf9, 0xe7, 0x69, 0x36, 0xe7, 0x1c, 0x0c, 0x46, 0xf7, 0xa4, 0x09, 0x23, 0x95, 0xc7,
	0x69, 0xa2, 0x20, 0xda, 0xe6, 0x6e, 0x3b, 0xda, 0x45, 0xc5, 0x21, 0xed, 0x90, 0x73, 0x36, 0x6d,
	0xa3, 0x24, 0xc3, 0x4d, 0xd4, 0x3d, 0xfc, 0xcf, 0xaf, 0xb3, 0x7a, 0x20, 0x6d, 0xa6, 0x52, 0xdf,
	0x69, 0xa4, 0x65, 0xd6, 0x08, 0xdc, 0x20, 0xbd, 0x4b, 0x6c, 0x26, 0x52, 0x87, 0x2a, 0x72, 0x8b,
	0x25, 0x02, 0x66, 0x03, 0x29, 0x3f, 0x95, 0xa6, 0xab, 0x04, 0xa3, 0xd9, 0x00, 0xf1, 0x00, 0x00,
	0xdb, 0x04, 0x3d, 0x69, 0x8c, 0x8a, 0xc8, 0x36, 0x55, 0xb2, 0x8d, 0xc3, 0xd0, 0x36, 0x77, 0x18,
	0x1f, 0x45, 0xe2, 0x54, 0xc5, 0x52, 0x1b, 0x6d, 0xba, 0xa2, 0x86, 0x82, 0x8b, 0x39, 0xc7, 0xcb,
	0x19, 0xa0, 0x11, 0x0e, 0x22, 0xc8, 0xf4, 0xa1, 0xcc, 0x54, 0x28, 0x96, 0xf0, 0x30, 0xaa, 0xda,
	0xb6, 0x72, 0x08, 0xd6, 0xa4, 0xad, 0x9f, 0x25, 0xdd, 0x6e, 0xa4, 0x42, 0x71, 0x01, 0x05, 0x2a,
	0xda, 0xee, 0x12, 0xc0, 0xef, 0xb0, 0xf3, 0xda, 0xfa, 0xda, 0xf8, 0xb9, 0x99, 0xfa, 0x3d, 0x69,
	0x95, 0xb8, 0x88, 0x72, 0x0d, 0x6d, 0xdb, 0xc6, 0x99, 0x78, 0x07, 0x70, 0x30, 0x8e, 0xb6, 0xbe,
	0x5b, 0x31, 0x2c, 0xed, 0x12, 0x0a, 0xd6, 0xb4, 0x5d, 0x1d, 0x61, 0xe0, 0x54, 0xda, 0xfa, 0x36,
	0x4b, 0x22, 0x65, 0x84, 0x40, 0x81, 0xb2, 0xb6, 0x1d, 0xa4, 0xe1, 0x3c, 0x83, 0x9e, 0x4c, 0xbb,
	0xca, 0x8a, 0xb7, 0xe9, 0x3c, 0x1d, 0xc9, 0x6f, 0xb1, 0x45, 0xab, 0x82, 0xc4, 0x84, 0x32, 0x1d,
	0xfa, 0xb9, 0xcc, 0x55, 0x94, 0x69, 0x8c, 0x18, 0xab, 0x4e, 0xf8, 0x36, 0xe3, 0x1a, 0x73, 0xfa,
	0x9e, 0x36, 0x2a, 0xf4, 0xa3, 0x24, 0x38, 0x50, 0xa1, 0x58, 0xce, 0x97, 0xbd, 0xea, 0x18, 0x9b,
	0x88, 0xf3, 0x9b, 0x6c, 0xb1, 0x9f, 0x3c, 0x53, 0xa9, 0x9f, 0xa5, 0x4a, 0x86, 0x16, 0x13, 0xab,
	0xb8, 0x87, 0xaa, 0x17, 0x90, 0xb1, 0x8b, 0x38, 0x5c, 0xb4, 0xe6, 0x1e, 0xab, 0x16, 0xb2, 0x08,
	0x5c, 0x02, 0xc8, 0x3c, 0x85, 0x12, 0x00, 0xc8, 0x76, 0xc8, 0x3f, 0x61, 0xe5, 0x28, 0x09, 0x64,
	0xa6, 0x13, 0x83, 0x8e, 0x75, 0x46, 0x26, 0xa4, 0x1b, 0xea, 0x8d, 0xe4, 0x9b, 0xbf, 0x2e, 0xb1,
	0x72, 0x9e, 0x63, 0xc0, 0x09, 0xb3, 0x61, 0x5f, 0xb9, 0xeb, 0x87, 0xff, 0x5f, 0x47, 0x39, 0xdc,
	0x05, 0xd8, 0xdf, 0xc0, 0x3a, 0xb7, 0x76, 0x14, 0x94, 0x16, 0x58, 0x32, 0x58, 0x0d, 0x39, 0xc1,
	0x2a, 0x65, 0xdc, 0xed, 0xac, 0x03, 0xdc, 0x01, 0xb4, 0xa3, 0x94, 0x69, 0x7e, 0x57, 0x62, 0xb5,
	0x62, 0xde, 0x3a, 0x3b, 0x48, 0xbc, 0xce, 0x4a, 0xaf, 0x33, 0x9c, 0x1a, 0x3d, 0x1d, 0x1d, 0x9d,
	0x8a, 0xa5, 0x1a, 0x80, 0x9e, 0xc3, 0x9a, 0x7f, 0x29, 0xb1, 0xf2, 0x56, 0x12, 0xea, 0x7d, 0xad,
	0x52, 0xb0, 0x95, 0x91, 0x31, 0xd9, 0xaa, 0xe2, 0xe1, 0x7f, 0x7e, 0x95, 0x55, 0x6d, 0x26, 0x83,
	0x03, 0x3f, 0x48, 0x06, 0x26, 0x73, 0x97, 0x9c, 0x21, 0xb4, 0x0a, 0x08, 0xd4, 0x42, 0xb9, 0x77,
	0xbb, 0x2b, 0x4d, 0x86, 0xc9, 0xb3, 0xd2, 0xc6, 0x8b, 0x62, 0xc5, 0xf4, 0xf1, 0x58, 0x71, 0x87,
	0xf1, 0xd1, 0x8d, 0xf4, 0xc3, 0x41, 0x4a, 0x5b, 0x9e, 0xa1, 0xab, 0x39, 0xe2, 0xac, 0x39, 0x06,
	0xff, 0x5f, 0x76, 0x49, 0x0e, 0x8e, 0x74, 0xa4, 0xc1, 0x9b, 0xb1, 0x98, 0x71, 0x93, 0x43, 0x80,
	0x3b, 0xb7, 0x5c, 0xf7, 0x2e, 0x8c, 0xd8, 0x50, 0xf0, 0x58, 0x5a, 0x84, 0x6d, 0xfe, 0x71, 0x8a,
	0x35, 0x8e, 0x27, 0xf8, 0x53, 0xc3, 0xdb, 0x89, 0x58, 0x35, 0xf5, 0x82, 0x58, 0xb5, 0xcc, 0x1a,
	0x4e, 0x68, 0x7c, 0x8a, 0xe7, 0xf0, 0x14, 0xe7, 0x09, 0xdf, 0xc9, 0xcf, 0xf2, 0xa4, 0xa1, 0xa6,
	0xff, 0xb5, 0xa1, 0x66, 0x8e, 0x1b, 0xaa, 0xe8, 0x11, 0xb3, 0xaf, 0xe8, 0x11, 0x9f, 0xb0, 0xf2,
	0xa1, 0x8a, 0x92, 0x40, 0x67, 0x43, 0x0c, 0xf7, 0x2f, 0x31, 0x36, 0x97, 0x07, 0x23, 0xa5, 0x32,
	0xd4, 0x03, 0xeb, 0xaa, 0x57, 0x47, 0x35, 0x7f, 0x3f, 0xc5, 0xf8, 0x6e, 0x2a, 0x83, 0x03, 0x6d,
	0xba, 0x05, 0x9b, 0x9e, 0xb0, 0x5d, 0xe9, 0x25, 0x6d, 0x37, 0xf5, 0x92, 0xb6, 0xfb, 0x77, 0x9c,
	0xac, 0x68, 0xbb, 0x99, 0x57, 0xb4, 0x5d, 0xb3, 0x60, 0x3b, 0x4a, 0x4b, 0x63, 0xdb, 0x50, 0xa2,
	0x08, 0x93, 0xb0, 0xab, 0xe4, 0x5e, 0xa4, 0xd0, 0xb6, 0x98, 0x28, 0xd6, 0x72, 0xc8, 0x45, 0x6d,
	0x99, 0xc1, 0xbd, 0x41, 0x0b, 0x62, 0xd4, 0x6e, 0x21, 0xdd, 0xfc, 0x6b, 0x89, 0xd5, 0x27, 0x0a,
	0xc4, 0x89, 0x95, 0x96, 0x5e, 0xfd, 0xde, 0xff, 0xe7, 0xb9, 0xed, 0xd8, 0x7d, 0x66, 0x27, 0xdc,
	0xe7, 0x4f, 0x25, 0x56, 0x2b, 0x16, 0xb3, 0xc7, 0xf4, 0x94, 0x8e, 0xeb, 0x99, 0x88, 0x96, 0x53,
	0xc7, 0xa2, 0xe5, 0x55, 0x56, 0x85, 0x58, 0x30, 0xe9, 0x22, 0x0c, 0x20, 0xb7, 0xc8, 0xa2, 0x59,
	0xa7, 0x5f, 0xd1, 0xac, 0xcb, 0xac, 0x31, 0x4e, 0xce, 0x90, 0xe3, 0xd2, 0x0c, 0xb7, 0x59, 0xf6,
	0xe6, 0x47, 0xf9, 0xb9, 0x03, 0x68, 0xf3, 0x6f, 0x25, 0x56, 0x2d, 0x14, 0xd5, 0x58, 0x7c, 0xe1,
	0xbf, 0x3c, 0xbe, 0x10, 0x05, 0x1a, 0x0f, 0x75, 0x90, 0xe9, 0xf8, 0xa4, 0xfb, 0x13, 0x3e, 0x3a,
	0x83, 0xdb, 0x8c, 0x3b, 0xc9, 0x93, 0xfb, 0x73, 0x3a, 0x1e, 0x8f, 0x77, 0x79, 0x9b, 0x71, 0x72,
	0xb4, 0x89, 0xd3, 0x9d, 0x46, 0xcd, 0x8d, 0x9c, 0x33, 0xd2, 0x7d, 0x97, 0x2d, 0x8d, 0xa4, 0x8b,
	0xda, 0xe9, 0x08, 0x47, 0x9a, 0x0a, 0xfa, 0x27, 0x8f, 0x68, 0xf6, 0xd8, 0x11, 0x35, 0x7f, 0x5b,
	0x62, 0xfc, 0x64, 0x07, 0x70, 0x7a, 0xb7, 0xbf, 0xc2, 0xf2, 0xe6, 0x60, 0x62, 0x7e, 0xf2, 0xda,
	0x45, 0xc7, 0x2a, 0x4c, 0xbf, 0xcc, 0x1a, 0xd8, 0x2e, 0xbc, 0xc0, 0x75, 0x09, 0x2f, 0x9a, 0xcd,
	0x49, 0x16, 0x15, 0x93, 0xfb, 0x3a, 0x1d, 0x63, 0xbd, 0xcd, 0x03, 0xb6, 0x78, 0xa2, 0xb3, 0x78,
	0xe1, 0x64, 0xa5, 0x57, 0x98, 0x6c, 0xea, 0x94, 0xc9, 0x7e, 0x57, 0x62, 0x95, 0x51, 0xcf, 0x81,
	0xb6, 0x81, 0x5e, 0xa5, 0x60, 0x9b, 0x54, 0xa9, 0x76, 0xc8, 0xdf, 0x64, 0x95, 0x50, 0xd9, 0x2c,
	0x4d, 0x86, 0x8a, 0x7c, 0xa3, 0xec, 0x8d, 0x01, 0xe0, 0xba, 0xd2, 0x5f, 0x85, 0xae, 0x55, 0x18,
	0x03, 0xaf, 0xe5, 0xec, 0x82, 0xcd, 0x85, 0x0a, 0x76, 0x16, 0x3a, 0x1f, 0xcf, 0xc9, 0xe6, 0xdf,
	0x2f, 0xb3, 0x69, 0xd8, 0xc7, 0xa9, 0x59, 0xf3, 0x73, 0x56, 0x41, 0x03, 0x60, 0xd5, 0x05, 0x4b,
	0x9e, 0x3f, 0xfd, 0x25, 0x00, 0x14, 0xed, 0x0e, 0xfb, 0xea, 0x93, 0xb9, 0xf6, 0xf6, 0x93, 0xd6,
	0x66, 0x7b, 0xcd, 0x2b, 0x0f, 0x1c, 0x34, 0x2a, 0x46, 0xce, 0x15, 0x8a, 0x91, 0x82, 0x0f, 0x4d,
	0x4f, 0xf8, 0xd0, 0xa8, 0x63, 0x98, 0x29, 0x76, 0x0c, 0xaf, 0x93, 0x2b, 0x8b, 0x5d, 0xd8, 0xdc,
	0x64, 0x17, 0x36, 0x11, 0x83, 0xca, 0xc7, 0x62, 0xd0, 0x87, 0x6c, 0x61, 0x2f, 0x19, 0x98, 0x10,
	0xea, 0x18, 0x17, 0xf1, 0xa8, 0x55, 0x99, 0xcf, 0x61, 0x0f, 0x51, 0xb0, 0xdf, 0xbe, 0x0c, 0xa0,
	0x2e, 0xab, 0xd2, 0x56, 0x88, 0x82, 0xf0, 0xdd, 0x4d, 0x41, 0xd4, 0xef, 0x29, 0xdd, 0xed, 0x65,
	0xd8, 0x9f, 0xd4, 0xbd, 0x1a, 0x81, 0x1b, 0x88, 0xc1, 0xa5, 0x3d, 0xd4, 0x56, 0x27, 0x86, 0xba,
	0x21, 0x3f, 0x94, 0x43, 0x6c, 0x7a, 0x16, 0xe8, 0xd2, 0x12, 0x0f, 0xfb, 0xa2, 0x35, 0xe2, 0xf0,
	0xff, 0x66, 0x17, 0x27, 0x46, 0x18, 0xd0, 0x83, 0x63, 0x1a, 0x38, 0x66, 0xa9, 0x30, 0x66, 0x3b,
	0xe7, 0xe1, 0x21, 0x2b, 0x19, 0x65, 0x3d, 0x6c, 0x7e, 0xb0, 0x47, 0x05, 0x0a, 0x42, 0x00, 0xfd,
	0xf3, 0x63, 0x79, 0x84, 0x7d, 0x4f, 0xdd, 0xab, 0x10, 0xb2, 0x25, 0x8f, 0x20, 0x21, 0x3a, 0x76,
	0xaa, 0xba, 0xca, 0x60, 0xc3, 0x33, 0xe5, 0x55, 0x09, 0xf3, 0x00, 0x82, 0xe3, 0x8d, 0xa5, 0x91,
	0xe2, 0x32, 0x35, 0x87, 0xf0, 0x1f, 0x6c, 0x0e, 0xbf, 0xa8, 0xb3, 0x49, 0xed, 0x0b, 0xd0, 0xa0,
	0xf1, 0x2d, 0xc6, 0x90, 0x45, 0xfa, 0xae, 0xd0, 0x83, 0x1c, 0x20, 0xa4, 0x6d, 0x85, 0x9d, 0xdf,
	0x93, 0x56, 0xf9, 0x71, 0x72, 0xa8, 0x62, 0x65, 0x32, 0xdf, 0xf6, 0x95, 0x0a, 0x5d, 0x0f, 0xb4,
	0x08, 0xac, 0x2d, 0xc7, 0xe9, 0x00, 0x03, 0xac, 0x11, 0x0c, 0xd2, 0x14, 0x24, 0x8f, 0x0d, 0xa1,
	0x96, 0x68, 0xc9, 0x71, 0x27, 0x47, 0x5d, 0x67, 0x75, 0x69, 0x74, 0x4c, 0x2d, 0x21, 0x14, 0x02,
	0xd7, 0xf1, 0xf0, 0x6b, 0x00, 0xb6, 0x1c, 0x86, 0xd1, 0x11, 0x84, 0x82, 0x61, 0x10, 0x29, 0xf1,
	0x1e, 0xad, 0x14, 0x90, 0x55, 0x00, 0x20, 0x47, 0xe1, 0x4a, 0x5d, 0x46, 0x58, 0xa6, 0x1c, 0x05,
	0x90, 0xcb, 0x16, 0x77, 0xd9, 0x52, 0x41, 0xc0, 0x3f, 0x94, 0xa9, 0x86, 0xb2, 0x40, 0xdc, 0xa0,
	0xa3, 0x1d, 0x4b, 0x3e, 0x71, 0x1c, 0xb0, 0xf6, 0x5e, 0x62, 0x06, 0x36, 0xd7, 0x79, 0x13, 0x25,
	0xab, 0x88, 0x39, 0xa5, 0xb0, 0x72, 0x0c, 0xe4, 0xb9, 0xcc, 0x2d, 0x72, 0x2a, 0x02, 0x9d, 0xd0,
	0x3b, 0xcc, 0xd1, 0xae, 0xc5, 0xbe, 0x4d, 0x7a, 0x08, 0x1b, 0x35, 0xd9, 0x4e, 0x84, 0xac, 0x75,
	0x87, 0x0e, 0x96, 0x30, 0x32, 0xd2, 0x4d, 0xb6, 0xe8, 0x44, 0xd0, 0x0c, 0xfd, 0x44, 0x9b, 0x4c,
	0xac, 0xa0, 0xdc, 0x02, 0x31, 0x5a, 0x46, 0xc7, 0x3b, 0x00, 0xf3, 0x8f, 0x99, 0xc8, 0x65, 0x83,
	0x6f, 0x06, 0xda, 0xea, 0x6c, 0xe4, 0xa0, 0xe2, 0x23, 0x9c, 0xfd, 0xa2, 0x1b, 0x32, 0x66, 0xd3,
	0x42, 0xa0, 0x01, 0xa0, 0x91, 0xe3, 0xa7, 0x3d, 0xb7, 0xa6, 0xbb, 0x38, 0xf0, 0x02, 0xb1, 0xc7,
	0x25, 0x29, 0xad, 0x6e, 0x94, 0xed, 0xfc, 0x0c, 0x5a, 0xdd, 0x51, 0x9c, 0xfe, 0xaf, 0x62, 0xb6,
	0xdb, 0x45, 0x96, 0x4b, 0x37, 0x57, 0x58, 0x05, 0x6e, 0x6e, 0x36, 0xf4, 0x8f, 0xfa, 0xe2, 0xff,
	0xa8, 0xf2, 0x23, 0xe0, 0xcb, 0x3e, 0x74, 0x7d, 0x8e, 0xd9, 0x4d, 0xa2, 0xd0, 0x8f, 0xb5, 0x11,
	0x9f, 0x52, 0x75, 0x44, 0xf0, 0x83, 0x24, 0x0a, 0xb7, 0xb4, 0x39, 0x21, 0x27, 0x8f, 0xc4, 0x67,
	0x27, 0xe4, 0xe4, 0xd1, 0xc9, 0x17, 0x80, 0xd6, 0x0b, 0x5e, 0x00, 0xee, 0xb1, 0x0b, 0xe8, 0x81,
	0xca, 0x3f, 0x56, 0x98, 0xdd, 0x47, 0x95, 0xe7, 0x89, 0xd9, 0x9a, 0x28, 0xcf, 0xa8, 0x7a, 0x71,
	0x5b, 0xd7, 0x71, 0x3c, 0x30, 0x4a, 0x7c, 0x9e, 0x57, 0x2f, 0x54, 0x86, 0xb6, 0x11, 0x75, 0x81,
	0x6f, 0x2f, 0xd2, 0x26, 0x14, 0x0f, 0xf2, 0xc0, 0x77, 0x1f, 0x48, 0x38, 0x5a, 0x64, 0x25, 0xe0,
	0x47, 0xda, 0x42, 0x61, 0x1b, 0x8a, 0x0d, 0x94, 0x59, 0x00, 0x99, 0x24, 0x38, 0x58, 0x73, 0x30,
	0xf8, 0x39, 0xd4, 0xc4, 0xda, 0xca, 0x34, 0x56, 0xa1, 0x68, 0xa3, 0x14, 0xd3, 0x76, 0xcd, 0x21,
	0xa3, 0xa2, 0x39, 0xd6, 0x06, 0x5f, 0x57, 0xbe, 0x18, 0x17, 0xcd, 0x0e, 0x72, 0xf3, 0xa9, 0x43,
	0x19, 0xaa, 0xf1, 0x7c, 0x0f, 0xf3, 0xf9, 0xd6, 0x01, 0x1f, 0xcd, 0x47, 0xcb, 0xee, 0xa9, 0x23,
	0x15, 0x8a, 0xcd, 0x7c, 0xd9, 0x1b, 0x40, 0xba, 0x99, 0xb4, 0x81, 0x08, 0x07, 0xe5, 0xf9, 0x56,
	0x3e, 0x53, 0x3b, 0x87, 0x20, 0x6a, 0x93, 0xc8, 0x20, 0x32, 0x2a, 0xc5, 0x22, 0x7e, 0x3b, 0xb7,
	0x4e, 0xbb, 0x80, 0xc2, 0x41, 0x6a, 0xeb, 0xc7, 0xb2, 0xab, 0x83, 0xdc, 0x8c, 0x8f, 0x50, 0xb0,
	0xae, 0xed, 0x16, 0xa0, 0x13, 0x56, 0x8c, 0x07, 0xb0, 0xb3, 0x9d, 0x7c, 0x39, 0x5b, 0x40, 0xba,
	0x33, 0xc6, 0xf8, 0x1b, 0xcb, 0x54, 0x85, 0xc2, 0xcb, 0xcf, 0x78, 0x7b, 0x84, 0xb9, 0x7e, 0x21,
	0x4d, 0x12, 0x50, 0xd0, 0xc9, 0xfb, 0x05, 0x0f, 0x69, 0x67, 0x5b, 0xab, 0x23, 0x65, 0x02, 0x15,
	0x8a, 0xdd, 0xdc, 0xb6, 0x1d, 0x87, 0x80, 0x87, 0x80, 0x40, 0x5f, 0x05, 0x5a, 0x46, 0xd1, 0xd0,
	0x0f, 0x95, 0xd1, 0xb8, 0xa9, 0xc7, 0x28, 0x7a, 0x5e, 0xdb, 0x4e, 0xce, 0x5b, 0x73, 0x2c, 0xf7,
	0x94, 0x65, 0xb3, 0x81, 0x81, 0x6a, 0xe2, 0x49, 0xfe, 0x94, 0xd5, 0x21, 0x80, 0xdf, 0xc0, 0xb3,
	0x18, 0x18, 0x90, 0xf5, 0xb3, 0xc4, 0x8f, 0xb5, 0xb5, 0xe2, 0x69, 0x6e, 0xa3, 0xc7, 0x88, 0xef,
	0x26, 0x5b, 0xda, 0x5a, 0x58, 0x5e, 0x4f, 0x5a, 0xdf, 0x06, 0xaa, 0x9f, 0xa9, 0x54, 0x7c, 0x49,
	0xcb, 0xeb, 0x49, 0xdb, 0x21, 0x84, 0x7f, 0xca, 0x5c, 0xb9, 0xa8, 0x95, 0x15, 0x5f, 0xe1, 0xc3,
	0xec, 0xd5, 0x53, 0x1f, 0xce, 0xdd, 0x23, 0xf7, 0x78, 0x04, 0xff, 0x1f, 0x36, 0x43, 0x9f, 0x2b,
	0xbe, 0x7e, 0xb9, 0xa1, 0x24, 0xcd, 0x3f, 0x63, 0x95, 0xd8, 0xbd, 0x74, 0x58, 0xf1, 0xbd, 0xb3,
	0x3f, 0x51, 0xe4, 0x4f, 0x22, 0xde, 0x78, 0x08, 0x37, 0xec, 0xad, 0xf1, 0x27, 0x0a, 0xd7, 0xf1,
	0x4e, 0x7c, 0x58, 0xf8, 0xfe, 0xd9, 0xaf, 0xe2, 0x27, 0xbb, 0x64, 0xef, 0xca, 0xe8, 0x9b, 0xc5,
	0x09, 0x1e, 0x9a, 0x11, 0x6e, 0x72, 0x62, 0xa8, 0x94, 0x0a, 0x29, 0x53, 0x10, 0x84, 0x15, 0x12,
	0xc4, 0x01, 0x17, 0x00, 0x26, 0x83, 0x99, 0x72, 0x71, 0x80, 0x98, 0x13, 0xd1, 0xec, 0x16, 0x5b,
	0xec, 0xa7, 0x3a, 0x96, 0xe9, 0x10, 0x82, 0x41, 0xaa, 0xf7, 0x06, 0x99, 0x12, 0x86, 0x8a, 0x54,
	0xc7, 0x68, 0xe5, 0xb8, 0xf3, 0x33, 0x1d, 0x45, 0x03, 0x28, 0x0d, 0x44, 0x92, 0xfb, 0x59, 0xdb,
	0x21, 0x27, 0xde, 0xa3, 0xfb, 0x94, 0x31, 0x8a, 0xef, 0xd1, 0x90, 0x9c, 0x06, 0xc3, 0x3d, 0x7a,
	0x41, 0xb2, 0x99, 0xf8, 0xc6, 0x25, 0x27, 0xc2, 0x56, 0x13, 0x9b, 0xf1, 0x1b, 0xac, 0x31, 0x16,
	0x71, 0xdf, 0xd3, 0x52, 0x4a, 0x18, 0x23, 0x31, 0xf7, 0x45, 0xed, 0x23, 0x76, 0xde, 0xf6, 0x55,
	0x14, 0xf9, 0x32, 0xee, 0x47, 0x7a, 0x5f, 0xbb, 0xe2, 0xce, 0xa2, 0x34, 0x47, 0x56, 0xab, 0xc8,
	0x81, 0xc2, 0x50, 0xa6, 0x71, 0x92, 0x8a, 0x0c, 0x45, 0x88, 0x80, 0x45, 0xd1, 0x15, 0x4e, 0x95,
	0xd5, 0x36, 0x13, 0x03, 0x4a, 0x63, 0x88, 0x79, 0x08, 0x41, 0x05, 0xac, 0x0e, 0x25, 0xee, 0xfb,
	0x10, 0xb9, 0x39, 0xc9, 0x6f, 0x31, 0x7e, 0xd4, 0xf7, 0x8d, 0x52, 0xa1, 0x0a, 0xe1, 0x26, 0x50,
	0xe1, 0x79, 0x44, 0xef, 0x9d, 0x47, 0xfd, 0x6d, 0x64, 0xec, 0x26, 0x9b, 0x58, 0x82, 0x16, 0xba,
	0x67, 0xcc, 0x84, 0x56, 0x0c, 0x27, 0xba, 0x67, 0xcc, 0x83, 0x16, 0x62, 0x42, 0xaa, 0x22, 0xbc,
	0x88, 0x98, 0x21, 0xc4, 0x73, 0xca, 0xcf, 0x39, 0x08, 0xf9, 0x01, 0x82, 0xd4, 0xc0, 0x4c, 0x8a,
	0xfd, 0x88, 0x4a, 0xcb, 0x31, 0x8c, 0x82, 0x57, 0x58, 0x25, 0x92, 0x36, 0xf3, 0x7b, 0x3a, 0xb3,
	0xe2, 0xc7, 0x94, 0xb2, 0x00, 0xd8, 0xd0, 0x99, 0xfb, 0x14, 0x60, 0xe0, 0xe6, 0xfd, 0x24, 0xff,
	0x14, 0x00, 0x14, 0x0c, 0x32, 0x2a, 0xf3, 0x9f, 0x25, 0x69, 0xd6, 0x13, 0x3f, 0xa5, 0x41, 0x46,
	0x81, 0x03, 0x67, 0x3d, 0xde, 0x64, 0x65, 0x9b, 0xa5, 0xca, 0x74, 0xb3, 0x9e, 0xf8, 0x19, 0xf1,
	0x72, 0x9a, 0x5f, 0x66, 0x73, 0xb2, 0x8b, 0x9b, 0x11, 0xdf, 0x96, 0xdc, 0x47, 0x04, 0xa2, 0xf9,
	0x75, 0x56, 0xd3, 0x26, 0x53, 0x51, 0xa4, 0xbb, 0x10, 0x98, 0xc4, 0xcf, 0xdd, 0x2b, 0x50, 0x11,
	0xe4, 0x2b, 0xc5, 0xa7, 0xbf, 0x48, 0xef, 0x83, 0xf3, 0x18, 0xf1, 0x8b, 0xd2, 0xb1, 0xb7, 0xbf,
	0x4d, 0xc7, 0xe1, 0x1f, 0xb0, 0xf9, 0xfd, 0x68, 0x08, 0xc2, 0xae, 0x37, 0x14, 0xdf, 0x95, 0x28,
	0x04, 0x13, 0xec, 0xda, 0x4e, 0xbe, 0xcc, 0x16, 0x6c, 0x2f, 0xd5, 0x46, 0x8d, 0xbd, 0xea, 0x97,
	0xa4, 0x74, 0x9e, 0xf0, 0x91, 0x57, 0xdd, 0xc2, 0xd8, 0xe6, 0x84, 0xa1, 0x48, 0x85, 0xcc, 0xfb,
	0xab, 0x52, 0x9e, 0x68, 0x3a, 0xc8, 0xd8, 0x20, 0xfc, 0xdd, 0xdf, 0x94, 0x58, 0x39, 0xef, 0x5b,
	0x78, 0x95, 0xe5, 0x9d, 0x4b, 0xe3, 0x0d, 0x5e, 0x66, 0xd3, 0x1b, 0xeb, 0xde, 0xa3, 0x46, 0x89,
	0xcf, 0x33, 0xb6, 0xea, 0xad, 0xaf, 0xef, 0xf8, 0x48, 0x4f, 0x01, 0xbd, 0xd9, 0xda, 0x5e, 0xf7,
	0x11, 0x6c, 0x9c, 0xe3, 0x0d, 0x56, 0xfb, 0xe2, 0xf1, 0xf6, 0x83, 0xcd, 0x1c, 0x99, 0xe6, 0x8c,
	0xcd, 0x7a, 0x8f, 0x3a, 0x1b, 0xad, 0xed, 0xc6, 0x0c, 0xaf, 0xb0, 0x99, 0xdd, 0x47, 0x4f, 0xd7,
	0xbd, 0xc6, 0x2c, 0xaf, 0xb1, 0xf2, 0xfd, 0x96, 0xe7, 0xb5, 0x56, 0x1f, 0x76, 0x1a, 0x73, 0x20,
	0xd4, 0xd9, 0xf0, 0xda, 0xdb, 0xeb, 0x8d, 0x32, 0x4c, 0xf6, 0xf9, 0x23, 0x6f, 0xb7, 0x51, 0x41,
	0x99, 0xc7, 0xed, 0xcd, 0xb5, 0xf6, 0xf6, 0x83, 0x06, 0x83, 0x15, 0xad, 0x3e, 0x7a, 0xec, 0xb5,
	0xd7, 0xbd, 0x46, 0x15, 0x84, 0x9e, 0xb6, 0xbc, 0xb5, 0x46, 0xed, 0xfe, 0xcc, 0x46, 0xe9, 0xdb,
	0xd2, 0x1b, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x90, 0xfc, 0xfd, 0xa0, 0xb8, 0x1f, 0x00, 0x00,
}
