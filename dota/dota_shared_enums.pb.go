// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_shared_enums.proto

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DOTA_GameMode int32

const (
	DOTA_GameMode_DOTA_GAMEMODE_NONE          DOTA_GameMode = 0
	DOTA_GameMode_DOTA_GAMEMODE_AP            DOTA_GameMode = 1
	DOTA_GameMode_DOTA_GAMEMODE_CM            DOTA_GameMode = 2
	DOTA_GameMode_DOTA_GAMEMODE_RD            DOTA_GameMode = 3
	DOTA_GameMode_DOTA_GAMEMODE_SD            DOTA_GameMode = 4
	DOTA_GameMode_DOTA_GAMEMODE_AR            DOTA_GameMode = 5
	DOTA_GameMode_DOTA_GAMEMODE_INTRO         DOTA_GameMode = 6
	DOTA_GameMode_DOTA_GAMEMODE_HW            DOTA_GameMode = 7
	DOTA_GameMode_DOTA_GAMEMODE_REVERSE_CM    DOTA_GameMode = 8
	DOTA_GameMode_DOTA_GAMEMODE_XMAS          DOTA_GameMode = 9
	DOTA_GameMode_DOTA_GAMEMODE_TUTORIAL      DOTA_GameMode = 10
	DOTA_GameMode_DOTA_GAMEMODE_MO            DOTA_GameMode = 11
	DOTA_GameMode_DOTA_GAMEMODE_LP            DOTA_GameMode = 12
	DOTA_GameMode_DOTA_GAMEMODE_POOL1         DOTA_GameMode = 13
	DOTA_GameMode_DOTA_GAMEMODE_FH            DOTA_GameMode = 14
	DOTA_GameMode_DOTA_GAMEMODE_CUSTOM        DOTA_GameMode = 15
	DOTA_GameMode_DOTA_GAMEMODE_CD            DOTA_GameMode = 16
	DOTA_GameMode_DOTA_GAMEMODE_BD            DOTA_GameMode = 17
	DOTA_GameMode_DOTA_GAMEMODE_ABILITY_DRAFT DOTA_GameMode = 18
	DOTA_GameMode_DOTA_GAMEMODE_EVENT         DOTA_GameMode = 19
	DOTA_GameMode_DOTA_GAMEMODE_ARDM          DOTA_GameMode = 20
	DOTA_GameMode_DOTA_GAMEMODE_1V1MID        DOTA_GameMode = 21
	DOTA_GameMode_DOTA_GAMEMODE_ALL_DRAFT     DOTA_GameMode = 22
	DOTA_GameMode_DOTA_GAMEMODE_TURBO         DOTA_GameMode = 23
	DOTA_GameMode_DOTA_GAMEMODE_MUTATION      DOTA_GameMode = 24
)

var DOTA_GameMode_name = map[int32]string{
	0:  "DOTA_GAMEMODE_NONE",
	1:  "DOTA_GAMEMODE_AP",
	2:  "DOTA_GAMEMODE_CM",
	3:  "DOTA_GAMEMODE_RD",
	4:  "DOTA_GAMEMODE_SD",
	5:  "DOTA_GAMEMODE_AR",
	6:  "DOTA_GAMEMODE_INTRO",
	7:  "DOTA_GAMEMODE_HW",
	8:  "DOTA_GAMEMODE_REVERSE_CM",
	9:  "DOTA_GAMEMODE_XMAS",
	10: "DOTA_GAMEMODE_TUTORIAL",
	11: "DOTA_GAMEMODE_MO",
	12: "DOTA_GAMEMODE_LP",
	13: "DOTA_GAMEMODE_POOL1",
	14: "DOTA_GAMEMODE_FH",
	15: "DOTA_GAMEMODE_CUSTOM",
	16: "DOTA_GAMEMODE_CD",
	17: "DOTA_GAMEMODE_BD",
	18: "DOTA_GAMEMODE_ABILITY_DRAFT",
	19: "DOTA_GAMEMODE_EVENT",
	20: "DOTA_GAMEMODE_ARDM",
	21: "DOTA_GAMEMODE_1V1MID",
	22: "DOTA_GAMEMODE_ALL_DRAFT",
	23: "DOTA_GAMEMODE_TURBO",
	24: "DOTA_GAMEMODE_MUTATION",
}
var DOTA_GameMode_value = map[string]int32{
	"DOTA_GAMEMODE_NONE":          0,
	"DOTA_GAMEMODE_AP":            1,
	"DOTA_GAMEMODE_CM":            2,
	"DOTA_GAMEMODE_RD":            3,
	"DOTA_GAMEMODE_SD":            4,
	"DOTA_GAMEMODE_AR":            5,
	"DOTA_GAMEMODE_INTRO":         6,
	"DOTA_GAMEMODE_HW":            7,
	"DOTA_GAMEMODE_REVERSE_CM":    8,
	"DOTA_GAMEMODE_XMAS":          9,
	"DOTA_GAMEMODE_TUTORIAL":      10,
	"DOTA_GAMEMODE_MO":            11,
	"DOTA_GAMEMODE_LP":            12,
	"DOTA_GAMEMODE_POOL1":         13,
	"DOTA_GAMEMODE_FH":            14,
	"DOTA_GAMEMODE_CUSTOM":        15,
	"DOTA_GAMEMODE_CD":            16,
	"DOTA_GAMEMODE_BD":            17,
	"DOTA_GAMEMODE_ABILITY_DRAFT": 18,
	"DOTA_GAMEMODE_EVENT":         19,
	"DOTA_GAMEMODE_ARDM":          20,
	"DOTA_GAMEMODE_1V1MID":        21,
	"DOTA_GAMEMODE_ALL_DRAFT":     22,
	"DOTA_GAMEMODE_TURBO":         23,
	"DOTA_GAMEMODE_MUTATION":      24,
}

func (x DOTA_GameMode) Enum() *DOTA_GameMode {
	p := new(DOTA_GameMode)
	*p = x
	return p
}
func (x DOTA_GameMode) String() string {
	return proto.EnumName(DOTA_GameMode_name, int32(x))
}
func (x *DOTA_GameMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GameMode_value, data, "DOTA_GameMode")
	if err != nil {
		return err
	}
	*x = DOTA_GameMode(value)
	return nil
}
func (DOTA_GameMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{0}
}

type DOTA_GameState int32

const (
	DOTA_GameState_DOTA_GAMERULES_STATE_INIT                     DOTA_GameState = 0
	DOTA_GameState_DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD DOTA_GameState = 1
	DOTA_GameState_DOTA_GAMERULES_STATE_HERO_SELECTION           DOTA_GameState = 2
	DOTA_GameState_DOTA_GAMERULES_STATE_STRATEGY_TIME            DOTA_GameState = 3
	DOTA_GameState_DOTA_GAMERULES_STATE_PRE_GAME                 DOTA_GameState = 4
	DOTA_GameState_DOTA_GAMERULES_STATE_GAME_IN_PROGRESS         DOTA_GameState = 5
	DOTA_GameState_DOTA_GAMERULES_STATE_POST_GAME                DOTA_GameState = 6
	DOTA_GameState_DOTA_GAMERULES_STATE_DISCONNECT               DOTA_GameState = 7
	DOTA_GameState_DOTA_GAMERULES_STATE_TEAM_SHOWCASE            DOTA_GameState = 8
	DOTA_GameState_DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP        DOTA_GameState = 9
	DOTA_GameState_DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD     DOTA_GameState = 10
	DOTA_GameState_DOTA_GAMERULES_STATE_LAST                     DOTA_GameState = 11
)

var DOTA_GameState_name = map[int32]string{
	0:  "DOTA_GAMERULES_STATE_INIT",
	1:  "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
	2:  "DOTA_GAMERULES_STATE_HERO_SELECTION",
	3:  "DOTA_GAMERULES_STATE_STRATEGY_TIME",
	4:  "DOTA_GAMERULES_STATE_PRE_GAME",
	5:  "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
	6:  "DOTA_GAMERULES_STATE_POST_GAME",
	7:  "DOTA_GAMERULES_STATE_DISCONNECT",
	8:  "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
	9:  "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
	10: "DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD",
	11: "DOTA_GAMERULES_STATE_LAST",
}
var DOTA_GameState_value = map[string]int32{
	"DOTA_GAMERULES_STATE_INIT":                     0,
	"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD": 1,
	"DOTA_GAMERULES_STATE_HERO_SELECTION":           2,
	"DOTA_GAMERULES_STATE_STRATEGY_TIME":            3,
	"DOTA_GAMERULES_STATE_PRE_GAME":                 4,
	"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS":         5,
	"DOTA_GAMERULES_STATE_POST_GAME":                6,
	"DOTA_GAMERULES_STATE_DISCONNECT":               7,
	"DOTA_GAMERULES_STATE_TEAM_SHOWCASE":            8,
	"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP":        9,
	"DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD":     10,
	"DOTA_GAMERULES_STATE_LAST":                     11,
}

func (x DOTA_GameState) Enum() *DOTA_GameState {
	p := new(DOTA_GameState)
	*p = x
	return p
}
func (x DOTA_GameState) String() string {
	return proto.EnumName(DOTA_GameState_name, int32(x))
}
func (x *DOTA_GameState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GameState_value, data, "DOTA_GameState")
	if err != nil {
		return err
	}
	*x = DOTA_GameState(value)
	return nil
}
func (DOTA_GameState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{1}
}

type DOTA_GC_TEAM int32

const (
	DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS   DOTA_GC_TEAM = 0
	DOTA_GC_TEAM_DOTA_GC_TEAM_BAD_GUYS    DOTA_GC_TEAM = 1
	DOTA_GC_TEAM_DOTA_GC_TEAM_BROADCASTER DOTA_GC_TEAM = 2
	DOTA_GC_TEAM_DOTA_GC_TEAM_SPECTATOR   DOTA_GC_TEAM = 3
	DOTA_GC_TEAM_DOTA_GC_TEAM_PLAYER_POOL DOTA_GC_TEAM = 4
	DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM      DOTA_GC_TEAM = 5
)

var DOTA_GC_TEAM_name = map[int32]string{
	0: "DOTA_GC_TEAM_GOOD_GUYS",
	1: "DOTA_GC_TEAM_BAD_GUYS",
	2: "DOTA_GC_TEAM_BROADCASTER",
	3: "DOTA_GC_TEAM_SPECTATOR",
	4: "DOTA_GC_TEAM_PLAYER_POOL",
	5: "DOTA_GC_TEAM_NOTEAM",
}
var DOTA_GC_TEAM_value = map[string]int32{
	"DOTA_GC_TEAM_GOOD_GUYS":   0,
	"DOTA_GC_TEAM_BAD_GUYS":    1,
	"DOTA_GC_TEAM_BROADCASTER": 2,
	"DOTA_GC_TEAM_SPECTATOR":   3,
	"DOTA_GC_TEAM_PLAYER_POOL": 4,
	"DOTA_GC_TEAM_NOTEAM":      5,
}

func (x DOTA_GC_TEAM) Enum() *DOTA_GC_TEAM {
	p := new(DOTA_GC_TEAM)
	*p = x
	return p
}
func (x DOTA_GC_TEAM) String() string {
	return proto.EnumName(DOTA_GC_TEAM_name, int32(x))
}
func (x *DOTA_GC_TEAM) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GC_TEAM_value, data, "DOTA_GC_TEAM")
	if err != nil {
		return err
	}
	*x = DOTA_GC_TEAM(value)
	return nil
}
func (DOTA_GC_TEAM) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{2}
}

type EEvent int32

const (
	EEvent_EVENT_ID_NONE                    EEvent = 0
	EEvent_EVENT_ID_DIRETIDE                EEvent = 1
	EEvent_EVENT_ID_SPRING_FESTIVAL         EEvent = 2
	EEvent_EVENT_ID_FROSTIVUS_2013          EEvent = 3
	EEvent_EVENT_ID_COMPENDIUM_2014         EEvent = 4
	EEvent_EVENT_ID_PWRD_DAC_2015           EEvent = 6
	EEvent_EVENT_ID_NEW_BLOOM_2015          EEvent = 7
	EEvent_EVENT_ID_INTERNATIONAL_2015      EEvent = 8
	EEvent_EVENT_ID_FALL_MAJOR_2015         EEvent = 9
	EEvent_EVENT_ID_ORACLE_PA               EEvent = 10
	EEvent_EVENT_ID_NEW_BLOOM_2015_PREBEAST EEvent = 11
	EEvent_EVENT_ID_FROSTIVUS               EEvent = 12
	EEvent_EVENT_ID_WINTER_MAJOR_2016       EEvent = 13
	EEvent_EVENT_ID_INTERNATIONAL_2016      EEvent = 14
	EEvent_EVENT_ID_FALL_MAJOR_2016         EEvent = 15
	EEvent_EVENT_ID_WINTER_MAJOR_2017       EEvent = 16
	EEvent_EVENT_ID_NEW_BLOOM_2017          EEvent = 17
	EEvent_EVENT_ID_INTERNATIONAL_2017      EEvent = 18
	EEvent_EVENT_ID_PLUS_SUBSCRIPTION       EEvent = 19
	EEvent_EVENT_ID_SINGLES_DAY_2017        EEvent = 20
	EEvent_EVENT_ID_FROSTIVUS_2017          EEvent = 21
	EEvent_EVENT_ID_INTERNATIONAL_2018      EEvent = 22
	EEvent_EVENT_ID_FROSTIVUS_2018          EEvent = 23
	EEvent_EVENT_ID_NEW_BLOOM_2019          EEvent = 24
	EEvent_EVENT_ID_COUNT                   EEvent = 25
)

var EEvent_name = map[int32]string{
	0:  "EVENT_ID_NONE",
	1:  "EVENT_ID_DIRETIDE",
	2:  "EVENT_ID_SPRING_FESTIVAL",
	3:  "EVENT_ID_FROSTIVUS_2013",
	4:  "EVENT_ID_COMPENDIUM_2014",
	6:  "EVENT_ID_PWRD_DAC_2015",
	7:  "EVENT_ID_NEW_BLOOM_2015",
	8:  "EVENT_ID_INTERNATIONAL_2015",
	9:  "EVENT_ID_FALL_MAJOR_2015",
	10: "EVENT_ID_ORACLE_PA",
	11: "EVENT_ID_NEW_BLOOM_2015_PREBEAST",
	12: "EVENT_ID_FROSTIVUS",
	13: "EVENT_ID_WINTER_MAJOR_2016",
	14: "EVENT_ID_INTERNATIONAL_2016",
	15: "EVENT_ID_FALL_MAJOR_2016",
	16: "EVENT_ID_WINTER_MAJOR_2017",
	17: "EVENT_ID_NEW_BLOOM_2017",
	18: "EVENT_ID_INTERNATIONAL_2017",
	19: "EVENT_ID_PLUS_SUBSCRIPTION",
	20: "EVENT_ID_SINGLES_DAY_2017",
	21: "EVENT_ID_FROSTIVUS_2017",
	22: "EVENT_ID_INTERNATIONAL_2018",
	23: "EVENT_ID_FROSTIVUS_2018",
	24: "EVENT_ID_NEW_BLOOM_2019",
	25: "EVENT_ID_COUNT",
}
var EEvent_value = map[string]int32{
	"EVENT_ID_NONE":                    0,
	"EVENT_ID_DIRETIDE":                1,
	"EVENT_ID_SPRING_FESTIVAL":         2,
	"EVENT_ID_FROSTIVUS_2013":          3,
	"EVENT_ID_COMPENDIUM_2014":         4,
	"EVENT_ID_PWRD_DAC_2015":           6,
	"EVENT_ID_NEW_BLOOM_2015":          7,
	"EVENT_ID_INTERNATIONAL_2015":      8,
	"EVENT_ID_FALL_MAJOR_2015":         9,
	"EVENT_ID_ORACLE_PA":               10,
	"EVENT_ID_NEW_BLOOM_2015_PREBEAST": 11,
	"EVENT_ID_FROSTIVUS":               12,
	"EVENT_ID_WINTER_MAJOR_2016":       13,
	"EVENT_ID_INTERNATIONAL_2016":      14,
	"EVENT_ID_FALL_MAJOR_2016":         15,
	"EVENT_ID_WINTER_MAJOR_2017":       16,
	"EVENT_ID_NEW_BLOOM_2017":          17,
	"EVENT_ID_INTERNATIONAL_2017":      18,
	"EVENT_ID_PLUS_SUBSCRIPTION":       19,
	"EVENT_ID_SINGLES_DAY_2017":        20,
	"EVENT_ID_FROSTIVUS_2017":          21,
	"EVENT_ID_INTERNATIONAL_2018":      22,
	"EVENT_ID_FROSTIVUS_2018":          23,
	"EVENT_ID_NEW_BLOOM_2019":          24,
	"EVENT_ID_COUNT":                   25,
}

func (x EEvent) Enum() *EEvent {
	p := new(EEvent)
	*p = x
	return p
}
func (x EEvent) String() string {
	return proto.EnumName(EEvent_name, int32(x))
}
func (x *EEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EEvent_value, data, "EEvent")
	if err != nil {
		return err
	}
	*x = EEvent(value)
	return nil
}
func (EEvent) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{3}
}

type DOTALeaverStatusT int32

const (
	DOTALeaverStatusT_DOTA_LEAVER_NONE                     DOTALeaverStatusT = 0
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED             DOTALeaverStatusT = 1
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED_TOO_LONG    DOTALeaverStatusT = 2
	DOTALeaverStatusT_DOTA_LEAVER_ABANDONED                DOTALeaverStatusT = 3
	DOTALeaverStatusT_DOTA_LEAVER_AFK                      DOTALeaverStatusT = 4
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED          DOTALeaverStatusT = 5
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG DOTALeaverStatusT = 6
	DOTALeaverStatusT_DOTA_LEAVER_FAILED_TO_READY_UP       DOTALeaverStatusT = 7
	DOTALeaverStatusT_DOTA_LEAVER_DECLINED                 DOTALeaverStatusT = 8
)

var DOTALeaverStatusT_name = map[int32]string{
	0: "DOTA_LEAVER_NONE",
	1: "DOTA_LEAVER_DISCONNECTED",
	2: "DOTA_LEAVER_DISCONNECTED_TOO_LONG",
	3: "DOTA_LEAVER_ABANDONED",
	4: "DOTA_LEAVER_AFK",
	5: "DOTA_LEAVER_NEVER_CONNECTED",
	6: "DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG",
	7: "DOTA_LEAVER_FAILED_TO_READY_UP",
	8: "DOTA_LEAVER_DECLINED",
}
var DOTALeaverStatusT_value = map[string]int32{
	"DOTA_LEAVER_NONE":                     0,
	"DOTA_LEAVER_DISCONNECTED":             1,
	"DOTA_LEAVER_DISCONNECTED_TOO_LONG":    2,
	"DOTA_LEAVER_ABANDONED":                3,
	"DOTA_LEAVER_AFK":                      4,
	"DOTA_LEAVER_NEVER_CONNECTED":          5,
	"DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG": 6,
	"DOTA_LEAVER_FAILED_TO_READY_UP":       7,
	"DOTA_LEAVER_DECLINED":                 8,
}

func (x DOTALeaverStatusT) Enum() *DOTALeaverStatusT {
	p := new(DOTALeaverStatusT)
	*p = x
	return p
}
func (x DOTALeaverStatusT) String() string {
	return proto.EnumName(DOTALeaverStatusT_name, int32(x))
}
func (x *DOTALeaverStatusT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALeaverStatusT_value, data, "DOTALeaverStatusT")
	if err != nil {
		return err
	}
	*x = DOTALeaverStatusT(value)
	return nil
}
func (DOTALeaverStatusT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{4}
}

type DOTAConnectionStateT int32

const (
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_UNKNOWN           DOTAConnectionStateT = 0
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_NOT_YET_CONNECTED DOTAConnectionStateT = 1
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_CONNECTED         DOTAConnectionStateT = 2
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_DISCONNECTED      DOTAConnectionStateT = 3
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_ABANDONED         DOTAConnectionStateT = 4
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_LOADING           DOTAConnectionStateT = 5
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_FAILED            DOTAConnectionStateT = 6
)

var DOTAConnectionStateT_name = map[int32]string{
	0: "DOTA_CONNECTION_STATE_UNKNOWN",
	1: "DOTA_CONNECTION_STATE_NOT_YET_CONNECTED",
	2: "DOTA_CONNECTION_STATE_CONNECTED",
	3: "DOTA_CONNECTION_STATE_DISCONNECTED",
	4: "DOTA_CONNECTION_STATE_ABANDONED",
	5: "DOTA_CONNECTION_STATE_LOADING",
	6: "DOTA_CONNECTION_STATE_FAILED",
}
var DOTAConnectionStateT_value = map[string]int32{
	"DOTA_CONNECTION_STATE_UNKNOWN":           0,
	"DOTA_CONNECTION_STATE_NOT_YET_CONNECTED": 1,
	"DOTA_CONNECTION_STATE_CONNECTED":         2,
	"DOTA_CONNECTION_STATE_DISCONNECTED":      3,
	"DOTA_CONNECTION_STATE_ABANDONED":         4,
	"DOTA_CONNECTION_STATE_LOADING":           5,
	"DOTA_CONNECTION_STATE_FAILED":            6,
}

func (x DOTAConnectionStateT) Enum() *DOTAConnectionStateT {
	p := new(DOTAConnectionStateT)
	*p = x
	return p
}
func (x DOTAConnectionStateT) String() string {
	return proto.EnumName(DOTAConnectionStateT_name, int32(x))
}
func (x *DOTAConnectionStateT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAConnectionStateT_value, data, "DOTAConnectionStateT")
	if err != nil {
		return err
	}
	*x = DOTAConnectionStateT(value)
	return nil
}
func (DOTAConnectionStateT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{5}
}

type Fantasy_Roles int32

const (
	Fantasy_Roles_FANTASY_ROLE_UNDEFINED Fantasy_Roles = 0
	Fantasy_Roles_FANTASY_ROLE_CORE      Fantasy_Roles = 1
	Fantasy_Roles_FANTASY_ROLE_SUPPORT   Fantasy_Roles = 2
	Fantasy_Roles_FANTASY_ROLE_OFFLANE   Fantasy_Roles = 3
	Fantasy_Roles_FANTASY_ROLE_MID       Fantasy_Roles = 4
)

var Fantasy_Roles_name = map[int32]string{
	0: "FANTASY_ROLE_UNDEFINED",
	1: "FANTASY_ROLE_CORE",
	2: "FANTASY_ROLE_SUPPORT",
	3: "FANTASY_ROLE_OFFLANE",
	4: "FANTASY_ROLE_MID",
}
var Fantasy_Roles_value = map[string]int32{
	"FANTASY_ROLE_UNDEFINED": 0,
	"FANTASY_ROLE_CORE":      1,
	"FANTASY_ROLE_SUPPORT":   2,
	"FANTASY_ROLE_OFFLANE":   3,
	"FANTASY_ROLE_MID":       4,
}

func (x Fantasy_Roles) Enum() *Fantasy_Roles {
	p := new(Fantasy_Roles)
	*p = x
	return p
}
func (x Fantasy_Roles) String() string {
	return proto.EnumName(Fantasy_Roles_name, int32(x))
}
func (x *Fantasy_Roles) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Roles_value, data, "Fantasy_Roles")
	if err != nil {
		return err
	}
	*x = Fantasy_Roles(value)
	return nil
}
func (Fantasy_Roles) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{6}
}

type Fantasy_Team_Slots int32

const (
	Fantasy_Team_Slots_FANTASY_SLOT_NONE    Fantasy_Team_Slots = 0
	Fantasy_Team_Slots_FANTASY_SLOT_CORE    Fantasy_Team_Slots = 1
	Fantasy_Team_Slots_FANTASY_SLOT_SUPPORT Fantasy_Team_Slots = 2
	Fantasy_Team_Slots_FANTASY_SLOT_ANY     Fantasy_Team_Slots = 3
	Fantasy_Team_Slots_FANTASY_SLOT_BENCH   Fantasy_Team_Slots = 4
)

var Fantasy_Team_Slots_name = map[int32]string{
	0: "FANTASY_SLOT_NONE",
	1: "FANTASY_SLOT_CORE",
	2: "FANTASY_SLOT_SUPPORT",
	3: "FANTASY_SLOT_ANY",
	4: "FANTASY_SLOT_BENCH",
}
var Fantasy_Team_Slots_value = map[string]int32{
	"FANTASY_SLOT_NONE":    0,
	"FANTASY_SLOT_CORE":    1,
	"FANTASY_SLOT_SUPPORT": 2,
	"FANTASY_SLOT_ANY":     3,
	"FANTASY_SLOT_BENCH":   4,
}

func (x Fantasy_Team_Slots) Enum() *Fantasy_Team_Slots {
	p := new(Fantasy_Team_Slots)
	*p = x
	return p
}
func (x Fantasy_Team_Slots) String() string {
	return proto.EnumName(Fantasy_Team_Slots_name, int32(x))
}
func (x *Fantasy_Team_Slots) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Team_Slots_value, data, "Fantasy_Team_Slots")
	if err != nil {
		return err
	}
	*x = Fantasy_Team_Slots(value)
	return nil
}
func (Fantasy_Team_Slots) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{7}
}

type Fantasy_Selection_Mode int32

const (
	Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID        Fantasy_Selection_Mode = 0
	Fantasy_Selection_Mode_FANTASY_SELECTION_LOCKED         Fantasy_Selection_Mode = 1
	Fantasy_Selection_Mode_FANTASY_SELECTION_SHUFFLE        Fantasy_Selection_Mode = 2
	Fantasy_Selection_Mode_FANTASY_SELECTION_FREE_PICK      Fantasy_Selection_Mode = 3
	Fantasy_Selection_Mode_FANTASY_SELECTION_ENDED          Fantasy_Selection_Mode = 4
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_SEASON     Fantasy_Selection_Mode = 5
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_DRAFT      Fantasy_Selection_Mode = 6
	Fantasy_Selection_Mode_FANTASY_SELECTION_DRAFTING       Fantasy_Selection_Mode = 7
	Fantasy_Selection_Mode_FANTASY_SELECTION_REGULAR_SEASON Fantasy_Selection_Mode = 8
	Fantasy_Selection_Mode_FANTASY_SELECTION_CARD_BASED     Fantasy_Selection_Mode = 9
)

var Fantasy_Selection_Mode_name = map[int32]string{
	0: "FANTASY_SELECTION_INVALID",
	1: "FANTASY_SELECTION_LOCKED",
	2: "FANTASY_SELECTION_SHUFFLE",
	3: "FANTASY_SELECTION_FREE_PICK",
	4: "FANTASY_SELECTION_ENDED",
	5: "FANTASY_SELECTION_PRE_SEASON",
	6: "FANTASY_SELECTION_PRE_DRAFT",
	7: "FANTASY_SELECTION_DRAFTING",
	8: "FANTASY_SELECTION_REGULAR_SEASON",
	9: "FANTASY_SELECTION_CARD_BASED",
}
var Fantasy_Selection_Mode_value = map[string]int32{
	"FANTASY_SELECTION_INVALID":        0,
	"FANTASY_SELECTION_LOCKED":         1,
	"FANTASY_SELECTION_SHUFFLE":        2,
	"FANTASY_SELECTION_FREE_PICK":      3,
	"FANTASY_SELECTION_ENDED":          4,
	"FANTASY_SELECTION_PRE_SEASON":     5,
	"FANTASY_SELECTION_PRE_DRAFT":      6,
	"FANTASY_SELECTION_DRAFTING":       7,
	"FANTASY_SELECTION_REGULAR_SEASON": 8,
	"FANTASY_SELECTION_CARD_BASED":     9,
}

func (x Fantasy_Selection_Mode) Enum() *Fantasy_Selection_Mode {
	p := new(Fantasy_Selection_Mode)
	*p = x
	return p
}
func (x Fantasy_Selection_Mode) String() string {
	return proto.EnumName(Fantasy_Selection_Mode_name, int32(x))
}
func (x *Fantasy_Selection_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Selection_Mode_value, data, "Fantasy_Selection_Mode")
	if err != nil {
		return err
	}
	*x = Fantasy_Selection_Mode(value)
	return nil
}
func (Fantasy_Selection_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{8}
}

type DOTAChatChannelTypeT int32

const (
	DOTAChatChannelTypeT_DOTAChannelType_Regional      DOTAChatChannelTypeT = 0
	DOTAChatChannelTypeT_DOTAChannelType_Custom        DOTAChatChannelTypeT = 1
	DOTAChatChannelTypeT_DOTAChannelType_Party         DOTAChatChannelTypeT = 2
	DOTAChatChannelTypeT_DOTAChannelType_Lobby         DOTAChatChannelTypeT = 3
	DOTAChatChannelTypeT_DOTAChannelType_Team          DOTAChatChannelTypeT = 4
	DOTAChatChannelTypeT_DOTAChannelType_Guild         DOTAChatChannelTypeT = 5
	DOTAChatChannelTypeT_DOTAChannelType_Fantasy       DOTAChatChannelTypeT = 6
	DOTAChatChannelTypeT_DOTAChannelType_Whisper       DOTAChatChannelTypeT = 7
	DOTAChatChannelTypeT_DOTAChannelType_Console       DOTAChatChannelTypeT = 8
	DOTAChatChannelTypeT_DOTAChannelType_Tab           DOTAChatChannelTypeT = 9
	DOTAChatChannelTypeT_DOTAChannelType_Invalid       DOTAChatChannelTypeT = 10
	DOTAChatChannelTypeT_DOTAChannelType_GameAll       DOTAChatChannelTypeT = 11
	DOTAChatChannelTypeT_DOTAChannelType_GameAllies    DOTAChatChannelTypeT = 12
	DOTAChatChannelTypeT_DOTAChannelType_GameSpectator DOTAChatChannelTypeT = 13
	DOTAChatChannelTypeT_DOTAChannelType_Cafe          DOTAChatChannelTypeT = 15
	DOTAChatChannelTypeT_DOTAChannelType_CustomGame    DOTAChatChannelTypeT = 16
	DOTAChatChannelTypeT_DOTAChannelType_Private       DOTAChatChannelTypeT = 17
	DOTAChatChannelTypeT_DOTAChannelType_PostGame      DOTAChatChannelTypeT = 18
	DOTAChatChannelTypeT_DOTAChannelType_BattleCup     DOTAChatChannelTypeT = 19
	DOTAChatChannelTypeT_DOTAChannelType_HLTVSpectator DOTAChatChannelTypeT = 20
	DOTAChatChannelTypeT_DOTAChannelType_GameEvents    DOTAChatChannelTypeT = 21
	DOTAChatChannelTypeT_DOTAChannelType_Trivia        DOTAChatChannelTypeT = 22
)

var DOTAChatChannelTypeT_name = map[int32]string{
	0:  "DOTAChannelType_Regional",
	1:  "DOTAChannelType_Custom",
	2:  "DOTAChannelType_Party",
	3:  "DOTAChannelType_Lobby",
	4:  "DOTAChannelType_Team",
	5:  "DOTAChannelType_Guild",
	6:  "DOTAChannelType_Fantasy",
	7:  "DOTAChannelType_Whisper",
	8:  "DOTAChannelType_Console",
	9:  "DOTAChannelType_Tab",
	10: "DOTAChannelType_Invalid",
	11: "DOTAChannelType_GameAll",
	12: "DOTAChannelType_GameAllies",
	13: "DOTAChannelType_GameSpectator",
	15: "DOTAChannelType_Cafe",
	16: "DOTAChannelType_CustomGame",
	17: "DOTAChannelType_Private",
	18: "DOTAChannelType_PostGame",
	19: "DOTAChannelType_BattleCup",
	20: "DOTAChannelType_HLTVSpectator",
	21: "DOTAChannelType_GameEvents",
	22: "DOTAChannelType_Trivia",
}
var DOTAChatChannelTypeT_value = map[string]int32{
	"DOTAChannelType_Regional":      0,
	"DOTAChannelType_Custom":        1,
	"DOTAChannelType_Party":         2,
	"DOTAChannelType_Lobby":         3,
	"DOTAChannelType_Team":          4,
	"DOTAChannelType_Guild":         5,
	"DOTAChannelType_Fantasy":       6,
	"DOTAChannelType_Whisper":       7,
	"DOTAChannelType_Console":       8,
	"DOTAChannelType_Tab":           9,
	"DOTAChannelType_Invalid":       10,
	"DOTAChannelType_GameAll":       11,
	"DOTAChannelType_GameAllies":    12,
	"DOTAChannelType_GameSpectator": 13,
	"DOTAChannelType_Cafe":          15,
	"DOTAChannelType_CustomGame":    16,
	"DOTAChannelType_Private":       17,
	"DOTAChannelType_PostGame":      18,
	"DOTAChannelType_BattleCup":     19,
	"DOTAChannelType_HLTVSpectator": 20,
	"DOTAChannelType_GameEvents":    21,
	"DOTAChannelType_Trivia":        22,
}

func (x DOTAChatChannelTypeT) Enum() *DOTAChatChannelTypeT {
	p := new(DOTAChatChannelTypeT)
	*p = x
	return p
}
func (x DOTAChatChannelTypeT) String() string {
	return proto.EnumName(DOTAChatChannelTypeT_name, int32(x))
}
func (x *DOTAChatChannelTypeT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAChatChannelTypeT_value, data, "DOTAChatChannelTypeT")
	if err != nil {
		return err
	}
	*x = DOTAChatChannelTypeT(value)
	return nil
}
func (DOTAChatChannelTypeT) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{9}
}

type EProfileCardSlotType int32

const (
	EProfileCardSlotType_k_EProfileCardSlotType_Empty    EProfileCardSlotType = 0
	EProfileCardSlotType_k_EProfileCardSlotType_Stat     EProfileCardSlotType = 1
	EProfileCardSlotType_k_EProfileCardSlotType_Trophy   EProfileCardSlotType = 2
	EProfileCardSlotType_k_EProfileCardSlotType_Item     EProfileCardSlotType = 3
	EProfileCardSlotType_k_EProfileCardSlotType_Hero     EProfileCardSlotType = 4
	EProfileCardSlotType_k_EProfileCardSlotType_Emoticon EProfileCardSlotType = 5
	EProfileCardSlotType_k_EProfileCardSlotType_Team     EProfileCardSlotType = 6
)

var EProfileCardSlotType_name = map[int32]string{
	0: "k_EProfileCardSlotType_Empty",
	1: "k_EProfileCardSlotType_Stat",
	2: "k_EProfileCardSlotType_Trophy",
	3: "k_EProfileCardSlotType_Item",
	4: "k_EProfileCardSlotType_Hero",
	5: "k_EProfileCardSlotType_Emoticon",
	6: "k_EProfileCardSlotType_Team",
}
var EProfileCardSlotType_value = map[string]int32{
	"k_EProfileCardSlotType_Empty":    0,
	"k_EProfileCardSlotType_Stat":     1,
	"k_EProfileCardSlotType_Trophy":   2,
	"k_EProfileCardSlotType_Item":     3,
	"k_EProfileCardSlotType_Hero":     4,
	"k_EProfileCardSlotType_Emoticon": 5,
	"k_EProfileCardSlotType_Team":     6,
}

func (x EProfileCardSlotType) Enum() *EProfileCardSlotType {
	p := new(EProfileCardSlotType)
	*p = x
	return p
}
func (x EProfileCardSlotType) String() string {
	return proto.EnumName(EProfileCardSlotType_name, int32(x))
}
func (x *EProfileCardSlotType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProfileCardSlotType_value, data, "EProfileCardSlotType")
	if err != nil {
		return err
	}
	*x = EProfileCardSlotType(value)
	return nil
}
func (EProfileCardSlotType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{10}
}

type EMatchGroupServerStatus int32

const (
	EMatchGroupServerStatus_k_EMatchGroupServerStatus_OK                  EMatchGroupServerStatus = 0
	EMatchGroupServerStatus_k_EMatchGroupServerStatus_LimitedAvailability EMatchGroupServerStatus = 1
	EMatchGroupServerStatus_k_EMatchGroupServerStatus_Offline             EMatchGroupServerStatus = 2
)

var EMatchGroupServerStatus_name = map[int32]string{
	0: "k_EMatchGroupServerStatus_OK",
	1: "k_EMatchGroupServerStatus_LimitedAvailability",
	2: "k_EMatchGroupServerStatus_Offline",
}
var EMatchGroupServerStatus_value = map[string]int32{
	"k_EMatchGroupServerStatus_OK":                  0,
	"k_EMatchGroupServerStatus_LimitedAvailability": 1,
	"k_EMatchGroupServerStatus_Offline":             2,
}

func (x EMatchGroupServerStatus) Enum() *EMatchGroupServerStatus {
	p := new(EMatchGroupServerStatus)
	*p = x
	return p
}
func (x EMatchGroupServerStatus) String() string {
	return proto.EnumName(EMatchGroupServerStatus_name, int32(x))
}
func (x *EMatchGroupServerStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EMatchGroupServerStatus_value, data, "EMatchGroupServerStatus")
	if err != nil {
		return err
	}
	*x = EMatchGroupServerStatus(value)
	return nil
}
func (EMatchGroupServerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{11}
}

type DOTA_CM_PICK int32

const (
	DOTA_CM_PICK_DOTA_CM_RANDOM    DOTA_CM_PICK = 0
	DOTA_CM_PICK_DOTA_CM_GOOD_GUYS DOTA_CM_PICK = 1
	DOTA_CM_PICK_DOTA_CM_BAD_GUYS  DOTA_CM_PICK = 2
)

var DOTA_CM_PICK_name = map[int32]string{
	0: "DOTA_CM_RANDOM",
	1: "DOTA_CM_GOOD_GUYS",
	2: "DOTA_CM_BAD_GUYS",
}
var DOTA_CM_PICK_value = map[string]int32{
	"DOTA_CM_RANDOM":    0,
	"DOTA_CM_GOOD_GUYS": 1,
	"DOTA_CM_BAD_GUYS":  2,
}

func (x DOTA_CM_PICK) Enum() *DOTA_CM_PICK {
	p := new(DOTA_CM_PICK)
	*p = x
	return p
}
func (x DOTA_CM_PICK) String() string {
	return proto.EnumName(DOTA_CM_PICK_name, int32(x))
}
func (x *DOTA_CM_PICK) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_CM_PICK_value, data, "DOTA_CM_PICK")
	if err != nil {
		return err
	}
	*x = DOTA_CM_PICK(value)
	return nil
}
func (DOTA_CM_PICK) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{12}
}

type DOTALowPriorityBanType int32

const (
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_ABANDON           DOTALowPriorityBanType = 0
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_REPORTS           DOTALowPriorityBanType = 1
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON DOTALowPriorityBanType = 2
)

var DOTALowPriorityBanType_name = map[int32]string{
	0: "DOTA_LOW_PRIORITY_BAN_ABANDON",
	1: "DOTA_LOW_PRIORITY_BAN_REPORTS",
	2: "DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON",
}
var DOTALowPriorityBanType_value = map[string]int32{
	"DOTA_LOW_PRIORITY_BAN_ABANDON":           0,
	"DOTA_LOW_PRIORITY_BAN_REPORTS":           1,
	"DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON": 2,
}

func (x DOTALowPriorityBanType) Enum() *DOTALowPriorityBanType {
	p := new(DOTALowPriorityBanType)
	*p = x
	return p
}
func (x DOTALowPriorityBanType) String() string {
	return proto.EnumName(DOTALowPriorityBanType_name, int32(x))
}
func (x *DOTALowPriorityBanType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALowPriorityBanType_value, data, "DOTALowPriorityBanType")
	if err != nil {
		return err
	}
	*x = DOTALowPriorityBanType(value)
	return nil
}
func (DOTALowPriorityBanType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{13}
}

type DOTALobbyReadyState int32

const (
	DOTALobbyReadyState_DOTALobbyReadyState_UNDECLARED DOTALobbyReadyState = 0
	DOTALobbyReadyState_DOTALobbyReadyState_ACCEPTED   DOTALobbyReadyState = 1
	DOTALobbyReadyState_DOTALobbyReadyState_DECLINED   DOTALobbyReadyState = 2
)

var DOTALobbyReadyState_name = map[int32]string{
	0: "DOTALobbyReadyState_UNDECLARED",
	1: "DOTALobbyReadyState_ACCEPTED",
	2: "DOTALobbyReadyState_DECLINED",
}
var DOTALobbyReadyState_value = map[string]int32{
	"DOTALobbyReadyState_UNDECLARED": 0,
	"DOTALobbyReadyState_ACCEPTED":   1,
	"DOTALobbyReadyState_DECLINED":   2,
}

func (x DOTALobbyReadyState) Enum() *DOTALobbyReadyState {
	p := new(DOTALobbyReadyState)
	*p = x
	return p
}
func (x DOTALobbyReadyState) String() string {
	return proto.EnumName(DOTALobbyReadyState_name, int32(x))
}
func (x *DOTALobbyReadyState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALobbyReadyState_value, data, "DOTALobbyReadyState")
	if err != nil {
		return err
	}
	*x = DOTALobbyReadyState(value)
	return nil
}
func (DOTALobbyReadyState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{14}
}

type DOTAGameVersion int32

const (
	DOTAGameVersion_GAME_VERSION_CURRENT DOTAGameVersion = 0
	DOTAGameVersion_GAME_VERSION_STABLE  DOTAGameVersion = 1
)

var DOTAGameVersion_name = map[int32]string{
	0: "GAME_VERSION_CURRENT",
	1: "GAME_VERSION_STABLE",
}
var DOTAGameVersion_value = map[string]int32{
	"GAME_VERSION_CURRENT": 0,
	"GAME_VERSION_STABLE":  1,
}

func (x DOTAGameVersion) Enum() *DOTAGameVersion {
	p := new(DOTAGameVersion)
	*p = x
	return p
}
func (x DOTAGameVersion) String() string {
	return proto.EnumName(DOTAGameVersion_name, int32(x))
}
func (x *DOTAGameVersion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAGameVersion_value, data, "DOTAGameVersion")
	if err != nil {
		return err
	}
	*x = DOTAGameVersion(value)
	return nil
}
func (DOTAGameVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{15}
}

type DOTAJoinLobbyResult int32

const (
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS                       DOTAJoinLobbyResult = 0
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_ALREADY_IN_GAME               DOTAJoinLobbyResult = 1
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INVALID_LOBBY                 DOTAJoinLobbyResult = 2
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INCORRECT_PASSWORD            DOTAJoinLobbyResult = 3
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_ACCESS_DENIED                 DOTAJoinLobbyResult = 4
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_GENERIC_ERROR                 DOTAJoinLobbyResult = 5
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INCORRECT_VERSION             DOTAJoinLobbyResult = 6
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_IN_TEAM_PARTY                 DOTAJoinLobbyResult = 7
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_NO_LOBBY_FOUND                DOTAJoinLobbyResult = 8
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_LOBBY_FULL                    DOTAJoinLobbyResult = 9
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION DOTAJoinLobbyResult = 10
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_TIMEOUT                       DOTAJoinLobbyResult = 11
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN          DOTAJoinLobbyResult = 12
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_BUSY                          DOTAJoinLobbyResult = 13
)

var DOTAJoinLobbyResult_name = map[int32]string{
	0:  "DOTA_JOIN_RESULT_SUCCESS",
	1:  "DOTA_JOIN_RESULT_ALREADY_IN_GAME",
	2:  "DOTA_JOIN_RESULT_INVALID_LOBBY",
	3:  "DOTA_JOIN_RESULT_INCORRECT_PASSWORD",
	4:  "DOTA_JOIN_RESULT_ACCESS_DENIED",
	5:  "DOTA_JOIN_RESULT_GENERIC_ERROR",
	6:  "DOTA_JOIN_RESULT_INCORRECT_VERSION",
	7:  "DOTA_JOIN_RESULT_IN_TEAM_PARTY",
	8:  "DOTA_JOIN_RESULT_NO_LOBBY_FOUND",
	9:  "DOTA_JOIN_RESULT_LOBBY_FULL",
	10: "DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION",
	11: "DOTA_JOIN_RESULT_TIMEOUT",
	12: "DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN",
	13: "DOTA_JOIN_RESULT_BUSY",
}
var DOTAJoinLobbyResult_value = map[string]int32{
	"DOTA_JOIN_RESULT_SUCCESS":                       0,
	"DOTA_JOIN_RESULT_ALREADY_IN_GAME":               1,
	"DOTA_JOIN_RESULT_INVALID_LOBBY":                 2,
	"DOTA_JOIN_RESULT_INCORRECT_PASSWORD":            3,
	"DOTA_JOIN_RESULT_ACCESS_DENIED":                 4,
	"DOTA_JOIN_RESULT_GENERIC_ERROR":                 5,
	"DOTA_JOIN_RESULT_INCORRECT_VERSION":             6,
	"DOTA_JOIN_RESULT_IN_TEAM_PARTY":                 7,
	"DOTA_JOIN_RESULT_NO_LOBBY_FOUND":                8,
	"DOTA_JOIN_RESULT_LOBBY_FULL":                    9,
	"DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION": 10,
	"DOTA_JOIN_RESULT_TIMEOUT":                       11,
	"DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN":          12,
	"DOTA_JOIN_RESULT_BUSY":                          13,
}

func (x DOTAJoinLobbyResult) Enum() *DOTAJoinLobbyResult {
	p := new(DOTAJoinLobbyResult)
	*p = x
	return p
}
func (x DOTAJoinLobbyResult) String() string {
	return proto.EnumName(DOTAJoinLobbyResult_name, int32(x))
}
func (x *DOTAJoinLobbyResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAJoinLobbyResult_value, data, "DOTAJoinLobbyResult")
	if err != nil {
		return err
	}
	*x = DOTAJoinLobbyResult(value)
	return nil
}
func (DOTAJoinLobbyResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{16}
}

type DOTASelectionPriorityRules int32

const (
	DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual    DOTASelectionPriorityRules = 0
	DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Automatic DOTASelectionPriorityRules = 1
)

var DOTASelectionPriorityRules_name = map[int32]string{
	0: "k_DOTASelectionPriorityRules_Manual",
	1: "k_DOTASelectionPriorityRules_Automatic",
}
var DOTASelectionPriorityRules_value = map[string]int32{
	"k_DOTASelectionPriorityRules_Manual":    0,
	"k_DOTASelectionPriorityRules_Automatic": 1,
}

func (x DOTASelectionPriorityRules) Enum() *DOTASelectionPriorityRules {
	p := new(DOTASelectionPriorityRules)
	*p = x
	return p
}
func (x DOTASelectionPriorityRules) String() string {
	return proto.EnumName(DOTASelectionPriorityRules_name, int32(x))
}
func (x *DOTASelectionPriorityRules) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTASelectionPriorityRules_value, data, "DOTASelectionPriorityRules")
	if err != nil {
		return err
	}
	*x = DOTASelectionPriorityRules(value)
	return nil
}
func (DOTASelectionPriorityRules) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{17}
}

type DOTASelectionPriorityChoice int32

const (
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid    DOTASelectionPriorityChoice = 0
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_FirstPick  DOTASelectionPriorityChoice = 1
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_SecondPick DOTASelectionPriorityChoice = 2
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Radiant    DOTASelectionPriorityChoice = 3
	DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Dire       DOTASelectionPriorityChoice = 4
)

var DOTASelectionPriorityChoice_name = map[int32]string{
	0: "k_DOTASelectionPriorityChoice_Invalid",
	1: "k_DOTASelectionPriorityChoice_FirstPick",
	2: "k_DOTASelectionPriorityChoice_SecondPick",
	3: "k_DOTASelectionPriorityChoice_Radiant",
	4: "k_DOTASelectionPriorityChoice_Dire",
}
var DOTASelectionPriorityChoice_value = map[string]int32{
	"k_DOTASelectionPriorityChoice_Invalid":    0,
	"k_DOTASelectionPriorityChoice_FirstPick":  1,
	"k_DOTASelectionPriorityChoice_SecondPick": 2,
	"k_DOTASelectionPriorityChoice_Radiant":    3,
	"k_DOTASelectionPriorityChoice_Dire":       4,
}

func (x DOTASelectionPriorityChoice) Enum() *DOTASelectionPriorityChoice {
	p := new(DOTASelectionPriorityChoice)
	*p = x
	return p
}
func (x DOTASelectionPriorityChoice) String() string {
	return proto.EnumName(DOTASelectionPriorityChoice_name, int32(x))
}
func (x *DOTASelectionPriorityChoice) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTASelectionPriorityChoice_value, data, "DOTASelectionPriorityChoice")
	if err != nil {
		return err
	}
	*x = DOTASelectionPriorityChoice(value)
	return nil
}
func (DOTASelectionPriorityChoice) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{18}
}

type DOTAMatchVote int32

const (
	DOTAMatchVote_DOTAMatchVote_INVALID  DOTAMatchVote = 0
	DOTAMatchVote_DOTAMatchVote_POSITIVE DOTAMatchVote = 1
	DOTAMatchVote_DOTAMatchVote_NEGATIVE DOTAMatchVote = 2
)

var DOTAMatchVote_name = map[int32]string{
	0: "DOTAMatchVote_INVALID",
	1: "DOTAMatchVote_POSITIVE",
	2: "DOTAMatchVote_NEGATIVE",
}
var DOTAMatchVote_value = map[string]int32{
	"DOTAMatchVote_INVALID":  0,
	"DOTAMatchVote_POSITIVE": 1,
	"DOTAMatchVote_NEGATIVE": 2,
}

func (x DOTAMatchVote) Enum() *DOTAMatchVote {
	p := new(DOTAMatchVote)
	*p = x
	return p
}
func (x DOTAMatchVote) String() string {
	return proto.EnumName(DOTAMatchVote_name, int32(x))
}
func (x *DOTAMatchVote) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAMatchVote_value, data, "DOTAMatchVote")
	if err != nil {
		return err
	}
	*x = DOTAMatchVote(value)
	return nil
}
func (DOTAMatchVote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{19}
}

type DOTA_LobbyMemberXPBonus int32

const (
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_DEFAULT        DOTA_LobbyMemberXPBonus = 0
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER DOTA_LobbyMemberXPBonus = 1
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_SHARE_BONUS    DOTA_LobbyMemberXPBonus = 2
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_PARTY          DOTA_LobbyMemberXPBonus = 3
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_RECRUITMENT    DOTA_LobbyMemberXPBonus = 4
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_PCBANG         DOTA_LobbyMemberXPBonus = 5
)

var DOTA_LobbyMemberXPBonus_name = map[int32]string{
	0: "DOTA_LobbyMemberXPBonus_DEFAULT",
	1: "DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER",
	2: "DOTA_LobbyMemberXPBonus_SHARE_BONUS",
	3: "DOTA_LobbyMemberXPBonus_PARTY",
	4: "DOTA_LobbyMemberXPBonus_RECRUITMENT",
	5: "DOTA_LobbyMemberXPBonus_PCBANG",
}
var DOTA_LobbyMemberXPBonus_value = map[string]int32{
	"DOTA_LobbyMemberXPBonus_DEFAULT":        0,
	"DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER": 1,
	"DOTA_LobbyMemberXPBonus_SHARE_BONUS":    2,
	"DOTA_LobbyMemberXPBonus_PARTY":          3,
	"DOTA_LobbyMemberXPBonus_RECRUITMENT":    4,
	"DOTA_LobbyMemberXPBonus_PCBANG":         5,
}

func (x DOTA_LobbyMemberXPBonus) Enum() *DOTA_LobbyMemberXPBonus {
	p := new(DOTA_LobbyMemberXPBonus)
	*p = x
	return p
}
func (x DOTA_LobbyMemberXPBonus) String() string {
	return proto.EnumName(DOTA_LobbyMemberXPBonus_name, int32(x))
}
func (x *DOTA_LobbyMemberXPBonus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_LobbyMemberXPBonus_value, data, "DOTA_LobbyMemberXPBonus")
	if err != nil {
		return err
	}
	*x = DOTA_LobbyMemberXPBonus(value)
	return nil
}
func (DOTA_LobbyMemberXPBonus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{20}
}

type DOTALobbyVisibility int32

const (
	DOTALobbyVisibility_DOTALobbyVisibility_Public   DOTALobbyVisibility = 0
	DOTALobbyVisibility_DOTALobbyVisibility_Friends  DOTALobbyVisibility = 1
	DOTALobbyVisibility_DOTALobbyVisibility_Unlisted DOTALobbyVisibility = 2
)

var DOTALobbyVisibility_name = map[int32]string{
	0: "DOTALobbyVisibility_Public",
	1: "DOTALobbyVisibility_Friends",
	2: "DOTALobbyVisibility_Unlisted",
}
var DOTALobbyVisibility_value = map[string]int32{
	"DOTALobbyVisibility_Public":   0,
	"DOTALobbyVisibility_Friends":  1,
	"DOTALobbyVisibility_Unlisted": 2,
}

func (x DOTALobbyVisibility) Enum() *DOTALobbyVisibility {
	p := new(DOTALobbyVisibility)
	*p = x
	return p
}
func (x DOTALobbyVisibility) String() string {
	return proto.EnumName(DOTALobbyVisibility_name, int32(x))
}
func (x *DOTALobbyVisibility) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALobbyVisibility_value, data, "DOTALobbyVisibility")
	if err != nil {
		return err
	}
	*x = DOTALobbyVisibility(value)
	return nil
}
func (DOTALobbyVisibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{21}
}

type EDOTAPlayerMMRType int32

const (
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_Invalid               EDOTAPlayerMMRType = 0
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralHidden         EDOTAPlayerMMRType = 1
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralCompetitive    EDOTAPlayerMMRType = 3
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_SoloCompetitive       EDOTAPlayerMMRType = 4
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_1v1Competitive_UNUSED EDOTAPlayerMMRType = 5
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralSeasonalRanked EDOTAPlayerMMRType = 6
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_SoloSeasonalRanked    EDOTAPlayerMMRType = 7
)

var EDOTAPlayerMMRType_name = map[int32]string{
	0: "k_EDOTAPlayerMMRType_Invalid",
	1: "k_EDOTAPlayerMMRType_GeneralHidden",
	3: "k_EDOTAPlayerMMRType_GeneralCompetitive",
	4: "k_EDOTAPlayerMMRType_SoloCompetitive",
	5: "k_EDOTAPlayerMMRType_1v1Competitive_UNUSED",
	6: "k_EDOTAPlayerMMRType_GeneralSeasonalRanked",
	7: "k_EDOTAPlayerMMRType_SoloSeasonalRanked",
}
var EDOTAPlayerMMRType_value = map[string]int32{
	"k_EDOTAPlayerMMRType_Invalid":               0,
	"k_EDOTAPlayerMMRType_GeneralHidden":         1,
	"k_EDOTAPlayerMMRType_GeneralCompetitive":    3,
	"k_EDOTAPlayerMMRType_SoloCompetitive":       4,
	"k_EDOTAPlayerMMRType_1v1Competitive_UNUSED": 5,
	"k_EDOTAPlayerMMRType_GeneralSeasonalRanked": 6,
	"k_EDOTAPlayerMMRType_SoloSeasonalRanked":    7,
}

func (x EDOTAPlayerMMRType) Enum() *EDOTAPlayerMMRType {
	p := new(EDOTAPlayerMMRType)
	*p = x
	return p
}
func (x EDOTAPlayerMMRType) String() string {
	return proto.EnumName(EDOTAPlayerMMRType_name, int32(x))
}
func (x *EDOTAPlayerMMRType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAPlayerMMRType_value, data, "EDOTAPlayerMMRType")
	if err != nil {
		return err
	}
	*x = EDOTAPlayerMMRType(value)
	return nil
}
func (EDOTAPlayerMMRType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{22}
}

type MatchType int32

const (
	MatchType_MATCH_TYPE_CASUAL            MatchType = 0
	MatchType_MATCH_TYPE_COOP_BOTS         MatchType = 1
	MatchType_MATCH_TYPE_TEAM_RANKED       MatchType = 2
	MatchType_MATCH_TYPE_LEGACY_SOLO_QUEUE MatchType = 3
	MatchType_MATCH_TYPE_COMPETITIVE       MatchType = 4
	MatchType_MATCH_TYPE_WEEKEND_TOURNEY   MatchType = 5
	MatchType_MATCH_TYPE_CASUAL_1V1        MatchType = 6
	MatchType_MATCH_TYPE_EVENT             MatchType = 7
	MatchType_MATCH_TYPE_SEASONAL_RANKED   MatchType = 8
	MatchType_MATCH_TYPE_LOWPRI_DEPRECATED MatchType = 9
	MatchType_MATCH_TYPE_STEAM_GROUP       MatchType = 10
	MatchType_MATCH_TYPE_MUTATION          MatchType = 11
)

var MatchType_name = map[int32]string{
	0:  "MATCH_TYPE_CASUAL",
	1:  "MATCH_TYPE_COOP_BOTS",
	2:  "MATCH_TYPE_TEAM_RANKED",
	3:  "MATCH_TYPE_LEGACY_SOLO_QUEUE",
	4:  "MATCH_TYPE_COMPETITIVE",
	5:  "MATCH_TYPE_WEEKEND_TOURNEY",
	6:  "MATCH_TYPE_CASUAL_1V1",
	7:  "MATCH_TYPE_EVENT",
	8:  "MATCH_TYPE_SEASONAL_RANKED",
	9:  "MATCH_TYPE_LOWPRI_DEPRECATED",
	10: "MATCH_TYPE_STEAM_GROUP",
	11: "MATCH_TYPE_MUTATION",
}
var MatchType_value = map[string]int32{
	"MATCH_TYPE_CASUAL":            0,
	"MATCH_TYPE_COOP_BOTS":         1,
	"MATCH_TYPE_TEAM_RANKED":       2,
	"MATCH_TYPE_LEGACY_SOLO_QUEUE": 3,
	"MATCH_TYPE_COMPETITIVE":       4,
	"MATCH_TYPE_WEEKEND_TOURNEY":   5,
	"MATCH_TYPE_CASUAL_1V1":        6,
	"MATCH_TYPE_EVENT":             7,
	"MATCH_TYPE_SEASONAL_RANKED":   8,
	"MATCH_TYPE_LOWPRI_DEPRECATED": 9,
	"MATCH_TYPE_STEAM_GROUP":       10,
	"MATCH_TYPE_MUTATION":          11,
}

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}
func (x MatchType) String() string {
	return proto.EnumName(MatchType_name, int32(x))
}
func (x *MatchType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatchType_value, data, "MatchType")
	if err != nil {
		return err
	}
	*x = MatchType(value)
	return nil
}
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{23}
}

type DOTABotDifficulty int32

const (
	DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE DOTABotDifficulty = 0
	DOTABotDifficulty_BOT_DIFFICULTY_EASY    DOTABotDifficulty = 1
	DOTABotDifficulty_BOT_DIFFICULTY_MEDIUM  DOTABotDifficulty = 2
	DOTABotDifficulty_BOT_DIFFICULTY_HARD    DOTABotDifficulty = 3
	DOTABotDifficulty_BOT_DIFFICULTY_UNFAIR  DOTABotDifficulty = 4
	DOTABotDifficulty_BOT_DIFFICULTY_INVALID DOTABotDifficulty = 5
	DOTABotDifficulty_BOT_DIFFICULTY_EXTRA1  DOTABotDifficulty = 6
	DOTABotDifficulty_BOT_DIFFICULTY_EXTRA2  DOTABotDifficulty = 7
	DOTABotDifficulty_BOT_DIFFICULTY_EXTRA3  DOTABotDifficulty = 8
)

var DOTABotDifficulty_name = map[int32]string{
	0: "BOT_DIFFICULTY_PASSIVE",
	1: "BOT_DIFFICULTY_EASY",
	2: "BOT_DIFFICULTY_MEDIUM",
	3: "BOT_DIFFICULTY_HARD",
	4: "BOT_DIFFICULTY_UNFAIR",
	5: "BOT_DIFFICULTY_INVALID",
	6: "BOT_DIFFICULTY_EXTRA1",
	7: "BOT_DIFFICULTY_EXTRA2",
	8: "BOT_DIFFICULTY_EXTRA3",
}
var DOTABotDifficulty_value = map[string]int32{
	"BOT_DIFFICULTY_PASSIVE": 0,
	"BOT_DIFFICULTY_EASY":    1,
	"BOT_DIFFICULTY_MEDIUM":  2,
	"BOT_DIFFICULTY_HARD":    3,
	"BOT_DIFFICULTY_UNFAIR":  4,
	"BOT_DIFFICULTY_INVALID": 5,
	"BOT_DIFFICULTY_EXTRA1":  6,
	"BOT_DIFFICULTY_EXTRA2":  7,
	"BOT_DIFFICULTY_EXTRA3":  8,
}

func (x DOTABotDifficulty) Enum() *DOTABotDifficulty {
	p := new(DOTABotDifficulty)
	*p = x
	return p
}
func (x DOTABotDifficulty) String() string {
	return proto.EnumName(DOTABotDifficulty_name, int32(x))
}
func (x *DOTABotDifficulty) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTABotDifficulty_value, data, "DOTABotDifficulty")
	if err != nil {
		return err
	}
	*x = DOTABotDifficulty(value)
	return nil
}
func (DOTABotDifficulty) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{24}
}

type DOTA_BOT_MODE int32

const (
	DOTA_BOT_MODE_DOTA_BOT_MODE_NONE                 DOTA_BOT_MODE = 0
	DOTA_BOT_MODE_DOTA_BOT_MODE_LANING               DOTA_BOT_MODE = 1
	DOTA_BOT_MODE_DOTA_BOT_MODE_ATTACK               DOTA_BOT_MODE = 2
	DOTA_BOT_MODE_DOTA_BOT_MODE_ROAM                 DOTA_BOT_MODE = 3
	DOTA_BOT_MODE_DOTA_BOT_MODE_RETREAT              DOTA_BOT_MODE = 4
	DOTA_BOT_MODE_DOTA_BOT_MODE_SECRET_SHOP          DOTA_BOT_MODE = 5
	DOTA_BOT_MODE_DOTA_BOT_MODE_SIDE_SHOP            DOTA_BOT_MODE = 6
	DOTA_BOT_MODE_DOTA_BOT_MODE_RUNE                 DOTA_BOT_MODE = 7
	DOTA_BOT_MODE_DOTA_BOT_MODE_PUSH_TOWER_TOP       DOTA_BOT_MODE = 8
	DOTA_BOT_MODE_DOTA_BOT_MODE_PUSH_TOWER_MID       DOTA_BOT_MODE = 9
	DOTA_BOT_MODE_DOTA_BOT_MODE_PUSH_TOWER_BOT       DOTA_BOT_MODE = 10
	DOTA_BOT_MODE_DOTA_BOT_MODE_DEFEND_TOWER_TOP     DOTA_BOT_MODE = 11
	DOTA_BOT_MODE_DOTA_BOT_MODE_DEFEND_TOWER_MID     DOTA_BOT_MODE = 12
	DOTA_BOT_MODE_DOTA_BOT_MODE_DEFEND_TOWER_BOT     DOTA_BOT_MODE = 13
	DOTA_BOT_MODE_DOTA_BOT_MODE_ASSEMBLE             DOTA_BOT_MODE = 14
	DOTA_BOT_MODE_DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS DOTA_BOT_MODE = 15
	DOTA_BOT_MODE_DOTA_BOT_MODE_TEAM_ROAM            DOTA_BOT_MODE = 16
	DOTA_BOT_MODE_DOTA_BOT_MODE_FARM                 DOTA_BOT_MODE = 17
	DOTA_BOT_MODE_DOTA_BOT_MODE_DEFEND_ALLY          DOTA_BOT_MODE = 18
	DOTA_BOT_MODE_DOTA_BOT_MODE_EVASIVE_MANEUVERS    DOTA_BOT_MODE = 19
	DOTA_BOT_MODE_DOTA_BOT_MODE_ROSHAN               DOTA_BOT_MODE = 20
	DOTA_BOT_MODE_DOTA_BOT_MODE_ITEM                 DOTA_BOT_MODE = 21
	DOTA_BOT_MODE_DOTA_BOT_MODE_WARD                 DOTA_BOT_MODE = 22
	DOTA_BOT_MODE_DOTA_BOT_MODE_COMPANION            DOTA_BOT_MODE = 23
	DOTA_BOT_MODE_DOTA_BOT_MODE_TUTORIAL_BOSS        DOTA_BOT_MODE = 24
	DOTA_BOT_MODE_DOTA_BOT_MODE_MINION               DOTA_BOT_MODE = 25
)

var DOTA_BOT_MODE_name = map[int32]string{
	0:  "DOTA_BOT_MODE_NONE",
	1:  "DOTA_BOT_MODE_LANING",
	2:  "DOTA_BOT_MODE_ATTACK",
	3:  "DOTA_BOT_MODE_ROAM",
	4:  "DOTA_BOT_MODE_RETREAT",
	5:  "DOTA_BOT_MODE_SECRET_SHOP",
	6:  "DOTA_BOT_MODE_SIDE_SHOP",
	7:  "DOTA_BOT_MODE_RUNE",
	8:  "DOTA_BOT_MODE_PUSH_TOWER_TOP",
	9:  "DOTA_BOT_MODE_PUSH_TOWER_MID",
	10: "DOTA_BOT_MODE_PUSH_TOWER_BOT",
	11: "DOTA_BOT_MODE_DEFEND_TOWER_TOP",
	12: "DOTA_BOT_MODE_DEFEND_TOWER_MID",
	13: "DOTA_BOT_MODE_DEFEND_TOWER_BOT",
	14: "DOTA_BOT_MODE_ASSEMBLE",
	15: "DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS",
	16: "DOTA_BOT_MODE_TEAM_ROAM",
	17: "DOTA_BOT_MODE_FARM",
	18: "DOTA_BOT_MODE_DEFEND_ALLY",
	19: "DOTA_BOT_MODE_EVASIVE_MANEUVERS",
	20: "DOTA_BOT_MODE_ROSHAN",
	21: "DOTA_BOT_MODE_ITEM",
	22: "DOTA_BOT_MODE_WARD",
	23: "DOTA_BOT_MODE_COMPANION",
	24: "DOTA_BOT_MODE_TUTORIAL_BOSS",
	25: "DOTA_BOT_MODE_MINION",
}
var DOTA_BOT_MODE_value = map[string]int32{
	"DOTA_BOT_MODE_NONE":                 0,
	"DOTA_BOT_MODE_LANING":               1,
	"DOTA_BOT_MODE_ATTACK":               2,
	"DOTA_BOT_MODE_ROAM":                 3,
	"DOTA_BOT_MODE_RETREAT":              4,
	"DOTA_BOT_MODE_SECRET_SHOP":          5,
	"DOTA_BOT_MODE_SIDE_SHOP":            6,
	"DOTA_BOT_MODE_RUNE":                 7,
	"DOTA_BOT_MODE_PUSH_TOWER_TOP":       8,
	"DOTA_BOT_MODE_PUSH_TOWER_MID":       9,
	"DOTA_BOT_MODE_PUSH_TOWER_BOT":       10,
	"DOTA_BOT_MODE_DEFEND_TOWER_TOP":     11,
	"DOTA_BOT_MODE_DEFEND_TOWER_MID":     12,
	"DOTA_BOT_MODE_DEFEND_TOWER_BOT":     13,
	"DOTA_BOT_MODE_ASSEMBLE":             14,
	"DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS": 15,
	"DOTA_BOT_MODE_TEAM_ROAM":            16,
	"DOTA_BOT_MODE_FARM":                 17,
	"DOTA_BOT_MODE_DEFEND_ALLY":          18,
	"DOTA_BOT_MODE_EVASIVE_MANEUVERS":    19,
	"DOTA_BOT_MODE_ROSHAN":               20,
	"DOTA_BOT_MODE_ITEM":                 21,
	"DOTA_BOT_MODE_WARD":                 22,
	"DOTA_BOT_MODE_COMPANION":            23,
	"DOTA_BOT_MODE_TUTORIAL_BOSS":        24,
	"DOTA_BOT_MODE_MINION":               25,
}

func (x DOTA_BOT_MODE) Enum() *DOTA_BOT_MODE {
	p := new(DOTA_BOT_MODE)
	*p = x
	return p
}
func (x DOTA_BOT_MODE) String() string {
	return proto.EnumName(DOTA_BOT_MODE_name, int32(x))
}
func (x *DOTA_BOT_MODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_BOT_MODE_value, data, "DOTA_BOT_MODE")
	if err != nil {
		return err
	}
	*x = DOTA_BOT_MODE(value)
	return nil
}
func (DOTA_BOT_MODE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{25}
}

type MatchLanguages int32

const (
	MatchLanguages_MATCH_LANGUAGE_INVALID    MatchLanguages = 0
	MatchLanguages_MATCH_LANGUAGE_ENGLISH    MatchLanguages = 1
	MatchLanguages_MATCH_LANGUAGE_RUSSIAN    MatchLanguages = 2
	MatchLanguages_MATCH_LANGUAGE_CHINESE    MatchLanguages = 3
	MatchLanguages_MATCH_LANGUAGE_KOREAN     MatchLanguages = 4
	MatchLanguages_MATCH_LANGUAGE_SPANISH    MatchLanguages = 5
	MatchLanguages_MATCH_LANGUAGE_PORTUGUESE MatchLanguages = 6
	MatchLanguages_MATCH_LANGUAGE_ENGLISH2   MatchLanguages = 7
)

var MatchLanguages_name = map[int32]string{
	0: "MATCH_LANGUAGE_INVALID",
	1: "MATCH_LANGUAGE_ENGLISH",
	2: "MATCH_LANGUAGE_RUSSIAN",
	3: "MATCH_LANGUAGE_CHINESE",
	4: "MATCH_LANGUAGE_KOREAN",
	5: "MATCH_LANGUAGE_SPANISH",
	6: "MATCH_LANGUAGE_PORTUGUESE",
	7: "MATCH_LANGUAGE_ENGLISH2",
}
var MatchLanguages_value = map[string]int32{
	"MATCH_LANGUAGE_INVALID":    0,
	"MATCH_LANGUAGE_ENGLISH":    1,
	"MATCH_LANGUAGE_RUSSIAN":    2,
	"MATCH_LANGUAGE_CHINESE":    3,
	"MATCH_LANGUAGE_KOREAN":     4,
	"MATCH_LANGUAGE_SPANISH":    5,
	"MATCH_LANGUAGE_PORTUGUESE": 6,
	"MATCH_LANGUAGE_ENGLISH2":   7,
}

func (x MatchLanguages) Enum() *MatchLanguages {
	p := new(MatchLanguages)
	*p = x
	return p
}
func (x MatchLanguages) String() string {
	return proto.EnumName(MatchLanguages_name, int32(x))
}
func (x *MatchLanguages) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MatchLanguages_value, data, "MatchLanguages")
	if err != nil {
		return err
	}
	*x = MatchLanguages(value)
	return nil
}
func (MatchLanguages) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{26}
}

type ETourneyQueueDeadlineState int32

const (
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_Normal            ETourneyQueueDeadlineState = 0
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_Missed            ETourneyQueueDeadlineState = 1
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_ExpiredOK         ETourneyQueueDeadlineState = 2
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_SeekingBye        ETourneyQueueDeadlineState = 3
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_EligibleForRefund ETourneyQueueDeadlineState = 4
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_NA                ETourneyQueueDeadlineState = -1
	ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_ExpiringSoon      ETourneyQueueDeadlineState = 101
)

var ETourneyQueueDeadlineState_name = map[int32]string{
	0:   "k_ETourneyQueueDeadlineState_Normal",
	1:   "k_ETourneyQueueDeadlineState_Missed",
	2:   "k_ETourneyQueueDeadlineState_ExpiredOK",
	3:   "k_ETourneyQueueDeadlineState_SeekingBye",
	4:   "k_ETourneyQueueDeadlineState_EligibleForRefund",
	-1:  "k_ETourneyQueueDeadlineState_NA",
	101: "k_ETourneyQueueDeadlineState_ExpiringSoon",
}
var ETourneyQueueDeadlineState_value = map[string]int32{
	"k_ETourneyQueueDeadlineState_Normal":            0,
	"k_ETourneyQueueDeadlineState_Missed":            1,
	"k_ETourneyQueueDeadlineState_ExpiredOK":         2,
	"k_ETourneyQueueDeadlineState_SeekingBye":        3,
	"k_ETourneyQueueDeadlineState_EligibleForRefund": 4,
	"k_ETourneyQueueDeadlineState_NA":                -1,
	"k_ETourneyQueueDeadlineState_ExpiringSoon":      101,
}

func (x ETourneyQueueDeadlineState) Enum() *ETourneyQueueDeadlineState {
	p := new(ETourneyQueueDeadlineState)
	*p = x
	return p
}
func (x ETourneyQueueDeadlineState) String() string {
	return proto.EnumName(ETourneyQueueDeadlineState_name, int32(x))
}
func (x *ETourneyQueueDeadlineState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETourneyQueueDeadlineState_value, data, "ETourneyQueueDeadlineState")
	if err != nil {
		return err
	}
	*x = ETourneyQueueDeadlineState(value)
	return nil
}
func (ETourneyQueueDeadlineState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{27}
}

type EMatchOutcome int32

const (
	EMatchOutcome_k_EMatchOutcome_Unknown                         EMatchOutcome = 0
	EMatchOutcome_k_EMatchOutcome_RadVictory                      EMatchOutcome = 2
	EMatchOutcome_k_EMatchOutcome_DireVictory                     EMatchOutcome = 3
	EMatchOutcome_k_EMatchOutcome_NotScored_PoorNetworkConditions EMatchOutcome = 64
	EMatchOutcome_k_EMatchOutcome_NotScored_Leaver                EMatchOutcome = 65
	EMatchOutcome_k_EMatchOutcome_NotScored_ServerCrash           EMatchOutcome = 66
	EMatchOutcome_k_EMatchOutcome_NotScored_NeverStarted          EMatchOutcome = 67
	EMatchOutcome_k_EMatchOutcome_NotScored_Canceled              EMatchOutcome = 68
)

var EMatchOutcome_name = map[int32]string{
	0:  "k_EMatchOutcome_Unknown",
	2:  "k_EMatchOutcome_RadVictory",
	3:  "k_EMatchOutcome_DireVictory",
	64: "k_EMatchOutcome_NotScored_PoorNetworkConditions",
	65: "k_EMatchOutcome_NotScored_Leaver",
	66: "k_EMatchOutcome_NotScored_ServerCrash",
	67: "k_EMatchOutcome_NotScored_NeverStarted",
	68: "k_EMatchOutcome_NotScored_Canceled",
}
var EMatchOutcome_value = map[string]int32{
	"k_EMatchOutcome_Unknown":                         0,
	"k_EMatchOutcome_RadVictory":                      2,
	"k_EMatchOutcome_DireVictory":                     3,
	"k_EMatchOutcome_NotScored_PoorNetworkConditions": 64,
	"k_EMatchOutcome_NotScored_Leaver":                65,
	"k_EMatchOutcome_NotScored_ServerCrash":           66,
	"k_EMatchOutcome_NotScored_NeverStarted":          67,
	"k_EMatchOutcome_NotScored_Canceled":              68,
}

func (x EMatchOutcome) Enum() *EMatchOutcome {
	p := new(EMatchOutcome)
	*p = x
	return p
}
func (x EMatchOutcome) String() string {
	return proto.EnumName(EMatchOutcome_name, int32(x))
}
func (x *EMatchOutcome) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EMatchOutcome_value, data, "EMatchOutcome")
	if err != nil {
		return err
	}
	*x = EMatchOutcome(value)
	return nil
}
func (EMatchOutcome) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{28}
}

type ELaneType int32

const (
	ELaneType_LANE_TYPE_UNKNOWN ELaneType = 0
	ELaneType_LANE_TYPE_SAFE    ELaneType = 1
	ELaneType_LANE_TYPE_OFF     ELaneType = 2
	ELaneType_LANE_TYPE_MID     ELaneType = 3
	ELaneType_LANE_TYPE_JUNGLE  ELaneType = 4
	ELaneType_LANE_TYPE_ROAM    ELaneType = 5
)

var ELaneType_name = map[int32]string{
	0: "LANE_TYPE_UNKNOWN",
	1: "LANE_TYPE_SAFE",
	2: "LANE_TYPE_OFF",
	3: "LANE_TYPE_MID",
	4: "LANE_TYPE_JUNGLE",
	5: "LANE_TYPE_ROAM",
}
var ELaneType_value = map[string]int32{
	"LANE_TYPE_UNKNOWN": 0,
	"LANE_TYPE_SAFE":    1,
	"LANE_TYPE_OFF":     2,
	"LANE_TYPE_MID":     3,
	"LANE_TYPE_JUNGLE":  4,
	"LANE_TYPE_ROAM":    5,
}

func (x ELaneType) Enum() *ELaneType {
	p := new(ELaneType)
	*p = x
	return p
}
func (x ELaneType) String() string {
	return proto.EnumName(ELaneType_name, int32(x))
}
func (x *ELaneType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELaneType_value, data, "ELaneType")
	if err != nil {
		return err
	}
	*x = ELaneType(value)
	return nil
}
func (ELaneType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{29}
}

type EBadgeType int32

const (
	EBadgeType_k_EBadgeType_TI7_Midweek  EBadgeType = 1
	EBadgeType_k_EBadgeType_TI7_Finals   EBadgeType = 2
	EBadgeType_k_EBadgeType_TI7_AllEvent EBadgeType = 3
	EBadgeType_k_EBadgeType_TI8_Midweek  EBadgeType = 4
	EBadgeType_k_EBadgeType_TI8_Finals   EBadgeType = 5
	EBadgeType_k_EBadgeType_TI8_AllEvent EBadgeType = 6
)

var EBadgeType_name = map[int32]string{
	1: "k_EBadgeType_TI7_Midweek",
	2: "k_EBadgeType_TI7_Finals",
	3: "k_EBadgeType_TI7_AllEvent",
	4: "k_EBadgeType_TI8_Midweek",
	5: "k_EBadgeType_TI8_Finals",
	6: "k_EBadgeType_TI8_AllEvent",
}
var EBadgeType_value = map[string]int32{
	"k_EBadgeType_TI7_Midweek":  1,
	"k_EBadgeType_TI7_Finals":   2,
	"k_EBadgeType_TI7_AllEvent": 3,
	"k_EBadgeType_TI8_Midweek":  4,
	"k_EBadgeType_TI8_Finals":   5,
	"k_EBadgeType_TI8_AllEvent": 6,
}

func (x EBadgeType) Enum() *EBadgeType {
	p := new(EBadgeType)
	*p = x
	return p
}
func (x EBadgeType) String() string {
	return proto.EnumName(EBadgeType_name, int32(x))
}
func (x *EBadgeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EBadgeType_value, data, "EBadgeType")
	if err != nil {
		return err
	}
	*x = EBadgeType(value)
	return nil
}
func (EBadgeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{30}
}

type ELeagueStatus int32

const (
	ELeagueStatus_LEAGUE_STATUS_UNSET       ELeagueStatus = 0
	ELeagueStatus_LEAGUE_STATUS_UNSUBMITTED ELeagueStatus = 1
	ELeagueStatus_LEAGUE_STATUS_SUBMITTED   ELeagueStatus = 2
	ELeagueStatus_LEAGUE_STATUS_ACCEPTED    ELeagueStatus = 3
	ELeagueStatus_LEAGUE_STATUS_REJECTED    ELeagueStatus = 4
	ELeagueStatus_LEAGUE_STATUS_CONCLUDED   ELeagueStatus = 5
	ELeagueStatus_LEAGUE_STATUS_DELETED     ELeagueStatus = 6
)

var ELeagueStatus_name = map[int32]string{
	0: "LEAGUE_STATUS_UNSET",
	1: "LEAGUE_STATUS_UNSUBMITTED",
	2: "LEAGUE_STATUS_SUBMITTED",
	3: "LEAGUE_STATUS_ACCEPTED",
	4: "LEAGUE_STATUS_REJECTED",
	5: "LEAGUE_STATUS_CONCLUDED",
	6: "LEAGUE_STATUS_DELETED",
}
var ELeagueStatus_value = map[string]int32{
	"LEAGUE_STATUS_UNSET":       0,
	"LEAGUE_STATUS_UNSUBMITTED": 1,
	"LEAGUE_STATUS_SUBMITTED":   2,
	"LEAGUE_STATUS_ACCEPTED":    3,
	"LEAGUE_STATUS_REJECTED":    4,
	"LEAGUE_STATUS_CONCLUDED":   5,
	"LEAGUE_STATUS_DELETED":     6,
}

func (x ELeagueStatus) Enum() *ELeagueStatus {
	p := new(ELeagueStatus)
	*p = x
	return p
}
func (x ELeagueStatus) String() string {
	return proto.EnumName(ELeagueStatus_name, int32(x))
}
func (x *ELeagueStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueStatus_value, data, "ELeagueStatus")
	if err != nil {
		return err
	}
	*x = ELeagueStatus(value)
	return nil
}
func (ELeagueStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{31}
}

type ELeagueRegion int32

const (
	ELeagueRegion_LEAGUE_REGION_UNSET  ELeagueRegion = 0
	ELeagueRegion_LEAGUE_REGION_NA     ELeagueRegion = 1
	ELeagueRegion_LEAGUE_REGION_SA     ELeagueRegion = 2
	ELeagueRegion_LEAGUE_REGION_EUROPE ELeagueRegion = 3
	ELeagueRegion_LEAGUE_REGION_CIS    ELeagueRegion = 4
	ELeagueRegion_LEAGUE_REGION_CHINA  ELeagueRegion = 5
	ELeagueRegion_LEAGUE_REGION_SEA    ELeagueRegion = 6
)

var ELeagueRegion_name = map[int32]string{
	0: "LEAGUE_REGION_UNSET",
	1: "LEAGUE_REGION_NA",
	2: "LEAGUE_REGION_SA",
	3: "LEAGUE_REGION_EUROPE",
	4: "LEAGUE_REGION_CIS",
	5: "LEAGUE_REGION_CHINA",
	6: "LEAGUE_REGION_SEA",
}
var ELeagueRegion_value = map[string]int32{
	"LEAGUE_REGION_UNSET":  0,
	"LEAGUE_REGION_NA":     1,
	"LEAGUE_REGION_SA":     2,
	"LEAGUE_REGION_EUROPE": 3,
	"LEAGUE_REGION_CIS":    4,
	"LEAGUE_REGION_CHINA":  5,
	"LEAGUE_REGION_SEA":    6,
}

func (x ELeagueRegion) Enum() *ELeagueRegion {
	p := new(ELeagueRegion)
	*p = x
	return p
}
func (x ELeagueRegion) String() string {
	return proto.EnumName(ELeagueRegion_name, int32(x))
}
func (x *ELeagueRegion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueRegion_value, data, "ELeagueRegion")
	if err != nil {
		return err
	}
	*x = ELeagueRegion(value)
	return nil
}
func (ELeagueRegion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{32}
}

type ELeagueTier int32

const (
	ELeagueTier_LEAGUE_TIER_UNSET         ELeagueTier = 0
	ELeagueTier_LEAGUE_TIER_AMATEUR       ELeagueTier = 1
	ELeagueTier_LEAGUE_TIER_PROFESSIONAL  ELeagueTier = 2
	ELeagueTier_LEAGUE_TIER_MINOR         ELeagueTier = 3
	ELeagueTier_LEAGUE_TIER_MAJOR         ELeagueTier = 4
	ELeagueTier_LEAGUE_TIER_INTERNATIONAL ELeagueTier = 5
)

var ELeagueTier_name = map[int32]string{
	0: "LEAGUE_TIER_UNSET",
	1: "LEAGUE_TIER_AMATEUR",
	2: "LEAGUE_TIER_PROFESSIONAL",
	3: "LEAGUE_TIER_MINOR",
	4: "LEAGUE_TIER_MAJOR",
	5: "LEAGUE_TIER_INTERNATIONAL",
}
var ELeagueTier_value = map[string]int32{
	"LEAGUE_TIER_UNSET":         0,
	"LEAGUE_TIER_AMATEUR":       1,
	"LEAGUE_TIER_PROFESSIONAL":  2,
	"LEAGUE_TIER_MINOR":         3,
	"LEAGUE_TIER_MAJOR":         4,
	"LEAGUE_TIER_INTERNATIONAL": 5,
}

func (x ELeagueTier) Enum() *ELeagueTier {
	p := new(ELeagueTier)
	*p = x
	return p
}
func (x ELeagueTier) String() string {
	return proto.EnumName(ELeagueTier_name, int32(x))
}
func (x *ELeagueTier) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueTier_value, data, "ELeagueTier")
	if err != nil {
		return err
	}
	*x = ELeagueTier(value)
	return nil
}
func (ELeagueTier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{33}
}

type ELeagueTierCategory int32

const (
	ELeagueTierCategory_LEAGUE_TIER_CATEGORY_AMATEUR      ELeagueTierCategory = 1
	ELeagueTierCategory_LEAGUE_TIER_CATEGORY_PROFESSIONAL ELeagueTierCategory = 2
	ELeagueTierCategory_LEAGUE_TIER_CATEGORY_DPC          ELeagueTierCategory = 3
)

var ELeagueTierCategory_name = map[int32]string{
	1: "LEAGUE_TIER_CATEGORY_AMATEUR",
	2: "LEAGUE_TIER_CATEGORY_PROFESSIONAL",
	3: "LEAGUE_TIER_CATEGORY_DPC",
}
var ELeagueTierCategory_value = map[string]int32{
	"LEAGUE_TIER_CATEGORY_AMATEUR":      1,
	"LEAGUE_TIER_CATEGORY_PROFESSIONAL": 2,
	"LEAGUE_TIER_CATEGORY_DPC":          3,
}

func (x ELeagueTierCategory) Enum() *ELeagueTierCategory {
	p := new(ELeagueTierCategory)
	*p = x
	return p
}
func (x ELeagueTierCategory) String() string {
	return proto.EnumName(ELeagueTierCategory_name, int32(x))
}
func (x *ELeagueTierCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueTierCategory_value, data, "ELeagueTierCategory")
	if err != nil {
		return err
	}
	*x = ELeagueTierCategory(value)
	return nil
}
func (ELeagueTierCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{34}
}

type ELeagueFlags int32

const (
	ELeagueFlags_LEAGUE_FLAGS_NONE         ELeagueFlags = 0
	ELeagueFlags_LEAGUE_ACCEPTED_AGREEMENT ELeagueFlags = 1
	ELeagueFlags_LEAGUE_PAYMENT_EMAIL_SENT ELeagueFlags = 2
	ELeagueFlags_LEAGUE_COMPENDIUM_ALLOWED ELeagueFlags = 4
	ELeagueFlags_LEAGUE_COMPENDIUM_PUBLIC  ELeagueFlags = 8
)

var ELeagueFlags_name = map[int32]string{
	0: "LEAGUE_FLAGS_NONE",
	1: "LEAGUE_ACCEPTED_AGREEMENT",
	2: "LEAGUE_PAYMENT_EMAIL_SENT",
	4: "LEAGUE_COMPENDIUM_ALLOWED",
	8: "LEAGUE_COMPENDIUM_PUBLIC",
}
var ELeagueFlags_value = map[string]int32{
	"LEAGUE_FLAGS_NONE":         0,
	"LEAGUE_ACCEPTED_AGREEMENT": 1,
	"LEAGUE_PAYMENT_EMAIL_SENT": 2,
	"LEAGUE_COMPENDIUM_ALLOWED": 4,
	"LEAGUE_COMPENDIUM_PUBLIC":  8,
}

func (x ELeagueFlags) Enum() *ELeagueFlags {
	p := new(ELeagueFlags)
	*p = x
	return p
}
func (x ELeagueFlags) String() string {
	return proto.EnumName(ELeagueFlags_name, int32(x))
}
func (x *ELeagueFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueFlags_value, data, "ELeagueFlags")
	if err != nil {
		return err
	}
	*x = ELeagueFlags(value)
	return nil
}
func (ELeagueFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{35}
}

type ELeagueBroadcastProvider int32

const (
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_UNKNOWN ELeagueBroadcastProvider = 0
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_STEAM   ELeagueBroadcastProvider = 1
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_TWITCH  ELeagueBroadcastProvider = 2
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_YOUTUBE ELeagueBroadcastProvider = 3
	ELeagueBroadcastProvider_LEAGUE_BROADCAST_OTHER   ELeagueBroadcastProvider = 100
)

var ELeagueBroadcastProvider_name = map[int32]string{
	0:   "LEAGUE_BROADCAST_UNKNOWN",
	1:   "LEAGUE_BROADCAST_STEAM",
	2:   "LEAGUE_BROADCAST_TWITCH",
	3:   "LEAGUE_BROADCAST_YOUTUBE",
	100: "LEAGUE_BROADCAST_OTHER",
}
var ELeagueBroadcastProvider_value = map[string]int32{
	"LEAGUE_BROADCAST_UNKNOWN": 0,
	"LEAGUE_BROADCAST_STEAM":   1,
	"LEAGUE_BROADCAST_TWITCH":  2,
	"LEAGUE_BROADCAST_YOUTUBE": 3,
	"LEAGUE_BROADCAST_OTHER":   100,
}

func (x ELeagueBroadcastProvider) Enum() *ELeagueBroadcastProvider {
	p := new(ELeagueBroadcastProvider)
	*p = x
	return p
}
func (x ELeagueBroadcastProvider) String() string {
	return proto.EnumName(ELeagueBroadcastProvider_name, int32(x))
}
func (x *ELeagueBroadcastProvider) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueBroadcastProvider_value, data, "ELeagueBroadcastProvider")
	if err != nil {
		return err
	}
	*x = ELeagueBroadcastProvider(value)
	return nil
}
func (ELeagueBroadcastProvider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{36}
}

type ELeaguePhase int32

const (
	ELeaguePhase_LEAGUE_PHASE_UNSET              ELeaguePhase = 0
	ELeaguePhase_LEAGUE_PHASE_REGIONAL_QUALIFIER ELeaguePhase = 1
	ELeaguePhase_LEAGUE_PHASE_GROUP_STAGE        ELeaguePhase = 2
	ELeaguePhase_LEAGUE_PHASE_MAIN_EVENT         ELeaguePhase = 3
)

var ELeaguePhase_name = map[int32]string{
	0: "LEAGUE_PHASE_UNSET",
	1: "LEAGUE_PHASE_REGIONAL_QUALIFIER",
	2: "LEAGUE_PHASE_GROUP_STAGE",
	3: "LEAGUE_PHASE_MAIN_EVENT",
}
var ELeaguePhase_value = map[string]int32{
	"LEAGUE_PHASE_UNSET":              0,
	"LEAGUE_PHASE_REGIONAL_QUALIFIER": 1,
	"LEAGUE_PHASE_GROUP_STAGE":        2,
	"LEAGUE_PHASE_MAIN_EVENT":         3,
}

func (x ELeaguePhase) Enum() *ELeaguePhase {
	p := new(ELeaguePhase)
	*p = x
	return p
}
func (x ELeaguePhase) String() string {
	return proto.EnumName(ELeaguePhase_name, int32(x))
}
func (x *ELeaguePhase) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeaguePhase_value, data, "ELeaguePhase")
	if err != nil {
		return err
	}
	*x = ELeaguePhase(value)
	return nil
}
func (ELeaguePhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{37}
}

type ELeagueFantasyPhase int32

const (
	ELeagueFantasyPhase_LEAGUE_FANTASY_PHASE_UNSET            ELeagueFantasyPhase = 0
	ELeagueFantasyPhase_LEAGUE_FANTASY_PHASE_MAIN             ELeagueFantasyPhase = 1
	ELeagueFantasyPhase_LEAGUE_FANTASY_PHASE_QUALIFIER_NA     ELeagueFantasyPhase = 2
	ELeagueFantasyPhase_LEAGUE_FANTASY_PHASE_QUALIFIER_SA     ELeagueFantasyPhase = 3
	ELeagueFantasyPhase_LEAGUE_FANTASY_PHASE_QUALIFIER_EUROPE ELeagueFantasyPhase = 4
	ELeagueFantasyPhase_LEAGUE_FANTASY_PHASE_QUALIFIER_CIS    ELeagueFantasyPhase = 5
	ELeagueFantasyPhase_LEAGUE_FANTASY_PHASE_QUALIFIER_CHINA  ELeagueFantasyPhase = 6
	ELeagueFantasyPhase_LEAGUE_FANTASY_PHASE_QUALIFIER_SEA    ELeagueFantasyPhase = 7
)

var ELeagueFantasyPhase_name = map[int32]string{
	0: "LEAGUE_FANTASY_PHASE_UNSET",
	1: "LEAGUE_FANTASY_PHASE_MAIN",
	2: "LEAGUE_FANTASY_PHASE_QUALIFIER_NA",
	3: "LEAGUE_FANTASY_PHASE_QUALIFIER_SA",
	4: "LEAGUE_FANTASY_PHASE_QUALIFIER_EUROPE",
	5: "LEAGUE_FANTASY_PHASE_QUALIFIER_CIS",
	6: "LEAGUE_FANTASY_PHASE_QUALIFIER_CHINA",
	7: "LEAGUE_FANTASY_PHASE_QUALIFIER_SEA",
}
var ELeagueFantasyPhase_value = map[string]int32{
	"LEAGUE_FANTASY_PHASE_UNSET":            0,
	"LEAGUE_FANTASY_PHASE_MAIN":             1,
	"LEAGUE_FANTASY_PHASE_QUALIFIER_NA":     2,
	"LEAGUE_FANTASY_PHASE_QUALIFIER_SA":     3,
	"LEAGUE_FANTASY_PHASE_QUALIFIER_EUROPE": 4,
	"LEAGUE_FANTASY_PHASE_QUALIFIER_CIS":    5,
	"LEAGUE_FANTASY_PHASE_QUALIFIER_CHINA":  6,
	"LEAGUE_FANTASY_PHASE_QUALIFIER_SEA":    7,
}

func (x ELeagueFantasyPhase) Enum() *ELeagueFantasyPhase {
	p := new(ELeagueFantasyPhase)
	*p = x
	return p
}
func (x ELeagueFantasyPhase) String() string {
	return proto.EnumName(ELeagueFantasyPhase_name, int32(x))
}
func (x *ELeagueFantasyPhase) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueFantasyPhase_value, data, "ELeagueFantasyPhase")
	if err != nil {
		return err
	}
	*x = ELeagueFantasyPhase(value)
	return nil
}
func (ELeagueFantasyPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{38}
}

type ELeagueAuditAction int32

const (
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_INVALID                       ELeagueAuditAction = 0
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_CREATE                 ELeagueAuditAction = 1
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_EDIT                   ELeagueAuditAction = 2
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_DELETE                 ELeagueAuditAction = 3
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD              ELeagueAuditAction = 4
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE           ELeagueAuditAction = 5
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE          ELeagueAuditAction = 6
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD             ELeagueAuditAction = 7
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE          ELeagueAuditAction = 8
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED          ELeagueAuditAction = 9
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED          ELeagueAuditAction = 10
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED              ELeagueAuditAction = 11
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL         ELeagueAuditAction = 12
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM    ELeagueAuditAction = 13
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM ELeagueAuditAction = 14
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START            ELeagueAuditAction = 15
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END              ELeagueAuditAction = 16
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM       ELeagueAuditAction = 17
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM    ELeagueAuditAction = 18
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED         ELeagueAuditAction = 19
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT            ELeagueAuditAction = 20
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE              ELeagueAuditAction = 100
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY             ELeagueAuditAction = 101
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM            ELeagueAuditAction = 102
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM         ELeagueAuditAction = 103
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING       ELeagueAuditAction = 104
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT                ELeagueAuditAction = 105
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE            ELeagueAuditAction = 106
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED           ELeagueAuditAction = 107
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_CREATE                   ELeagueAuditAction = 200
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_DESTROY                  ELeagueAuditAction = 201
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE               ELeagueAuditAction = 202
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_SET_TEAM                 ELeagueAuditAction = 203
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID            ELeagueAuditAction = 204
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING            ELeagueAuditAction = 205
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_SET_TIME                 ELeagueAuditAction = 206
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED          ELeagueAuditAction = 207
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_COMPLETED                ELeagueAuditAction = 208
	ELeagueAuditAction_LEAGUE_AUDIT_ACTION_NODE_EDIT                     ELeagueAuditAction = 209
)

var ELeagueAuditAction_name = map[int32]string{
	0:   "LEAGUE_AUDIT_ACTION_INVALID",
	1:   "LEAGUE_AUDIT_ACTION_LEAGUE_CREATE",
	2:   "LEAGUE_AUDIT_ACTION_LEAGUE_EDIT",
	3:   "LEAGUE_AUDIT_ACTION_LEAGUE_DELETE",
	4:   "LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD",
	5:   "LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE",
	6:   "LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE",
	7:   "LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD",
	8:   "LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE",
	9:   "LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED",
	10:  "LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED",
	11:  "LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED",
	12:  "LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL",
	13:  "LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM",
	14:  "LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM",
	15:  "LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START",
	16:  "LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END",
	17:  "LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM",
	18:  "LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM",
	19:  "LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED",
	20:  "LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT",
	100: "LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE",
	101: "LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY",
	102: "LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM",
	103: "LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM",
	104: "LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING",
	105: "LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT",
	106: "LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE",
	107: "LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED",
	200: "LEAGUE_AUDIT_ACTION_NODE_CREATE",
	201: "LEAGUE_AUDIT_ACTION_NODE_DESTROY",
	202: "LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE",
	203: "LEAGUE_AUDIT_ACTION_NODE_SET_TEAM",
	204: "LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID",
	205: "LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING",
	206: "LEAGUE_AUDIT_ACTION_NODE_SET_TIME",
	207: "LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED",
	208: "LEAGUE_AUDIT_ACTION_NODE_COMPLETED",
	209: "LEAGUE_AUDIT_ACTION_NODE_EDIT",
}
var ELeagueAuditAction_value = map[string]int32{
	"LEAGUE_AUDIT_ACTION_INVALID":                       0,
	"LEAGUE_AUDIT_ACTION_LEAGUE_CREATE":                 1,
	"LEAGUE_AUDIT_ACTION_LEAGUE_EDIT":                   2,
	"LEAGUE_AUDIT_ACTION_LEAGUE_DELETE":                 3,
	"LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD":              4,
	"LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE":           5,
	"LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE":          6,
	"LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD":             7,
	"LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE":          8,
	"LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED":          9,
	"LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED":          10,
	"LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED":              11,
	"LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL":         12,
	"LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM":    13,
	"LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM": 14,
	"LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START":            15,
	"LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END":              16,
	"LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM":       17,
	"LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM":    18,
	"LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED":         19,
	"LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT":            20,
	"LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE":              100,
	"LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY":             101,
	"LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM":            102,
	"LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM":         103,
	"LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING":       104,
	"LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT":                105,
	"LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE":            106,
	"LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED":           107,
	"LEAGUE_AUDIT_ACTION_NODE_CREATE":                   200,
	"LEAGUE_AUDIT_ACTION_NODE_DESTROY":                  201,
	"LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE":               202,
	"LEAGUE_AUDIT_ACTION_NODE_SET_TEAM":                 203,
	"LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID":            204,
	"LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING":            205,
	"LEAGUE_AUDIT_ACTION_NODE_SET_TIME":                 206,
	"LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED":          207,
	"LEAGUE_AUDIT_ACTION_NODE_COMPLETED":                208,
	"LEAGUE_AUDIT_ACTION_NODE_EDIT":                     209,
}

func (x ELeagueAuditAction) Enum() *ELeagueAuditAction {
	p := new(ELeagueAuditAction)
	*p = x
	return p
}
func (x ELeagueAuditAction) String() string {
	return proto.EnumName(ELeagueAuditAction_name, int32(x))
}
func (x *ELeagueAuditAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELeagueAuditAction_value, data, "ELeagueAuditAction")
	if err != nil {
		return err
	}
	*x = ELeagueAuditAction(value)
	return nil
}
func (ELeagueAuditAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{39}
}

type DOTA_COMBATLOG_TYPES int32

const (
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_INVALID                   DOTA_COMBATLOG_TYPES = -1
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_DAMAGE                    DOTA_COMBATLOG_TYPES = 0
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_HEAL                      DOTA_COMBATLOG_TYPES = 1
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MODIFIER_ADD              DOTA_COMBATLOG_TYPES = 2
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MODIFIER_REMOVE           DOTA_COMBATLOG_TYPES = 3
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_DEATH                     DOTA_COMBATLOG_TYPES = 4
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ABILITY                   DOTA_COMBATLOG_TYPES = 5
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ITEM                      DOTA_COMBATLOG_TYPES = 6
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_LOCATION                  DOTA_COMBATLOG_TYPES = 7
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_GOLD                      DOTA_COMBATLOG_TYPES = 8
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_GAME_STATE                DOTA_COMBATLOG_TYPES = 9
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_XP                        DOTA_COMBATLOG_TYPES = 10
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PURCHASE                  DOTA_COMBATLOG_TYPES = 11
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_BUYBACK                   DOTA_COMBATLOG_TYPES = 12
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ABILITY_TRIGGER           DOTA_COMBATLOG_TYPES = 13
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PLAYERSTATS               DOTA_COMBATLOG_TYPES = 14
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MULTIKILL                 DOTA_COMBATLOG_TYPES = 15
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_KILLSTREAK                DOTA_COMBATLOG_TYPES = 16
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_TEAM_BUILDING_KILL        DOTA_COMBATLOG_TYPES = 17
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_FIRST_BLOOD               DOTA_COMBATLOG_TYPES = 18
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MODIFIER_STACK_EVENT      DOTA_COMBATLOG_TYPES = 19
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_NEUTRAL_CAMP_STACK        DOTA_COMBATLOG_TYPES = 20
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PICKUP_RUNE               DOTA_COMBATLOG_TYPES = 21
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_REVEALED_INVISIBLE        DOTA_COMBATLOG_TYPES = 22
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_HERO_SAVED                DOTA_COMBATLOG_TYPES = 23
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MANA_RESTORED             DOTA_COMBATLOG_TYPES = 24
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_HERO_LEVELUP              DOTA_COMBATLOG_TYPES = 25
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_BOTTLE_HEAL_ALLY          DOTA_COMBATLOG_TYPES = 26
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ENDGAME_STATS             DOTA_COMBATLOG_TYPES = 27
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_INTERRUPT_CHANNEL         DOTA_COMBATLOG_TYPES = 28
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ALLIED_GOLD               DOTA_COMBATLOG_TYPES = 29
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_AEGIS_TAKEN               DOTA_COMBATLOG_TYPES = 30
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_MANA_DAMAGE               DOTA_COMBATLOG_TYPES = 31
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED DOTA_COMBATLOG_TYPES = 32
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_UNIT_SUMMONED             DOTA_COMBATLOG_TYPES = 33
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_ATTACK_EVADE              DOTA_COMBATLOG_TYPES = 34
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_TREE_CUT                  DOTA_COMBATLOG_TYPES = 35
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_SUCCESSFUL_SCAN           DOTA_COMBATLOG_TYPES = 36
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_END_KILLSTREAK            DOTA_COMBATLOG_TYPES = 37
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_BLOODSTONE_CHARGE         DOTA_COMBATLOG_TYPES = 38
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_CRITICAL_DAMAGE           DOTA_COMBATLOG_TYPES = 39
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_SPELL_ABSORB              DOTA_COMBATLOG_TYPES = 40
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_UNIT_TELEPORTED           DOTA_COMBATLOG_TYPES = 41
	DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_KILL_EATER_EVENT          DOTA_COMBATLOG_TYPES = 42
)

var DOTA_COMBATLOG_TYPES_name = map[int32]string{
	-1: "DOTA_COMBATLOG_INVALID",
	0:  "DOTA_COMBATLOG_DAMAGE",
	1:  "DOTA_COMBATLOG_HEAL",
	2:  "DOTA_COMBATLOG_MODIFIER_ADD",
	3:  "DOTA_COMBATLOG_MODIFIER_REMOVE",
	4:  "DOTA_COMBATLOG_DEATH",
	5:  "DOTA_COMBATLOG_ABILITY",
	6:  "DOTA_COMBATLOG_ITEM",
	7:  "DOTA_COMBATLOG_LOCATION",
	8:  "DOTA_COMBATLOG_GOLD",
	9:  "DOTA_COMBATLOG_GAME_STATE",
	10: "DOTA_COMBATLOG_XP",
	11: "DOTA_COMBATLOG_PURCHASE",
	12: "DOTA_COMBATLOG_BUYBACK",
	13: "DOTA_COMBATLOG_ABILITY_TRIGGER",
	14: "DOTA_COMBATLOG_PLAYERSTATS",
	15: "DOTA_COMBATLOG_MULTIKILL",
	16: "DOTA_COMBATLOG_KILLSTREAK",
	17: "DOTA_COMBATLOG_TEAM_BUILDING_KILL",
	18: "DOTA_COMBATLOG_FIRST_BLOOD",
	19: "DOTA_COMBATLOG_MODIFIER_STACK_EVENT",
	20: "DOTA_COMBATLOG_NEUTRAL_CAMP_STACK",
	21: "DOTA_COMBATLOG_PICKUP_RUNE",
	22: "DOTA_COMBATLOG_REVEALED_INVISIBLE",
	23: "DOTA_COMBATLOG_HERO_SAVED",
	24: "DOTA_COMBATLOG_MANA_RESTORED",
	25: "DOTA_COMBATLOG_HERO_LEVELUP",
	26: "DOTA_COMBATLOG_BOTTLE_HEAL_ALLY",
	27: "DOTA_COMBATLOG_ENDGAME_STATS",
	28: "DOTA_COMBATLOG_INTERRUPT_CHANNEL",
	29: "DOTA_COMBATLOG_ALLIED_GOLD",
	30: "DOTA_COMBATLOG_AEGIS_TAKEN",
	31: "DOTA_COMBATLOG_MANA_DAMAGE",
	32: "DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED",
	33: "DOTA_COMBATLOG_UNIT_SUMMONED",
	34: "DOTA_COMBATLOG_ATTACK_EVADE",
	35: "DOTA_COMBATLOG_TREE_CUT",
	36: "DOTA_COMBATLOG_SUCCESSFUL_SCAN",
	37: "DOTA_COMBATLOG_END_KILLSTREAK",
	38: "DOTA_COMBATLOG_BLOODSTONE_CHARGE",
	39: "DOTA_COMBATLOG_CRITICAL_DAMAGE",
	40: "DOTA_COMBATLOG_SPELL_ABSORB",
	41: "DOTA_COMBATLOG_UNIT_TELEPORTED",
	42: "DOTA_COMBATLOG_KILL_EATER_EVENT",
}
var DOTA_COMBATLOG_TYPES_value = map[string]int32{
	"DOTA_COMBATLOG_INVALID":                   -1,
	"DOTA_COMBATLOG_DAMAGE":                    0,
	"DOTA_COMBATLOG_HEAL":                      1,
	"DOTA_COMBATLOG_MODIFIER_ADD":              2,
	"DOTA_COMBATLOG_MODIFIER_REMOVE":           3,
	"DOTA_COMBATLOG_DEATH":                     4,
	"DOTA_COMBATLOG_ABILITY":                   5,
	"DOTA_COMBATLOG_ITEM":                      6,
	"DOTA_COMBATLOG_LOCATION":                  7,
	"DOTA_COMBATLOG_GOLD":                      8,
	"DOTA_COMBATLOG_GAME_STATE":                9,
	"DOTA_COMBATLOG_XP":                        10,
	"DOTA_COMBATLOG_PURCHASE":                  11,
	"DOTA_COMBATLOG_BUYBACK":                   12,
	"DOTA_COMBATLOG_ABILITY_TRIGGER":           13,
	"DOTA_COMBATLOG_PLAYERSTATS":               14,
	"DOTA_COMBATLOG_MULTIKILL":                 15,
	"DOTA_COMBATLOG_KILLSTREAK":                16,
	"DOTA_COMBATLOG_TEAM_BUILDING_KILL":        17,
	"DOTA_COMBATLOG_FIRST_BLOOD":               18,
	"DOTA_COMBATLOG_MODIFIER_STACK_EVENT":      19,
	"DOTA_COMBATLOG_NEUTRAL_CAMP_STACK":        20,
	"DOTA_COMBATLOG_PICKUP_RUNE":               21,
	"DOTA_COMBATLOG_REVEALED_INVISIBLE":        22,
	"DOTA_COMBATLOG_HERO_SAVED":                23,
	"DOTA_COMBATLOG_MANA_RESTORED":             24,
	"DOTA_COMBATLOG_HERO_LEVELUP":              25,
	"DOTA_COMBATLOG_BOTTLE_HEAL_ALLY":          26,
	"DOTA_COMBATLOG_ENDGAME_STATS":             27,
	"DOTA_COMBATLOG_INTERRUPT_CHANNEL":         28,
	"DOTA_COMBATLOG_ALLIED_GOLD":               29,
	"DOTA_COMBATLOG_AEGIS_TAKEN":               30,
	"DOTA_COMBATLOG_MANA_DAMAGE":               31,
	"DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED": 32,
	"DOTA_COMBATLOG_UNIT_SUMMONED":             33,
	"DOTA_COMBATLOG_ATTACK_EVADE":              34,
	"DOTA_COMBATLOG_TREE_CUT":                  35,
	"DOTA_COMBATLOG_SUCCESSFUL_SCAN":           36,
	"DOTA_COMBATLOG_END_KILLSTREAK":            37,
	"DOTA_COMBATLOG_BLOODSTONE_CHARGE":         38,
	"DOTA_COMBATLOG_CRITICAL_DAMAGE":           39,
	"DOTA_COMBATLOG_SPELL_ABSORB":              40,
	"DOTA_COMBATLOG_UNIT_TELEPORTED":           41,
	"DOTA_COMBATLOG_KILL_EATER_EVENT":          42,
}

func (x DOTA_COMBATLOG_TYPES) Enum() *DOTA_COMBATLOG_TYPES {
	p := new(DOTA_COMBATLOG_TYPES)
	*p = x
	return p
}
func (x DOTA_COMBATLOG_TYPES) String() string {
	return proto.EnumName(DOTA_COMBATLOG_TYPES_name, int32(x))
}
func (x *DOTA_COMBATLOG_TYPES) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_COMBATLOG_TYPES_value, data, "DOTA_COMBATLOG_TYPES")
	if err != nil {
		return err
	}
	*x = DOTA_COMBATLOG_TYPES(value)
	return nil
}
func (DOTA_COMBATLOG_TYPES) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{40}
}

type EDPCFavoriteType int32

const (
	EDPCFavoriteType_FAVORITE_TYPE_ALL    EDPCFavoriteType = 0
	EDPCFavoriteType_FAVORITE_TYPE_PLAYER EDPCFavoriteType = 1
	EDPCFavoriteType_FAVORITE_TYPE_TEAM   EDPCFavoriteType = 2
	EDPCFavoriteType_FAVORITE_TYPE_LEAGUE EDPCFavoriteType = 3
)

var EDPCFavoriteType_name = map[int32]string{
	0: "FAVORITE_TYPE_ALL",
	1: "FAVORITE_TYPE_PLAYER",
	2: "FAVORITE_TYPE_TEAM",
	3: "FAVORITE_TYPE_LEAGUE",
}
var EDPCFavoriteType_value = map[string]int32{
	"FAVORITE_TYPE_ALL":    0,
	"FAVORITE_TYPE_PLAYER": 1,
	"FAVORITE_TYPE_TEAM":   2,
	"FAVORITE_TYPE_LEAGUE": 3,
}

func (x EDPCFavoriteType) Enum() *EDPCFavoriteType {
	p := new(EDPCFavoriteType)
	*p = x
	return p
}
func (x EDPCFavoriteType) String() string {
	return proto.EnumName(EDPCFavoriteType_name, int32(x))
}
func (x *EDPCFavoriteType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDPCFavoriteType_value, data, "EDPCFavoriteType")
	if err != nil {
		return err
	}
	*x = EDPCFavoriteType(value)
	return nil
}
func (EDPCFavoriteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{41}
}

type EDPCPushNotification int32

const (
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_MATCH_STARTING               EDPCPushNotification = 1
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM             EDPCPushNotification = 10
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM           EDPCPushNotification = 11
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_LEAGUE_RESULT                EDPCPushNotification = 20
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE EDPCPushNotification = 30
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_PREDICTION_RESULT            EDPCPushNotification = 31
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED       EDPCPushNotification = 40
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY        EDPCPushNotification = 41
	EDPCPushNotification_DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS        EDPCPushNotification = 42
)

var EDPCPushNotification_name = map[int32]string{
	1:  "DPC_PUSH_NOTIFICATION_MATCH_STARTING",
	10: "DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM",
	11: "DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM",
	20: "DPC_PUSH_NOTIFICATION_LEAGUE_RESULT",
	30: "DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE",
	31: "DPC_PUSH_NOTIFICATION_PREDICTION_RESULT",
	40: "DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED",
	41: "DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY",
	42: "DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS",
}
var EDPCPushNotification_value = map[string]int32{
	"DPC_PUSH_NOTIFICATION_MATCH_STARTING":               1,
	"DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM":             10,
	"DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM":           11,
	"DPC_PUSH_NOTIFICATION_LEAGUE_RESULT":                20,
	"DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE": 30,
	"DPC_PUSH_NOTIFICATION_PREDICTION_RESULT":            31,
	"DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED":       40,
	"DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY":        41,
	"DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS":        42,
}

func (x EDPCPushNotification) Enum() *EDPCPushNotification {
	p := new(EDPCPushNotification)
	*p = x
	return p
}
func (x EDPCPushNotification) String() string {
	return proto.EnumName(EDPCPushNotification_name, int32(x))
}
func (x *EDPCPushNotification) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDPCPushNotification_value, data, "EDPCPushNotification")
	if err != nil {
		return err
	}
	*x = EDPCPushNotification(value)
	return nil
}
func (EDPCPushNotification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{42}
}

type CDOTAClientHardwareSpecs struct {
	LogicalProcessors    *uint32  `protobuf:"varint,1,opt,name=logical_processors,json=logicalProcessors" json:"logical_processors,omitempty"`
	CpuCyclesPerSecond   *uint64  `protobuf:"fixed64,2,opt,name=cpu_cycles_per_second,json=cpuCyclesPerSecond" json:"cpu_cycles_per_second,omitempty"`
	TotalPhysicalMemory  *uint64  `protobuf:"fixed64,3,opt,name=total_physical_memory,json=totalPhysicalMemory" json:"total_physical_memory,omitempty"`
	Is_64BitOs           *bool    `protobuf:"varint,4,opt,name=is_64_bit_os,json=is64BitOs" json:"is_64_bit_os,omitempty"`
	UploadMeasurement    *uint64  `protobuf:"varint,5,opt,name=upload_measurement,json=uploadMeasurement" json:"upload_measurement,omitempty"`
	PreferNotHost        *bool    `protobuf:"varint,6,opt,name=prefer_not_host,json=preferNotHost" json:"prefer_not_host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAClientHardwareSpecs) Reset()         { *m = CDOTAClientHardwareSpecs{} }
func (m *CDOTAClientHardwareSpecs) String() string { return proto.CompactTextString(m) }
func (*CDOTAClientHardwareSpecs) ProtoMessage()    {}
func (*CDOTAClientHardwareSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{0}
}
func (m *CDOTAClientHardwareSpecs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAClientHardwareSpecs.Unmarshal(m, b)
}
func (m *CDOTAClientHardwareSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAClientHardwareSpecs.Marshal(b, m, deterministic)
}
func (dst *CDOTAClientHardwareSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAClientHardwareSpecs.Merge(dst, src)
}
func (m *CDOTAClientHardwareSpecs) XXX_Size() int {
	return xxx_messageInfo_CDOTAClientHardwareSpecs.Size(m)
}
func (m *CDOTAClientHardwareSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAClientHardwareSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAClientHardwareSpecs proto.InternalMessageInfo

func (m *CDOTAClientHardwareSpecs) GetLogicalProcessors() uint32 {
	if m != nil && m.LogicalProcessors != nil {
		return *m.LogicalProcessors
	}
	return 0
}

func (m *CDOTAClientHardwareSpecs) GetCpuCyclesPerSecond() uint64 {
	if m != nil && m.CpuCyclesPerSecond != nil {
		return *m.CpuCyclesPerSecond
	}
	return 0
}

func (m *CDOTAClientHardwareSpecs) GetTotalPhysicalMemory() uint64 {
	if m != nil && m.TotalPhysicalMemory != nil {
		return *m.TotalPhysicalMemory
	}
	return 0
}

func (m *CDOTAClientHardwareSpecs) GetIs_64BitOs() bool {
	if m != nil && m.Is_64BitOs != nil {
		return *m.Is_64BitOs
	}
	return false
}

func (m *CDOTAClientHardwareSpecs) GetUploadMeasurement() uint64 {
	if m != nil && m.UploadMeasurement != nil {
		return *m.UploadMeasurement
	}
	return 0
}

func (m *CDOTAClientHardwareSpecs) GetPreferNotHost() bool {
	if m != nil && m.PreferNotHost != nil {
		return *m.PreferNotHost
	}
	return false
}

type CDOTASaveGame struct {
	MatchId              *uint64                       `protobuf:"varint,5,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	SaveTime             *uint32                       `protobuf:"varint,2,opt,name=save_time,json=saveTime" json:"save_time,omitempty"`
	Players              []*CDOTASaveGame_Player       `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	SaveInstances        []*CDOTASaveGame_SaveInstance `protobuf:"bytes,4,rep,name=save_instances,json=saveInstances" json:"save_instances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CDOTASaveGame) Reset()         { *m = CDOTASaveGame{} }
func (m *CDOTASaveGame) String() string { return proto.CompactTextString(m) }
func (*CDOTASaveGame) ProtoMessage()    {}
func (*CDOTASaveGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{1}
}
func (m *CDOTASaveGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTASaveGame.Unmarshal(m, b)
}
func (m *CDOTASaveGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTASaveGame.Marshal(b, m, deterministic)
}
func (dst *CDOTASaveGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTASaveGame.Merge(dst, src)
}
func (m *CDOTASaveGame) XXX_Size() int {
	return xxx_messageInfo_CDOTASaveGame.Size(m)
}
func (m *CDOTASaveGame) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTASaveGame.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTASaveGame proto.InternalMessageInfo

func (m *CDOTASaveGame) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CDOTASaveGame) GetSaveTime() uint32 {
	if m != nil && m.SaveTime != nil {
		return *m.SaveTime
	}
	return 0
}

func (m *CDOTASaveGame) GetPlayers() []*CDOTASaveGame_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CDOTASaveGame) GetSaveInstances() []*CDOTASaveGame_SaveInstance {
	if m != nil {
		return m.SaveInstances
	}
	return nil
}

type CDOTASaveGame_Player struct {
	Team                 *DOTA_GC_TEAM `protobuf:"varint,1,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name                 *string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Hero                 *string       `protobuf:"bytes,3,opt,name=hero" json:"hero,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CDOTASaveGame_Player) Reset()         { *m = CDOTASaveGame_Player{} }
func (m *CDOTASaveGame_Player) String() string { return proto.CompactTextString(m) }
func (*CDOTASaveGame_Player) ProtoMessage()    {}
func (*CDOTASaveGame_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{1, 0}
}
func (m *CDOTASaveGame_Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTASaveGame_Player.Unmarshal(m, b)
}
func (m *CDOTASaveGame_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTASaveGame_Player.Marshal(b, m, deterministic)
}
func (dst *CDOTASaveGame_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTASaveGame_Player.Merge(dst, src)
}
func (m *CDOTASaveGame_Player) XXX_Size() int {
	return xxx_messageInfo_CDOTASaveGame_Player.Size(m)
}
func (m *CDOTASaveGame_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTASaveGame_Player.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTASaveGame_Player proto.InternalMessageInfo

const Default_CDOTASaveGame_Player_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CDOTASaveGame_Player) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CDOTASaveGame_Player_Team
}

func (m *CDOTASaveGame_Player) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CDOTASaveGame_Player) GetHero() string {
	if m != nil && m.Hero != nil {
		return *m.Hero
	}
	return ""
}

type CDOTASaveGame_SaveInstance struct {
	GameTime             *uint32                                       `protobuf:"varint,2,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Team1Score           *uint32                                       `protobuf:"varint,3,opt,name=team1_score,json=team1Score" json:"team1_score,omitempty"`
	Team2Score           *uint32                                       `protobuf:"varint,4,opt,name=team2_score,json=team2Score" json:"team2_score,omitempty"`
	PlayerPositions      []*CDOTASaveGame_SaveInstance_PlayerPositions `protobuf:"bytes,5,rep,name=player_positions,json=playerPositions" json:"player_positions,omitempty"`
	SaveId               *uint32                                       `protobuf:"varint,6,opt,name=save_id,json=saveId" json:"save_id,omitempty"`
	SaveTime             *uint32                                       `protobuf:"varint,7,opt,name=save_time,json=saveTime" json:"save_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *CDOTASaveGame_SaveInstance) Reset()         { *m = CDOTASaveGame_SaveInstance{} }
func (m *CDOTASaveGame_SaveInstance) String() string { return proto.CompactTextString(m) }
func (*CDOTASaveGame_SaveInstance) ProtoMessage()    {}
func (*CDOTASaveGame_SaveInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{1, 1}
}
func (m *CDOTASaveGame_SaveInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTASaveGame_SaveInstance.Unmarshal(m, b)
}
func (m *CDOTASaveGame_SaveInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTASaveGame_SaveInstance.Marshal(b, m, deterministic)
}
func (dst *CDOTASaveGame_SaveInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTASaveGame_SaveInstance.Merge(dst, src)
}
func (m *CDOTASaveGame_SaveInstance) XXX_Size() int {
	return xxx_messageInfo_CDOTASaveGame_SaveInstance.Size(m)
}
func (m *CDOTASaveGame_SaveInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTASaveGame_SaveInstance.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTASaveGame_SaveInstance proto.InternalMessageInfo

func (m *CDOTASaveGame_SaveInstance) GetGameTime() uint32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetTeam1Score() uint32 {
	if m != nil && m.Team1Score != nil {
		return *m.Team1Score
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetTeam2Score() uint32 {
	if m != nil && m.Team2Score != nil {
		return *m.Team2Score
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetPlayerPositions() []*CDOTASaveGame_SaveInstance_PlayerPositions {
	if m != nil {
		return m.PlayerPositions
	}
	return nil
}

func (m *CDOTASaveGame_SaveInstance) GetSaveId() uint32 {
	if m != nil && m.SaveId != nil {
		return *m.SaveId
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetSaveTime() uint32 {
	if m != nil && m.SaveTime != nil {
		return *m.SaveTime
	}
	return 0
}

type CDOTASaveGame_SaveInstance_PlayerPositions struct {
	X                    *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y                    *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTASaveGame_SaveInstance_PlayerPositions) Reset() {
	*m = CDOTASaveGame_SaveInstance_PlayerPositions{}
}
func (m *CDOTASaveGame_SaveInstance_PlayerPositions) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTASaveGame_SaveInstance_PlayerPositions) ProtoMessage() {}
func (*CDOTASaveGame_SaveInstance_PlayerPositions) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{1, 1, 0}
}
func (m *CDOTASaveGame_SaveInstance_PlayerPositions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTASaveGame_SaveInstance_PlayerPositions.Unmarshal(m, b)
}
func (m *CDOTASaveGame_SaveInstance_PlayerPositions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTASaveGame_SaveInstance_PlayerPositions.Marshal(b, m, deterministic)
}
func (dst *CDOTASaveGame_SaveInstance_PlayerPositions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTASaveGame_SaveInstance_PlayerPositions.Merge(dst, src)
}
func (m *CDOTASaveGame_SaveInstance_PlayerPositions) XXX_Size() int {
	return xxx_messageInfo_CDOTASaveGame_SaveInstance_PlayerPositions.Size(m)
}
func (m *CDOTASaveGame_SaveInstance_PlayerPositions) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTASaveGame_SaveInstance_PlayerPositions.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTASaveGame_SaveInstance_PlayerPositions proto.InternalMessageInfo

func (m *CDOTASaveGame_SaveInstance_PlayerPositions) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance_PlayerPositions) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

type CMsgDOTACombatLogEntry struct {
	Type                     *DOTA_COMBATLOG_TYPES `protobuf:"varint,1,opt,name=type,enum=dota.DOTA_COMBATLOG_TYPES,def=-1" json:"type,omitempty"`
	TargetName               *uint32               `protobuf:"varint,2,opt,name=target_name,json=targetName" json:"target_name,omitempty"`
	TargetSourceName         *uint32               `protobuf:"varint,3,opt,name=target_source_name,json=targetSourceName" json:"target_source_name,omitempty"`
	AttackerName             *uint32               `protobuf:"varint,4,opt,name=attacker_name,json=attackerName" json:"attacker_name,omitempty"`
	DamageSourceName         *uint32               `protobuf:"varint,5,opt,name=damage_source_name,json=damageSourceName" json:"damage_source_name,omitempty"`
	InflictorName            *uint32               `protobuf:"varint,6,opt,name=inflictor_name,json=inflictorName" json:"inflictor_name,omitempty"`
	IsAttackerIllusion       *bool                 `protobuf:"varint,7,opt,name=is_attacker_illusion,json=isAttackerIllusion" json:"is_attacker_illusion,omitempty"`
	IsAttackerHero           *bool                 `protobuf:"varint,8,opt,name=is_attacker_hero,json=isAttackerHero" json:"is_attacker_hero,omitempty"`
	IsTargetIllusion         *bool                 `protobuf:"varint,9,opt,name=is_target_illusion,json=isTargetIllusion" json:"is_target_illusion,omitempty"`
	IsTargetHero             *bool                 `protobuf:"varint,10,opt,name=is_target_hero,json=isTargetHero" json:"is_target_hero,omitempty"`
	IsVisibleRadiant         *bool                 `protobuf:"varint,11,opt,name=is_visible_radiant,json=isVisibleRadiant" json:"is_visible_radiant,omitempty"`
	IsVisibleDire            *bool                 `protobuf:"varint,12,opt,name=is_visible_dire,json=isVisibleDire" json:"is_visible_dire,omitempty"`
	Value                    *uint32               `protobuf:"varint,13,opt,name=value" json:"value,omitempty"`
	Health                   *int32                `protobuf:"varint,14,opt,name=health" json:"health,omitempty"`
	Timestamp                *float32              `protobuf:"fixed32,15,opt,name=timestamp" json:"timestamp,omitempty"`
	StunDuration             *float32              `protobuf:"fixed32,16,opt,name=stun_duration,json=stunDuration" json:"stun_duration,omitempty"`
	SlowDuration             *float32              `protobuf:"fixed32,17,opt,name=slow_duration,json=slowDuration" json:"slow_duration,omitempty"`
	IsAbilityToggleOn        *bool                 `protobuf:"varint,18,opt,name=is_ability_toggle_on,json=isAbilityToggleOn" json:"is_ability_toggle_on,omitempty"`
	IsAbilityToggleOff       *bool                 `protobuf:"varint,19,opt,name=is_ability_toggle_off,json=isAbilityToggleOff" json:"is_ability_toggle_off,omitempty"`
	AbilityLevel             *uint32               `protobuf:"varint,20,opt,name=ability_level,json=abilityLevel" json:"ability_level,omitempty"`
	LocationX                *float32              `protobuf:"fixed32,21,opt,name=location_x,json=locationX" json:"location_x,omitempty"`
	LocationY                *float32              `protobuf:"fixed32,22,opt,name=location_y,json=locationY" json:"location_y,omitempty"`
	GoldReason               *uint32               `protobuf:"varint,23,opt,name=gold_reason,json=goldReason" json:"gold_reason,omitempty"`
	TimestampRaw             *float32              `protobuf:"fixed32,24,opt,name=timestamp_raw,json=timestampRaw" json:"timestamp_raw,omitempty"`
	ModifierDuration         *float32              `protobuf:"fixed32,25,opt,name=modifier_duration,json=modifierDuration" json:"modifier_duration,omitempty"`
	XpReason                 *uint32               `protobuf:"varint,26,opt,name=xp_reason,json=xpReason" json:"xp_reason,omitempty"`
	LastHits                 *uint32               `protobuf:"varint,27,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	AttackerTeam             *uint32               `protobuf:"varint,28,opt,name=attacker_team,json=attackerTeam" json:"attacker_team,omitempty"`
	TargetTeam               *uint32               `protobuf:"varint,29,opt,name=target_team,json=targetTeam" json:"target_team,omitempty"`
	ObsWardsPlaced           *uint32               `protobuf:"varint,30,opt,name=obs_wards_placed,json=obsWardsPlaced" json:"obs_wards_placed,omitempty"`
	AssistPlayer0            *uint32               `protobuf:"varint,31,opt,name=assist_player0,json=assistPlayer0" json:"assist_player0,omitempty"`
	AssistPlayer1            *uint32               `protobuf:"varint,32,opt,name=assist_player1,json=assistPlayer1" json:"assist_player1,omitempty"`
	AssistPlayer2            *uint32               `protobuf:"varint,33,opt,name=assist_player2,json=assistPlayer2" json:"assist_player2,omitempty"`
	AssistPlayer3            *uint32               `protobuf:"varint,34,opt,name=assist_player3,json=assistPlayer3" json:"assist_player3,omitempty"`
	StackCount               *uint32               `protobuf:"varint,35,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
	HiddenModifier           *bool                 `protobuf:"varint,36,opt,name=hidden_modifier,json=hiddenModifier" json:"hidden_modifier,omitempty"`
	IsTargetBuilding         *bool                 `protobuf:"varint,37,opt,name=is_target_building,json=isTargetBuilding" json:"is_target_building,omitempty"`
	NeutralCampType          *uint32               `protobuf:"varint,38,opt,name=neutral_camp_type,json=neutralCampType" json:"neutral_camp_type,omitempty"`
	RuneType                 *uint32               `protobuf:"varint,39,opt,name=rune_type,json=runeType" json:"rune_type,omitempty"`
	AssistPlayers            []uint32              `protobuf:"varint,40,rep,name=assist_players,json=assistPlayers" json:"assist_players,omitempty"`
	IsHealSave               *bool                 `protobuf:"varint,41,opt,name=is_heal_save,json=isHealSave" json:"is_heal_save,omitempty"`
	IsUltimateAbility        *bool                 `protobuf:"varint,42,opt,name=is_ultimate_ability,json=isUltimateAbility" json:"is_ultimate_ability,omitempty"`
	AttackerHeroLevel        *uint32               `protobuf:"varint,43,opt,name=attacker_hero_level,json=attackerHeroLevel" json:"attacker_hero_level,omitempty"`
	TargetHeroLevel          *uint32               `protobuf:"varint,44,opt,name=target_hero_level,json=targetHeroLevel" json:"target_hero_level,omitempty"`
	Xpm                      *uint32               `protobuf:"varint,45,opt,name=xpm" json:"xpm,omitempty"`
	Gpm                      *uint32               `protobuf:"varint,46,opt,name=gpm" json:"gpm,omitempty"`
	EventLocation            *uint32               `protobuf:"varint,47,opt,name=event_location,json=eventLocation" json:"event_location,omitempty"`
	TargetIsSelf             *bool                 `protobuf:"varint,48,opt,name=target_is_self,json=targetIsSelf" json:"target_is_self,omitempty"`
	DamageType               *uint32               `protobuf:"varint,49,opt,name=damage_type,json=damageType" json:"damage_type,omitempty"`
	InvisibilityModifier     *bool                 `protobuf:"varint,50,opt,name=invisibility_modifier,json=invisibilityModifier" json:"invisibility_modifier,omitempty"`
	DamageCategory           *uint32               `protobuf:"varint,51,opt,name=damage_category,json=damageCategory" json:"damage_category,omitempty"`
	Networth                 *uint32               `protobuf:"varint,52,opt,name=networth" json:"networth,omitempty"`
	BuildingType             *uint32               `protobuf:"varint,53,opt,name=building_type,json=buildingType" json:"building_type,omitempty"`
	ModifierElapsedDuration  *float32              `protobuf:"fixed32,54,opt,name=modifier_elapsed_duration,json=modifierElapsedDuration" json:"modifier_elapsed_duration,omitempty"`
	SilenceModifier          *bool                 `protobuf:"varint,55,opt,name=silence_modifier,json=silenceModifier" json:"silence_modifier,omitempty"`
	HealFromLifesteal        *bool                 `protobuf:"varint,56,opt,name=heal_from_lifesteal,json=healFromLifesteal" json:"heal_from_lifesteal,omitempty"`
	ModifierPurged           *bool                 `protobuf:"varint,57,opt,name=modifier_purged,json=modifierPurged" json:"modifier_purged,omitempty"`
	SpellEvaded              *bool                 `protobuf:"varint,58,opt,name=spell_evaded,json=spellEvaded" json:"spell_evaded,omitempty"`
	MotionControllerModifier *bool                 `protobuf:"varint,59,opt,name=motion_controller_modifier,json=motionControllerModifier" json:"motion_controller_modifier,omitempty"`
	LongRangeKill            *bool                 `protobuf:"varint,60,opt,name=long_range_kill,json=longRangeKill" json:"long_range_kill,omitempty"`
	ModifierPurgeAbility     *uint32               `protobuf:"varint,61,opt,name=modifier_purge_ability,json=modifierPurgeAbility" json:"modifier_purge_ability,omitempty"`
	ModifierPurgeNpc         *uint32               `protobuf:"varint,62,opt,name=modifier_purge_npc,json=modifierPurgeNpc" json:"modifier_purge_npc,omitempty"`
	RootModifier             *bool                 `protobuf:"varint,63,opt,name=root_modifier,json=rootModifier" json:"root_modifier,omitempty"`
	TotalUnitDeathCount      *uint32               `protobuf:"varint,64,opt,name=total_unit_death_count,json=totalUnitDeathCount" json:"total_unit_death_count,omitempty"`
	AuraModifier             *bool                 `protobuf:"varint,65,opt,name=aura_modifier,json=auraModifier" json:"aura_modifier,omitempty"`
	ArmorDebuffModifier      *bool                 `protobuf:"varint,66,opt,name=armor_debuff_modifier,json=armorDebuffModifier" json:"armor_debuff_modifier,omitempty"`
	NoPhysicalDamageModifier *bool                 `protobuf:"varint,67,opt,name=no_physical_damage_modifier,json=noPhysicalDamageModifier" json:"no_physical_damage_modifier,omitempty"`
	ModifierAbility          *uint32               `protobuf:"varint,68,opt,name=modifier_ability,json=modifierAbility" json:"modifier_ability,omitempty"`
	ModifierHidden           *bool                 `protobuf:"varint,69,opt,name=modifier_hidden,json=modifierHidden" json:"modifier_hidden,omitempty"`
	InflictorIsStolenAbility *bool                 `protobuf:"varint,70,opt,name=inflictor_is_stolen_ability,json=inflictorIsStolenAbility" json:"inflictor_is_stolen_ability,omitempty"`
	KillEaterEvent           *uint32               `protobuf:"varint,71,opt,name=kill_eater_event,json=killEaterEvent" json:"kill_eater_event,omitempty"`
	UnitStatusLabel          *uint32               `protobuf:"varint,72,opt,name=unit_status_label,json=unitStatusLabel" json:"unit_status_label,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}              `json:"-"`
	XXX_unrecognized         []byte                `json:"-"`
	XXX_sizecache            int32                 `json:"-"`
}

func (m *CMsgDOTACombatLogEntry) Reset()         { *m = CMsgDOTACombatLogEntry{} }
func (m *CMsgDOTACombatLogEntry) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTACombatLogEntry) ProtoMessage()    {}
func (*CMsgDOTACombatLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_dota_shared_enums_ab60e120f68ecb95, []int{2}
}
func (m *CMsgDOTACombatLogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTACombatLogEntry.Unmarshal(m, b)
}
func (m *CMsgDOTACombatLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTACombatLogEntry.Marshal(b, m, deterministic)
}
func (dst *CMsgDOTACombatLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTACombatLogEntry.Merge(dst, src)
}
func (m *CMsgDOTACombatLogEntry) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTACombatLogEntry.Size(m)
}
func (m *CMsgDOTACombatLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTACombatLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTACombatLogEntry proto.InternalMessageInfo

const Default_CMsgDOTACombatLogEntry_Type DOTA_COMBATLOG_TYPES = DOTA_COMBATLOG_TYPES_DOTA_COMBATLOG_INVALID

func (m *CMsgDOTACombatLogEntry) GetType() DOTA_COMBATLOG_TYPES {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_CMsgDOTACombatLogEntry_Type
}

func (m *CMsgDOTACombatLogEntry) GetTargetName() uint32 {
	if m != nil && m.TargetName != nil {
		return *m.TargetName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTargetSourceName() uint32 {
	if m != nil && m.TargetSourceName != nil {
		return *m.TargetSourceName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAttackerName() uint32 {
	if m != nil && m.AttackerName != nil {
		return *m.AttackerName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetDamageSourceName() uint32 {
	if m != nil && m.DamageSourceName != nil {
		return *m.DamageSourceName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetInflictorName() uint32 {
	if m != nil && m.InflictorName != nil {
		return *m.InflictorName
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetIsAttackerIllusion() bool {
	if m != nil && m.IsAttackerIllusion != nil {
		return *m.IsAttackerIllusion
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsAttackerHero() bool {
	if m != nil && m.IsAttackerHero != nil {
		return *m.IsAttackerHero
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsTargetIllusion() bool {
	if m != nil && m.IsTargetIllusion != nil {
		return *m.IsTargetIllusion
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsTargetHero() bool {
	if m != nil && m.IsTargetHero != nil {
		return *m.IsTargetHero
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsVisibleRadiant() bool {
	if m != nil && m.IsVisibleRadiant != nil {
		return *m.IsVisibleRadiant
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsVisibleDire() bool {
	if m != nil && m.IsVisibleDire != nil {
		return *m.IsVisibleDire
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetValue() uint32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetHealth() int32 {
	if m != nil && m.Health != nil {
		return *m.Health
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTimestamp() float32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetStunDuration() float32 {
	if m != nil && m.StunDuration != nil {
		return *m.StunDuration
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetSlowDuration() float32 {
	if m != nil && m.SlowDuration != nil {
		return *m.SlowDuration
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetIsAbilityToggleOn() bool {
	if m != nil && m.IsAbilityToggleOn != nil {
		return *m.IsAbilityToggleOn
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsAbilityToggleOff() bool {
	if m != nil && m.IsAbilityToggleOff != nil {
		return *m.IsAbilityToggleOff
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetAbilityLevel() uint32 {
	if m != nil && m.AbilityLevel != nil {
		return *m.AbilityLevel
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetLocationX() float32 {
	if m != nil && m.LocationX != nil {
		return *m.LocationX
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetLocationY() float32 {
	if m != nil && m.LocationY != nil {
		return *m.LocationY
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetGoldReason() uint32 {
	if m != nil && m.GoldReason != nil {
		return *m.GoldReason
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTimestampRaw() float32 {
	if m != nil && m.TimestampRaw != nil {
		return *m.TimestampRaw
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetModifierDuration() float32 {
	if m != nil && m.ModifierDuration != nil {
		return *m.ModifierDuration
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetXpReason() uint32 {
	if m != nil && m.XpReason != nil {
		return *m.XpReason
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetLastHits() uint32 {
	if m != nil && m.LastHits != nil {
		return *m.LastHits
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAttackerTeam() uint32 {
	if m != nil && m.AttackerTeam != nil {
		return *m.AttackerTeam
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTargetTeam() uint32 {
	if m != nil && m.TargetTeam != nil {
		return *m.TargetTeam
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetObsWardsPlaced() uint32 {
	if m != nil && m.ObsWardsPlaced != nil {
		return *m.ObsWardsPlaced
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayer0() uint32 {
	if m != nil && m.AssistPlayer0 != nil {
		return *m.AssistPlayer0
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayer1() uint32 {
	if m != nil && m.AssistPlayer1 != nil {
		return *m.AssistPlayer1
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayer2() uint32 {
	if m != nil && m.AssistPlayer2 != nil {
		return *m.AssistPlayer2
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayer3() uint32 {
	if m != nil && m.AssistPlayer3 != nil {
		return *m.AssistPlayer3
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetStackCount() uint32 {
	if m != nil && m.StackCount != nil {
		return *m.StackCount
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetHiddenModifier() bool {
	if m != nil && m.HiddenModifier != nil {
		return *m.HiddenModifier
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsTargetBuilding() bool {
	if m != nil && m.IsTargetBuilding != nil {
		return *m.IsTargetBuilding
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetNeutralCampType() uint32 {
	if m != nil && m.NeutralCampType != nil {
		return *m.NeutralCampType
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetRuneType() uint32 {
	if m != nil && m.RuneType != nil {
		return *m.RuneType
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAssistPlayers() []uint32 {
	if m != nil {
		return m.AssistPlayers
	}
	return nil
}

func (m *CMsgDOTACombatLogEntry) GetIsHealSave() bool {
	if m != nil && m.IsHealSave != nil {
		return *m.IsHealSave
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetIsUltimateAbility() bool {
	if m != nil && m.IsUltimateAbility != nil {
		return *m.IsUltimateAbility
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetAttackerHeroLevel() uint32 {
	if m != nil && m.AttackerHeroLevel != nil {
		return *m.AttackerHeroLevel
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTargetHeroLevel() uint32 {
	if m != nil && m.TargetHeroLevel != nil {
		return *m.TargetHeroLevel
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetXpm() uint32 {
	if m != nil && m.Xpm != nil {
		return *m.Xpm
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetGpm() uint32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetEventLocation() uint32 {
	if m != nil && m.EventLocation != nil {
		return *m.EventLocation
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetTargetIsSelf() bool {
	if m != nil && m.TargetIsSelf != nil {
		return *m.TargetIsSelf
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetDamageType() uint32 {
	if m != nil && m.DamageType != nil {
		return *m.DamageType
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetInvisibilityModifier() bool {
	if m != nil && m.InvisibilityModifier != nil {
		return *m.InvisibilityModifier
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetDamageCategory() uint32 {
	if m != nil && m.DamageCategory != nil {
		return *m.DamageCategory
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetNetworth() uint32 {
	if m != nil && m.Networth != nil {
		return *m.Networth
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetBuildingType() uint32 {
	if m != nil && m.BuildingType != nil {
		return *m.BuildingType
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetModifierElapsedDuration() float32 {
	if m != nil && m.ModifierElapsedDuration != nil {
		return *m.ModifierElapsedDuration
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetSilenceModifier() bool {
	if m != nil && m.SilenceModifier != nil {
		return *m.SilenceModifier
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetHealFromLifesteal() bool {
	if m != nil && m.HealFromLifesteal != nil {
		return *m.HealFromLifesteal
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetModifierPurged() bool {
	if m != nil && m.ModifierPurged != nil {
		return *m.ModifierPurged
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetSpellEvaded() bool {
	if m != nil && m.SpellEvaded != nil {
		return *m.SpellEvaded
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetMotionControllerModifier() bool {
	if m != nil && m.MotionControllerModifier != nil {
		return *m.MotionControllerModifier
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetLongRangeKill() bool {
	if m != nil && m.LongRangeKill != nil {
		return *m.LongRangeKill
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetModifierPurgeAbility() uint32 {
	if m != nil && m.ModifierPurgeAbility != nil {
		return *m.ModifierPurgeAbility
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetModifierPurgeNpc() uint32 {
	if m != nil && m.ModifierPurgeNpc != nil {
		return *m.ModifierPurgeNpc
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetRootModifier() bool {
	if m != nil && m.RootModifier != nil {
		return *m.RootModifier
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetTotalUnitDeathCount() uint32 {
	if m != nil && m.TotalUnitDeathCount != nil {
		return *m.TotalUnitDeathCount
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetAuraModifier() bool {
	if m != nil && m.AuraModifier != nil {
		return *m.AuraModifier
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetArmorDebuffModifier() bool {
	if m != nil && m.ArmorDebuffModifier != nil {
		return *m.ArmorDebuffModifier
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetNoPhysicalDamageModifier() bool {
	if m != nil && m.NoPhysicalDamageModifier != nil {
		return *m.NoPhysicalDamageModifier
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetModifierAbility() uint32 {
	if m != nil && m.ModifierAbility != nil {
		return *m.ModifierAbility
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetModifierHidden() bool {
	if m != nil && m.ModifierHidden != nil {
		return *m.ModifierHidden
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetInflictorIsStolenAbility() bool {
	if m != nil && m.InflictorIsStolenAbility != nil {
		return *m.InflictorIsStolenAbility
	}
	return false
}

func (m *CMsgDOTACombatLogEntry) GetKillEaterEvent() uint32 {
	if m != nil && m.KillEaterEvent != nil {
		return *m.KillEaterEvent
	}
	return 0
}

func (m *CMsgDOTACombatLogEntry) GetUnitStatusLabel() uint32 {
	if m != nil && m.UnitStatusLabel != nil {
		return *m.UnitStatusLabel
	}
	return 0
}

func init() {
	proto.RegisterType((*CDOTAClientHardwareSpecs)(nil), "dota.CDOTAClientHardwareSpecs")
	proto.RegisterType((*CDOTASaveGame)(nil), "dota.CDOTASaveGame")
	proto.RegisterType((*CDOTASaveGame_Player)(nil), "dota.CDOTASaveGame.Player")
	proto.RegisterType((*CDOTASaveGame_SaveInstance)(nil), "dota.CDOTASaveGame.SaveInstance")
	proto.RegisterType((*CDOTASaveGame_SaveInstance_PlayerPositions)(nil), "dota.CDOTASaveGame.SaveInstance.PlayerPositions")
	proto.RegisterType((*CMsgDOTACombatLogEntry)(nil), "dota.CMsgDOTACombatLogEntry")
	proto.RegisterEnum("dota.DOTA_GameMode", DOTA_GameMode_name, DOTA_GameMode_value)
	proto.RegisterEnum("dota.DOTA_GameState", DOTA_GameState_name, DOTA_GameState_value)
	proto.RegisterEnum("dota.DOTA_GC_TEAM", DOTA_GC_TEAM_name, DOTA_GC_TEAM_value)
	proto.RegisterEnum("dota.EEvent", EEvent_name, EEvent_value)
	proto.RegisterEnum("dota.DOTALeaverStatusT", DOTALeaverStatusT_name, DOTALeaverStatusT_value)
	proto.RegisterEnum("dota.DOTAConnectionStateT", DOTAConnectionStateT_name, DOTAConnectionStateT_value)
	proto.RegisterEnum("dota.Fantasy_Roles", Fantasy_Roles_name, Fantasy_Roles_value)
	proto.RegisterEnum("dota.Fantasy_Team_Slots", Fantasy_Team_Slots_name, Fantasy_Team_Slots_value)
	proto.RegisterEnum("dota.Fantasy_Selection_Mode", Fantasy_Selection_Mode_name, Fantasy_Selection_Mode_value)
	proto.RegisterEnum("dota.DOTAChatChannelTypeT", DOTAChatChannelTypeT_name, DOTAChatChannelTypeT_value)
	proto.RegisterEnum("dota.EProfileCardSlotType", EProfileCardSlotType_name, EProfileCardSlotType_value)
	proto.RegisterEnum("dota.EMatchGroupServerStatus", EMatchGroupServerStatus_name, EMatchGroupServerStatus_value)
	proto.RegisterEnum("dota.DOTA_CM_PICK", DOTA_CM_PICK_name, DOTA_CM_PICK_value)
	proto.RegisterEnum("dota.DOTALowPriorityBanType", DOTALowPriorityBanType_name, DOTALowPriorityBanType_value)
	proto.RegisterEnum("dota.DOTALobbyReadyState", DOTALobbyReadyState_name, DOTALobbyReadyState_value)
	proto.RegisterEnum("dota.DOTAGameVersion", DOTAGameVersion_name, DOTAGameVersion_value)
	proto.RegisterEnum("dota.DOTAJoinLobbyResult", DOTAJoinLobbyResult_name, DOTAJoinLobbyResult_value)
	proto.RegisterEnum("dota.DOTASelectionPriorityRules", DOTASelectionPriorityRules_name, DOTASelectionPriorityRules_value)
	proto.RegisterEnum("dota.DOTASelectionPriorityChoice", DOTASelectionPriorityChoice_name, DOTASelectionPriorityChoice_value)
	proto.RegisterEnum("dota.DOTAMatchVote", DOTAMatchVote_name, DOTAMatchVote_value)
	proto.RegisterEnum("dota.DOTA_LobbyMemberXPBonus", DOTA_LobbyMemberXPBonus_name, DOTA_LobbyMemberXPBonus_value)
	proto.RegisterEnum("dota.DOTALobbyVisibility", DOTALobbyVisibility_name, DOTALobbyVisibility_value)
	proto.RegisterEnum("dota.EDOTAPlayerMMRType", EDOTAPlayerMMRType_name, EDOTAPlayerMMRType_value)
	proto.RegisterEnum("dota.MatchType", MatchType_name, MatchType_value)
	proto.RegisterEnum("dota.DOTABotDifficulty", DOTABotDifficulty_name, DOTABotDifficulty_value)
	proto.RegisterEnum("dota.DOTA_BOT_MODE", DOTA_BOT_MODE_name, DOTA_BOT_MODE_value)
	proto.RegisterEnum("dota.MatchLanguages", MatchLanguages_name, MatchLanguages_value)
	proto.RegisterEnum("dota.ETourneyQueueDeadlineState", ETourneyQueueDeadlineState_name, ETourneyQueueDeadlineState_value)
	proto.RegisterEnum("dota.EMatchOutcome", EMatchOutcome_name, EMatchOutcome_value)
	proto.RegisterEnum("dota.ELaneType", ELaneType_name, ELaneType_value)
	proto.RegisterEnum("dota.EBadgeType", EBadgeType_name, EBadgeType_value)
	proto.RegisterEnum("dota.ELeagueStatus", ELeagueStatus_name, ELeagueStatus_value)
	proto.RegisterEnum("dota.ELeagueRegion", ELeagueRegion_name, ELeagueRegion_value)
	proto.RegisterEnum("dota.ELeagueTier", ELeagueTier_name, ELeagueTier_value)
	proto.RegisterEnum("dota.ELeagueTierCategory", ELeagueTierCategory_name, ELeagueTierCategory_value)
	proto.RegisterEnum("dota.ELeagueFlags", ELeagueFlags_name, ELeagueFlags_value)
	proto.RegisterEnum("dota.ELeagueBroadcastProvider", ELeagueBroadcastProvider_name, ELeagueBroadcastProvider_value)
	proto.RegisterEnum("dota.ELeaguePhase", ELeaguePhase_name, ELeaguePhase_value)
	proto.RegisterEnum("dota.ELeagueFantasyPhase", ELeagueFantasyPhase_name, ELeagueFantasyPhase_value)
	proto.RegisterEnum("dota.ELeagueAuditAction", ELeagueAuditAction_name, ELeagueAuditAction_value)
	proto.RegisterEnum("dota.DOTA_COMBATLOG_TYPES", DOTA_COMBATLOG_TYPES_name, DOTA_COMBATLOG_TYPES_value)
	proto.RegisterEnum("dota.EDPCFavoriteType", EDPCFavoriteType_name, EDPCFavoriteType_value)
	proto.RegisterEnum("dota.EDPCPushNotification", EDPCPushNotification_name, EDPCPushNotification_value)
}

func init() {
	proto.RegisterFile("dota_shared_enums.proto", fileDescriptor_dota_shared_enums_ab60e120f68ecb95)
}

var fileDescriptor_dota_shared_enums_ab60e120f68ecb95 = []byte{
	// 6671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x7b, 0x4b, 0x8c, 0xe4, 0xc8,
	0xd6, 0x56, 0x67, 0xd6, 0x3b, 0xba, 0xab, 0x3b, 0xca, 0xfd, 0xca, 0x7e, 0xcc, 0x4c, 0xcd, 0xf4,
	0x4c, 0x77, 0x4d, 0xce, 0x4c, 0xdf, 0xe9, 0x9e, 0xb9, 0x33, 0xf3, 0x5f, 0xfe, 0xff, 0xe7, 0x8f,
	0xb4, 0x23, 0x33, 0x3d, 0xe5, 0xb4, 0x7d, 0xc3, 0x76, 0xd5, 0x14, 0x2c, 0x42, 0xae, 0x4c, 0x57,
	0x95, 0x69, 0xa7, 0x9d, 0xd8, 0xce, 0xea, 0x2e, 0x09, 0x24, 0x24, 0x10, 0x0b, 0x60, 0x07, 0x48,
	0x2c, 0x10, 0x62, 0x79, 0x25, 0x16, 0xac, 0x60, 0x03, 0x12, 0x88, 0x0d, 0xef, 0x97, 0xc4, 0x82,
	0x0d, 0x48, 0x6c, 0x11, 0x3b, 0x04, 0x5b, 0x50, 0x44, 0xf8, 0x95, 0x69, 0x67, 0xd5, 0xbd, 0x8b,
	0x3b, 0x9d, 0xe7, 0xfb, 0x22, 0xe2, 0xc4, 0x89, 0x73, 0x4e, 0x9c, 0x08, 0x47, 0x81, 0xc7, 0x93,
	0x28, 0x75, 0x69, 0x72, 0xe1, 0xc6, 0xde, 0x84, 0x7a, 0xe1, 0x7c, 0x9a, 0xbc, 0x9e, 0xc5, 0x51,
	0x1a, 0x49, 0xeb, 0x0c, 0xf8, 0xec, 0x77, 0x6d, 0xd0, 0x91, 0x15, 0xc3, 0x46, 0x72, 0xe0, 0x7b,
	0x61, 0x3a, 0x74, 0xe3, 0xc9, 0x7b, 0x37, 0xf6, 0xac, 0x99, 0x37, 0x4e, 0xa4, 0x6f, 0x80, 0x14,
	0x44, 0xe7, 0xfe, 0xd8, 0x0d, 0xe8, 0x2c, 0x8e, 0xc6, 0x5e, 0x92, 0x44, 0x71, 0xd2, 0x69, 0xed,
	0xb7, 0x0e, 0x76, 0xc9, 0x5e, 0x86, 0x98, 0x05, 0x20, 0xbd, 0x01, 0x0f, 0xc7, 0xb3, 0x39, 0x1d,
	0x5f, 0x8d, 0x03, 0x2f, 0xa1, 0x33, 0x2f, 0xa6, 0x89, 0x37, 0x8e, 0xc2, 0x49, 0xa7, 0xbd, 0xdf,
	0x3a, 0xd8, 0x24, 0xd2, 0x78, 0x36, 0x97, 0x39, 0x66, 0x7a, 0xb1, 0xc5, 0x11, 0xe9, 0x2d, 0x78,
	0x98, 0x46, 0x29, 0xeb, 0xff, 0xe2, 0x2a, 0xe1, 0x03, 0x4d, 0xbd, 0x69, 0x14, 0x5f, 0x75, 0xd6,
	0x78, 0x93, 0xfb, 0x1c, 0x34, 0x33, 0x6c, 0xc4, 0x21, 0xe9, 0x13, 0x70, 0xc7, 0x4f, 0xe8, 0x0f,
	0xdf, 0xd3, 0x53, 0x3f, 0xa5, 0x51, 0xd2, 0x59, 0xdf, 0x6f, 0x1d, 0x6c, 0x93, 0x1d, 0x3f, 0xf9,
	0xe1, 0xfb, 0x9e, 0x9f, 0x1a, 0x5c, 0xed, 0xf9, 0x2c, 0x88, 0xdc, 0x09, 0x9d, 0x7a, 0x6e, 0x32,
	0x8f, 0xbd, 0xa9, 0x17, 0xa6, 0x9d, 0x8d, 0xfd, 0xd6, 0xc1, 0x3a, 0xd9, 0x13, 0xc8, 0xa8, 0x04,
	0xa4, 0x97, 0xe0, 0xde, 0x2c, 0xf6, 0xce, 0xbc, 0x98, 0x86, 0x51, 0x4a, 0x2f, 0xa2, 0x24, 0xed,
	0x6c, 0xf2, 0x2e, 0x77, 0x85, 0x58, 0x8f, 0xd2, 0x61, 0x94, 0xa4, 0x9f, 0xfd, 0xcf, 0x75, 0xb0,
	0xcb, 0x4d, 0x65, 0xb9, 0x97, 0xde, 0xc0, 0x9d, 0x7a, 0xd2, 0x13, 0xb0, 0x3d, 0x75, 0xd3, 0xf1,
	0x05, 0xf5, 0x27, 0x59, 0xf7, 0x5b, 0xfc, 0xb7, 0x3a, 0x91, 0x9e, 0x81, 0x9d, 0xc4, 0xbd, 0xf4,
	0x68, 0xea, 0x4f, 0x3d, 0x3e, 0xff, 0x5d, 0xb2, 0xcd, 0x04, 0xb6, 0x3f, 0xf5, 0xa4, 0xef, 0xc1,
	0xd6, 0x2c, 0x70, 0xaf, 0xbc, 0x38, 0xe9, 0xac, 0xed, 0xaf, 0x1d, 0xdc, 0x7e, 0xfb, 0xf4, 0x35,
	0x5b, 0x8c, 0xd7, 0x0b, 0xbd, 0xbf, 0x36, 0x39, 0x85, 0xe4, 0x54, 0x69, 0x00, 0xee, 0xf2, 0x2e,
	0xfd, 0x30, 0x49, 0xdd, 0x70, 0xec, 0xb1, 0x99, 0xb3, 0xc6, 0xfb, 0x4d, 0x8d, 0xd9, 0x3f, 0xd4,
	0x8c, 0x48, 0x76, 0x93, 0xca, 0xaf, 0xe4, 0xe9, 0x0c, 0x6c, 0x8a, 0xbe, 0xa5, 0x3f, 0x06, 0xeb,
	0xa9, 0xe7, 0x4e, 0xf9, 0x92, 0xde, 0x7d, 0x2b, 0x89, 0x8e, 0x58, 0x3f, 0x74, 0x20, 0x53, 0x1b,
	0xa3, 0xd1, 0x6f, 0x1e, 0x55, 0x7f, 0xd1, 0x81, 0x61, 0x28, 0x74, 0xe0, 0x9c, 0x58, 0x84, 0xb7,
	0x93, 0x24, 0xb0, 0x1e, 0xba, 0xd9, 0x04, 0x77, 0x08, 0xff, 0x37, 0x93, 0x5d, 0x78, 0x71, 0xc4,
	0x57, 0x70, 0x87, 0xf0, 0x7f, 0x3f, 0xfd, 0x87, 0x6d, 0x70, 0xa7, 0xaa, 0x11, 0x33, 0xcf, 0xb9,
	0x3b, 0x5d, 0x34, 0x0f, 0x13, 0x70, 0xf3, 0x7c, 0x02, 0x6e, 0xb3, 0xde, 0xdf, 0xd0, 0x64, 0x1c,
	0xc5, 0x1e, 0xef, 0x68, 0x97, 0x00, 0x2e, 0xb2, 0x98, 0x24, 0x27, 0xbc, 0xcd, 0x08, 0xeb, 0x25,
	0xe1, 0xad, 0x20, 0xfc, 0x59, 0x00, 0x85, 0xd5, 0xe8, 0x2c, 0x4a, 0xfc, 0xd4, 0x8f, 0xc2, 0xa4,
	0xb3, 0xc1, 0x8d, 0xf5, 0xed, 0x4d, 0xc6, 0xca, 0xcc, 0x6e, 0xe6, 0xed, 0xc8, 0xbd, 0xd9, 0xa2,
	0x40, 0x7a, 0x0c, 0xb6, 0xc4, 0x3a, 0x4c, 0xb8, 0x9f, 0xec, 0x92, 0x4d, 0x6e, 0xde, 0xa5, 0x35,
	0xdf, 0x5a, 0x5c, 0xf3, 0xa7, 0xdf, 0x80, 0x7b, 0x4b, 0x3d, 0x4b, 0x77, 0x40, 0xeb, 0x03, 0x37,
	0x7d, 0x9b, 0xb4, 0x3e, 0xb0, 0x5f, 0x57, 0xdc, 0x14, 0x6d, 0xd2, 0xba, 0xfa, 0xec, 0x6f, 0x3d,
	0x06, 0x8f, 0xe4, 0x51, 0x72, 0xce, 0x43, 0x33, 0x9a, 0x9e, 0xba, 0xa9, 0x16, 0x9d, 0xe3, 0x30,
	0x8d, 0xaf, 0xa4, 0x3e, 0x58, 0x4f, 0xaf, 0x66, 0x5e, 0xb6, 0x68, 0x4f, 0x2b, 0x8b, 0x26, 0x1b,
	0xa3, 0x1e, 0xb2, 0x35, 0x63, 0x40, 0xed, 0x13, 0x13, 0x5b, 0xd9, 0xe2, 0x95, 0x52, 0x55, 0x3f,
	0x42, 0x9a, 0xaa, 0x10, 0xde, 0x9e, 0x5b, 0xd1, 0x8d, 0xcf, 0xbd, 0x94, 0x16, 0x6b, 0xc8, 0xac,
	0xc8, 0x45, 0x3a, 0x5b, 0xc9, 0xaf, 0x81, 0x94, 0x11, 0x92, 0x68, 0x1e, 0x8f, 0x3d, 0xc1, 0x13,
	0xcb, 0x01, 0x05, 0x62, 0x71, 0x80, 0xb3, 0x5f, 0x80, 0x5d, 0x37, 0x4d, 0xdd, 0xf1, 0x3b, 0x16,
	0x48, 0x8c, 0x28, 0x96, 0xe5, 0x4e, 0x2e, 0xcc, 0xbb, 0x9c, 0xb8, 0x53, 0xf7, 0xdc, 0x5b, 0xe8,
	0x72, 0x43, 0x74, 0x29, 0x90, 0x4a, 0x97, 0x5f, 0x80, 0xbb, 0x7e, 0x78, 0x16, 0xf8, 0xe3, 0x34,
	0xca, 0xfa, 0x14, 0x06, 0xdf, 0x2d, 0xa4, 0x9c, 0xf6, 0x2d, 0x78, 0xe0, 0x27, 0xb4, 0x18, 0xdc,
	0x0f, 0x82, 0x79, 0xe2, 0x47, 0x21, 0x5f, 0x82, 0x6d, 0x22, 0xf9, 0x09, 0xca, 0x20, 0x35, 0x43,
	0xa4, 0x03, 0x00, 0xab, 0x2d, 0xb8, 0xbf, 0x6e, 0x73, 0xf6, 0xdd, 0x92, 0x3d, 0xf4, 0xe2, 0x88,
	0x29, 0xec, 0x27, 0x34, 0x33, 0x43, 0xd1, 0xf3, 0x0e, 0xe7, 0x42, 0x3f, 0xb1, 0x39, 0x50, 0xf4,
	0xfb, 0x39, 0xb8, 0x5b, 0xb2, 0x79, 0xaf, 0x80, 0x33, 0xef, 0xe4, 0xcc, 0x4a, 0x9f, 0x97, 0x7e,
	0xe2, 0x9f, 0x06, 0x1e, 0x8d, 0xdd, 0x89, 0xef, 0x86, 0x69, 0xe7, 0x76, 0xde, 0xe7, 0x91, 0x00,
	0x88, 0x90, 0xb3, 0xf4, 0x54, 0x61, 0x4f, 0xfc, 0xd8, 0xeb, 0xdc, 0x11, 0xe9, 0xa9, 0xa0, 0x2a,
	0x7e, 0xec, 0x49, 0x0f, 0xc0, 0xc6, 0xa5, 0x1b, 0xcc, 0xbd, 0xce, 0x2e, 0xb7, 0x91, 0xf8, 0x21,
	0x3d, 0x02, 0x9b, 0x17, 0x9e, 0x1b, 0xa4, 0x17, 0x9d, 0xbb, 0xfb, 0xad, 0x83, 0x0d, 0x92, 0xfd,
	0x92, 0x9e, 0x83, 0x1d, 0xe6, 0xa6, 0x49, 0xea, 0x4e, 0x67, 0x9d, 0x7b, 0xdc, 0xeb, 0x4a, 0x01,
	0x5b, 0xcb, 0x24, 0x9d, 0x87, 0x74, 0x32, 0x8f, 0x5d, 0xe6, 0xab, 0x1d, 0xc8, 0x19, 0x77, 0x98,
	0x50, 0xc9, 0x64, 0x9c, 0x14, 0x44, 0xef, 0x4b, 0xd2, 0x5e, 0x46, 0x0a, 0xa2, 0xf7, 0x05, 0xe9,
	0x57, 0x62, 0x6d, 0x4e, 0xfd, 0xc0, 0x4f, 0xaf, 0x68, 0x1a, 0x9d, 0x9f, 0x07, 0x1e, 0x8d, 0xc2,
	0x8e, 0xc4, 0xa7, 0xb0, 0xe7, 0x27, 0x48, 0x40, 0x36, 0x47, 0x8c, 0x90, 0x6d, 0x22, 0x0d, 0x0d,
	0xce, 0xce, 0x3a, 0xf7, 0x8b, 0xd5, 0x5c, 0x68, 0x71, 0x76, 0xc6, 0x3d, 0x2f, 0xe3, 0x07, 0xde,
	0xa5, 0x17, 0x74, 0x1e, 0x64, 0x9e, 0x27, 0x84, 0x1a, 0x93, 0x49, 0x1f, 0x01, 0x10, 0x44, 0x63,
	0xae, 0x14, 0xfd, 0xd0, 0x79, 0x28, 0x66, 0x9c, 0x4b, 0x7e, 0x59, 0x80, 0xaf, 0x3a, 0x8f, 0x16,
	0xe1, 0x13, 0x16, 0x2b, 0xe7, 0x51, 0x30, 0xa1, 0xb1, 0xe7, 0x26, 0x51, 0xd8, 0x79, 0x2c, 0x62,
	0x85, 0x89, 0x08, 0x97, 0x30, 0x1d, 0x0a, 0xf3, 0xd1, 0xd8, 0x7d, 0xdf, 0xe9, 0x08, 0x63, 0x14,
	0x42, 0xe2, 0xbe, 0x97, 0xbe, 0x02, 0x7b, 0xd3, 0x68, 0xe2, 0x9f, 0xf9, 0x5e, 0x5c, 0x5a, 0xed,
	0x09, 0x27, 0xc2, 0x1c, 0x28, 0x2c, 0xf7, 0x0c, 0xec, 0x7c, 0x98, 0xe5, 0x03, 0x3e, 0x15, 0xd9,
	0xe4, 0xc3, 0x2c, 0x1b, 0xee, 0x19, 0xd8, 0x09, 0xdc, 0x24, 0xa5, 0x17, 0x7e, 0x9a, 0x74, 0x9e,
	0x09, 0x90, 0x09, 0x86, 0x7e, 0x9a, 0x2c, 0x44, 0x22, 0x4f, 0xef, 0xcf, 0x17, 0x23, 0xd1, 0x66,
	0xa9, 0xbb, 0x8c, 0x7e, 0x4e, 0xf9, 0xa8, 0x1a, 0xfd, 0x9c, 0x70, 0x00, 0x60, 0x74, 0x9a, 0xd0,
	0xf7, 0x6e, 0x3c, 0x49, 0xe8, 0x2c, 0x70, 0xc7, 0xde, 0xa4, 0xf3, 0x31, 0x67, 0xdd, 0x8d, 0x4e,
	0x93, 0x63, 0x26, 0x36, 0xb9, 0x94, 0x85, 0xa9, 0x9b, 0x24, 0x7e, 0x92, 0x52, 0x91, 0x2a, 0xbf,
	0xed, 0x7c, 0x22, 0xc2, 0x54, 0x48, 0x45, 0xda, 0xfb, 0xb6, 0x46, 0x7b, 0xd3, 0xd9, 0xaf, 0xd3,
	0xde, 0xd4, 0x68, 0x6f, 0x3b, 0x9f, 0xd6, 0x69, 0x6f, 0x6b, 0xb4, 0xef, 0x3a, 0x9f, 0xd5, 0x69,
	0xdf, 0xb1, 0x69, 0x26, 0x6c, 0xd6, 0x74, 0x1c, 0xcd, 0xc3, 0xb4, 0xf3, 0x42, 0x4c, 0x93, 0x8b,
	0x64, 0x26, 0x91, 0x5e, 0x81, 0x7b, 0x17, 0xfe, 0x64, 0xe2, 0x85, 0x34, 0x5f, 0x81, 0xce, 0xe7,
	0x22, 0x13, 0x08, 0xf1, 0x28, 0x93, 0x2e, 0x66, 0x82, 0xd3, 0xb9, 0x1f, 0x4c, 0xfc, 0xf0, 0xbc,
	0xf3, 0xc5, 0x62, 0x26, 0xe8, 0x65, 0x72, 0xa9, 0x0b, 0xf6, 0x42, 0x6f, 0x9e, 0xc6, 0x6e, 0x40,
	0xc7, 0xcc, 0x25, 0x78, 0xc6, 0x7e, 0xc9, 0x47, 0xbf, 0x97, 0x01, 0xb2, 0x3b, 0x9d, 0xd9, 0x2c,
	0x11, 0x3f, 0x03, 0x3b, 0xf1, 0x3c, 0xf4, 0x04, 0xe7, 0x95, 0x58, 0x4c, 0x26, 0xe0, 0xe0, 0xf2,
	0x3c, 0x93, 0xce, 0xc1, 0xfe, 0xda, 0xf2, 0x3c, 0x13, 0x69, 0x9f, 0x17, 0x45, 0x2c, 0xb8, 0x29,
	0xdb, 0x72, 0x3a, 0x5f, 0x72, 0xbd, 0x80, 0x9f, 0x0c, 0x3d, 0x37, 0x60, 0xfb, 0x9b, 0xf4, 0x1a,
	0xdc, 0xf7, 0x13, 0x3a, 0x0f, 0x52, 0x7f, 0xea, 0xa6, 0x5e, 0x1e, 0x61, 0x9d, 0x6e, 0x1e, 0x88,
	0x4e, 0x86, 0x64, 0xe1, 0xc5, 0xf8, 0x0b, 0x09, 0x32, 0x8b, 0xad, 0xaf, 0x44, 0xf5, 0xe7, 0x56,
	0x92, 0xa4, 0x08, 0xb0, 0x2e, 0xd8, 0xab, 0x24, 0xbe, 0x8c, 0xfd, 0xb5, 0x98, 0x71, 0x5a, 0x24,
	0x3f, 0xc1, 0x85, 0x60, 0xed, 0xc3, 0x6c, 0xda, 0xf9, 0x86, 0xa3, 0xec, 0x9f, 0x4c, 0x72, 0x3e,
	0x9b, 0x76, 0x5e, 0x0b, 0xc9, 0xf9, 0x6c, 0xca, 0x26, 0xee, 0x5d, 0x7a, 0x61, 0x4a, 0xf3, 0x28,
	0xec, 0xfc, 0x4a, 0x2c, 0x30, 0x97, 0x6a, 0x99, 0x90, 0xa5, 0xdc, 0x3c, 0x3b, 0x27, 0x34, 0xf1,
	0x82, 0xb3, 0xce, 0xb7, 0x22, 0xe5, 0x0a, 0xa9, 0x9a, 0x58, 0x5e, 0x70, 0xc6, 0xdc, 0x20, 0xdb,
	0x77, 0xb8, 0x91, 0xdf, 0x08, 0x37, 0x10, 0x22, 0x6e, 0xe6, 0xef, 0xc0, 0x43, 0x3f, 0xe4, 0x49,
	0x56, 0x24, 0x92, 0xc2, 0x19, 0xde, 0xf2, 0xde, 0x1e, 0x54, 0xc1, 0xc2, 0x25, 0x5e, 0x81, 0x7b,
	0x59, 0xaf, 0x63, 0x37, 0xf5, 0xce, 0x59, 0xdd, 0xfa, 0x9d, 0x88, 0x10, 0x21, 0x96, 0x33, 0xa9,
	0xf4, 0x14, 0x6c, 0x87, 0x5e, 0xfa, 0x3e, 0x8a, 0xd3, 0x8b, 0xce, 0xf7, 0x62, 0x81, 0xf3, 0xdf,
	0x2c, 0x5a, 0x73, 0x6f, 0x12, 0xca, 0xfd, 0x5a, 0x44, 0x6b, 0x2e, 0xe4, 0xea, 0xfd, 0x06, 0x3c,
	0x29, 0x32, 0x87, 0x17, 0xb8, 0xb3, 0xc4, 0x9b, 0x94, 0x19, 0xe4, 0x07, 0x9e, 0x41, 0x1e, 0xe7,
	0x04, 0x2c, 0xf0, 0x22, 0x91, 0x7c, 0x09, 0x60, 0xe2, 0x07, 0x5e, 0x38, 0xf6, 0xca, 0x59, 0xfd,
	0xc8, 0x67, 0x75, 0x2f, 0x93, 0x17, 0x13, 0x7a, 0x0d, 0xee, 0x73, 0x17, 0x3a, 0x8b, 0xa3, 0x29,
	0x0d, 0xfc, 0x33, 0x2f, 0x49, 0x3d, 0x37, 0xe8, 0xfc, 0x24, 0x7c, 0x84, 0x41, 0xfd, 0x38, 0x9a,
	0x6a, 0x39, 0xc0, 0x0c, 0x50, 0xa8, 0x35, 0x9b, 0xc7, 0xe7, 0xde, 0xa4, 0xf3, 0x07, 0x22, 0x78,
	0x72, 0xb1, 0xc9, 0xa5, 0xd2, 0xa7, 0xe0, 0x4e, 0x32, 0xf3, 0x82, 0x80, 0x7a, 0x97, 0xee, 0xc4,
	0x9b, 0x74, 0x7e, 0xc3, 0x59, 0xb7, 0xb9, 0x0c, 0x73, 0x91, 0xf4, 0x87, 0xe0, 0xe9, 0x34, 0xe2,
	0xf9, 0x77, 0x1c, 0x85, 0x69, 0x1c, 0x05, 0x81, 0x17, 0x97, 0x0a, 0xff, 0x29, 0xde, 0xa0, 0x23,
	0x18, 0x72, 0x41, 0x28, 0x34, 0x7f, 0x09, 0xee, 0x05, 0x51, 0x78, 0x4e, 0x63, 0x37, 0x3c, 0xf7,
	0xe8, 0x3b, 0x3f, 0x08, 0x3a, 0x7f, 0x28, 0x76, 0x49, 0x26, 0x26, 0x4c, 0x7a, 0xe8, 0x07, 0x81,
	0xf4, 0x3d, 0x78, 0xb4, 0xa8, 0x71, 0x11, 0x08, 0x7f, 0xc4, 0xcd, 0xfe, 0x60, 0x41, 0xf1, 0x3c,
	0x16, 0xbe, 0x06, 0xd2, 0x52, 0xab, 0x70, 0x36, 0xee, 0xfc, 0xb1, 0x28, 0x5b, 0x16, 0x5a, 0xe8,
	0xb3, 0x31, 0x5b, 0xd1, 0x38, 0x8a, 0xd2, 0x52, 0xf9, 0x3f, 0x2d, 0x3c, 0x92, 0x09, 0x0b, 0x85,
	0xbf, 0x03, 0x8f, 0xc4, 0xc9, 0x67, 0x1e, 0xfa, 0x29, 0x9d, 0x78, 0x6e, 0x7a, 0x91, 0xe5, 0xa8,
	0x3f, 0xe1, 0xdd, 0x8a, 0xa3, 0x8f, 0x13, 0xfa, 0xa9, 0xc2, 0x30, 0x91, 0xac, 0x58, 0x66, 0x9f,
	0xc7, 0x6e, 0xd9, 0x33, 0x12, 0x3d, 0x33, 0x61, 0xd1, 0xf3, 0x5b, 0xf0, 0xd0, 0x8d, 0xa7, 0x51,
	0x4c, 0x27, 0xde, 0xe9, 0xfc, 0xec, 0xac, 0x24, 0xf7, 0x38, 0xf9, 0x3e, 0x07, 0x15, 0x8e, 0x15,
	0x6d, 0xfe, 0x08, 0x3c, 0x0b, 0xa3, 0xf2, 0x10, 0x96, 0x79, 0x75, 0xd1, 0x52, 0x16, 0xd6, 0x0f,
	0xa3, 0xfc, 0x28, 0xa6, 0x70, 0x42, 0xd1, 0xfc, 0x4b, 0x50, 0x58, 0xa1, 0xb0, 0xa7, 0x22, 0x42,
	0x3f, 0x97, 0xe7, 0xa6, 0xac, 0xba, 0x8c, 0xc8, 0xb0, 0x1d, 0xbc, 0xe8, 0x32, 0x43, 0x2e, 0x65,
	0x2a, 0x95, 0xc5, 0x1f, 0x8b, 0xed, 0x34, 0x0a, 0xbc, 0xb0, 0xe8, 0xbe, 0x2f, 0x54, 0x2a, 0x28,
	0x6a, 0x62, 0x71, 0x42, 0x3e, 0xce, 0x01, 0x80, 0xcc, 0x0b, 0xa8, 0xe7, 0xa6, 0x2c, 0x66, 0x58,
	0xce, 0xe8, 0x0c, 0x44, 0x70, 0x32, 0x39, 0x66, 0x62, 0xcc, 0xa4, 0x2c, 0x71, 0xf1, 0x35, 0x48,
	0x52, 0x37, 0x9d, 0x27, 0x34, 0x70, 0x4f, 0xbd, 0xa0, 0x33, 0x14, 0xda, 0x33, 0xc0, 0xe2, 0x72,
	0x8d, 0x89, 0xbb, 0xff, 0x67, 0x1d, 0xec, 0x8a, 0x13, 0x91, 0x3b, 0x65, 0xd3, 0x67, 0x05, 0x96,
	0x24, 0x04, 0x68, 0x84, 0x47, 0x86, 0x82, 0xa9, 0x6e, 0xe8, 0x18, 0xde, 0x92, 0x1e, 0x00, 0xb8,
	0x28, 0x47, 0x26, 0x6c, 0xd5, 0xa5, 0xf2, 0x08, 0xb6, 0xeb, 0x52, 0xa2, 0xc0, 0xb5, 0xba, 0xd4,
	0x52, 0xe0, 0x7a, 0x43, 0xbf, 0x04, 0x6e, 0x48, 0x8f, 0xc1, 0xfd, 0x45, 0xa9, 0xaa, 0xdb, 0xc4,
	0x80, 0x9b, 0x75, 0xfa, 0xf0, 0x18, 0x6e, 0x49, 0xcf, 0x41, 0x67, 0x69, 0x40, 0x7c, 0x84, 0x89,
	0xc5, 0xd5, 0xd9, 0xae, 0x4f, 0xe9, 0x97, 0x11, 0xb2, 0xe0, 0x8e, 0xf4, 0x14, 0x3c, 0x5a, 0x94,
	0xdb, 0x8e, 0x6d, 0x10, 0x15, 0x69, 0x10, 0xd4, 0xc7, 0x19, 0x19, 0xf0, 0x76, 0x5d, 0xaa, 0x99,
	0xf0, 0x4e, 0x5d, 0x59, 0xd3, 0x30, 0xb4, 0x37, 0x70, 0xb7, 0x4e, 0xef, 0x0f, 0xe1, 0x5d, 0xa9,
	0x03, 0x1e, 0x2c, 0xd9, 0xcc, 0xb1, 0x6c, 0x63, 0x04, 0xef, 0x35, 0x58, 0x53, 0x81, 0xb0, 0x2e,
	0xed, 0x29, 0x70, 0x4f, 0xfa, 0x04, 0x3c, 0x5b, 0xb2, 0x5b, 0x4f, 0xd5, 0x54, 0xfb, 0x84, 0x2a,
	0x04, 0xf5, 0x6d, 0x28, 0xd5, 0xb5, 0xc2, 0x47, 0x58, 0xb7, 0xe1, 0xfd, 0xba, 0x39, 0x10, 0x51,
	0x46, 0xf0, 0x41, 0x5d, 0xaf, 0x37, 0x47, 0x6f, 0x46, 0xaa, 0x02, 0x1f, 0x4a, 0xcf, 0xc0, 0xe3,
	0xa5, 0x16, 0x9a, 0x96, 0x8d, 0xf3, 0xa8, 0x3e, 0x8e, 0xed, 0x90, 0x9e, 0x01, 0x1f, 0xd7, 0xcd,
	0x3b, 0x72, 0x6c, 0x64, 0xab, 0x86, 0x0e, 0x3b, 0xdd, 0xff, 0xb5, 0x06, 0xee, 0x16, 0x7e, 0xc7,
	0x1c, 0xd2, 0x93, 0x3e, 0x02, 0x4f, 0x0a, 0x3a, 0x71, 0x34, 0x6c, 0x51, 0xcb, 0x46, 0x36, 0x5b,
	0x79, 0xd5, 0x86, 0xb7, 0xa4, 0x37, 0xe0, 0x9b, 0x46, 0xf8, 0x18, 0xa9, 0x36, 0xed, 0x1b, 0x84,
	0x9a, 0x1a, 0x3a, 0xc1, 0xc4, 0xa2, 0xb6, 0x41, 0x35, 0x03, 0x29, 0xb0, 0x25, 0xbd, 0x02, 0x2f,
	0x1a, 0x9b, 0x0c, 0x31, 0x31, 0xa8, 0x85, 0x35, 0x2c, 0x73, 0x6d, 0xda, 0xd2, 0x4b, 0xf0, 0x59,
	0x23, 0xd1, 0xb2, 0x09, 0xb2, 0xf1, 0xe0, 0x84, 0xda, 0xea, 0x08, 0xc3, 0x35, 0xe9, 0x53, 0xf0,
	0x51, 0x23, 0xcf, 0x24, 0x98, 0xcb, 0xe0, 0xba, 0xf4, 0x25, 0xf8, 0xa2, 0x91, 0xc2, 0x7e, 0x53,
	0x55, 0xa7, 0x26, 0x31, 0x06, 0x04, 0x5b, 0x16, 0xdc, 0x90, 0x3e, 0x03, 0x1f, 0x37, 0xf7, 0x66,
	0x58, 0xb6, 0xe8, 0x6e, 0x53, 0x7a, 0x01, 0x3e, 0x69, 0xe4, 0x28, 0xaa, 0x25, 0x1b, 0xba, 0x8e,
	0x65, 0x1b, 0x6e, 0xad, 0x54, 0x9f, 0x5f, 0x71, 0x58, 0x43, 0xe3, 0x58, 0x46, 0x16, 0x86, 0xdb,
	0x52, 0x17, 0xbc, 0x6c, 0xe4, 0x09, 0xff, 0x13, 0x2a, 0x5a, 0xd8, 0x76, 0x4c, 0xb8, 0x23, 0x7d,
	0x03, 0xbe, 0xbc, 0xde, 0xdc, 0x23, 0x64, 0x16, 0xa6, 0x06, 0x2b, 0x17, 0x4f, 0x43, 0x96, 0x0d,
	0x6f, 0x77, 0xff, 0x71, 0x0b, 0xdc, 0xa9, 0x5e, 0xbc, 0x94, 0xbe, 0xb1, 0x7c, 0x11, 0x03, 0x6f,
	0x49, 0x4f, 0xc0, 0xc3, 0x05, 0xac, 0x87, 0x32, 0xa8, 0x55, 0xc6, 0x79, 0x0e, 0x11, 0x03, 0x29,
	0x32, 0xb2, 0x6c, 0x4c, 0x60, 0xbb, 0xd6, 0xa9, 0x65, 0x62, 0xd9, 0x46, 0xb6, 0x41, 0xe0, 0x5a,
	0xad, 0xa5, 0xf0, 0x16, 0x1e, 0xa9, 0x70, 0xbd, 0xf4, 0xe1, 0x0c, 0xd5, 0x0d, 0xf6, 0x1f, 0xb8,
	0xd1, 0xfd, 0x1f, 0x1b, 0x60, 0x13, 0x8b, 0xb4, 0xba, 0x07, 0x76, 0x79, 0x04, 0x51, 0x55, 0xc9,
	0x73, 0xe2, 0x43, 0xb0, 0x57, 0x88, 0x14, 0x95, 0x60, 0x5b, 0x55, 0xb0, 0xd0, 0xb2, 0x10, 0x5b,
	0x26, 0x51, 0xf5, 0x01, 0xed, 0x63, 0xcb, 0x56, 0x8f, 0x90, 0x06, 0xdb, 0x2c, 0x98, 0x0a, 0xb4,
	0x4f, 0x0c, 0x26, 0x77, 0x2c, 0xfa, 0xf6, 0xdb, 0x37, 0xdf, 0x09, 0x35, 0x0b, 0x50, 0x36, 0x46,
	0x26, 0xd6, 0x15, 0xd5, 0x19, 0x31, 0xf4, 0x7b, 0xb8, 0xce, 0x26, 0x58, 0xa0, 0xe6, 0x31, 0x51,
	0xa8, 0x82, 0x64, 0x86, 0xfd, 0x1a, 0x6e, 0x2e, 0x74, 0xab, 0xe3, 0x63, 0xda, 0xd3, 0x0c, 0x63,
	0x24, 0xc0, 0x2d, 0x96, 0x2c, 0x0a, 0x50, 0xd5, 0x6d, 0x4c, 0x74, 0x1e, 0x88, 0x48, 0x13, 0x84,
	0xed, 0x85, 0x71, 0xfb, 0x2c, 0xba, 0x47, 0xe8, 0x67, 0x83, 0x08, 0x74, 0x87, 0x65, 0x8c, 0x02,
	0x35, 0x08, 0x92, 0x35, 0x4c, 0x4d, 0x04, 0x81, 0xf4, 0x39, 0xd8, 0x5f, 0x31, 0x26, 0x0b, 0x89,
	0x1e, 0xe6, 0x8b, 0xbf, 0xd0, 0xba, 0x98, 0x30, 0xbc, 0x23, 0x7d, 0x0c, 0x9e, 0x16, 0xf2, 0x63,
	0xae, 0x55, 0x39, 0xea, 0x0f, 0x70, 0xf7, 0x7a, 0xa5, 0x7f, 0x80, 0x77, 0xaf, 0x51, 0xfa, 0x07,
	0x78, 0xef, 0xda, 0xee, 0x7f, 0x84, 0x70, 0xb5, 0xc1, 0x7e, 0x14, 0xd9, 0x75, 0xf5, 0xd8, 0x3f,
	0x42, 0x69, 0xa1, 0x77, 0x53, 0x73, 0x2c, 0x6a, 0x39, 0x3d, 0x4b, 0x26, 0xaa, 0xc9, 0x53, 0xca,
	0x7d, 0x16, 0x10, 0xa5, 0x0f, 0xa8, 0xfa, 0x80, 0x85, 0x84, 0x82, 0x4e, 0x44, 0xf3, 0x07, 0xab,
	0x9d, 0xe0, 0x47, 0xf8, 0xf0, 0xfa, 0xc1, 0x7f, 0x82, 0x8f, 0x56, 0xb7, 0xfe, 0x09, 0x3e, 0x5e,
	0x3d, 0xaf, 0x3f, 0x80, 0x1d, 0x49, 0x02, 0x77, 0x2b, 0xfe, 0xe5, 0xe8, 0x36, 0x7c, 0xd2, 0xfd,
	0x5d, 0x5b, 0x6c, 0x08, 0x9a, 0xe7, 0x5e, 0x7a, 0xb1, 0xa8, 0x0e, 0x68, 0x5a, 0x6c, 0x3b, 0x1a,
	0x46, 0x47, 0x98, 0xe4, 0x2e, 0x9f, 0xc7, 0x51, 0x26, 0x2d, 0xf3, 0x10, 0x66, 0x19, 0xf7, 0x0b,
	0xf0, 0xe9, 0x2a, 0x94, 0xda, 0x06, 0xcb, 0x16, 0xfa, 0x00, 0xb6, 0x8b, 0x08, 0xcf, 0x68, 0xa8,
	0x87, 0x74, 0xc5, 0xd0, 0x31, 0x2b, 0x12, 0xee, 0x83, 0x7b, 0x0b, 0x50, 0xff, 0x10, 0xae, 0x17,
	0x7b, 0x5d, 0xae, 0x0a, 0xdb, 0xdc, 0x69, 0x39, 0xee, 0x86, 0x74, 0x00, 0x3e, 0xbf, 0x86, 0x50,
	0x0e, 0xbd, 0x59, 0x24, 0xdd, 0x8c, 0xd9, 0x47, 0xaa, 0xc6, 0x09, 0x94, 0x60, 0xa4, 0x9c, 0x50,
	0xc7, 0x84, 0x5b, 0xc5, 0x46, 0x98, 0xcf, 0x02, 0xcb, 0x9a, 0xca, 0xb4, 0xdb, 0xee, 0xfe, 0xbd,
	0xb6, 0xd0, 0x5c, 0x8e, 0xc2, 0xd0, 0x1b, 0xb3, 0xd2, 0x9d, 0xef, 0x5d, 0x34, 0x2d, 0xb6, 0x86,
	0x6c, 0x50, 0xd5, 0xd0, 0xb3, 0x0c, 0xe8, 0xe8, 0x87, 0xba, 0x71, 0xac, 0xc3, 0x5b, 0xd2, 0x57,
	0xe0, 0x55, 0x33, 0x45, 0x37, 0x6c, 0x7a, 0x82, 0x6d, 0x5a, 0xb5, 0x64, 0x9e, 0xf8, 0x6b, 0xe4,
	0x92, 0x54, 0xee, 0x5b, 0x35, 0xd2, 0xc2, 0xb2, 0xac, 0xad, 0xee, 0xac, 0xb4, 0xfc, 0xfa, 0xea,
	0x19, 0xb0, 0x14, 0xaf, 0xea, 0x03, 0xb8, 0x21, 0xed, 0x83, 0xe7, 0xcd, 0x14, 0x61, 0x46, 0xb8,
	0xd9, 0xfd, 0x1b, 0x2d, 0xb0, 0xdb, 0x77, 0xc3, 0xd4, 0x4d, 0xae, 0x28, 0x89, 0x02, 0x2f, 0x61,
	0x39, 0xab, 0x8f, 0x74, 0x1b, 0x59, 0x27, 0x94, 0x18, 0x1a, 0xb3, 0x87, 0x82, 0xfb, 0xdc, 0x9c,
	0x3c, 0x7f, 0x2e, 0x60, 0xb2, 0x41, 0x58, 0xfe, 0xec, 0x80, 0x07, 0x0b, 0x62, 0xcb, 0x31, 0x4d,
	0x83, 0xd8, 0xb0, 0x5d, 0x43, 0x8c, 0x7e, 0x5f, 0x43, 0x3a, 0x16, 0xc5, 0xe5, 0x02, 0xc2, 0x0a,
	0x97, 0xf5, 0xee, 0x5f, 0x6b, 0x01, 0x29, 0x57, 0xc7, 0xf6, 0xdc, 0x29, 0xb5, 0x82, 0x28, 0x4d,
	0xaa, 0xe3, 0x5a, 0x9a, 0x61, 0x57, 0xd2, 0xf9, 0x82, 0xb8, 0xae, 0x0e, 0x17, 0x97, 0xea, 0x54,
	0x06, 0xe5, 0x08, 0xd2, 0x4f, 0xe0, 0x1a, 0xcb, 0x77, 0x0b, 0xd2, 0x1e, 0xd6, 0xe5, 0x21, 0x5c,
	0xef, 0xfe, 0xb7, 0x36, 0x78, 0x94, 0x2b, 0x63, 0x79, 0x81, 0xf0, 0x1f, 0xca, 0x8b, 0xee, 0x8f,
	0xc0, 0x93, 0xa2, 0x49, 0x5e, 0x97, 0xe4, 0xb7, 0xdb, 0x22, 0xe8, 0xea, 0xb0, 0x66, 0xc8, 0x87,
	0xdc, 0x55, 0x1a, 0x1b, 0x5b, 0x43, 0xa7, 0xdf, 0xd7, 0x30, 0x6c, 0xb3, 0xe0, 0xa9, 0xc3, 0x7d,
	0x82, 0x31, 0x35, 0x55, 0xf9, 0x10, 0xae, 0xb1, 0x84, 0x51, 0x27, 0x60, 0x5d, 0xe1, 0x5e, 0xb1,
	0x0f, 0x9e, 0xd7, 0x41, 0x56, 0xef, 0x58, 0x18, 0x59, 0x86, 0x0e, 0x37, 0x9a, 0xfb, 0x67, 0x0c,
	0x51, 0x20, 0x6e, 0xb2, 0x54, 0x59, 0x27, 0x70, 0x90, 0x79, 0xd5, 0x16, 0xdb, 0x45, 0xea, 0x38,
	0xc1, 0x03, 0x47, 0x43, 0x24, 0x1f, 0x66, 0xbb, 0x59, 0x11, 0x19, 0x11, 0x85, 0xf6, 0x90, 0x85,
	0x15, 0xb8, 0xd3, 0xfd, 0xbb, 0x1b, 0x59, 0x70, 0x5e, 0xb8, 0xa9, 0x7c, 0xe1, 0x86, 0xa1, 0x17,
	0xd8, 0x57, 0x33, 0x16, 0x9c, 0x59, 0xd2, 0xaa, 0x0a, 0x89, 0x77, 0xee, 0x47, 0xa1, 0x1b, 0xc0,
	0x5b, 0x79, 0xd9, 0x50, 0x45, 0xe5, 0x79, 0x92, 0x46, 0x53, 0xd8, 0xca, 0x33, 0x55, 0x15, 0x33,
	0xdd, 0x38, 0xbd, 0x2a, 0x93, 0x58, 0x15, 0xd2, 0xa2, 0xd3, 0xd3, 0x2b, 0xb8, 0x96, 0x27, 0x90,
	0x2a, 0xc4, 0xbc, 0x0f, 0xae, 0x37, 0x35, 0x1a, 0xcc, 0xfd, 0x60, 0x02, 0x37, 0xf2, 0x22, 0xbb,
	0x0a, 0x65, 0xde, 0x22, 0x76, 0xf7, 0x65, 0xf0, 0xf8, 0xc2, 0x4f, 0x66, 0x5e, 0x0c, 0xb7, 0x9a,
	0x40, 0x39, 0x0a, 0x93, 0x28, 0xf0, 0xe0, 0x76, 0x5e, 0xda, 0x2c, 0xe8, 0xe2, 0x9e, 0xc2, 0x9d,
	0xa6, 0x56, 0x6a, 0x78, 0xe9, 0x06, 0xfe, 0x04, 0x82, 0x26, 0x90, 0x55, 0xea, 0x28, 0x08, 0xe0,
	0x6d, 0xb6, 0xa0, 0x2b, 0x40, 0xdf, 0x4b, 0xe0, 0x9d, 0x3c, 0x93, 0x2c, 0xe3, 0xd6, 0xcc, 0x1b,
	0xa7, 0x6e, 0x1a, 0xc5, 0x70, 0xb7, 0xc9, 0x42, 0xb2, 0x7b, 0xe6, 0x89, 0x6d, 0xbb, 0x79, 0x35,
	0x58, 0x17, 0x62, 0xdb, 0xae, 0xad, 0x48, 0xec, 0x5f, 0xba, 0xa9, 0x07, 0xf7, 0x9a, 0x16, 0xda,
	0x8c, 0x92, 0x94, 0x37, 0x95, 0xf2, 0x22, 0xb5, 0x8a, 0xf6, 0xdc, 0x34, 0x0d, 0x3c, 0x79, 0x3e,
	0x83, 0xf7, 0x9b, 0xd4, 0x1e, 0x6a, 0xf6, 0x51, 0xa9, 0xf6, 0x83, 0x55, 0x33, 0xe7, 0x05, 0x62,
	0x02, 0x1f, 0x36, 0xb9, 0x92, 0x1d, 0xfb, 0x97, 0xbe, 0x0b, 0x1f, 0x75, 0xff, 0x4a, 0x1b, 0x3c,
	0xc0, 0x66, 0x1c, 0x9d, 0xf9, 0x81, 0x27, 0xbb, 0xf1, 0x84, 0xa5, 0x22, 0x7e, 0x17, 0xb6, 0x0f,
	0x9e, 0xbf, 0xa3, 0x4d, 0x08, 0xc5, 0xd3, 0x59, 0x7a, 0x05, 0x6f, 0xb1, 0x10, 0x5b, 0xc1, 0x60,
	0xdb, 0x0f, 0x6c, 0x31, 0xd5, 0x57, 0x10, 0xec, 0x38, 0x9a, 0x5d, 0x5c, 0x89, 0x34, 0xb0, 0x82,
	0xa2, 0xa6, 0xde, 0x14, 0xae, 0x5d, 0x43, 0x18, 0x7a, 0x71, 0x04, 0xd7, 0xd9, 0x2e, 0xb2, 0x52,
	0xcf, 0x28, 0xf5, 0xc7, 0x51, 0x28, 0xb2, 0xc1, 0x2a, 0x4d, 0x58, 0x04, 0x6c, 0x76, 0xff, 0x76,
	0x0b, 0x3c, 0xc6, 0x23, 0x37, 0x1d, 0x5f, 0x0c, 0xe2, 0x68, 0x3e, 0xb3, 0xbc, 0xb8, 0x28, 0x3a,
	0x32, 0x4b, 0x34, 0x83, 0xd4, 0x38, 0x14, 0xa7, 0xc0, 0xd5, 0x0c, 0xcd, 0x9f, 0xfa, 0xa9, 0x37,
	0x41, 0x97, 0xae, 0x1f, 0x64, 0xd7, 0x2a, 0xa2, 0x26, 0xb9, 0xa6, 0xd3, 0xb3, 0xb3, 0xc0, 0x0f,
	0x3d, 0xd8, 0xee, 0x1a, 0xd9, 0x09, 0x45, 0x1e, 0xf1, 0xbc, 0xc8, 0x2a, 0xa5, 0xfc, 0x37, 0x61,
	0x9b, 0xe4, 0x48, 0x6c, 0x10, 0xb9, 0xac, 0x3c, 0xb0, 0x94, 0x97, 0x20, 0x72, 0xe5, 0xac, 0xd2,
	0xee, 0xfe, 0xf5, 0x96, 0x70, 0x06, 0x2d, 0x7a, 0x6f, 0xc6, 0x7e, 0x14, 0xfb, 0xe9, 0x55, 0xcf,
	0x0d, 0xf9, 0x8a, 0xe7, 0x5b, 0xad, 0x66, 0x1c, 0x53, 0x93, 0xa8, 0x06, 0x61, 0xe7, 0xf6, 0x1e,
	0xd2, 0xf3, 0xfd, 0x18, 0xde, 0x5a, 0x4d, 0x21, 0x98, 0x6d, 0x3e, 0x6c, 0xd8, 0xbc, 0x9e, 0xa8,
	0x51, 0x2c, 0x2c, 0x1b, 0xba, 0x82, 0xc8, 0x49, 0xd1, 0x5f, 0xbb, 0xfb, 0x17, 0x45, 0x1a, 0xe0,
	0x19, 0x8a, 0x78, 0xee, 0xe4, 0x4a, 0x1c, 0xba, 0xb3, 0x72, 0x68, 0x49, 0xcc, 0x37, 0x69, 0x59,
	0x43, 0x84, 0xef, 0xd2, 0xd9, 0xae, 0xbf, 0xcc, 0x41, 0xb2, 0x8c, 0x4d, 0x51, 0xac, 0xac, 0x60,
	0x14, 0x85, 0x53, 0xbb, 0xab, 0x88, 0xb2, 0x8e, 0x05, 0xcb, 0x91, 0x17, 0xf3, 0x6f, 0x8b, 0x1d,
	0xf0, 0x80, 0x9f, 0x38, 0x8f, 0x30, 0xb1, 0x78, 0x2e, 0x77, 0x08, 0xc1, 0x3a, 0x3b, 0xea, 0x3f,
	0x06, 0xf7, 0x17, 0x10, 0xcb, 0x46, 0x3d, 0x0d, 0xc3, 0x56, 0xf7, 0xef, 0xac, 0x8b, 0x59, 0xfc,
	0x1c, 0xf9, 0x61, 0x36, 0x58, 0x32, 0x0f, 0x8a, 0xfc, 0x4e, 0x7f, 0x36, 0x54, 0x66, 0x20, 0xcb,
	0xd1, 0xd8, 0x2e, 0x2d, 0xcb, 0xec, 0x9c, 0x7d, 0x8b, 0xed, 0x2f, 0x35, 0x14, 0x69, 0xa2, 0xde,
	0x53, 0x75, 0x71, 0xd2, 0x6e, 0x15, 0x85, 0x61, 0x95, 0x95, 0xed, 0xc0, 0x54, 0x33, 0x7a, 0xbd,
	0x13, 0xd8, 0x2e, 0x2e, 0x14, 0x16, 0x39, 0xb2, 0x41, 0x08, 0x96, 0x6d, 0x6a, 0x22, 0xcb, 0x3a,
	0x36, 0xf8, 0x55, 0x57, 0x53, 0x67, 0x88, 0xeb, 0x43, 0x15, 0xac, 0xab, 0x7c, 0x67, 0x6d, 0xe2,
	0x0c, 0xb0, 0x8e, 0x89, 0x2a, 0x53, 0x4c, 0x88, 0x41, 0xe0, 0x46, 0x51, 0xe0, 0x35, 0x0f, 0x98,
	0xd9, 0xa7, 0x52, 0xd5, 0x2e, 0xf2, 0xb2, 0x93, 0x2e, 0x22, 0xf6, 0x09, 0xdc, 0x2a, 0x8a, 0xc0,
	0x2a, 0x47, 0x37, 0xc4, 0xdc, 0x68, 0xdf, 0x70, 0x74, 0x05, 0x6e, 0x17, 0x95, 0x76, 0x95, 0x94,
	0x31, 0x1c, 0x4d, 0x83, 0x3b, 0xd2, 0x5b, 0xf0, 0xba, 0x46, 0xa8, 0xde, 0x1f, 0xd4, 0xb5, 0x03,
	0x8d, 0xcb, 0x63, 0xab, 0x23, 0x6c, 0x38, 0xec, 0x78, 0x98, 0xdf, 0x98, 0xac, 0xea, 0x51, 0x36,
	0x0c, 0x4d, 0x61, 0x15, 0xf4, 0x9d, 0xe2, 0xdc, 0x50, 0xa5, 0xf6, 0x1c, 0xeb, 0x04, 0xee, 0x76,
	0xff, 0xbc, 0xc8, 0xcc, 0x45, 0x5d, 0x95, 0x87, 0x1c, 0x99, 0xb3, 0x22, 0xf4, 0x15, 0x78, 0xf1,
	0x8e, 0xae, 0xc6, 0xe9, 0xc8, 0x0d, 0xe7, 0xbc, 0x16, 0xe8, 0x82, 0x97, 0xd7, 0x12, 0xd1, 0x3c,
	0x8d, 0xa6, 0x6e, 0xea, 0x8f, 0x61, 0xab, 0xfb, 0x7f, 0x5b, 0xc2, 0x58, 0x35, 0xaa, 0x7c, 0x11,
	0xf9, 0x63, 0x8f, 0x4d, 0x6c, 0x45, 0x5f, 0x82, 0x50, 0x6c, 0xb7, 0xfc, 0x68, 0x70, 0x3d, 0xb5,
	0xef, 0xc7, 0x49, 0x6a, 0xfa, 0xe3, 0x77, 0xb0, 0x25, 0x7d, 0x0d, 0x0e, 0xae, 0x27, 0x8b, 0xb7,
	0x48, 0x9c, 0xdd, 0xbe, 0x59, 0x8b, 0xec, 0xbb, 0x3c, 0x5c, 0x63, 0xde, 0x76, 0x3d, 0x55, 0xf1,
	0x63, 0x0f, 0xae, 0x77, 0x4f, 0xc5, 0x9d, 0x31, 0x4f, 0xa9, 0x47, 0x51, 0xea, 0xe5, 0xeb, 0x52,
	0x08, 0x2a, 0xa5, 0x6b, 0xb6, 0x23, 0x96, 0x90, 0x69, 0x58, 0xaa, 0xad, 0x1e, 0xb1, 0x90, 0xab,
	0x61, 0x3a, 0x1e, 0x20, 0x8e, 0xb5, 0xbb, 0x7f, 0xb9, 0x9d, 0xdd, 0x39, 0xf2, 0x38, 0x1f, 0x79,
	0xd3, 0x53, 0x2f, 0xfe, 0xc5, 0xec, 0x45, 0xe1, 0x3c, 0x29, 0x3c, 0xb9, 0x0e, 0x51, 0x05, 0xf7,
	0x91, 0xa3, 0xd9, 0x62, 0x25, 0x57, 0x91, 0x7a, 0xc8, 0xb6, 0x35, 0x4c, 0x7b, 0x86, 0xc1, 0x2f,
	0x8e, 0xca, 0x8b, 0xc2, 0x06, 0xae, 0x35, 0x44, 0x84, 0x51, 0x75, 0xc7, 0x82, 0xed, 0x32, 0x2b,
	0xd7, 0x89, 0x22, 0xcc, 0xd6, 0xae, 0xeb, 0x8b, 0x60, 0x99, 0x38, 0xaa, 0x3d, 0x62, 0x59, 0xae,
	0x8c, 0xff, 0xa6, 0xbe, 0xe4, 0x1e, 0x62, 0x07, 0xae, 0xee, 0x87, 0x4a, 0xd6, 0x3e, 0x2a, 0xbe,
	0xd7, 0xe5, 0x65, 0xc8, 0x92, 0x98, 0x9a, 0xf3, 0xd3, 0xc0, 0x1f, 0x8b, 0x7a, 0xa1, 0x09, 0xef,
	0xc7, 0xbe, 0x17, 0x4e, 0x92, 0xa5, 0x84, 0x5d, 0x21, 0x38, 0x61, 0xe0, 0x27, 0xa9, 0x37, 0x81,
	0xed, 0xee, 0xbf, 0x68, 0x03, 0x09, 0x33, 0x8e, 0xf8, 0x20, 0x3b, 0x1a, 0x91, 0x4a, 0xad, 0x52,
	0x93, 0x57, 0x5c, 0x99, 0x3b, 0x51, 0x03, 0x63, 0xe0, 0x85, 0x5e, 0xec, 0x06, 0xe2, 0x63, 0x88,
	0xd8, 0xbd, 0xae, 0xe3, 0xc9, 0xd1, 0x74, 0xe6, 0xa5, 0x7e, 0xea, 0x5f, 0x7a, 0x70, 0x8d, 0x9d,
	0xef, 0x1b, 0xc9, 0x56, 0x14, 0x44, 0x55, 0xe6, 0xba, 0xf4, 0x1a, 0x74, 0x1b, 0x99, 0x6f, 0x2e,
	0xdf, 0x54, 0x88, 0xd4, 0xd1, 0x1d, 0x8b, 0xdf, 0x1c, 0xac, 0xe2, 0x67, 0x6a, 0x58, 0xfc, 0x79,
	0x82, 0x1b, 0x10, 0x37, 0x7c, 0xe7, 0x4d, 0xe0, 0xe6, 0x4a, 0xb5, 0x99, 0x26, 0x4b, 0xe4, 0xad,
	0xee, 0x7f, 0x6f, 0x83, 0x1d, 0xee, 0xdd, 0xdc, 0x76, 0x0f, 0xc1, 0xde, 0x08, 0xd9, 0xf2, 0x90,
	0x3f, 0x66, 0xa2, 0x32, 0xb2, 0x1c, 0xa4, 0xc1, 0x5b, 0x6c, 0x1f, 0xac, 0x8a, 0x0d, 0xc3, 0xa4,
	0x3d, 0x83, 0x6f, 0xf0, 0x4f, 0xc1, 0xa3, 0x0a, 0xc2, 0x93, 0x39, 0x41, 0xfa, 0x21, 0x3f, 0xfa,
	0xef, 0x83, 0xe7, 0x15, 0x4c, 0xc3, 0x03, 0x24, 0x9f, 0x50, 0xcb, 0xd0, 0x0c, 0xfa, 0x5b, 0x07,
	0x3b, 0xec, 0x44, 0xbc, 0xd8, 0x9a, 0x5f, 0x26, 0xda, 0x22, 0xf2, 0xd6, 0x99, 0x03, 0x55, 0xb0,
	0x63, 0x8c, 0x0f, 0xb1, 0xae, 0x50, 0xdb, 0x70, 0x88, 0x8e, 0x4f, 0xe0, 0x06, 0x0b, 0xe8, 0x9a,
	0xaa, 0xf4, 0xcd, 0xd1, 0x1b, 0xf1, 0x01, 0xa6, 0x02, 0x89, 0x6f, 0x0a, 0x5b, 0x4b, 0x1d, 0x8a,
	0x43, 0x1b, 0xd2, 0x72, 0x75, 0xb7, 0x97, 0xd5, 0x35, 0x8e, 0x4d, 0xa2, 0x52, 0x05, 0x9b, 0x04,
	0xcb, 0x88, 0xd5, 0x10, 0x3b, 0x4b, 0xea, 0x5a, 0xe2, 0x56, 0x98, 0x18, 0x8e, 0x09, 0x01, 0x2b,
	0x08, 0x2a, 0x58, 0xf1, 0x19, 0xe1, 0x36, 0xab, 0xa9, 0x79, 0x45, 0xd6, 0x8b, 0x52, 0xc5, 0x3f,
	0x3b, 0xf3, 0xc7, 0xf3, 0x20, 0xbd, 0x62, 0x5d, 0xf5, 0x0c, 0x9b, 0x2a, 0x6a, 0xbf, 0xaf, 0xca,
	0x8e, 0x66, 0x9f, 0xf0, 0xad, 0x99, 0xcd, 0x9c, 0xd7, 0x16, 0x4b, 0x18, 0x46, 0xd6, 0x89, 0x38,
	0xe9, 0x2d, 0x01, 0x23, 0xac, 0xa8, 0xce, 0x08, 0xb6, 0x1b, 0xda, 0x0c, 0x11, 0xdf, 0xe6, 0xeb,
	0x6d, 0x1c, 0xbd, 0x8f, 0x54, 0x22, 0xae, 0x6a, 0x97, 0xa0, 0x3c, 0x27, 0x6e, 0x34, 0x34, 0xc3,
	0xbf, 0xd8, 0x04, 0x31, 0xeb, 0xae, 0x80, 0xde, 0xc2, 0xad, 0x55, 0xd0, 0x77, 0x70, 0xbb, 0xfb,
	0x37, 0x37, 0xb3, 0xaf, 0x78, 0x8c, 0x30, 0x32, 0x14, 0x5c, 0x7c, 0xe3, 0xc9, 0x05, 0xf9, 0x15,
	0x47, 0x7e, 0xb5, 0x55, 0xc8, 0x35, 0xa4, 0xb3, 0x53, 0x78, 0xab, 0x8e, 0x20, 0xdb, 0x46, 0xf2,
	0x21, 0x6c, 0xd7, 0xfb, 0x22, 0x06, 0x1a, 0x89, 0xd9, 0x2f, 0xc9, 0xb1, 0x4d, 0x30, 0x62, 0xb9,
	0x2d, 0xff, 0x1c, 0x50, 0x40, 0x16, 0x96, 0x09, 0xb6, 0xa9, 0x35, 0x34, 0xcc, 0xf2, 0xa8, 0x5b,
	0x81, 0x55, 0xf6, 0x7f, 0x0c, 0xdc, 0x6c, 0x18, 0xce, 0xd1, 0x31, 0xdc, 0x2a, 0x2e, 0x9f, 0x0a,
	0xb9, 0xe9, 0x58, 0x43, 0x6a, 0x1b, 0xc7, 0x98, 0x50, 0xdb, 0x30, 0x85, 0x93, 0xad, 0x64, 0x8c,
	0x54, 0xe6, 0x64, 0xd7, 0x31, 0x7a, 0x86, 0x0d, 0x41, 0x91, 0x95, 0x0b, 0x86, 0x82, 0xfb, 0x22,
	0x36, 0xf2, 0x71, 0x6e, 0xdf, 0xc0, 0x61, 0x23, 0xdd, 0xb9, 0x81, 0xc3, 0xc6, 0xda, 0x2d, 0xbe,
	0x57, 0x94, 0x26, 0xb7, 0x2c, 0x3c, 0x62, 0xa5, 0xee, 0xdd, 0xa2, 0xf2, 0xab, 0x61, 0xf4, 0x58,
	0xb5, 0x87, 0x74, 0xe8, 0x8c, 0x90, 0x6e, 0xc1, 0x7b, 0x75, 0x53, 0x8a, 0x34, 0xc1, 0x56, 0x08,
	0xd6, 0x4d, 0xd9, 0x47, 0x64, 0x04, 0xf7, 0xea, 0xcb, 0x93, 0x29, 0x87, 0x34, 0xed, 0x04, 0x4a,
	0xc5, 0xfe, 0x5a, 0xc0, 0xf8, 0x08, 0xb1, 0xf0, 0xa1, 0x23, 0xa4, 0x63, 0x87, 0xd5, 0x75, 0xf0,
	0x7e, 0xdd, 0x5f, 0x88, 0x61, 0x0d, 0x91, 0x0e, 0x1f, 0xd4, 0x47, 0x55, 0x6d, 0x3c, 0x82, 0x0f,
	0xeb, 0xf2, 0x63, 0x16, 0x45, 0x8f, 0xea, 0x53, 0x60, 0xb9, 0x0a, 0xe9, 0x2c, 0xc2, 0x1f, 0x17,
	0x05, 0x69, 0x39, 0xbf, 0xec, 0x1b, 0x2d, 0xed, 0x19, 0x96, 0x05, 0x3b, 0x75, 0x3d, 0x46, 0x2a,
	0x6f, 0xfa, 0xa4, 0xfb, 0xbf, 0x5b, 0xe0, 0x2e, 0xcf, 0xbe, 0x9a, 0x1b, 0x9e, 0xcf, 0xdd, 0x73,
	0x71, 0x19, 0x29, 0x12, 0x89, 0x86, 0xf4, 0x81, 0x83, 0x06, 0x78, 0xb1, 0x52, 0x59, 0xc2, 0xb0,
	0x3e, 0xd0, 0x54, 0x6b, 0x58, 0xcd, 0xc4, 0x05, 0x46, 0x1c, 0xcb, 0x52, 0x91, 0x2e, 0xbe, 0x3a,
	0x2d, 0x61, 0xf2, 0x50, 0xd5, 0xb1, 0x85, 0x45, 0x88, 0x2c, 0x61, 0x87, 0x06, 0xc1, 0x48, 0x17,
	0x09, 0x62, 0x09, 0xb2, 0xd8, 0xa4, 0xad, 0x21, 0xdc, 0x60, 0xeb, 0xb3, 0x84, 0xb1, 0x33, 0x9f,
	0x33, 0x70, 0x58, 0xaf, 0xfc, 0x32, 0xa8, 0x59, 0xd3, 0xb7, 0x70, 0xab, 0xfb, 0x5f, 0xdb, 0xe0,
	0x29, 0xb6, 0xa3, 0x79, 0x1c, 0x7a, 0x57, 0xbf, 0x9d, 0x7b, 0x73, 0x4f, 0xf1, 0xdc, 0x09, 0x3b,
	0xe3, 0x8a, 0x03, 0x1f, 0xaf, 0x84, 0x57, 0xe3, 0x54, 0x8f, 0xe2, 0x29, 0xaf, 0x84, 0x6f, 0x22,
	0x8e, 0xfc, 0x24, 0xf1, 0x26, 0xb0, 0x25, 0x4a, 0xe6, 0x6b, 0x88, 0xf8, 0xc3, 0xcc, 0x8f, 0xbd,
	0x89, 0xc1, 0x52, 0x89, 0xd8, 0x3d, 0x57, 0x73, 0x2d, 0xcf, 0x7b, 0xe7, 0x87, 0xe7, 0xbd, 0x2b,
	0xb6, 0xe9, 0xbf, 0x05, 0xaf, 0xaf, 0xef, 0x38, 0xf0, 0xcf, 0xfd, 0xd3, 0xc0, 0xeb, 0x47, 0x31,
	0xf1, 0xce, 0xe6, 0xe1, 0x04, 0xae, 0x4b, 0x5f, 0xf3, 0x3b, 0x8a, 0x6b, 0xa6, 0x87, 0xe0, 0xff,
	0xcb, 0xff, 0xd7, 0x92, 0xbe, 0x01, 0x5f, 0xde, 0xac, 0xba, 0x1f, 0x9e, 0x5b, 0x51, 0x14, 0x42,
	0xaf, 0xfb, 0x2f, 0xdb, 0x60, 0x57, 0x5c, 0x24, 0x18, 0xf3, 0x74, 0x1c, 0x4d, 0x3d, 0xb6, 0x12,
	0xf9, 0xdd, 0x42, 0x26, 0xa2, 0x4e, 0xf8, 0x2e, 0x8c, 0xde, 0x87, 0xf0, 0x16, 0xdb, 0x13, 0x97,
	0x41, 0xe2, 0x4e, 0x8e, 0xf8, 0xeb, 0x8e, 0xf2, 0x46, 0x66, 0x01, 0x67, 0x05, 0x76, 0x4e, 0x58,
	0x93, 0xbe, 0x03, 0xbf, 0x5a, 0x26, 0xe8, 0x51, 0xca, 0x5f, 0x84, 0x4f, 0xa8, 0x19, 0x45, 0xb1,
	0xce, 0xdf, 0x5c, 0xbd, 0x93, 0xa3, 0x70, 0x22, 0x9e, 0x60, 0xc3, 0x3f, 0x61, 0xa7, 0xdd, 0xd5,
	0x8d, 0xc4, 0x27, 0x1e, 0x88, 0xc4, 0xa9, 0x60, 0x15, 0x4b, 0xdc, 0x90, 0xc8, 0xb1, 0x9b, 0x5c,
	0xc0, 0x5e, 0xb6, 0xbe, 0x2b, 0xa8, 0xba, 0x27, 0xee, 0x52, 0x62, 0x56, 0x35, 0xca, 0x59, 0xf1,
	0xb7, 0x82, 0x2b, 0xbb, 0xe1, 0xd8, 0x0b, 0xbc, 0x09, 0x54, 0xba, 0x7f, 0xb5, 0x05, 0x76, 0xb0,
	0xe6, 0x66, 0x4f, 0x02, 0x1f, 0x82, 0x3d, 0x0d, 0xe9, 0x58, 0xec, 0xee, 0xe5, 0xf7, 0x12, 0x09,
	0xdc, 0x2d, 0xc5, 0x16, 0xea, 0xb3, 0x23, 0xc3, 0x1e, 0xd8, 0x2d, 0x65, 0x46, 0xbf, 0x0f, 0xdb,
	0x8b, 0x22, 0x96, 0x7c, 0xf9, 0xc7, 0x80, 0x52, 0xf4, 0xb3, 0xa3, 0x0f, 0x34, 0x56, 0xf4, 0x2c,
	0xf4, 0xc7, 0x33, 0xe4, 0x46, 0xf7, 0x9f, 0xb7, 0x00, 0xc0, 0x3d, 0x77, 0x92, 0xbd, 0x9a, 0x7b,
	0x0e, 0x3a, 0xef, 0x68, 0xf9, 0x9b, 0xda, 0xea, 0x8f, 0x74, 0xe4, 0x4f, 0xde, 0x7b, 0x1e, 0x3b,
	0x78, 0x89, 0xd5, 0x5e, 0x44, 0xfb, 0x7e, 0xe8, 0x06, 0x09, 0x6c, 0xb3, 0x98, 0xad, 0x81, 0x28,
	0x08, 0xf8, 0xd5, 0xa0, 0xf8, 0xb0, 0xbb, 0x04, 0xff, 0x54, 0xf4, 0xbc, 0xde, 0xd0, 0xf3, 0x4f,
	0x79, 0xcf, 0x1b, 0x0d, 0x3d, 0xff, 0x54, 0xf6, 0xbc, 0xd9, 0xfd, 0x2f, 0x2d, 0xb0, 0x8b, 0x35,
	0xcf, 0x3d, 0x9f, 0x7b, 0xd9, 0x35, 0xda, 0x63, 0x70, 0x5f, 0xc3, 0x68, 0xe0, 0x60, 0xfe, 0x75,
	0xc6, 0xb1, 0xa8, 0xa3, 0x5b, 0x98, 0x9d, 0x89, 0x3e, 0x02, 0x4f, 0x6a, 0x80, 0xd3, 0x1b, 0xa9,
	0xb6, 0xb8, 0xc6, 0x79, 0x06, 0x1e, 0x2f, 0xc2, 0x25, 0xc8, 0xd3, 0xdc, 0x22, 0x58, 0xdc, 0xff,
	0xac, 0xd5, 0x31, 0x82, 0x7f, 0x16, 0xdf, 0x9e, 0xd6, 0xeb, 0x9d, 0xca, 0x86, 0x2e, 0x6b, 0x8e,
	0x82, 0xb3, 0x4a, 0x68, 0x11, 0x54, 0xb0, 0x86, 0x6d, 0xfe, 0x25, 0xe9, 0x1f, 0x95, 0xd3, 0x12,
	0x77, 0xf5, 0x95, 0x69, 0x11, 0x3c, 0x50, 0x0d, 0xbd, 0x98, 0x16, 0x5b, 0xee, 0x05, 0x40, 0x47,
	0xe2, 0x56, 0x6e, 0x51, 0x6a, 0x21, 0xf1, 0x05, 0x69, 0x51, 0x8a, 0x1d, 0x62, 0x98, 0x2c, 0x57,
	0x33, 0x2f, 0x5c, 0x40, 0x64, 0xd5, 0x12, 0x4f, 0x03, 0x96, 0xc4, 0x43, 0x55, 0x47, 0x70, 0xa3,
	0xce, 0xb7, 0x30, 0x82, 0x9b, 0xdd, 0xdf, 0xb5, 0xc0, 0xed, 0x4c, 0x6f, 0xdb, 0xf7, 0xe2, 0x0a,
	0xcd, 0x56, 0x31, 0x29, 0x74, 0x2e, 0xbb, 0xe5, 0x62, 0x34, 0x42, 0x36, 0x76, 0x88, 0x78, 0x3c,
	0x50, 0x05, 0x4c, 0x62, 0xf4, 0xb1, 0x65, 0xf1, 0xcf, 0xbf, 0xb0, 0xbd, 0xdc, 0xdb, 0x48, 0xd5,
	0xf9, 0xeb, 0x86, 0x65, 0x31, 0xfa, 0xd9, 0x20, 0xa2, 0x0c, 0xab, 0x8a, 0x17, 0xbe, 0x25, 0xc3,
	0x8d, 0xee, 0x5f, 0x00, 0xf7, 0x2b, 0x9a, 0x16, 0x8f, 0x3b, 0xf7, 0xc1, 0xf3, 0x6a, 0x2b, 0x56,
	0xa0, 0x0f, 0x0c, 0x72, 0x52, 0xd1, 0xf1, 0x0b, 0xf0, 0x69, 0x23, 0x63, 0x49, 0xd9, 0xa5, 0xa9,
	0x14, 0x34, 0xc5, 0x94, 0xe1, 0x5a, 0xf7, 0xef, 0xb7, 0xc0, 0x9d, 0x6c, 0xf8, 0x7e, 0xe0, 0x9e,
	0x27, 0x95, 0x49, 0xf4, 0x35, 0x34, 0xb0, 0xf2, 0x92, 0xb5, 0x9c, 0x44, 0xee, 0x71, 0x14, 0x0d,
	0x08, 0xc6, 0xfc, 0x18, 0xdd, 0xaa, 0xc0, 0x26, 0x3a, 0x61, 0x32, 0x8a, 0x47, 0x48, 0xd5, 0xa8,
	0xc5, 0xe0, 0x76, 0x05, 0xae, 0x3c, 0xa7, 0x40, 0x9a, 0x66, 0x1c, 0x73, 0xef, 0x2c, 0x55, 0xac,
	0xc0, 0xa6, 0xd3, 0xd3, 0x54, 0x19, 0x6e, 0x77, 0xff, 0x41, 0x0b, 0x74, 0x32, 0x15, 0x7b, 0x71,
	0xe4, 0x4e, 0xc6, 0x6e, 0x92, 0x9a, 0x71, 0x74, 0xe9, 0x4f, 0xbc, 0xb8, 0xd2, 0xb4, 0x78, 0x85,
	0x52, 0x49, 0x5e, 0x65, 0x48, 0x94, 0x28, 0x3f, 0xd4, 0x2c, 0xc4, 0x59, 0x89, 0xd9, 0xc7, 0xaa,
	0x2d, 0x0f, 0x17, 0x8c, 0x56, 0x82, 0x27, 0x86, 0x63, 0x3b, 0x3d, 0xbc, 0x10, 0x69, 0x25, 0x6a,
	0xd8, 0x43, 0x4c, 0xe0, 0x84, 0x25, 0xd5, 0xdc, 0xa0, 0xe6, 0x85, 0x9b, 0xf0, 0xa7, 0x7c, 0xb9,
	0x69, 0x86, 0xc8, 0xc2, 0x85, 0xef, 0xbd, 0x00, 0x9f, 0x2c, 0xc8, 0x85, 0xff, 0x22, 0x8d, 0xfe,
	0xd6, 0x41, 0x9a, 0xda, 0x57, 0xf1, 0xa2, 0x1f, 0x0a, 0x12, 0x3f, 0x8b, 0xb1, 0x30, 0x1d, 0x60,
	0xf1, 0x88, 0x65, 0x01, 0x1d, 0x21, 0x55, 0xcf, 0x0e, 0x83, 0x6b, 0x6c, 0x9f, 0xcc, 0x1d, 0x2b,
	0xfb, 0x82, 0x25, 0xf4, 0xf9, 0x18, 0x3c, 0xcd, 0x17, 0x38, 0xfb, 0x92, 0xb7, 0xa8, 0x57, 0xb9,
	0x56, 0x8b, 0x38, 0xeb, 0x7c, 0xc1, 0xeb, 0x16, 0xe1, 0x42, 0x6b, 0x16, 0xf7, 0xed, 0xdf, 0x83,
	0x66, 0x21, 0xb8, 0xc6, 0x76, 0xc0, 0x1b, 0x68, 0x59, 0x66, 0x58, 0x67, 0xbb, 0xda, 0x0d, 0x54,
	0x96, 0x2a, 0xf8, 0x2b, 0x84, 0x9b, 0x78, 0x3c, 0x77, 0x6c, 0xfe, 0x1e, 0x3d, 0xb2, 0x64, 0xb2,
	0xd5, 0xfd, 0x27, 0xbb, 0x40, 0xca, 0x2c, 0x89, 0xe6, 0x13, 0x3f, 0x45, 0xfc, 0x56, 0x8e, 0x55,
	0x0e, 0x79, 0x48, 0x38, 0x8a, 0x6a, 0x53, 0xb4, 0xfc, 0xc1, 0xb8, 0xb4, 0xc1, 0x02, 0x21, 0x77,
	0x75, 0x76, 0x4a, 0xc3, 0xe2, 0x91, 0xc1, 0x35, 0x34, 0xac, 0xa8, 0xf6, 0x82, 0x3d, 0x9b, 0x48,
	0x22, 0x61, 0x8b, 0x2b, 0x9a, 0x6b, 0x68, 0x48, 0x19, 0xa9, 0x3a, 0x45, 0x0a, 0x8b, 0xb9, 0xaf,
	0xc0, 0xab, 0x1b, 0x99, 0x04, 0x1f, 0x19, 0x87, 0x18, 0x6e, 0x48, 0x5f, 0x83, 0x83, 0x1b, 0xc9,
	0x26, 0x31, 0x46, 0x86, 0xcd, 0x2a, 0xe3, 0x72, 0x51, 0x9b, 0xd8, 0x16, 0x3b, 0x9e, 0x8e, 0xb8,
	0x16, 0x5b, 0x37, 0x74, 0x9c, 0x51, 0x09, 0x1e, 0x19, 0x47, 0x18, 0x6e, 0xdf, 0xc0, 0x56, 0x47,
	0xac, 0x08, 0x77, 0x4c, 0x25, 0xbb, 0xcb, 0xb8, 0x9e, 0x3d, 0xc2, 0x96, 0xc5, 0xf8, 0x48, 0x61,
	0x9b, 0x20, 0xb8, 0xc1, 0x72, 0xe5, 0x1e, 0x7c, 0x9b, 0xd5, 0xab, 0xd7, 0x31, 0xb1, 0x4d, 0x4d,
	0xa2, 0xfe, 0x19, 0xf1, 0xfe, 0x14, 0xde, 0x61, 0x05, 0xf4, 0xb5, 0xb6, 0x53, 0x2a, 0x74, 0x71,
	0x48, 0xdb, 0x95, 0x7e, 0x0d, 0xde, 0x5c, 0xd3, 0x46, 0xd8, 0xa3, 0xd6, 0xec, 0x2e, 0x2b, 0x12,
	0xaf, 0x9b, 0x31, 0x3f, 0xad, 0x58, 0x36, 0x22, 0x36, 0xbc, 0x77, 0xc3, 0x7c, 0x05, 0x17, 0xeb,
	0x0a, 0x84, 0xd2, 0xaf, 0xc0, 0x57, 0x37, 0x4c, 0x40, 0xd5, 0x8f, 0x54, 0xfe, 0xc2, 0x87, 0x65,
	0xd6, 0xbd, 0x1b, 0x66, 0x9c, 0x69, 0xbf, 0xd0, 0x46, 0xba, 0xc9, 0xa8, 0x59, 0xd1, 0x32, 0x44,
	0xfa, 0x00, 0x2b, 0xf0, 0xfe, 0x0d, 0x33, 0xcd, 0xfc, 0x86, 0x87, 0xce, 0x83, 0x55, 0x33, 0xd5,
	0x0d, 0x05, 0x8b, 0x74, 0x9a, 0x45, 0xe2, 0x64, 0x95, 0xe3, 0x96, 0x4c, 0x05, 0x5b, 0x36, 0x31,
	0x4e, 0xa0, 0xb7, 0x4a, 0x81, 0x92, 0xca, 0xec, 0xc2, 0xe7, 0x76, 0xb6, 0x6a, 0x6e, 0x25, 0x37,
	0x33, 0x09, 0xa7, 0x9f, 0xaf, 0xb2, 0x77, 0x49, 0x67, 0x2e, 0x86, 0x94, 0x23, 0xa4, 0xcb, 0xaa,
	0x3e, 0x80, 0x17, 0x95, 0x3c, 0xb6, 0xa2, 0x01, 0x37, 0x84, 0x7f, 0xb3, 0xce, 0xa6, 0x61, 0x3a,
	0x1a, 0x33, 0xc5, 0x9f, 0x5b, 0x95, 0x1e, 0x2a, 0x46, 0x33, 0x46, 0xa6, 0xa8, 0x12, 0xdf, 0x49,
	0x9f, 0x37, 0x67, 0x30, 0x9d, 0x5f, 0x23, 0x08, 0xe3, 0xfe, 0x2b, 0xb6, 0x73, 0xec, 0xaf, 0x64,
	0xe5, 0x86, 0xfd, 0xd7, 0x2d, 0xe9, 0x00, 0xbc, 0x58, 0x49, 0x43, 0x8e, 0x6d, 0x64, 0x1d, 0xfe,
	0x9b, 0x96, 0xf4, 0xb2, 0x39, 0x27, 0xea, 0xe2, 0xaa, 0xcb, 0x16, 0xf6, 0xfc, 0xb7, 0x2d, 0xe9,
	0xab, 0xd5, 0xf3, 0xe6, 0x3c, 0x0b, 0x13, 0x15, 0x5b, 0x54, 0x55, 0xe0, 0xbf, 0xbb, 0x99, 0x5c,
	0x1a, 0xfe, 0xdf, 0xff, 0x1e, 0x1a, 0xa8, 0x23, 0x0c, 0xff, 0x03, 0x3b, 0xe2, 0x1e, 0xac, 0xe4,
	0x89, 0x50, 0x2b, 0xcd, 0xf9, 0x1f, 0x5b, 0xd2, 0xab, 0xd5, 0x0b, 0x5a, 0x21, 0xfe, 0xa7, 0x96,
	0xf4, 0x19, 0xf8, 0x68, 0x25, 0x91, 0x2f, 0xfa, 0x7f, 0x6e, 0x75, 0xff, 0xd9, 0xed, 0xec, 0x6e,
	0x66, 0xe9, 0xef, 0x78, 0xa5, 0x17, 0x60, 0xc5, 0x5f, 0xf2, 0x56, 0x0f, 0xe7, 0xf9, 0xf5, 0x62,
	0x49, 0x52, 0x10, 0xcb, 0xb3, 0xa2, 0x78, 0x5e, 0x82, 0x86, 0x18, 0x69, 0xb0, 0x55, 0xdc, 0x16,
	0x95, 0xc0, 0xc8, 0x50, 0xc4, 0x86, 0xca, 0xb2, 0x7e, 0xbb, 0xb8, 0x96, 0x6b, 0x20, 0x64, 0xb9,
	0xbe, 0x78, 0xbd, 0x53, 0x1d, 0x18, 0x23, 0x7b, 0x28, 0xee, 0x6c, 0x96, 0x90, 0xec, 0xd1, 0x7d,
	0xe5, 0x2f, 0x16, 0x2a, 0x73, 0x62, 0xa9, 0xb1, 0x78, 0xba, 0x53, 0x01, 0x34, 0x43, 0x16, 0x17,
	0xd8, 0x5b, 0x0d, 0xad, 0x06, 0x86, 0xa6, 0xc0, 0xed, 0xe2, 0x8a, 0xae, 0x02, 0xf0, 0xe7, 0xd9,
	0x36, 0xf3, 0xc0, 0x9d, 0xf2, 0x25, 0x42, 0x01, 0xff, 0x62, 0x96, 0xcf, 0x76, 0x2a, 0x62, 0xd3,
	0x21, 0x32, 0x2b, 0x2d, 0xe0, 0xed, 0x06, 0xed, 0x7b, 0xce, 0x49, 0x0f, 0xc9, 0x87, 0x95, 0xeb,
	0xca, 0xda, 0xcc, 0xa8, 0x4d, 0xd4, 0xc1, 0x00, 0x13, 0xb8, 0x9b, 0x7f, 0x75, 0xaa, 0x76, 0x2e,
	0x9e, 0xdc, 0xdb, 0xc8, 0xb6, 0xc4, 0x73, 0xdc, 0x65, 0xdb, 0x3a, 0x9a, 0xad, 0x1e, 0xaa, 0x9a,
	0x06, 0xef, 0x35, 0x4c, 0x88, 0x01, 0x3c, 0x5f, 0x1e, 0x42, 0x58, 0xbc, 0x1c, 0xad, 0xb8, 0x0a,
	0x7f, 0xe0, 0xed, 0xa8, 0x9a, 0xa2, 0xea, 0x82, 0x0c, 0xf7, 0x1a, 0x74, 0xe8, 0xab, 0xc4, 0xb2,
	0xf9, 0x23, 0x57, 0x05, 0x4a, 0xc5, 0xd7, 0xb7, 0x86, 0xf5, 0xb5, 0x6c, 0x24, 0x1f, 0x16, 0x7f,
	0x04, 0x51, 0x1f, 0x4f, 0xc7, 0x8e, 0x4d, 0x90, 0x46, 0x65, 0x34, 0x32, 0x05, 0xb9, 0x7c, 0xf0,
	0x53, 0x9d, 0xb3, 0x2a, 0x1f, 0xb2, 0xc4, 0xe9, 0xe8, 0x18, 0x3e, 0x6c, 0xe8, 0x86, 0xe0, 0x23,
	0x8c, 0x34, 0x2c, 0xb6, 0x26, 0x4b, 0xed, 0x69, 0x18, 0x3e, 0x6a, 0x98, 0xbc, 0xf8, 0x1b, 0x04,
	0x74, 0x84, 0x15, 0xf8, 0xb8, 0xf2, 0xae, 0xb2, 0xd0, 0x1a, 0xe9, 0x88, 0x12, 0x6c, 0xd9, 0x06,
	0xc1, 0x0a, 0xec, 0x34, 0x38, 0x36, 0xef, 0x40, 0xc3, 0x47, 0x58, 0x73, 0x4c, 0xf8, 0xa4, 0xf2,
	0xc4, 0xb3, 0x58, 0x5c, 0x83, 0x7f, 0xe5, 0x64, 0x91, 0x21, 0x2e, 0x76, 0x9f, 0x36, 0x8c, 0x83,
	0x75, 0xa5, 0xf0, 0x2b, 0x0b, 0x3e, 0x2b, 0xde, 0x4a, 0x54, 0x23, 0xd3, 0xc6, 0x84, 0x38, 0xa6,
	0xcd, 0xf7, 0x40, 0x1d, 0x6b, 0xf0, 0x79, 0x83, 0x55, 0x90, 0xa6, 0xa9, 0x58, 0x11, 0xce, 0xfb,
	0x51, 0x13, 0x8e, 0x07, 0xaa, 0x45, 0x6d, 0x74, 0x88, 0x75, 0xf8, 0x71, 0x03, 0xce, 0xe7, 0x9b,
	0xc5, 0xf7, 0x27, 0xac, 0x7e, 0x5a, 0xb6, 0xfa, 0xf0, 0xc4, 0x52, 0x65, 0xa4, 0x65, 0x1c, 0x6a,
	0x12, 0xbe, 0x90, 0x58, 0x81, 0xfb, 0x0d, 0xb3, 0x72, 0x74, 0xd5, 0xa6, 0x96, 0x33, 0x1a, 0xf1,
	0xa7, 0xad, 0x9f, 0x36, 0x58, 0x4f, 0x7c, 0xdc, 0xa0, 0xf8, 0x08, 0x29, 0x18, 0x7e, 0xd6, 0x10,
	0x37, 0x36, 0xc1, 0x98, 0xca, 0x8e, 0x0d, 0x5f, 0x34, 0xc4, 0x46, 0xf6, 0xb6, 0xa4, 0xef, 0x68,
	0xd4, 0x92, 0x91, 0x0e, 0x3f, 0xaf, 0x3c, 0x9e, 0xad, 0x58, 0xb6, 0xea, 0xe1, 0x5f, 0x34, 0x98,
	0x96, 0x3b, 0xad, 0x65, 0x1b, 0x3a, 0x66, 0xb6, 0x25, 0x03, 0x0c, 0x5f, 0x36, 0x0c, 0x26, 0x13,
	0xd5, 0xae, 0x4c, 0x1d, 0xbe, 0x6a, 0x98, 0x8e, 0x65, 0x62, 0x4d, 0xa3, 0xa8, 0x67, 0x19, 0xa4,
	0x07, 0x0f, 0x1a, 0x3a, 0xe1, 0x16, 0xb1, 0xb1, 0xc6, 0x1f, 0x0f, 0x61, 0x05, 0x7e, 0xd9, 0xe0,
	0x30, 0x4c, 0x5b, 0xca, 0x76, 0x38, 0x92, 0x45, 0x49, 0xb7, 0x3b, 0x07, 0x10, 0x2b, 0xa6, 0xdc,
	0x77, 0x2f, 0xa3, 0xd8, 0x4f, 0x8b, 0xdb, 0xba, 0x3e, 0x3a, 0x32, 0x88, 0x6a, 0x67, 0x57, 0x69,
	0x48, 0xcb, 0x3e, 0x63, 0x2e, 0x8a, 0x45, 0x72, 0x80, 0x2d, 0xf1, 0x1e, 0xb6, 0x8a, 0xf0, 0xdd,
	0xb1, 0x5d, 0x6f, 0x21, 0x36, 0x14, 0xb8, 0xd6, 0xfd, 0xa7, 0x6b, 0xe0, 0x01, 0x1b, 0xd7, 0x9c,
	0x27, 0x17, 0x7a, 0x94, 0xfa, 0x67, 0x7e, 0xf6, 0xc7, 0xb1, 0x07, 0xe0, 0x73, 0xc5, 0x94, 0xc5,
	0x57, 0x1b, 0xdd, 0xb0, 0xd5, 0xbe, 0x2a, 0x32, 0x69, 0xb5, 0xc2, 0x14, 0x9f, 0xb3, 0xba, 0xe0,
	0x65, 0x33, 0x33, 0xfb, 0xc3, 0x0f, 0x0d, 0xf7, 0xb3, 0x6d, 0x1a, 0x70, 0x77, 0xbb, 0x8e, 0xfb,
	0xb3, 0xa1, 0xea, 0x79, 0xbd, 0x78, 0x9b, 0xa7, 0x98, 0x46, 0x76, 0x51, 0x65, 0x5a, 0x8e, 0xc6,
	0xaa, 0xbf, 0x1f, 0xc0, 0xdb, 0x15, 0xdd, 0x12, 0xac, 0xa8, 0x72, 0xa9, 0x37, 0xb6, 0x28, 0x3a,
	0x42, 0xaa, 0xc6, 0x5f, 0x39, 0x7d, 0xcc, 0xdf, 0x75, 0xdd, 0xd4, 0x2e, 0x1b, 0xe4, 0x13, 0xe9,
	0x5b, 0xf0, 0x75, 0x33, 0xb9, 0x38, 0x58, 0x8a, 0x39, 0xc8, 0x1a, 0xe6, 0xcf, 0xb9, 0x0e, 0x58,
	0x91, 0x77, 0x7d, 0x0b, 0x05, 0xa9, 0xda, 0x09, 0x0f, 0x1f, 0x44, 0x4e, 0xe0, 0x97, 0x37, 0x37,
	0xe8, 0xab, 0xfc, 0x5b, 0x2f, 0x57, 0xc9, 0x82, 0xdd, 0xde, 0xc6, 0xb0, 0xf5, 0x97, 0x5a, 0xb7,
	0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x7f, 0xf4, 0xda, 0xaa, 0x47, 0x00, 0x00,
}
