// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steamdatagram_messages_sdr.proto

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CMsgSteamDatagramConnectionClosed_ERelayMode int32

const (
	CMsgSteamDatagramConnectionClosed_None         CMsgSteamDatagramConnectionClosed_ERelayMode = 0
	CMsgSteamDatagramConnectionClosed_EndToEnd     CMsgSteamDatagramConnectionClosed_ERelayMode = 1
	CMsgSteamDatagramConnectionClosed_ClosedByPeer CMsgSteamDatagramConnectionClosed_ERelayMode = 2
)

var CMsgSteamDatagramConnectionClosed_ERelayMode_name = map[int32]string{
	0: "None",
	1: "EndToEnd",
	2: "ClosedByPeer",
}
var CMsgSteamDatagramConnectionClosed_ERelayMode_value = map[string]int32{
	"None":         0,
	"EndToEnd":     1,
	"ClosedByPeer": 2,
}

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) Enum() *CMsgSteamDatagramConnectionClosed_ERelayMode {
	p := new(CMsgSteamDatagramConnectionClosed_ERelayMode)
	*p = x
	return p
}
func (x CMsgSteamDatagramConnectionClosed_ERelayMode) String() string {
	return proto.EnumName(CMsgSteamDatagramConnectionClosed_ERelayMode_name, int32(x))
}
func (x *CMsgSteamDatagramConnectionClosed_ERelayMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramConnectionClosed_ERelayMode_value, data, "CMsgSteamDatagramConnectionClosed_ERelayMode")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionClosed_ERelayMode(value)
	return nil
}
func (CMsgSteamDatagramConnectionClosed_ERelayMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor38, []int{8, 0}
}

type CMsgSteamDatagramConnectionStatsClientToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 4
)

var CMsgSteamDatagramConnectionStatsClientToRouter_Flags_name = map[int32]string{
	1: "ACK_REQUEST_RELAY",
	2: "ACK_REQUEST_E2E",
	4: "ACK_REQUEST_IMMEDIATE",
}
var CMsgSteamDatagramConnectionStatsClientToRouter_Flags_value = map[string]int32{
	"ACK_REQUEST_RELAY":     1,
	"ACK_REQUEST_E2E":       2,
	"ACK_REQUEST_IMMEDIATE": 4,
}

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsClientToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsClientToRouter_Flags)
	*p = x
	return p
}
func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) String() string {
	return proto.EnumName(CMsgSteamDatagramConnectionStatsClientToRouter_Flags_name, int32(x))
}
func (x *CMsgSteamDatagramConnectionStatsClientToRouter_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramConnectionStatsClientToRouter_Flags_value, data, "CMsgSteamDatagramConnectionStatsClientToRouter_Flags")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsClientToRouter_Flags(value)
	return nil
}
func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor38, []int{12, 0}
}

type CMsgSteamDatagramConnectionStatsRouterToClient_Flags int32

const (
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 1
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 2
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 4
)

var CMsgSteamDatagramConnectionStatsRouterToClient_Flags_name = map[int32]string{
	1: "ACK_REQUEST_RELAY",
	2: "ACK_REQUEST_E2E",
	4: "ACK_REQUEST_IMMEDIATE",
}
var CMsgSteamDatagramConnectionStatsRouterToClient_Flags_value = map[string]int32{
	"ACK_REQUEST_RELAY":     1,
	"ACK_REQUEST_E2E":       2,
	"ACK_REQUEST_IMMEDIATE": 4,
}

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Enum() *CMsgSteamDatagramConnectionStatsRouterToClient_Flags {
	p := new(CMsgSteamDatagramConnectionStatsRouterToClient_Flags)
	*p = x
	return p
}
func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) String() string {
	return proto.EnumName(CMsgSteamDatagramConnectionStatsRouterToClient_Flags_name, int32(x))
}
func (x *CMsgSteamDatagramConnectionStatsRouterToClient_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramConnectionStatsRouterToClient_Flags_value, data, "CMsgSteamDatagramConnectionStatsRouterToClient_Flags")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsRouterToClient_Flags(value)
	return nil
}
func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor38, []int{13, 0}
}

type CMsgSteamDatagramConnectionStatsRouterToServer_Flags int32

const (
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 1
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 2
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 4
)

var CMsgSteamDatagramConnectionStatsRouterToServer_Flags_name = map[int32]string{
	1: "ACK_REQUEST_RELAY",
	2: "ACK_REQUEST_E2E",
	4: "ACK_REQUEST_IMMEDIATE",
}
var CMsgSteamDatagramConnectionStatsRouterToServer_Flags_value = map[string]int32{
	"ACK_REQUEST_RELAY":     1,
	"ACK_REQUEST_E2E":       2,
	"ACK_REQUEST_IMMEDIATE": 4,
}

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Enum() *CMsgSteamDatagramConnectionStatsRouterToServer_Flags {
	p := new(CMsgSteamDatagramConnectionStatsRouterToServer_Flags)
	*p = x
	return p
}
func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) String() string {
	return proto.EnumName(CMsgSteamDatagramConnectionStatsRouterToServer_Flags_name, int32(x))
}
func (x *CMsgSteamDatagramConnectionStatsRouterToServer_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramConnectionStatsRouterToServer_Flags_value, data, "CMsgSteamDatagramConnectionStatsRouterToServer_Flags")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsRouterToServer_Flags(value)
	return nil
}
func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor38, []int{14, 0}
}

type CMsgSteamDatagramConnectionStatsServerToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 4
)

var CMsgSteamDatagramConnectionStatsServerToRouter_Flags_name = map[int32]string{
	1: "ACK_REQUEST_RELAY",
	2: "ACK_REQUEST_E2E",
	4: "ACK_REQUEST_IMMEDIATE",
}
var CMsgSteamDatagramConnectionStatsServerToRouter_Flags_value = map[string]int32{
	"ACK_REQUEST_RELAY":     1,
	"ACK_REQUEST_E2E":       2,
	"ACK_REQUEST_IMMEDIATE": 4,
}

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsServerToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsServerToRouter_Flags)
	*p = x
	return p
}
func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) String() string {
	return proto.EnumName(CMsgSteamDatagramConnectionStatsServerToRouter_Flags_name, int32(x))
}
func (x *CMsgSteamDatagramConnectionStatsServerToRouter_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramConnectionStatsServerToRouter_Flags_value, data, "CMsgSteamDatagramConnectionStatsServerToRouter_Flags")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsServerToRouter_Flags(value)
	return nil
}
func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor38, []int{15, 0}
}

type CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 4
)

var CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_name = map[int32]string{
	1: "ACK_REQUEST_RELAY",
	2: "ACK_REQUEST_E2E",
	4: "ACK_REQUEST_IMMEDIATE",
}
var CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_value = map[string]int32{
	"ACK_REQUEST_RELAY":     1,
	"ACK_REQUEST_E2E":       2,
	"ACK_REQUEST_IMMEDIATE": 4,
}

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags)
	*p = x
	return p
}
func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) String() string {
	return proto.EnumName(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_name, int32(x))
}
func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_value, data, "CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags(value)
	return nil
}
func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor38, []int{21, 0}
}

type CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 4
)

var CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_name = map[int32]string{
	1: "ACK_REQUEST_RELAY",
	2: "ACK_REQUEST_E2E",
	4: "ACK_REQUEST_IMMEDIATE",
}
var CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_value = map[string]int32{
	"ACK_REQUEST_RELAY":     1,
	"ACK_REQUEST_E2E":       2,
	"ACK_REQUEST_IMMEDIATE": 4,
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags)
	*p = x
	return p
}
func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) String() string {
	return proto.EnumName(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_name, int32(x))
}
func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_value, data, "CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags(value)
	return nil
}
func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor38, []int{22, 0}
}

type CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PRouterToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PRouterToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PRouterToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags = 4
)

var CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_name = map[int32]string{
	1: "ACK_REQUEST_RELAY",
	2: "ACK_REQUEST_E2E",
	4: "ACK_REQUEST_IMMEDIATE",
}
var CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_value = map[string]int32{
	"ACK_REQUEST_RELAY":     1,
	"ACK_REQUEST_E2E":       2,
	"ACK_REQUEST_IMMEDIATE": 4,
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags)
	*p = x
	return p
}
func (x CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) String() string {
	return proto.EnumName(CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_name, int32(x))
}
func (x *CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_value, data, "CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags(value)
	return nil
}
func (CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor38, []int{27, 0}
}

type CMsgSteamDatagramGameserverPing struct {
	RouterTimestamp  *uint32 `protobuf:"fixed32,4,opt,name=router_timestamp,json=routerTimestamp" json:"router_timestamp,omitempty"`
	DummyPad         *uint64 `protobuf:"fixed64,99,opt,name=dummy_pad,json=dummyPad" json:"dummy_pad,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramGameserverPing) Reset()         { *m = CMsgSteamDatagramGameserverPing{} }
func (m *CMsgSteamDatagramGameserverPing) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramGameserverPing) ProtoMessage()    {}
func (*CMsgSteamDatagramGameserverPing) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{0}
}

func (m *CMsgSteamDatagramGameserverPing) GetRouterTimestamp() uint32 {
	if m != nil && m.RouterTimestamp != nil {
		return *m.RouterTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverPing) GetDummyPad() uint64 {
	if m != nil && m.DummyPad != nil {
		return *m.DummyPad
	}
	return 0
}

type CMsgSteamDatagramNoSessionRelayToClient struct {
	ConnectionId         *uint32 `protobuf:"fixed32,7,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	YourPublicIp         *uint32 `protobuf:"fixed32,2,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	ServerTime           *uint32 `protobuf:"fixed32,3,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge            *uint64 `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	SecondsUntilShutdown *uint32 `protobuf:"varint,5,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *CMsgSteamDatagramNoSessionRelayToClient) Reset() {
	*m = CMsgSteamDatagramNoSessionRelayToClient{}
}
func (m *CMsgSteamDatagramNoSessionRelayToClient) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramNoSessionRelayToClient) ProtoMessage()    {}
func (*CMsgSteamDatagramNoSessionRelayToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{1}
}

func (m *CMsgSteamDatagramNoSessionRelayToClient) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoSessionRelayToClient) GetYourPublicIp() uint32 {
	if m != nil && m.YourPublicIp != nil {
		return *m.YourPublicIp
	}
	return 0
}

func (m *CMsgSteamDatagramNoSessionRelayToClient) GetServerTime() uint32 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *CMsgSteamDatagramNoSessionRelayToClient) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

func (m *CMsgSteamDatagramNoSessionRelayToClient) GetSecondsUntilShutdown() uint32 {
	if m != nil && m.SecondsUntilShutdown != nil {
		return *m.SecondsUntilShutdown
	}
	return 0
}

type CMsgSteamDatagramNoSessionRelayToPeer struct {
	LegacyRelaySessionId *uint32 `protobuf:"varint,1,opt,name=legacy_relay_session_id,json=legacyRelaySessionId" json:"legacy_relay_session_id,omitempty"`
	FromRelaySessionId   *uint32 `protobuf:"fixed32,2,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	FromConnectionId     *uint32 `protobuf:"fixed32,7,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	KludgePad            *uint64 `protobuf:"fixed64,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *CMsgSteamDatagramNoSessionRelayToPeer) Reset()         { *m = CMsgSteamDatagramNoSessionRelayToPeer{} }
func (m *CMsgSteamDatagramNoSessionRelayToPeer) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramNoSessionRelayToPeer) ProtoMessage()    {}
func (*CMsgSteamDatagramNoSessionRelayToPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{2}
}

func (m *CMsgSteamDatagramNoSessionRelayToPeer) GetLegacyRelaySessionId() uint32 {
	if m != nil && m.LegacyRelaySessionId != nil {
		return *m.LegacyRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoSessionRelayToPeer) GetFromRelaySessionId() uint32 {
	if m != nil && m.FromRelaySessionId != nil {
		return *m.FromRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoSessionRelayToPeer) GetFromConnectionId() uint32 {
	if m != nil && m.FromConnectionId != nil {
		return *m.FromConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoSessionRelayToPeer) GetKludgePad() uint64 {
	if m != nil && m.KludgePad != nil {
		return *m.KludgePad
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleRequest struct {
	ConnectionId     *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramClientPingSampleRequest) Reset() {
	*m = CMsgSteamDatagramClientPingSampleRequest{}
}
func (m *CMsgSteamDatagramClientPingSampleRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramClientPingSampleRequest) ProtoMessage()    {}
func (*CMsgSteamDatagramClientPingSampleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{3}
}

func (m *CMsgSteamDatagramClientPingSampleRequest) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply struct {
	ConnectionId     *uint32                                                  `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	RoutingClusters  []*CMsgSteamDatagramClientPingSampleReply_RoutingCluster `protobuf:"bytes,2,rep,name=routing_clusters,json=routingClusters" json:"routing_clusters,omitempty"`
	DataCenters      []*CMsgSteamDatagramClientPingSampleReply_DataCenter     `protobuf:"bytes,3,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
	XXX_unrecognized []byte                                                   `json:"-"`
}

func (m *CMsgSteamDatagramClientPingSampleReply) Reset() {
	*m = CMsgSteamDatagramClientPingSampleReply{}
}
func (m *CMsgSteamDatagramClientPingSampleReply) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramClientPingSampleReply) ProtoMessage()    {}
func (*CMsgSteamDatagramClientPingSampleReply) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{4}
}

func (m *CMsgSteamDatagramClientPingSampleReply) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramClientPingSampleReply) GetRoutingClusters() []*CMsgSteamDatagramClientPingSampleReply_RoutingCluster {
	if m != nil {
		return m.RoutingClusters
	}
	return nil
}

func (m *CMsgSteamDatagramClientPingSampleReply) GetDataCenters() []*CMsgSteamDatagramClientPingSampleReply_DataCenter {
	if m != nil {
		return m.DataCenters
	}
	return nil
}

type CMsgSteamDatagramClientPingSampleReply_RoutingCluster struct {
	Id               *uint32 `protobuf:"fixed32,1,opt,name=id" json:"id,omitempty"`
	FrontPingMs      *uint32 `protobuf:"varint,2,opt,name=front_ping_ms,json=frontPingMs" json:"front_ping_ms,omitempty"`
	E2EPingMs        *uint32 `protobuf:"varint,3,opt,name=e2e_ping_ms,json=e2ePingMs" json:"e2e_ping_ms,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) Reset() {
	*m = CMsgSteamDatagramClientPingSampleReply_RoutingCluster{}
}
func (m *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramClientPingSampleReply_RoutingCluster) ProtoMessage() {}
func (*CMsgSteamDatagramClientPingSampleReply_RoutingCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{4, 0}
}

func (m *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) GetFrontPingMs() uint32 {
	if m != nil && m.FrontPingMs != nil {
		return *m.FrontPingMs
	}
	return 0
}

func (m *CMsgSteamDatagramClientPingSampleReply_RoutingCluster) GetE2EPingMs() uint32 {
	if m != nil && m.E2EPingMs != nil {
		return *m.E2EPingMs
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply_DataCenter struct {
	DataCenterId     *uint32 `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	ViaRelayId       *uint32 `protobuf:"fixed32,2,opt,name=via_relay_id,json=viaRelayId" json:"via_relay_id,omitempty"`
	E2EPingMs        *uint32 `protobuf:"varint,3,opt,name=e2e_ping_ms,json=e2ePingMs" json:"e2e_ping_ms,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramClientPingSampleReply_DataCenter) Reset() {
	*m = CMsgSteamDatagramClientPingSampleReply_DataCenter{}
}
func (m *CMsgSteamDatagramClientPingSampleReply_DataCenter) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramClientPingSampleReply_DataCenter) ProtoMessage() {}
func (*CMsgSteamDatagramClientPingSampleReply_DataCenter) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{4, 1}
}

func (m *CMsgSteamDatagramClientPingSampleReply_DataCenter) GetDataCenterId() uint32 {
	if m != nil && m.DataCenterId != nil {
		return *m.DataCenterId
	}
	return 0
}

func (m *CMsgSteamDatagramClientPingSampleReply_DataCenter) GetViaRelayId() uint32 {
	if m != nil && m.ViaRelayId != nil {
		return *m.ViaRelayId
	}
	return 0
}

func (m *CMsgSteamDatagramClientPingSampleReply_DataCenter) GetE2EPingMs() uint32 {
	if m != nil && m.E2EPingMs != nil {
		return *m.E2EPingMs
	}
	return 0
}

type CMsgSteamDatagramClientSwitchedPrimary struct {
	ConnectionId          *uint32                                               `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	FromIp                *uint32                                               `protobuf:"fixed32,2,opt,name=from_ip,json=fromIp" json:"from_ip,omitempty"`
	FromPort              *uint32                                               `protobuf:"varint,3,opt,name=from_port,json=fromPort" json:"from_port,omitempty"`
	FromRouterCluster     *uint32                                               `protobuf:"fixed32,4,opt,name=from_router_cluster,json=fromRouterCluster" json:"from_router_cluster,omitempty"`
	FromActiveTime        *uint32                                               `protobuf:"varint,5,opt,name=from_active_time,json=fromActiveTime" json:"from_active_time,omitempty"`
	FromActivePacketsRecv *uint32                                               `protobuf:"varint,6,opt,name=from_active_packets_recv,json=fromActivePacketsRecv" json:"from_active_packets_recv,omitempty"`
	FromDroppedReason     *string                                               `protobuf:"bytes,7,opt,name=from_dropped_reason,json=fromDroppedReason" json:"from_dropped_reason,omitempty"`
	GapMs                 *uint32                                               `protobuf:"varint,8,opt,name=gap_ms,json=gapMs" json:"gap_ms,omitempty"`
	FromQualityNow        *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,9,opt,name=from_quality_now,json=fromQualityNow" json:"from_quality_now,omitempty"`
	ToQualityNow          *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,10,opt,name=to_quality_now,json=toQualityNow" json:"to_quality_now,omitempty"`
	FromQualityThen       *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,11,opt,name=from_quality_then,json=fromQualityThen" json:"from_quality_then,omitempty"`
	ToQualityThen         *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,12,opt,name=to_quality_then,json=toQualityThen" json:"to_quality_then,omitempty"`
	XXX_unrecognized      []byte                                                `json:"-"`
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) Reset() {
	*m = CMsgSteamDatagramClientSwitchedPrimary{}
}
func (m *CMsgSteamDatagramClientSwitchedPrimary) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramClientSwitchedPrimary) ProtoMessage()    {}
func (*CMsgSteamDatagramClientSwitchedPrimary) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{5}
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetFromIp() uint32 {
	if m != nil && m.FromIp != nil {
		return *m.FromIp
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetFromPort() uint32 {
	if m != nil && m.FromPort != nil {
		return *m.FromPort
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetFromRouterCluster() uint32 {
	if m != nil && m.FromRouterCluster != nil {
		return *m.FromRouterCluster
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetFromActiveTime() uint32 {
	if m != nil && m.FromActiveTime != nil {
		return *m.FromActiveTime
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetFromActivePacketsRecv() uint32 {
	if m != nil && m.FromActivePacketsRecv != nil {
		return *m.FromActivePacketsRecv
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetFromDroppedReason() string {
	if m != nil && m.FromDroppedReason != nil {
		return *m.FromDroppedReason
	}
	return ""
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetGapMs() uint32 {
	if m != nil && m.GapMs != nil {
		return *m.GapMs
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetFromQualityNow() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if m != nil {
		return m.FromQualityNow
	}
	return nil
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetToQualityNow() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if m != nil {
		return m.ToQualityNow
	}
	return nil
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetFromQualityThen() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if m != nil {
		return m.FromQualityThen
	}
	return nil
}

func (m *CMsgSteamDatagramClientSwitchedPrimary) GetToQualityThen() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if m != nil {
		return m.ToQualityThen
	}
	return nil
}

type CMsgSteamDatagramClientSwitchedPrimary_RouterQuality struct {
	Score            *uint32 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	FrontPing        *uint32 `protobuf:"varint,2,opt,name=front_ping,json=frontPing" json:"front_ping,omitempty"`
	BackPing         *uint32 `protobuf:"varint,3,opt,name=back_ping,json=backPing" json:"back_ping,omitempty"`
	SecondsUntilDown *uint32 `protobuf:"varint,4,opt,name=seconds_until_down,json=secondsUntilDown" json:"seconds_until_down,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) Reset() {
	*m = CMsgSteamDatagramClientSwitchedPrimary_RouterQuality{}
}
func (m *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) ProtoMessage() {}
func (*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{5, 0}
}

func (m *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetFrontPing() uint32 {
	if m != nil && m.FrontPing != nil {
		return *m.FrontPing
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetBackPing() uint32 {
	if m != nil && m.BackPing != nil {
		return *m.BackPing
	}
	return 0
}

func (m *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetSecondsUntilDown() uint32 {
	if m != nil && m.SecondsUntilDown != nil {
		return *m.SecondsUntilDown
	}
	return 0
}

type CMsgSteamDatagramConnectRequest struct {
	ConnectionId             *uint32                                  `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	ClientSteamId            *uint64                                  `protobuf:"fixed64,3,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	MyTimestamp              *uint64                                  `protobuf:"fixed64,4,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	PingEstMs                *uint32                                  `protobuf:"varint,5,opt,name=ping_est_ms,json=pingEstMs" json:"ping_est_ms,omitempty"`
	VirtualPort              *uint32                                  `protobuf:"varint,9,opt,name=virtual_port,json=virtualPort" json:"virtual_port,omitempty"`
	GameserverRelaySessionId *uint32                                  `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	Crypt                    *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,6,opt,name=crypt" json:"crypt,omitempty"`
	Cert                     *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,7,opt,name=cert" json:"cert,omitempty"`
	ProtocolVersion          *uint32                                  `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	XXX_unrecognized         []byte                                   `json:"-"`
}

func (m *CMsgSteamDatagramConnectRequest) Reset()         { *m = CMsgSteamDatagramConnectRequest{} }
func (m *CMsgSteamDatagramConnectRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramConnectRequest) ProtoMessage()    {}
func (*CMsgSteamDatagramConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{6}
}

func (m *CMsgSteamDatagramConnectRequest) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectRequest) GetClientSteamId() uint64 {
	if m != nil && m.ClientSteamId != nil {
		return *m.ClientSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectRequest) GetMyTimestamp() uint64 {
	if m != nil && m.MyTimestamp != nil {
		return *m.MyTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramConnectRequest) GetPingEstMs() uint32 {
	if m != nil && m.PingEstMs != nil {
		return *m.PingEstMs
	}
	return 0
}

func (m *CMsgSteamDatagramConnectRequest) GetVirtualPort() uint32 {
	if m != nil && m.VirtualPort != nil {
		return *m.VirtualPort
	}
	return 0
}

func (m *CMsgSteamDatagramConnectRequest) GetGameserverRelaySessionId() uint32 {
	if m != nil && m.GameserverRelaySessionId != nil {
		return *m.GameserverRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if m != nil {
		return m.Crypt
	}
	return nil
}

func (m *CMsgSteamDatagramConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CMsgSteamDatagramConnectRequest) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

type CMsgSteamDatagramConnectOK struct {
	ClientConnectionId       *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId       *uint32                                  `protobuf:"fixed32,7,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	YourTimestamp            *uint64                                  `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	DelayTimeUsec            *uint32                                  `protobuf:"varint,4,opt,name=delay_time_usec,json=delayTimeUsec" json:"delay_time_usec,omitempty"`
	GameserverRelaySessionId *uint32                                  `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	Crypt                    *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,5,opt,name=crypt" json:"crypt,omitempty"`
	Cert                     *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,6,opt,name=cert" json:"cert,omitempty"`
	ProtocolVersion          *uint32                                  `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	XXX_unrecognized         []byte                                   `json:"-"`
}

func (m *CMsgSteamDatagramConnectOK) Reset()                    { *m = CMsgSteamDatagramConnectOK{} }
func (m *CMsgSteamDatagramConnectOK) String() string            { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramConnectOK) ProtoMessage()               {}
func (*CMsgSteamDatagramConnectOK) Descriptor() ([]byte, []int) { return fileDescriptor38, []int{7} }

func (m *CMsgSteamDatagramConnectOK) GetClientConnectionId() uint32 {
	if m != nil && m.ClientConnectionId != nil {
		return *m.ClientConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectOK) GetServerConnectionId() uint32 {
	if m != nil && m.ServerConnectionId != nil {
		return *m.ServerConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectOK) GetYourTimestamp() uint64 {
	if m != nil && m.YourTimestamp != nil {
		return *m.YourTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramConnectOK) GetDelayTimeUsec() uint32 {
	if m != nil && m.DelayTimeUsec != nil {
		return *m.DelayTimeUsec
	}
	return 0
}

func (m *CMsgSteamDatagramConnectOK) GetGameserverRelaySessionId() uint32 {
	if m != nil && m.GameserverRelaySessionId != nil {
		return *m.GameserverRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if m != nil {
		return m.Crypt
	}
	return nil
}

func (m *CMsgSteamDatagramConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CMsgSteamDatagramConnectOK) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

type CMsgSteamDatagramConnectionClosed struct {
	ToConnectionId                 *uint32                                       `protobuf:"fixed32,7,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId               *uint32                                       `protobuf:"fixed32,8,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	FromSteamId                    *uint64                                       `protobuf:"fixed64,3,opt,name=from_steam_id,json=fromSteamId" json:"from_steam_id,omitempty"`
	LegacyGameserverRelaySessionId *uint32                                       `protobuf:"varint,2,opt,name=legacy_gameserver_relay_session_id,json=legacyGameserverRelaySessionId" json:"legacy_gameserver_relay_session_id,omitempty"`
	ToRelaySessionId               *uint32                                       `protobuf:"fixed32,9,opt,name=to_relay_session_id,json=toRelaySessionId" json:"to_relay_session_id,omitempty"`
	FromRelaySessionId             *uint32                                       `protobuf:"fixed32,10,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	ForwardTargetRelayRoutingToken []byte                                        `protobuf:"bytes,11,opt,name=forward_target_relay_routing_token,json=forwardTargetRelayRoutingToken" json:"forward_target_relay_routing_token,omitempty"`
	ForwardTargetRevision          *uint32                                       `protobuf:"varint,12,opt,name=forward_target_revision,json=forwardTargetRevision" json:"forward_target_revision,omitempty"`
	RelayMode                      *CMsgSteamDatagramConnectionClosed_ERelayMode `protobuf:"varint,4,opt,name=relay_mode,json=relayMode,enum=dota.CMsgSteamDatagramConnectionClosed_ERelayMode,def=0" json:"relay_mode,omitempty"`
	Debug                          *string                                       `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	ReasonCode                     *uint32                                       `protobuf:"varint,6,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	XXX_unrecognized               []byte                                        `json:"-"`
}

func (m *CMsgSteamDatagramConnectionClosed) Reset()         { *m = CMsgSteamDatagramConnectionClosed{} }
func (m *CMsgSteamDatagramConnectionClosed) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramConnectionClosed) ProtoMessage()    {}
func (*CMsgSteamDatagramConnectionClosed) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{8}
}

const Default_CMsgSteamDatagramConnectionClosed_RelayMode CMsgSteamDatagramConnectionClosed_ERelayMode = CMsgSteamDatagramConnectionClosed_None

func (m *CMsgSteamDatagramConnectionClosed) GetToConnectionId() uint32 {
	if m != nil && m.ToConnectionId != nil {
		return *m.ToConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionClosed) GetFromConnectionId() uint32 {
	if m != nil && m.FromConnectionId != nil {
		return *m.FromConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionClosed) GetFromSteamId() uint64 {
	if m != nil && m.FromSteamId != nil {
		return *m.FromSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionClosed) GetLegacyGameserverRelaySessionId() uint32 {
	if m != nil && m.LegacyGameserverRelaySessionId != nil {
		return *m.LegacyGameserverRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionClosed) GetToRelaySessionId() uint32 {
	if m != nil && m.ToRelaySessionId != nil {
		return *m.ToRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionClosed) GetFromRelaySessionId() uint32 {
	if m != nil && m.FromRelaySessionId != nil {
		return *m.FromRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionClosed) GetForwardTargetRelayRoutingToken() []byte {
	if m != nil {
		return m.ForwardTargetRelayRoutingToken
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionClosed) GetForwardTargetRevision() uint32 {
	if m != nil && m.ForwardTargetRevision != nil {
		return *m.ForwardTargetRevision
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionClosed) GetRelayMode() CMsgSteamDatagramConnectionClosed_ERelayMode {
	if m != nil && m.RelayMode != nil {
		return *m.RelayMode
	}
	return Default_CMsgSteamDatagramConnectionClosed_RelayMode
}

func (m *CMsgSteamDatagramConnectionClosed) GetDebug() string {
	if m != nil && m.Debug != nil {
		return *m.Debug
	}
	return ""
}

func (m *CMsgSteamDatagramConnectionClosed) GetReasonCode() uint32 {
	if m != nil && m.ReasonCode != nil {
		return *m.ReasonCode
	}
	return 0
}

type CMsgSteamDatagramNoConnection struct {
	ToConnectionId                 *uint32 `protobuf:"fixed32,5,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId               *uint32 `protobuf:"fixed32,6,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	LegacyGameserverRelaySessionId *uint32 `protobuf:"varint,2,opt,name=legacy_gameserver_relay_session_id,json=legacyGameserverRelaySessionId" json:"legacy_gameserver_relay_session_id,omitempty"`
	ToRelaySessionId               *uint32 `protobuf:"fixed32,9,opt,name=to_relay_session_id,json=toRelaySessionId" json:"to_relay_session_id,omitempty"`
	FromRelaySessionId             *uint32 `protobuf:"fixed32,10,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	FromSteamId                    *uint64 `protobuf:"fixed64,3,opt,name=from_steam_id,json=fromSteamId" json:"from_steam_id,omitempty"`
	EndToEnd                       *bool   `protobuf:"varint,4,opt,name=end_to_end,json=endToEnd" json:"end_to_end,omitempty"`
	DummyPad                       *uint32 `protobuf:"fixed32,1023,opt,name=dummy_pad,json=dummyPad" json:"dummy_pad,omitempty"`
	XXX_unrecognized               []byte  `json:"-"`
}

func (m *CMsgSteamDatagramNoConnection) Reset()                    { *m = CMsgSteamDatagramNoConnection{} }
func (m *CMsgSteamDatagramNoConnection) String() string            { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramNoConnection) ProtoMessage()               {}
func (*CMsgSteamDatagramNoConnection) Descriptor() ([]byte, []int) { return fileDescriptor38, []int{9} }

func (m *CMsgSteamDatagramNoConnection) GetToConnectionId() uint32 {
	if m != nil && m.ToConnectionId != nil {
		return *m.ToConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoConnection) GetFromConnectionId() uint32 {
	if m != nil && m.FromConnectionId != nil {
		return *m.FromConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoConnection) GetLegacyGameserverRelaySessionId() uint32 {
	if m != nil && m.LegacyGameserverRelaySessionId != nil {
		return *m.LegacyGameserverRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoConnection) GetToRelaySessionId() uint32 {
	if m != nil && m.ToRelaySessionId != nil {
		return *m.ToRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoConnection) GetFromRelaySessionId() uint32 {
	if m != nil && m.FromRelaySessionId != nil {
		return *m.FromRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramNoConnection) GetFromSteamId() uint64 {
	if m != nil && m.FromSteamId != nil {
		return *m.FromSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramNoConnection) GetEndToEnd() bool {
	if m != nil && m.EndToEnd != nil {
		return *m.EndToEnd
	}
	return false
}

func (m *CMsgSteamDatagramNoConnection) GetDummyPad() uint32 {
	if m != nil && m.DummyPad != nil {
		return *m.DummyPad
	}
	return 0
}

type CMsgSteamDatagramGameserverSessionRequest struct {
	Ticket               []byte  `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	ChallengeTime        *uint32 `protobuf:"fixed32,3,opt,name=challenge_time,json=challengeTime" json:"challenge_time,omitempty"`
	Challenge            *uint64 `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	ClientConnectionId   *uint32 `protobuf:"fixed32,5,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId   *uint32 `protobuf:"fixed32,8,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	NetworkConfigVersion *uint32 `protobuf:"varint,6,opt,name=network_config_version,json=networkConfigVersion" json:"network_config_version,omitempty"`
	ProtocolVersion      *uint32 `protobuf:"varint,7,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *CMsgSteamDatagramGameserverSessionRequest) Reset() {
	*m = CMsgSteamDatagramGameserverSessionRequest{}
}
func (m *CMsgSteamDatagramGameserverSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramGameserverSessionRequest) ProtoMessage()    {}
func (*CMsgSteamDatagramGameserverSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{10}
}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetTicket() []byte {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetChallengeTime() uint32 {
	if m != nil && m.ChallengeTime != nil {
		return *m.ChallengeTime
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetClientConnectionId() uint32 {
	if m != nil && m.ClientConnectionId != nil {
		return *m.ClientConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetServerConnectionId() uint32 {
	if m != nil && m.ServerConnectionId != nil {
		return *m.ServerConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetNetworkConfigVersion() uint32 {
	if m != nil && m.NetworkConfigVersion != nil {
		return *m.NetworkConfigVersion
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionRequest) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

type CMsgSteamDatagramGameserverSessionEstablished struct {
	ConnectionId         *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	GameserverSteamId    *uint64 `protobuf:"fixed64,3,opt,name=gameserver_steam_id,json=gameserverSteamId" json:"gameserver_steam_id,omitempty"`
	SecondsUntilShutdown *uint32 `protobuf:"varint,4,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	SeqNumR2C            *uint32 `protobuf:"varint,6,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *CMsgSteamDatagramGameserverSessionEstablished) Reset() {
	*m = CMsgSteamDatagramGameserverSessionEstablished{}
}
func (m *CMsgSteamDatagramGameserverSessionEstablished) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramGameserverSessionEstablished) ProtoMessage() {}
func (*CMsgSteamDatagramGameserverSessionEstablished) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{11}
}

func (m *CMsgSteamDatagramGameserverSessionEstablished) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionEstablished) GetGameserverSteamId() uint64 {
	if m != nil && m.GameserverSteamId != nil {
		return *m.GameserverSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionEstablished) GetSecondsUntilShutdown() uint32 {
	if m != nil && m.SecondsUntilShutdown != nil {
		return *m.SecondsUntilShutdown
	}
	return 0
}

func (m *CMsgSteamDatagramGameserverSessionEstablished) GetSeqNumR2C() uint32 {
	if m != nil && m.SeqNumR2C != nil {
		return *m.SeqNumR2C
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsClientToRouter struct {
	QualityRelay       *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay           []uint32                            `protobuf:"fixed32,4,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E             []uint32                            `protobuf:"fixed32,5,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags              *uint32                             `protobuf:"varint,6,opt,name=flags" json:"flags,omitempty"`
	ClientConnectionId *uint32                             `protobuf:"fixed32,8,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	SeqNumC2R          *uint32                             `protobuf:"varint,9,opt,name=seq_num_c2r,json=seqNumC2r" json:"seq_num_c2r,omitempty"`
	SeqNumC2S          *uint32                             `protobuf:"varint,10,opt,name=seq_num_c2s,json=seqNumC2s" json:"seq_num_c2s,omitempty"`
	XXX_unrecognized   []byte                              `json:"-"`
}

func (m *CMsgSteamDatagramConnectionStatsClientToRouter) Reset() {
	*m = CMsgSteamDatagramConnectionStatsClientToRouter{}
}
func (m *CMsgSteamDatagramConnectionStatsClientToRouter) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramConnectionStatsClientToRouter) ProtoMessage() {}
func (*CMsgSteamDatagramConnectionStatsClientToRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{12}
}

func (m *CMsgSteamDatagramConnectionStatsClientToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsClientToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsClientToRouter) GetAckRelay() []uint32 {
	if m != nil {
		return m.AckRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsClientToRouter) GetAckE2E() []uint32 {
	if m != nil {
		return m.AckE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsClientToRouter) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsClientToRouter) GetClientConnectionId() uint32 {
	if m != nil && m.ClientConnectionId != nil {
		return *m.ClientConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsClientToRouter) GetSeqNumC2R() uint32 {
	if m != nil && m.SeqNumC2R != nil {
		return *m.SeqNumC2R
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsClientToRouter) GetSeqNumC2S() uint32 {
	if m != nil && m.SeqNumC2S != nil {
		return *m.SeqNumC2S
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsRouterToClient struct {
	QualityRelay               *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                 *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	SecondsUntilShutdown       *uint32                             `protobuf:"varint,6,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	MigrateRequestIp           *uint32                             `protobuf:"fixed32,10,opt,name=migrate_request_ip,json=migrateRequestIp" json:"migrate_request_ip,omitempty"`
	MigrateRequestPort         *uint32                             `protobuf:"varint,11,opt,name=migrate_request_port,json=migrateRequestPort" json:"migrate_request_port,omitempty"`
	ScoringPenaltyRelayCluster *uint32                             `protobuf:"varint,12,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	AckRelay                   []uint32                            `protobuf:"fixed32,13,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E                     []uint32                            `protobuf:"fixed32,14,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                      *uint32                             `protobuf:"varint,15,opt,name=flags" json:"flags,omitempty"`
	ClientConnectionId         *uint32                             `protobuf:"fixed32,7,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	SeqNumR2C                  *uint32                             `protobuf:"varint,8,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	SeqNumS2C                  *uint32                             `protobuf:"varint,9,opt,name=seq_num_s2c,json=seqNumS2c" json:"seq_num_s2c,omitempty"`
	XXX_unrecognized           []byte                              `json:"-"`
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) Reset() {
	*m = CMsgSteamDatagramConnectionStatsRouterToClient{}
}
func (m *CMsgSteamDatagramConnectionStatsRouterToClient) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramConnectionStatsRouterToClient) ProtoMessage() {}
func (*CMsgSteamDatagramConnectionStatsRouterToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{13}
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetSecondsUntilShutdown() uint32 {
	if m != nil && m.SecondsUntilShutdown != nil {
		return *m.SecondsUntilShutdown
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetMigrateRequestIp() uint32 {
	if m != nil && m.MigrateRequestIp != nil {
		return *m.MigrateRequestIp
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetMigrateRequestPort() uint32 {
	if m != nil && m.MigrateRequestPort != nil {
		return *m.MigrateRequestPort
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetScoringPenaltyRelayCluster() uint32 {
	if m != nil && m.ScoringPenaltyRelayCluster != nil {
		return *m.ScoringPenaltyRelayCluster
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetAckRelay() []uint32 {
	if m != nil {
		return m.AckRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetAckE2E() []uint32 {
	if m != nil {
		return m.AckE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetClientConnectionId() uint32 {
	if m != nil && m.ClientConnectionId != nil {
		return *m.ClientConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetSeqNumR2C() uint32 {
	if m != nil && m.SeqNumR2C != nil {
		return *m.SeqNumR2C
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToClient) GetSeqNumS2C() uint32 {
	if m != nil && m.SeqNumS2C != nil {
		return *m.SeqNumS2C
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsRouterToServer struct {
	QualityRelay       *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay           []uint32                            `protobuf:"fixed32,10,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E             []uint32                            `protobuf:"fixed32,11,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags              *uint32                             `protobuf:"varint,12,opt,name=flags" json:"flags,omitempty"`
	SeqNumR2S          *uint32                             `protobuf:"varint,5,opt,name=seq_num_r2s,json=seqNumR2s" json:"seq_num_r2s,omitempty"`
	SeqNumC2S          *uint32                             `protobuf:"varint,6,opt,name=seq_num_c2s,json=seqNumC2s" json:"seq_num_c2s,omitempty"`
	ClientSteamId      *uint64                             `protobuf:"fixed64,7,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	RelaySessionId     *uint32                             `protobuf:"varint,8,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ClientConnectionId *uint32                             `protobuf:"fixed32,9,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId *uint32                             `protobuf:"fixed32,13,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	XXX_unrecognized   []byte                              `json:"-"`
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) Reset() {
	*m = CMsgSteamDatagramConnectionStatsRouterToServer{}
}
func (m *CMsgSteamDatagramConnectionStatsRouterToServer) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramConnectionStatsRouterToServer) ProtoMessage() {}
func (*CMsgSteamDatagramConnectionStatsRouterToServer) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{14}
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetAckRelay() []uint32 {
	if m != nil {
		return m.AckRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetAckE2E() []uint32 {
	if m != nil {
		return m.AckE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetSeqNumR2S() uint32 {
	if m != nil && m.SeqNumR2S != nil {
		return *m.SeqNumR2S
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetSeqNumC2S() uint32 {
	if m != nil && m.SeqNumC2S != nil {
		return *m.SeqNumC2S
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetClientSteamId() uint64 {
	if m != nil && m.ClientSteamId != nil {
		return *m.ClientSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetRelaySessionId() uint32 {
	if m != nil && m.RelaySessionId != nil {
		return *m.RelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetClientConnectionId() uint32 {
	if m != nil && m.ClientConnectionId != nil {
		return *m.ClientConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsRouterToServer) GetServerConnectionId() uint32 {
	if m != nil && m.ServerConnectionId != nil {
		return *m.ServerConnectionId
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsServerToRouter struct {
	QualityRelay       *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay           []uint32                            `protobuf:"fixed32,8,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E             []uint32                            `protobuf:"fixed32,9,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags              *uint32                             `protobuf:"varint,10,opt,name=flags" json:"flags,omitempty"`
	SeqNumS2R          *uint32                             `protobuf:"varint,3,opt,name=seq_num_s2r,json=seqNumS2r" json:"seq_num_s2r,omitempty"`
	SeqNumS2C          *uint32                             `protobuf:"varint,4,opt,name=seq_num_s2c,json=seqNumS2c" json:"seq_num_s2c,omitempty"`
	ClientSteamId      *uint64                             `protobuf:"fixed64,5,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	RelaySessionId     *uint32                             `protobuf:"varint,6,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ClientConnectionId *uint32                             `protobuf:"fixed32,7,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId *uint32                             `protobuf:"fixed32,11,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	XXX_unrecognized   []byte                              `json:"-"`
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) Reset() {
	*m = CMsgSteamDatagramConnectionStatsServerToRouter{}
}
func (m *CMsgSteamDatagramConnectionStatsServerToRouter) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramConnectionStatsServerToRouter) ProtoMessage() {}
func (*CMsgSteamDatagramConnectionStatsServerToRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{15}
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetAckRelay() []uint32 {
	if m != nil {
		return m.AckRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetAckE2E() []uint32 {
	if m != nil {
		return m.AckE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetSeqNumS2R() uint32 {
	if m != nil && m.SeqNumS2R != nil {
		return *m.SeqNumS2R
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetSeqNumS2C() uint32 {
	if m != nil && m.SeqNumS2C != nil {
		return *m.SeqNumS2C
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetClientSteamId() uint64 {
	if m != nil && m.ClientSteamId != nil {
		return *m.ClientSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetRelaySessionId() uint32 {
	if m != nil && m.RelaySessionId != nil {
		return *m.RelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetClientConnectionId() uint32 {
	if m != nil && m.ClientConnectionId != nil {
		return *m.ClientConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsServerToRouter) GetServerConnectionId() uint32 {
	if m != nil && m.ServerConnectionId != nil {
		return *m.ServerConnectionId
	}
	return 0
}

type CMsgSteamDatagramP2PSessionRequestBody struct {
	ChallengeTime        *uint32 `protobuf:"fixed32,1,opt,name=challenge_time,json=challengeTime" json:"challenge_time,omitempty"`
	Challenge            *uint64 `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	ClientConnectionId   *uint32 `protobuf:"fixed32,3,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	PeerSteamId          *uint64 `protobuf:"fixed64,4,opt,name=peer_steam_id,json=peerSteamId" json:"peer_steam_id,omitempty"`
	PeerConnectionId     *uint32 `protobuf:"fixed32,5,opt,name=peer_connection_id,json=peerConnectionId" json:"peer_connection_id,omitempty"`
	ProtocolVersion      *uint32 `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	NetworkConfigVersion *uint32 `protobuf:"varint,9,opt,name=network_config_version,json=networkConfigVersion" json:"network_config_version,omitempty"`
	PublicIp             *uint32 `protobuf:"fixed32,10,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *CMsgSteamDatagramP2PSessionRequestBody) Reset() {
	*m = CMsgSteamDatagramP2PSessionRequestBody{}
}
func (m *CMsgSteamDatagramP2PSessionRequestBody) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramP2PSessionRequestBody) ProtoMessage()    {}
func (*CMsgSteamDatagramP2PSessionRequestBody) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{16}
}

func (m *CMsgSteamDatagramP2PSessionRequestBody) GetChallengeTime() uint32 {
	if m != nil && m.ChallengeTime != nil {
		return *m.ChallengeTime
	}
	return 0
}

func (m *CMsgSteamDatagramP2PSessionRequestBody) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

func (m *CMsgSteamDatagramP2PSessionRequestBody) GetClientConnectionId() uint32 {
	if m != nil && m.ClientConnectionId != nil {
		return *m.ClientConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PSessionRequestBody) GetPeerSteamId() uint64 {
	if m != nil && m.PeerSteamId != nil {
		return *m.PeerSteamId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PSessionRequestBody) GetPeerConnectionId() uint32 {
	if m != nil && m.PeerConnectionId != nil {
		return *m.PeerConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PSessionRequestBody) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

func (m *CMsgSteamDatagramP2PSessionRequestBody) GetNetworkConfigVersion() uint32 {
	if m != nil && m.NetworkConfigVersion != nil {
		return *m.NetworkConfigVersion
	}
	return 0
}

func (m *CMsgSteamDatagramP2PSessionRequestBody) GetPublicIp() uint32 {
	if m != nil && m.PublicIp != nil {
		return *m.PublicIp
	}
	return 0
}

type CMsgSteamDatagramP2PSessionRequest struct {
	Cert             *CMsgSteamDatagramCertificateSigned `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Body             []byte                              `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Signature        []byte                              `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *CMsgSteamDatagramP2PSessionRequest) Reset()         { *m = CMsgSteamDatagramP2PSessionRequest{} }
func (m *CMsgSteamDatagramP2PSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramP2PSessionRequest) ProtoMessage()    {}
func (*CMsgSteamDatagramP2PSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{17}
}

func (m *CMsgSteamDatagramP2PSessionRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CMsgSteamDatagramP2PSessionRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *CMsgSteamDatagramP2PSessionRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type CMsgSteamDatagramP2PSessionEstablished struct {
	ConnectionId         *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SecondsUntilShutdown *uint32 `protobuf:"varint,3,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	RelayRoutingToken    []byte  `protobuf:"bytes,4,opt,name=relay_routing_token,json=relayRoutingToken" json:"relay_routing_token,omitempty"`
	SeqNumR2C            *uint32 `protobuf:"varint,5,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *CMsgSteamDatagramP2PSessionEstablished) Reset() {
	*m = CMsgSteamDatagramP2PSessionEstablished{}
}
func (m *CMsgSteamDatagramP2PSessionEstablished) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramP2PSessionEstablished) ProtoMessage()    {}
func (*CMsgSteamDatagramP2PSessionEstablished) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{18}
}

func (m *CMsgSteamDatagramP2PSessionEstablished) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PSessionEstablished) GetSecondsUntilShutdown() uint32 {
	if m != nil && m.SecondsUntilShutdown != nil {
		return *m.SecondsUntilShutdown
	}
	return 0
}

func (m *CMsgSteamDatagramP2PSessionEstablished) GetRelayRoutingToken() []byte {
	if m != nil {
		return m.RelayRoutingToken
	}
	return nil
}

func (m *CMsgSteamDatagramP2PSessionEstablished) GetSeqNumR2C() uint32 {
	if m != nil && m.SeqNumR2C != nil {
		return *m.SeqNumR2C
	}
	return 0
}

type CMsgSteamDatagramP2PRoutes struct {
	RelayClusters    []*CMsgSteamDatagramP2PRoutes_RelayCluster `protobuf:"bytes,1,rep,name=relay_clusters,json=relayClusters" json:"relay_clusters,omitempty"`
	Routes           []*CMsgSteamDatagramP2PRoutes_Route        `protobuf:"bytes,2,rep,name=routes" json:"routes,omitempty"`
	Revision         *uint32                                    `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgSteamDatagramP2PRoutes) Reset()                    { *m = CMsgSteamDatagramP2PRoutes{} }
func (m *CMsgSteamDatagramP2PRoutes) String() string            { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramP2PRoutes) ProtoMessage()               {}
func (*CMsgSteamDatagramP2PRoutes) Descriptor() ([]byte, []int) { return fileDescriptor38, []int{19} }

func (m *CMsgSteamDatagramP2PRoutes) GetRelayClusters() []*CMsgSteamDatagramP2PRoutes_RelayCluster {
	if m != nil {
		return m.RelayClusters
	}
	return nil
}

func (m *CMsgSteamDatagramP2PRoutes) GetRoutes() []*CMsgSteamDatagramP2PRoutes_Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CMsgSteamDatagramP2PRoutes) GetRevision() uint32 {
	if m != nil && m.Revision != nil {
		return *m.Revision
	}
	return 0
}

type CMsgSteamDatagramP2PRoutes_RelayCluster struct {
	PopId                    *uint32 `protobuf:"fixed32,1,opt,name=pop_id,json=popId" json:"pop_id,omitempty"`
	PingMs                   *uint32 `protobuf:"varint,2,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	ScorePenalty             *uint32 `protobuf:"varint,3,opt,name=score_penalty,json=scorePenalty" json:"score_penalty,omitempty"`
	SessionRelayRoutingToken []byte  `protobuf:"bytes,4,opt,name=session_relay_routing_token,json=sessionRelayRoutingToken" json:"session_relay_routing_token,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *CMsgSteamDatagramP2PRoutes_RelayCluster) Reset() {
	*m = CMsgSteamDatagramP2PRoutes_RelayCluster{}
}
func (m *CMsgSteamDatagramP2PRoutes_RelayCluster) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramP2PRoutes_RelayCluster) ProtoMessage()    {}
func (*CMsgSteamDatagramP2PRoutes_RelayCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{19, 0}
}

func (m *CMsgSteamDatagramP2PRoutes_RelayCluster) GetPopId() uint32 {
	if m != nil && m.PopId != nil {
		return *m.PopId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PRoutes_RelayCluster) GetPingMs() uint32 {
	if m != nil && m.PingMs != nil {
		return *m.PingMs
	}
	return 0
}

func (m *CMsgSteamDatagramP2PRoutes_RelayCluster) GetScorePenalty() uint32 {
	if m != nil && m.ScorePenalty != nil {
		return *m.ScorePenalty
	}
	return 0
}

func (m *CMsgSteamDatagramP2PRoutes_RelayCluster) GetSessionRelayRoutingToken() []byte {
	if m != nil {
		return m.SessionRelayRoutingToken
	}
	return nil
}

type CMsgSteamDatagramP2PRoutes_Route struct {
	MyPopId          *uint32 `protobuf:"fixed32,1,opt,name=my_pop_id,json=myPopId" json:"my_pop_id,omitempty"`
	YourPopId        *uint32 `protobuf:"fixed32,2,opt,name=your_pop_id,json=yourPopId" json:"your_pop_id,omitempty"`
	Score            *uint32 `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramP2PRoutes_Route) Reset()         { *m = CMsgSteamDatagramP2PRoutes_Route{} }
func (m *CMsgSteamDatagramP2PRoutes_Route) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramP2PRoutes_Route) ProtoMessage()    {}
func (*CMsgSteamDatagramP2PRoutes_Route) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{19, 1}
}

func (m *CMsgSteamDatagramP2PRoutes_Route) GetMyPopId() uint32 {
	if m != nil && m.MyPopId != nil {
		return *m.MyPopId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PRoutes_Route) GetYourPopId() uint32 {
	if m != nil && m.YourPopId != nil {
		return *m.YourPopId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PRoutes_Route) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgSteamDatagramP2PRendezvous struct {
	ToConnectionId          *uint32                            `protobuf:"fixed32,1,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	Routes                  *CMsgSteamDatagramP2PRoutes        `protobuf:"bytes,2,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision   *uint32                            `protobuf:"varint,3,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectRequest          *CMsgSteamDatagramConnectRequest   `protobuf:"bytes,4,opt,name=connect_request,json=connectRequest" json:"connect_request,omitempty"`
	ConnectOk               *CMsgSteamDatagramConnectOK        `protobuf:"bytes,5,opt,name=connect_ok,json=connectOk" json:"connect_ok,omitempty"`
	ConnectionClosed        *CMsgSteamDatagramConnectionClosed `protobuf:"bytes,6,opt,name=connection_closed,json=connectionClosed" json:"connection_closed,omitempty"`
	FailedRelayRoutingToken []byte                             `protobuf:"bytes,7,opt,name=failed_relay_routing_token,json=failedRelayRoutingToken" json:"failed_relay_routing_token,omitempty"`
	XXX_unrecognized        []byte                             `json:"-"`
}

func (m *CMsgSteamDatagramP2PRendezvous) Reset()         { *m = CMsgSteamDatagramP2PRendezvous{} }
func (m *CMsgSteamDatagramP2PRendezvous) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramP2PRendezvous) ProtoMessage()    {}
func (*CMsgSteamDatagramP2PRendezvous) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{20}
}

func (m *CMsgSteamDatagramP2PRendezvous) GetToConnectionId() uint32 {
	if m != nil && m.ToConnectionId != nil {
		return *m.ToConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PRendezvous) GetRoutes() *CMsgSteamDatagramP2PRoutes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CMsgSteamDatagramP2PRendezvous) GetAckPeerRoutesRevision() uint32 {
	if m != nil && m.AckPeerRoutesRevision != nil {
		return *m.AckPeerRoutesRevision
	}
	return 0
}

func (m *CMsgSteamDatagramP2PRendezvous) GetConnectRequest() *CMsgSteamDatagramConnectRequest {
	if m != nil {
		return m.ConnectRequest
	}
	return nil
}

func (m *CMsgSteamDatagramP2PRendezvous) GetConnectOk() *CMsgSteamDatagramConnectOK {
	if m != nil {
		return m.ConnectOk
	}
	return nil
}

func (m *CMsgSteamDatagramP2PRendezvous) GetConnectionClosed() *CMsgSteamDatagramConnectionClosed {
	if m != nil {
		return m.ConnectionClosed
	}
	return nil
}

func (m *CMsgSteamDatagramP2PRendezvous) GetFailedRelayRoutingToken() []byte {
	if m != nil {
		return m.FailedRelayRoutingToken
	}
	return nil
}

type CMsgSteamDatagramConnectionStatsP2PClientToRouter struct {
	QualityRelay                   *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                     *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay                       []uint32                            `protobuf:"fixed32,3,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E                         []uint32                            `protobuf:"fixed32,4,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                          *uint32                             `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	ForwardTargetRelayRoutingToken []byte                              `protobuf:"bytes,6,opt,name=forward_target_relay_routing_token,json=forwardTargetRelayRoutingToken" json:"forward_target_relay_routing_token,omitempty"`
	ForwardTargetRevision          *uint32                             `protobuf:"varint,7,opt,name=forward_target_revision,json=forwardTargetRevision" json:"forward_target_revision,omitempty"`
	Routes                         []byte                              `protobuf:"bytes,8,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision          *uint32                             `protobuf:"varint,9,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectionId                   *uint32                             `protobuf:"fixed32,10,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SeqNumC2R                      *uint32                             `protobuf:"varint,11,opt,name=seq_num_c2r,json=seqNumC2r" json:"seq_num_c2r,omitempty"`
	SeqNumE2E                      *uint32                             `protobuf:"varint,12,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	XXX_unrecognized               []byte                              `json:"-"`
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) Reset() {
	*m = CMsgSteamDatagramConnectionStatsP2PClientToRouter{}
}
func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramConnectionStatsP2PClientToRouter) ProtoMessage() {}
func (*CMsgSteamDatagramConnectionStatsP2PClientToRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{21}
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckRelay() []uint32 {
	if m != nil {
		return m.AckRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckE2E() []uint32 {
	if m != nil {
		return m.AckE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetForwardTargetRelayRoutingToken() []byte {
	if m != nil {
		return m.ForwardTargetRelayRoutingToken
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetForwardTargetRevision() uint32 {
	if m != nil && m.ForwardTargetRevision != nil {
		return *m.ForwardTargetRevision
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetRoutes() []byte {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckPeerRoutesRevision() uint32 {
	if m != nil && m.AckPeerRoutesRevision != nil {
		return *m.AckPeerRoutesRevision
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetSeqNumC2R() uint32 {
	if m != nil && m.SeqNumC2R != nil {
		return *m.SeqNumC2R
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetSeqNumE2E() uint32 {
	if m != nil && m.SeqNumE2E != nil {
		return *m.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsP2PRouterToClient struct {
	QualityRelay               *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                 *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	SecondsUntilShutdown       *uint32                             `protobuf:"varint,3,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	MigrateRequestIp           *uint32                             `protobuf:"fixed32,4,opt,name=migrate_request_ip,json=migrateRequestIp" json:"migrate_request_ip,omitempty"`
	MigrateRequestPort         *uint32                             `protobuf:"varint,5,opt,name=migrate_request_port,json=migrateRequestPort" json:"migrate_request_port,omitempty"`
	ScoringPenaltyRelayCluster *uint32                             `protobuf:"varint,6,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	AckRelay                   []uint32                            `protobuf:"fixed32,7,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E                     []uint32                            `protobuf:"fixed32,8,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                      *uint32                             `protobuf:"varint,9,opt,name=flags" json:"flags,omitempty"`
	AckForwardTargetRevision   *uint32                             `protobuf:"varint,10,opt,name=ack_forward_target_revision,json=ackForwardTargetRevision" json:"ack_forward_target_revision,omitempty"`
	Routes                     []byte                              `protobuf:"bytes,11,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision      *uint32                             `protobuf:"varint,12,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectionId               *uint32                             `protobuf:"fixed32,13,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SeqNumR2C                  *uint32                             `protobuf:"varint,14,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	SeqNumE2E                  *uint32                             `protobuf:"varint,15,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	XXX_unrecognized           []byte                              `json:"-"`
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) Reset() {
	*m = CMsgSteamDatagramConnectionStatsP2PRouterToClient{}
}
func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramConnectionStatsP2PRouterToClient) ProtoMessage() {}
func (*CMsgSteamDatagramConnectionStatsP2PRouterToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{22}
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSecondsUntilShutdown() uint32 {
	if m != nil && m.SecondsUntilShutdown != nil {
		return *m.SecondsUntilShutdown
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetMigrateRequestIp() uint32 {
	if m != nil && m.MigrateRequestIp != nil {
		return *m.MigrateRequestIp
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetMigrateRequestPort() uint32 {
	if m != nil && m.MigrateRequestPort != nil {
		return *m.MigrateRequestPort
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetScoringPenaltyRelayCluster() uint32 {
	if m != nil && m.ScoringPenaltyRelayCluster != nil {
		return *m.ScoringPenaltyRelayCluster
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckRelay() []uint32 {
	if m != nil {
		return m.AckRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckE2E() []uint32 {
	if m != nil {
		return m.AckE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckForwardTargetRevision() uint32 {
	if m != nil && m.AckForwardTargetRevision != nil {
		return *m.AckForwardTargetRevision
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetRoutes() []byte {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckPeerRoutesRevision() uint32 {
	if m != nil && m.AckPeerRoutesRevision != nil {
		return *m.AckPeerRoutesRevision
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSeqNumR2C() uint32 {
	if m != nil && m.SeqNumR2C != nil {
		return *m.SeqNumR2C
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSeqNumE2E() uint32 {
	if m != nil && m.SeqNumE2E != nil {
		return *m.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramP2PBadRouteRouterToClient struct {
	ConnectionId             *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	FailedRelayRoutingToken  []byte  `protobuf:"bytes,2,opt,name=failed_relay_routing_token,json=failedRelayRoutingToken" json:"failed_relay_routing_token,omitempty"`
	AckForwardTargetRevision *uint32 `protobuf:"varint,3,opt,name=ack_forward_target_revision,json=ackForwardTargetRevision" json:"ack_forward_target_revision,omitempty"`
	KludgePad                *uint64 `protobuf:"fixed64,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *CMsgSteamDatagramP2PBadRouteRouterToClient) Reset() {
	*m = CMsgSteamDatagramP2PBadRouteRouterToClient{}
}
func (m *CMsgSteamDatagramP2PBadRouteRouterToClient) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramP2PBadRouteRouterToClient) ProtoMessage() {}
func (*CMsgSteamDatagramP2PBadRouteRouterToClient) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{23}
}

func (m *CMsgSteamDatagramP2PBadRouteRouterToClient) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PBadRouteRouterToClient) GetFailedRelayRoutingToken() []byte {
	if m != nil {
		return m.FailedRelayRoutingToken
	}
	return nil
}

func (m *CMsgSteamDatagramP2PBadRouteRouterToClient) GetAckForwardTargetRevision() uint32 {
	if m != nil && m.AckForwardTargetRevision != nil {
		return *m.AckForwardTargetRevision
	}
	return 0
}

func (m *CMsgSteamDatagramP2PBadRouteRouterToClient) GetKludgePad() uint64 {
	if m != nil && m.KludgePad != nil {
		return *m.KludgePad
	}
	return 0
}

type CMsgSteamDatagramRelayToRelayPing struct {
	RequestTimestamp *uint32 `protobuf:"fixed32,1,opt,name=request_timestamp,json=requestTimestamp" json:"request_timestamp,omitempty"`
	RequestDate      *uint32 `protobuf:"fixed32,2,opt,name=request_date,json=requestDate" json:"request_date,omitempty"`
	MyPopId          *uint32 `protobuf:"fixed32,3,opt,name=my_pop_id,json=myPopId" json:"my_pop_id,omitempty"`
	YourPopId        *uint32 `protobuf:"fixed32,4,opt,name=your_pop_id,json=yourPopId" json:"your_pop_id,omitempty"`
	Checksum         *uint32 `protobuf:"fixed32,5,opt,name=checksum" json:"checksum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramRelayToRelayPing) Reset()         { *m = CMsgSteamDatagramRelayToRelayPing{} }
func (m *CMsgSteamDatagramRelayToRelayPing) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramRelayToRelayPing) ProtoMessage()    {}
func (*CMsgSteamDatagramRelayToRelayPing) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{24}
}

func (m *CMsgSteamDatagramRelayToRelayPing) GetRequestTimestamp() uint32 {
	if m != nil && m.RequestTimestamp != nil {
		return *m.RequestTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramRelayToRelayPing) GetRequestDate() uint32 {
	if m != nil && m.RequestDate != nil {
		return *m.RequestDate
	}
	return 0
}

func (m *CMsgSteamDatagramRelayToRelayPing) GetMyPopId() uint32 {
	if m != nil && m.MyPopId != nil {
		return *m.MyPopId
	}
	return 0
}

func (m *CMsgSteamDatagramRelayToRelayPing) GetYourPopId() uint32 {
	if m != nil && m.YourPopId != nil {
		return *m.YourPopId
	}
	return 0
}

func (m *CMsgSteamDatagramRelayToRelayPing) GetChecksum() uint32 {
	if m != nil && m.Checksum != nil {
		return *m.Checksum
	}
	return 0
}

type CMsgSteamDatagramDataCenterState struct {
	DataCenters      []*CMsgSteamDatagramDataCenterState_DataCenter `protobuf:"bytes,1,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *CMsgSteamDatagramDataCenterState) Reset()         { *m = CMsgSteamDatagramDataCenterState{} }
func (m *CMsgSteamDatagramDataCenterState) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDataCenterState) ProtoMessage()    {}
func (*CMsgSteamDatagramDataCenterState) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{25}
}

func (m *CMsgSteamDatagramDataCenterState) GetDataCenters() []*CMsgSteamDatagramDataCenterState_DataCenter {
	if m != nil {
		return m.DataCenters
	}
	return nil
}

type CMsgSteamDatagramDataCenterState_Server struct {
	Address          *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PingMs           *uint32 `protobuf:"varint,2,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramDataCenterState_Server) Reset() {
	*m = CMsgSteamDatagramDataCenterState_Server{}
}
func (m *CMsgSteamDatagramDataCenterState_Server) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDataCenterState_Server) ProtoMessage()    {}
func (*CMsgSteamDatagramDataCenterState_Server) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{25, 0}
}

func (m *CMsgSteamDatagramDataCenterState_Server) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *CMsgSteamDatagramDataCenterState_Server) GetPingMs() uint32 {
	if m != nil && m.PingMs != nil {
		return *m.PingMs
	}
	return 0
}

type CMsgSteamDatagramDataCenterState_DataCenter struct {
	Code             *string                                    `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	ServerSample     []*CMsgSteamDatagramDataCenterState_Server `protobuf:"bytes,2,rep,name=server_sample,json=serverSample" json:"server_sample,omitempty"`
	RelaySample      []*CMsgSteamDatagramDataCenterState_Server `protobuf:"bytes,3,rep,name=relay_sample,json=relaySample" json:"relay_sample,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgSteamDatagramDataCenterState_DataCenter) Reset() {
	*m = CMsgSteamDatagramDataCenterState_DataCenter{}
}
func (m *CMsgSteamDatagramDataCenterState_DataCenter) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramDataCenterState_DataCenter) ProtoMessage() {}
func (*CMsgSteamDatagramDataCenterState_DataCenter) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{25, 1}
}

func (m *CMsgSteamDatagramDataCenterState_DataCenter) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *CMsgSteamDatagramDataCenterState_DataCenter) GetServerSample() []*CMsgSteamDatagramDataCenterState_Server {
	if m != nil {
		return m.ServerSample
	}
	return nil
}

func (m *CMsgSteamDatagramDataCenterState_DataCenter) GetRelaySample() []*CMsgSteamDatagramDataCenterState_Server {
	if m != nil {
		return m.RelaySample
	}
	return nil
}

type CMsgSteamDatagramRouterHealth struct {
	CpuLoad              *float32                                    `protobuf:"fixed32,1,opt,name=cpu_load,json=cpuLoad" json:"cpu_load,omitempty"`
	ActiveSessions       *uint32                                     `protobuf:"varint,2,opt,name=active_sessions,json=activeSessions" json:"active_sessions,omitempty"`
	DataPktsSec          *uint32                                     `protobuf:"varint,3,opt,name=data_pkts_sec,json=dataPktsSec" json:"data_pkts_sec,omitempty"`
	OtherPktsSec         *uint32                                     `protobuf:"varint,4,opt,name=other_pkts_sec,json=otherPktsSec" json:"other_pkts_sec,omitempty"`
	SecondsUntilShutdown *uint32                                     `protobuf:"varint,5,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	CpuCostPerUser       *float32                                    `protobuf:"fixed32,8,opt,name=cpu_cost_per_user,json=cpuCostPerUser" json:"cpu_cost_per_user,omitempty"`
	CpuCostPerPacket     *float32                                    `protobuf:"fixed32,9,opt,name=cpu_cost_per_packet,json=cpuCostPerPacket" json:"cpu_cost_per_packet,omitempty"`
	DataCenters          []*CMsgSteamDatagramRouterHealth_DataCenter `protobuf:"bytes,6,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
	Magic                *uint64                                     `protobuf:"fixed64,7,opt,name=magic" json:"magic,omitempty"`
	XXX_unrecognized     []byte                                      `json:"-"`
}

func (m *CMsgSteamDatagramRouterHealth) Reset()                    { *m = CMsgSteamDatagramRouterHealth{} }
func (m *CMsgSteamDatagramRouterHealth) String() string            { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramRouterHealth) ProtoMessage()               {}
func (*CMsgSteamDatagramRouterHealth) Descriptor() ([]byte, []int) { return fileDescriptor38, []int{26} }

func (m *CMsgSteamDatagramRouterHealth) GetCpuLoad() float32 {
	if m != nil && m.CpuLoad != nil {
		return *m.CpuLoad
	}
	return 0
}

func (m *CMsgSteamDatagramRouterHealth) GetActiveSessions() uint32 {
	if m != nil && m.ActiveSessions != nil {
		return *m.ActiveSessions
	}
	return 0
}

func (m *CMsgSteamDatagramRouterHealth) GetDataPktsSec() uint32 {
	if m != nil && m.DataPktsSec != nil {
		return *m.DataPktsSec
	}
	return 0
}

func (m *CMsgSteamDatagramRouterHealth) GetOtherPktsSec() uint32 {
	if m != nil && m.OtherPktsSec != nil {
		return *m.OtherPktsSec
	}
	return 0
}

func (m *CMsgSteamDatagramRouterHealth) GetSecondsUntilShutdown() uint32 {
	if m != nil && m.SecondsUntilShutdown != nil {
		return *m.SecondsUntilShutdown
	}
	return 0
}

func (m *CMsgSteamDatagramRouterHealth) GetCpuCostPerUser() float32 {
	if m != nil && m.CpuCostPerUser != nil {
		return *m.CpuCostPerUser
	}
	return 0
}

func (m *CMsgSteamDatagramRouterHealth) GetCpuCostPerPacket() float32 {
	if m != nil && m.CpuCostPerPacket != nil {
		return *m.CpuCostPerPacket
	}
	return 0
}

func (m *CMsgSteamDatagramRouterHealth) GetDataCenters() []*CMsgSteamDatagramRouterHealth_DataCenter {
	if m != nil {
		return m.DataCenters
	}
	return nil
}

func (m *CMsgSteamDatagramRouterHealth) GetMagic() uint64 {
	if m != nil && m.Magic != nil {
		return *m.Magic
	}
	return 0
}

type CMsgSteamDatagramRouterHealth_DataCenter struct {
	DatacenterId     *uint32 `protobuf:"fixed32,1,opt,name=datacenter_id,json=datacenterId" json:"datacenter_id,omitempty"`
	State            *uint32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramRouterHealth_DataCenter) Reset() {
	*m = CMsgSteamDatagramRouterHealth_DataCenter{}
}
func (m *CMsgSteamDatagramRouterHealth_DataCenter) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramRouterHealth_DataCenter) ProtoMessage()    {}
func (*CMsgSteamDatagramRouterHealth_DataCenter) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{26, 0}
}

func (m *CMsgSteamDatagramRouterHealth_DataCenter) GetDatacenterId() uint32 {
	if m != nil && m.DatacenterId != nil {
		return *m.DatacenterId
	}
	return 0
}

func (m *CMsgSteamDatagramRouterHealth_DataCenter) GetState() uint32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsP2PRouterToRouter struct {
	QualityRelay             *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E               *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay                 []uint32                            `protobuf:"fixed32,3,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	AckE2E                   []uint32                            `protobuf:"fixed32,4,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags                    *uint32                             `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	AckForwardTargetRevision *uint32                             `protobuf:"varint,6,opt,name=ack_forward_target_revision,json=ackForwardTargetRevision" json:"ack_forward_target_revision,omitempty"`
	Routes                   []byte                              `protobuf:"bytes,7,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision    *uint32                             `protobuf:"varint,8,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	SeqNumR2R                *uint32                             `protobuf:"varint,26,opt,name=seq_num_r2r,json=seqNumR2r" json:"seq_num_r2r,omitempty"`
	SeqNumE2E                *uint32                             `protobuf:"varint,27,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	FromRelaySessionId       *uint32                             `protobuf:"fixed32,22,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	ToRelaySessionId         *uint32                             `protobuf:"fixed32,25,opt,name=to_relay_session_id,json=toRelaySessionId" json:"to_relay_session_id,omitempty"`
	XXX_unrecognized         []byte                              `json:"-"`
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) Reset() {
	*m = CMsgSteamDatagramConnectionStatsP2PRouterToRouter{}
}
func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramConnectionStatsP2PRouterToRouter) ProtoMessage() {}
func (*CMsgSteamDatagramConnectionStatsP2PRouterToRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{27}
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.QualityE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetAckRelay() []uint32 {
	if m != nil {
		return m.AckRelay
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetAckE2E() []uint32 {
	if m != nil {
		return m.AckE2E
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetAckForwardTargetRevision() uint32 {
	if m != nil && m.AckForwardTargetRevision != nil {
		return *m.AckForwardTargetRevision
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetRoutes() []byte {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetAckPeerRoutesRevision() uint32 {
	if m != nil && m.AckPeerRoutesRevision != nil {
		return *m.AckPeerRoutesRevision
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetSeqNumR2R() uint32 {
	if m != nil && m.SeqNumR2R != nil {
		return *m.SeqNumR2R
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetSeqNumE2E() uint32 {
	if m != nil && m.SeqNumE2E != nil {
		return *m.SeqNumE2E
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetFromRelaySessionId() uint32 {
	if m != nil && m.FromRelaySessionId != nil {
		return *m.FromRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramConnectionStatsP2PRouterToRouter) GetToRelaySessionId() uint32 {
	if m != nil && m.ToRelaySessionId != nil {
		return *m.ToRelaySessionId
	}
	return 0
}

type CMsgSteamDatagramP2PBadRouteRouterToRouter struct {
	FromRelaySessionId *uint32 `protobuf:"fixed32,1,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	KludgePad          *uint64 `protobuf:"fixed64,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *CMsgSteamDatagramP2PBadRouteRouterToRouter) Reset() {
	*m = CMsgSteamDatagramP2PBadRouteRouterToRouter{}
}
func (m *CMsgSteamDatagramP2PBadRouteRouterToRouter) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramP2PBadRouteRouterToRouter) ProtoMessage() {}
func (*CMsgSteamDatagramP2PBadRouteRouterToRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor38, []int{28}
}

func (m *CMsgSteamDatagramP2PBadRouteRouterToRouter) GetFromRelaySessionId() uint32 {
	if m != nil && m.FromRelaySessionId != nil {
		return *m.FromRelaySessionId
	}
	return 0
}

func (m *CMsgSteamDatagramP2PBadRouteRouterToRouter) GetKludgePad() uint64 {
	if m != nil && m.KludgePad != nil {
		return *m.KludgePad
	}
	return 0
}

func init() {
	proto.RegisterType((*CMsgSteamDatagramGameserverPing)(nil), "dota.CMsgSteamDatagramGameserverPing")
	proto.RegisterType((*CMsgSteamDatagramNoSessionRelayToClient)(nil), "dota.CMsgSteamDatagramNoSessionRelayToClient")
	proto.RegisterType((*CMsgSteamDatagramNoSessionRelayToPeer)(nil), "dota.CMsgSteamDatagramNoSessionRelayToPeer")
	proto.RegisterType((*CMsgSteamDatagramClientPingSampleRequest)(nil), "dota.CMsgSteamDatagramClientPingSampleRequest")
	proto.RegisterType((*CMsgSteamDatagramClientPingSampleReply)(nil), "dota.CMsgSteamDatagramClientPingSampleReply")
	proto.RegisterType((*CMsgSteamDatagramClientPingSampleReply_RoutingCluster)(nil), "dota.CMsgSteamDatagramClientPingSampleReply.RoutingCluster")
	proto.RegisterType((*CMsgSteamDatagramClientPingSampleReply_DataCenter)(nil), "dota.CMsgSteamDatagramClientPingSampleReply.DataCenter")
	proto.RegisterType((*CMsgSteamDatagramClientSwitchedPrimary)(nil), "dota.CMsgSteamDatagramClientSwitchedPrimary")
	proto.RegisterType((*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality)(nil), "dota.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality")
	proto.RegisterType((*CMsgSteamDatagramConnectRequest)(nil), "dota.CMsgSteamDatagramConnectRequest")
	proto.RegisterType((*CMsgSteamDatagramConnectOK)(nil), "dota.CMsgSteamDatagramConnectOK")
	proto.RegisterType((*CMsgSteamDatagramConnectionClosed)(nil), "dota.CMsgSteamDatagramConnectionClosed")
	proto.RegisterType((*CMsgSteamDatagramNoConnection)(nil), "dota.CMsgSteamDatagramNoConnection")
	proto.RegisterType((*CMsgSteamDatagramGameserverSessionRequest)(nil), "dota.CMsgSteamDatagramGameserverSessionRequest")
	proto.RegisterType((*CMsgSteamDatagramGameserverSessionEstablished)(nil), "dota.CMsgSteamDatagramGameserverSessionEstablished")
	proto.RegisterType((*CMsgSteamDatagramConnectionStatsClientToRouter)(nil), "dota.CMsgSteamDatagramConnectionStatsClientToRouter")
	proto.RegisterType((*CMsgSteamDatagramConnectionStatsRouterToClient)(nil), "dota.CMsgSteamDatagramConnectionStatsRouterToClient")
	proto.RegisterType((*CMsgSteamDatagramConnectionStatsRouterToServer)(nil), "dota.CMsgSteamDatagramConnectionStatsRouterToServer")
	proto.RegisterType((*CMsgSteamDatagramConnectionStatsServerToRouter)(nil), "dota.CMsgSteamDatagramConnectionStatsServerToRouter")
	proto.RegisterType((*CMsgSteamDatagramP2PSessionRequestBody)(nil), "dota.CMsgSteamDatagramP2PSessionRequestBody")
	proto.RegisterType((*CMsgSteamDatagramP2PSessionRequest)(nil), "dota.CMsgSteamDatagramP2PSessionRequest")
	proto.RegisterType((*CMsgSteamDatagramP2PSessionEstablished)(nil), "dota.CMsgSteamDatagramP2PSessionEstablished")
	proto.RegisterType((*CMsgSteamDatagramP2PRoutes)(nil), "dota.CMsgSteamDatagramP2PRoutes")
	proto.RegisterType((*CMsgSteamDatagramP2PRoutes_RelayCluster)(nil), "dota.CMsgSteamDatagramP2PRoutes.RelayCluster")
	proto.RegisterType((*CMsgSteamDatagramP2PRoutes_Route)(nil), "dota.CMsgSteamDatagramP2PRoutes.Route")
	proto.RegisterType((*CMsgSteamDatagramP2PRendezvous)(nil), "dota.CMsgSteamDatagramP2PRendezvous")
	proto.RegisterType((*CMsgSteamDatagramConnectionStatsP2PClientToRouter)(nil), "dota.CMsgSteamDatagramConnectionStatsP2PClientToRouter")
	proto.RegisterType((*CMsgSteamDatagramConnectionStatsP2PRouterToClient)(nil), "dota.CMsgSteamDatagramConnectionStatsP2PRouterToClient")
	proto.RegisterType((*CMsgSteamDatagramP2PBadRouteRouterToClient)(nil), "dota.CMsgSteamDatagramP2PBadRouteRouterToClient")
	proto.RegisterType((*CMsgSteamDatagramRelayToRelayPing)(nil), "dota.CMsgSteamDatagramRelayToRelayPing")
	proto.RegisterType((*CMsgSteamDatagramDataCenterState)(nil), "dota.CMsgSteamDatagramDataCenterState")
	proto.RegisterType((*CMsgSteamDatagramDataCenterState_Server)(nil), "dota.CMsgSteamDatagramDataCenterState.Server")
	proto.RegisterType((*CMsgSteamDatagramDataCenterState_DataCenter)(nil), "dota.CMsgSteamDatagramDataCenterState.DataCenter")
	proto.RegisterType((*CMsgSteamDatagramRouterHealth)(nil), "dota.CMsgSteamDatagramRouterHealth")
	proto.RegisterType((*CMsgSteamDatagramRouterHealth_DataCenter)(nil), "dota.CMsgSteamDatagramRouterHealth.DataCenter")
	proto.RegisterType((*CMsgSteamDatagramConnectionStatsP2PRouterToRouter)(nil), "dota.CMsgSteamDatagramConnectionStatsP2PRouterToRouter")
	proto.RegisterType((*CMsgSteamDatagramP2PBadRouteRouterToRouter)(nil), "dota.CMsgSteamDatagramP2PBadRouteRouterToRouter")
	proto.RegisterEnum("dota.CMsgSteamDatagramConnectionClosed_ERelayMode", CMsgSteamDatagramConnectionClosed_ERelayMode_name, CMsgSteamDatagramConnectionClosed_ERelayMode_value)
	proto.RegisterEnum("dota.CMsgSteamDatagramConnectionStatsClientToRouter_Flags", CMsgSteamDatagramConnectionStatsClientToRouter_Flags_name, CMsgSteamDatagramConnectionStatsClientToRouter_Flags_value)
	proto.RegisterEnum("dota.CMsgSteamDatagramConnectionStatsRouterToClient_Flags", CMsgSteamDatagramConnectionStatsRouterToClient_Flags_name, CMsgSteamDatagramConnectionStatsRouterToClient_Flags_value)
	proto.RegisterEnum("dota.CMsgSteamDatagramConnectionStatsRouterToServer_Flags", CMsgSteamDatagramConnectionStatsRouterToServer_Flags_name, CMsgSteamDatagramConnectionStatsRouterToServer_Flags_value)
	proto.RegisterEnum("dota.CMsgSteamDatagramConnectionStatsServerToRouter_Flags", CMsgSteamDatagramConnectionStatsServerToRouter_Flags_name, CMsgSteamDatagramConnectionStatsServerToRouter_Flags_value)
	proto.RegisterEnum("dota.CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags", CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_name, CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_value)
	proto.RegisterEnum("dota.CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags", CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_name, CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_value)
	proto.RegisterEnum("dota.CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags", CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_name, CMsgSteamDatagramConnectionStatsP2PRouterToRouter_Flags_value)
}

func init() { proto.RegisterFile("steamdatagram_messages_sdr.proto", fileDescriptor38) }

var fileDescriptor38 = []byte{
	// 3008 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0xcb, 0x93, 0x1b, 0x57,
	0xd5, 0x8f, 0xde, 0xd2, 0xd1, 0x63, 0x34, 0xd7, 0x1e, 0x5b, 0x91, 0x13, 0x67, 0xac, 0x24, 0xce,
	0xe4, 0xfb, 0xec, 0xa9, 0x44, 0x95, 0x2f, 0xf9, 0x2a, 0x21, 0x50, 0xf6, 0x58, 0x09, 0x93, 0x64,
	0x6c, 0xa5, 0x67, 0x0c, 0x15, 0x36, 0x4d, 0xbb, 0xfb, 0x8e, 0xa6, 0x4b, 0x52, 0xdf, 0xf6, 0xbd,
	0x57, 0xe3, 0x12, 0x0b, 0x8a, 0x2a, 0x8a, 0x35, 0x1b, 0x36, 0x14, 0x3b, 0xf8, 0x0b, 0x58, 0xb1,
	0x61, 0xc3, 0x86, 0x0d, 0x05, 0x1b, 0x36, 0x14, 0x45, 0x51, 0xc5, 0x92, 0x2a, 0xa8, 0xfc, 0x07,
	0x40, 0xdd, 0x47, 0xb7, 0xba, 0xa5, 0x6e, 0x3d, 0x6c, 0x07, 0x30, 0xac, 0xa4, 0x3e, 0xe7, 0xdc,
	0xe7, 0x79, 0xfd, 0xee, 0xb9, 0x17, 0x76, 0x19, 0xc7, 0xd6, 0xd8, 0xb1, 0xb8, 0x35, 0xa0, 0xd6,
	0xd8, 0x1c, 0x63, 0xc6, 0xac, 0x01, 0x66, 0x26, 0x73, 0xe8, 0xbe, 0x4f, 0x09, 0x27, 0x28, 0xef,
	0x10, 0x6e, 0xb5, 0xaf, 0xc5, 0xe5, 0xac, 0x09, 0x3f, 0x0b, 0x85, 0x95, 0x60, 0xfb, 0x85, 0xe4,
	0xae, 0x14, 0xb7, 0xe3, 0xc2, 0x4b, 0x07, 0x47, 0x6c, 0x70, 0x2c, 0x64, 0xee, 0x68, 0x99, 0x0f,
	0xad, 0x31, 0x66, 0x98, 0x9e, 0x63, 0xda, 0x77, 0xbd, 0x01, 0x7a, 0x1d, 0x9a, 0x94, 0x4c, 0x38,
	0xa6, 0x26, 0x77, 0xc7, 0x98, 0x71, 0x6b, 0xec, 0xb7, 0xf2, 0xbb, 0x99, 0xbd, 0x92, 0xb1, 0xa5,
	0xe8, 0x27, 0x01, 0x19, 0x5d, 0x81, 0x8a, 0x33, 0x19, 0x8f, 0xa7, 0xa6, 0x6f, 0x39, 0x2d, 0x7b,
	0x37, 0xb3, 0x57, 0x34, 0xca, 0x92, 0xd0, 0xb7, 0x9c, 0xce, 0x9f, 0x33, 0xf0, 0xda, 0xc2, 0x58,
	0x77, 0xc9, 0x31, 0x66, 0xcc, 0x25, 0x9e, 0x81, 0x47, 0xd6, 0xf4, 0x84, 0x1c, 0x8c, 0x5c, 0xec,
	0x71, 0xf4, 0x32, 0xd4, 0x6d, 0xe2, 0x79, 0xd8, 0xe6, 0x2e, 0xf1, 0x4c, 0xd7, 0x69, 0x95, 0xe4,
	0x80, 0xb5, 0x19, 0xf1, 0xd0, 0x41, 0xaf, 0x40, 0x63, 0x4a, 0x26, 0xd4, 0xf4, 0x27, 0x0f, 0x46,
	0xae, 0x6d, 0xba, 0x7e, 0x2b, 0xab, 0xa4, 0x04, 0xb5, 0x2f, 0x89, 0x87, 0x3e, 0x7a, 0x09, 0xaa,
	0x6a, 0x31, 0x72, 0xfa, 0xad, 0x9c, 0x14, 0x01, 0x45, 0x12, 0x33, 0x47, 0x2f, 0x40, 0xc5, 0x3e,
	0xb3, 0x46, 0x23, 0xec, 0x0d, 0xb0, 0x5c, 0x58, 0xd1, 0x98, 0x11, 0xd0, 0x5b, 0x70, 0x89, 0x61,
	0x9b, 0x78, 0x0e, 0x33, 0x27, 0x1e, 0x77, 0x47, 0x26, 0x3b, 0x9b, 0x70, 0x87, 0x3c, 0xf2, 0x5a,
	0x85, 0xdd, 0xcc, 0x5e, 0xdd, 0xb8, 0xa8, 0xb9, 0xf7, 0x05, 0xf3, 0x58, 0xf3, 0x3a, 0x7f, 0xcc,
	0xc0, 0xab, 0x2b, 0xd7, 0xda, 0xc7, 0x98, 0xa2, 0xff, 0x83, 0xcb, 0x23, 0x3c, 0xb0, 0xec, 0xa9,
	0x49, 0x05, 0xd5, 0x64, 0x4a, 0x44, 0xac, 0x39, 0xa3, 0x06, 0x50, 0x6c, 0xd9, 0x46, 0xb7, 0x3f,
	0x74, 0xd0, 0x9b, 0xb0, 0x73, 0x4a, 0xc9, 0x78, 0xb1, 0x91, 0xda, 0x02, 0x24, 0x98, 0x73, 0x4d,
	0x6e, 0x80, 0xa4, 0x9a, 0x49, 0x1b, 0xdb, 0x14, 0x9c, 0x83, 0xe8, 0xe6, 0xbe, 0x08, 0x30, 0x1c,
	0x4d, 0x9c, 0x01, 0x8e, 0xe8, 0xb2, 0xa2, 0x28, 0x42, 0x99, 0xf7, 0x60, 0x6f, 0x61, 0x7d, 0x4a,
	0x77, 0xc2, 0x66, 0x8e, 0xad, 0xb1, 0x3f, 0xc2, 0x06, 0x7e, 0x38, 0xc1, 0x2c, 0x41, 0x99, 0x99,
	0x45, 0x65, 0x76, 0xfe, 0x9a, 0x83, 0xeb, 0x6b, 0xf4, 0xe8, 0x8f, 0xa6, 0x6b, 0xf5, 0x87, 0x4e,
	0x95, 0xd5, 0xba, 0xde, 0xc0, 0xb4, 0x47, 0x13, 0xc6, 0x31, 0x65, 0xad, 0xec, 0x6e, 0x6e, 0xaf,
	0xda, 0x7d, 0x6f, 0x5f, 0xb8, 0xce, 0xfe, 0x7a, 0x83, 0xed, 0x1b, 0xaa, 0x93, 0x03, 0xd5, 0x87,
	0x32, 0xf9, 0xd9, 0x37, 0x43, 0xdf, 0x80, 0x9a, 0xf0, 0x2d, 0xd3, 0xc6, 0x9e, 0x1c, 0x23, 0x27,
	0xc7, 0x78, 0x67, 0xa3, 0x31, 0x04, 0xf7, 0x40, 0xb6, 0x37, 0xaa, 0x4e, 0xf8, 0x9f, 0xb5, 0x1d,
	0x68, 0xc4, 0x87, 0x47, 0x0d, 0xc8, 0x86, 0xeb, 0xcd, 0xba, 0x0e, 0xea, 0x40, 0xfd, 0x94, 0x12,
	0x8f, 0x9b, 0xbe, 0x58, 0xe8, 0x98, 0x49, 0xf5, 0xd7, 0x8d, 0xaa, 0x24, 0x8a, 0x61, 0x8e, 0x18,
	0xba, 0x0a, 0x55, 0xdc, 0xc5, 0xa1, 0x44, 0x4e, 0x4a, 0x54, 0x70, 0x17, 0x2b, 0x7e, 0x9b, 0x03,
	0xcc, 0x26, 0x20, 0x9c, 0x2a, 0xb2, 0x9e, 0xc8, 0xee, 0xce, 0x26, 0x76, 0xe8, 0xa0, 0x5d, 0xa8,
	0x9d, 0xbb, 0x96, 0xb6, 0xbe, 0xd0, 0xea, 0xe0, 0xdc, 0xb5, 0xa4, 0xd1, 0x1d, 0x3a, 0xab, 0x46,
	0xed, 0x7c, 0xb7, 0x94, 0xaa, 0xef, 0xe3, 0x47, 0x2e, 0xb7, 0xcf, 0xb0, 0xd3, 0xa7, 0xee, 0xd8,
	0xa2, 0x6b, 0xea, 0xfb, 0x32, 0x94, 0xa4, 0x75, 0x87, 0x51, 0xa0, 0x28, 0x3e, 0x0f, 0x65, 0x4c,
	0x92, 0x0c, 0x9f, 0x50, 0xae, 0xa7, 0x51, 0x16, 0x84, 0x3e, 0xa1, 0x1c, 0xed, 0xc3, 0x05, 0xe5,
	0x46, 0x2a, 0xc0, 0x69, 0x4b, 0xd1, 0xe1, 0x6d, 0x5b, 0x3a, 0x91, 0xe4, 0x04, 0xfb, 0xbf, 0x07,
	0xd2, 0x53, 0x4c, 0xcb, 0xe6, 0xee, 0x39, 0x56, 0x11, 0x45, 0xc5, 0x81, 0x86, 0xa0, 0xdf, 0x92,
	0x64, 0x19, 0x55, 0xde, 0x81, 0x56, 0x54, 0xd2, 0xb7, 0xec, 0x21, 0xe6, 0xcc, 0xa4, 0xd8, 0x3e,
	0x6f, 0x15, 0x65, 0x8b, 0x9d, 0x59, 0x8b, 0xbe, 0xe2, 0x1a, 0xd8, 0x3e, 0x0f, 0xa7, 0xe4, 0x50,
	0xe2, 0xfb, 0xd8, 0x31, 0x29, 0xb6, 0x18, 0xf1, 0xa4, 0x9f, 0x56, 0xd4, 0x94, 0xee, 0x28, 0x8e,
	0x21, 0x19, 0x68, 0x07, 0x8a, 0x03, 0xcb, 0x17, 0x7b, 0x5c, 0x96, 0xdd, 0x16, 0x06, 0x96, 0x7f,
	0xc4, 0x90, 0xa3, 0x67, 0xfa, 0x70, 0x62, 0x8d, 0x5c, 0x3e, 0x35, 0x3d, 0xf2, 0xa8, 0x55, 0xd9,
	0xcd, 0xec, 0x55, 0xbb, 0xef, 0x2e, 0xb5, 0xcd, 0xb9, 0xcd, 0xdf, 0x57, 0xeb, 0xff, 0x54, 0xf5,
	0xa2, 0x56, 0xa9, 0x3f, 0xee, 0x92, 0x47, 0xe8, 0x9b, 0xd0, 0xe0, 0x24, 0x36, 0x06, 0x3c, 0xf1,
	0x18, 0x35, 0x4e, 0x22, 0x23, 0x9c, 0xc2, 0x76, 0x6c, 0x1d, 0xfc, 0x0c, 0x7b, 0xad, 0xea, 0x13,
	0x0f, 0xb2, 0x15, 0x59, 0xc8, 0xc9, 0x19, 0xf6, 0xd0, 0x03, 0xd8, 0x8a, 0xac, 0x44, 0x8e, 0x52,
	0x7b, 0xe2, 0x51, 0xea, 0xe1, 0x52, 0xc4, 0x18, 0xed, 0xef, 0x67, 0xa0, 0x1e, 0x13, 0x40, 0x17,
	0xa1, 0xc0, 0x6c, 0x42, 0xb1, 0x8e, 0xf5, 0xea, 0x43, 0xc4, 0xde, 0x99, 0x57, 0x6b, 0x97, 0xae,
	0x84, 0x2e, 0x2d, 0x2c, 0xfa, 0x81, 0x65, 0x0f, 0x15, 0x57, 0x5b, 0xb4, 0x20, 0x48, 0xe6, 0x0d,
	0x40, 0xf1, 0x7c, 0x25, 0x73, 0x55, 0x5e, 0x4a, 0x35, 0xa3, 0xb9, 0xea, 0x8e, 0xc8, 0x53, 0xbf,
	0xc8, 0x25, 0xe4, 0x7f, 0x9d, 0x07, 0x36, 0x09, 0xdf, 0xe8, 0x3a, 0x6c, 0xd9, 0x72, 0x43, 0x4c,
	0x09, 0x37, 0x84, 0x58, 0x4e, 0xe6, 0x8c, 0xba, 0x22, 0xcb, 0x01, 0x0e, 0x1d, 0x74, 0x0d, 0x6a,
	0xe3, 0xe9, 0x1c, 0x90, 0x28, 0x1a, 0xd5, 0xf1, 0x74, 0x06, 0x22, 0xae, 0x42, 0x55, 0x46, 0x0d,
	0xcc, 0xb8, 0xb0, 0x6a, 0xe5, 0x5e, 0x15, 0x41, 0xea, 0x31, 0x7e, 0xc4, 0x44, 0x17, 0xe7, 0x2e,
	0xe5, 0x13, 0x6b, 0xa4, 0x7c, 0xba, 0xa2, 0x42, 0x9e, 0xa6, 0x49, 0xb7, 0x7e, 0x1f, 0xae, 0x0c,
	0x42, 0x10, 0x93, 0x9c, 0x23, 0xeb, 0x46, 0x6b, 0x26, 0x32, 0x97, 0x29, 0x0f, 0xa0, 0x60, 0xd3,
	0xa9, 0xcf, 0xa5, 0xa3, 0x56, 0xbb, 0x37, 0x53, 0x2c, 0x40, 0x37, 0x38, 0x10, 0xa2, 0x87, 0xde,
	0x29, 0x39, 0x76, 0x07, 0x1e, 0x76, 0x0c, 0xd5, 0x16, 0x7d, 0x09, 0xf2, 0x36, 0xa6, 0x5c, 0x3a,
	0x6e, 0xb5, 0xbb, 0x97, 0x66, 0x45, 0x98, 0x72, 0xf7, 0xd4, 0xb5, 0x2d, 0x8e, 0x75, 0x73, 0xd9,
	0x4a, 0x80, 0x2e, 0x09, 0xd0, 0x6c, 0x32, 0x32, 0xcf, 0x31, 0x15, 0xe3, 0x68, 0xff, 0xde, 0x0a,
	0xe8, 0x5f, 0x53, 0xe4, 0xce, 0xcf, 0x73, 0xd0, 0x4e, 0xd3, 0xe1, 0xbd, 0x8f, 0xd1, 0x1b, 0x70,
	0x51, 0x6b, 0x26, 0x49, 0x8b, 0x48, 0xf1, 0x62, 0xa9, 0xff, 0x0d, 0xb8, 0xa8, 0x77, 0x2e, 0x09,
	0x2a, 0x20, 0xc5, 0x8b, 0xb5, 0x78, 0x55, 0x23, 0xb1, 0x99, 0x5e, 0xb5, 0xf2, 0x05, 0x75, 0xa6,
	0xd9, 0xeb, 0xb0, 0xe5, 0x48, 0x5d, 0x08, 0x39, 0x73, 0xc2, 0xb0, 0xad, 0x0d, 0xb3, 0x2e, 0xc9,
	0x42, 0xf0, 0x3e, 0xc3, 0xf6, 0x53, 0x53, 0x5f, 0xe1, 0x29, 0xa8, 0xaf, 0xf8, 0x45, 0xab, 0xef,
	0x87, 0x05, 0xb8, 0x96, 0xa6, 0x3e, 0x31, 0xbd, 0x11, 0x61, 0xd8, 0x11, 0x89, 0x87, 0x93, 0x44,
	0x7d, 0x34, 0x38, 0x89, 0xe9, 0x22, 0x19, 0xe6, 0x95, 0x53, 0x60, 0x9e, 0x02, 0x10, 0xe3, 0x79,
	0xaf, 0x15, 0x00, 0x62, 0x1c, 0xf8, 0xec, 0x47, 0xd0, 0xd1, 0x10, 0x75, 0xb5, 0x56, 0xae, 0x2a,
	0xc9, 0x0f, 0xd3, 0x74, 0x73, 0x13, 0x2e, 0x70, 0xb2, 0xd8, 0xb8, 0xa2, 0xa6, 0xc7, 0xc9, 0xba,
	0x30, 0x17, 0x52, 0x61, 0xee, 0x47, 0xd0, 0x39, 0x25, 0xf4, 0x91, 0x45, 0x1d, 0x93, 0x5b, 0x74,
	0x80, 0xb9, 0x6e, 0x1c, 0xa0, 0x41, 0x4e, 0x86, 0x3a, 0x83, 0xd4, 0x8c, 0xab, 0x5a, 0xf2, 0x44,
	0x0a, 0xca, 0x8e, 0x34, 0xe0, 0x3a, 0x11, 0x52, 0xe8, 0x6d, 0xb8, 0xbc, 0xd0, 0xd7, 0xb9, 0x2b,
	0xb5, 0x59, 0xd3, 0x39, 0x3c, 0xde, 0x81, 0x62, 0xa2, 0xaf, 0x03, 0xa8, 0x41, 0xc7, 0xc4, 0x51,
	0x67, 0x8a, 0x46, 0xb7, 0x9b, 0x66, 0x42, 0x73, 0xaa, 0xde, 0xef, 0xc9, 0x79, 0x1c, 0x11, 0x07,
	0xbf, 0x9b, 0xbf, 0x4b, 0x3c, 0x6c, 0x54, 0x68, 0x40, 0x10, 0xf9, 0xc2, 0xc1, 0x0f, 0x26, 0x03,
	0x69, 0xda, 0x15, 0x43, 0x7d, 0x88, 0x23, 0x8e, 0x42, 0x09, 0xa6, 0x2d, 0xc6, 0x53, 0xf0, 0x02,
	0x14, 0xe9, 0x80, 0x38, 0xb8, 0xf3, 0x36, 0xc0, 0xac, 0x57, 0x54, 0x06, 0xd9, 0x6f, 0xf3, 0x39,
	0x54, 0x83, 0x72, 0xcf, 0x73, 0x4e, 0x48, 0xcf, 0x73, 0x9a, 0x19, 0xd4, 0x84, 0x9a, 0x9a, 0xc2,
	0xed, 0xa9, 0x38, 0x9a, 0x34, 0xb3, 0x9d, 0xef, 0xe5, 0xe0, 0xc5, 0x84, 0x63, 0xcc, 0x6c, 0xca,
	0x89, 0x76, 0x59, 0xd8, 0xc0, 0x2e, 0x8b, 0x29, 0x76, 0xf9, 0x6c, 0xd9, 0xdc, 0x3a, 0x5e, 0xf4,
	0x02, 0x00, 0xf6, 0x1c, 0x93, 0x13, 0x13, 0x7b, 0x8e, 0xb4, 0x89, 0xb2, 0x51, 0xc6, 0x7a, 0xf7,
	0xc5, 0x21, 0x74, 0x76, 0x72, 0xfe, 0xbb, 0xf2, 0xec, 0xd9, 0xd1, 0xf9, 0xd7, 0x59, 0x78, 0x7d,
	0xc9, 0x31, 0x3d, 0x3c, 0x56, 0xaa, 0x84, 0x7d, 0x09, 0x8a, 0xdc, 0x15, 0x80, 0x52, 0xc6, 0xf8,
	0x9a, 0xa1, 0xbf, 0x44, 0x94, 0x0e, 0xcf, 0xb5, 0xd1, 0xc3, 0x70, 0x3d, 0xa4, 0xae, 0x71, 0x1e,
	0x4e, 0x4b, 0x27, 0x85, 0x8d, 0xd3, 0x49, 0x39, 0x35, 0x9d, 0xbc, 0x05, 0x97, 0x3c, 0xcc, 0x1f,
	0x11, 0x3a, 0x14, 0x4d, 0x4e, 0xdd, 0x41, 0x18, 0x43, 0x95, 0x69, 0x5f, 0xd4, 0xdc, 0x03, 0xc9,
	0xd4, 0x81, 0x34, 0x31, 0xe6, 0x96, 0x92, 0x63, 0xee, 0xef, 0x33, 0x70, 0x73, 0xf5, 0x7e, 0xf6,
	0x18, 0xb7, 0x1e, 0x8c, 0x5c, 0x76, 0x86, 0x9d, 0xf5, 0x40, 0xd0, 0x3e, 0x5c, 0x88, 0x58, 0xeb,
	0x9c, 0x31, 0x6c, 0xcf, 0x58, 0x81, 0x49, 0xa4, 0xd7, 0x16, 0xf2, 0xe9, 0xb5, 0x05, 0x81, 0x8f,
	0x18, 0x7e, 0x68, 0x7a, 0x93, 0xb1, 0x49, 0xbb, 0xb6, 0xde, 0x92, 0x0a, 0xc3, 0x0f, 0xef, 0x4e,
	0xc6, 0x46, 0xd7, 0xee, 0xfc, 0x2e, 0x07, 0xcb, 0xa2, 0xcc, 0x31, 0xb7, 0x38, 0x53, 0xe0, 0xf5,
	0x84, 0x28, 0x34, 0x8a, 0x8e, 0xa0, 0x1e, 0x20, 0x5f, 0x69, 0xf5, 0x72, 0x75, 0x4b, 0xb2, 0x5e,
	0xd8, 0x59, 0x88, 0xd9, 0x75, 0x73, 0xe9, 0x17, 0xe8, 0x10, 0xaa, 0x41, 0x77, 0xb8, 0x8b, 0xa5,
	0x97, 0x6e, 0xd2, 0x19, 0xe8, 0xc6, 0xbd, 0x2e, 0x16, 0x58, 0x57, 0x40, 0x5d, 0x35, 0xab, 0xfc,
	0x6e, 0x4e, 0xb8, 0x85, 0x65, 0x0f, 0xd5, 0x38, 0x97, 0xa1, 0x24, 0x98, 0x62, 0x8c, 0x82, 0x64,
	0x15, 0x2d, 0x7b, 0x28, 0x5a, 0x5d, 0x84, 0xc2, 0xe9, 0xc8, 0x1a, 0x30, 0xbd, 0x39, 0xea, 0x23,
	0xd5, 0x74, 0xcb, 0xa9, 0xa6, 0x1b, 0xd9, 0x6a, 0xbb, 0x4b, 0x35, 0xd2, 0xd4, 0x5b, 0x7d, 0xd0,
	0xa5, 0x71, 0x3e, 0x93, 0x01, 0x22, 0xc2, 0x67, 0x9d, 0xbb, 0x50, 0xf8, 0x40, 0x0e, 0xbd, 0x03,
	0xdb, 0xb7, 0x0e, 0x3e, 0x36, 0x8d, 0xde, 0xa7, 0xf7, 0x7b, 0xc7, 0x27, 0xa6, 0xd1, 0xfb, 0xe4,
	0xd6, 0x67, 0xcd, 0x0c, 0xba, 0x00, 0x5b, 0x51, 0x72, 0xaf, 0xdb, 0x6b, 0x66, 0xd1, 0xf3, 0xb0,
	0x13, 0x25, 0x1e, 0x1e, 0x1d, 0xf5, 0xee, 0x1c, 0xde, 0x3a, 0xe9, 0x35, 0xf3, 0x9d, 0x9f, 0x16,
	0x56, 0xab, 0x56, 0xa9, 0x34, 0xac, 0xa4, 0xfd, 0xfb, 0xaa, 0x36, 0xdd, 0xfa, 0x8b, 0x4b, 0xac,
	0xff, 0x06, 0xa0, 0xb1, 0x3b, 0xa0, 0x16, 0xc7, 0x26, 0x55, 0xf1, 0x4e, 0x1c, 0xf9, 0x55, 0x68,
	0x6e, 0x6a, 0x8e, 0x0e, 0x84, 0x87, 0xbe, 0x50, 0xf9, 0xbc, 0xb4, 0x3c, 0x33, 0x54, 0xe5, 0x08,
	0x28, 0x2e, 0x2f, 0x8f, 0x0e, 0xb7, 0xe0, 0x45, 0x71, 0x08, 0x13, 0x48, 0xc1, 0xc7, 0x9e, 0x35,
	0x0a, 0xf6, 0x2d, 0xac, 0x0d, 0xa8, 0xc4, 0xdf, 0xd6, 0x42, 0x7d, 0x25, 0x23, 0x37, 0x27, 0x28,
	0x12, 0xc4, 0x6c, 0xb6, 0x9e, 0x6e, 0xb3, 0x8d, 0x64, 0x9b, 0xdd, 0x5a, 0xc7, 0x66, 0x4b, 0xeb,
	0xd8, 0xac, 0x08, 0x0f, 0xe5, 0xb9, 0xf0, 0x10, 0xe5, 0xb3, 0xae, 0x1d, 0xb7, 0xe9, 0xe3, 0xae,
	0xfd, 0xd4, 0x6d, 0xf6, 0x0f, 0xf9, 0xf5, 0x6d, 0xf6, 0x58, 0x86, 0xc7, 0x67, 0x25, 0x1c, 0x41,
	0xba, 0x6a, 0xab, 0xc9, 0xaa, 0xad, 0x45, 0x55, 0x1b, 0x53, 0x54, 0x78, 0xce, 0x0d, 0x14, 0xc5,
	0xe6, 0x83, 0x4b, 0x71, 0x2e, 0xb8, 0x24, 0x1d, 0xb9, 0x4b, 0x49, 0x47, 0xee, 0x3d, 0x68, 0x2e,
	0x40, 0x19, 0x65, 0x15, 0x0d, 0x1a, 0x87, 0x31, 0x69, 0xc6, 0x56, 0xd9, 0x38, 0xb7, 0xd7, 0xd3,
	0x72, 0xfb, 0xbf, 0xc4, 0xbc, 0x94, 0x59, 0x3d, 0x6b, 0xd9, 0xae, 0x9c, 0x6e, 0x5e, 0x95, 0x64,
	0xf3, 0x82, 0x14, 0xf3, 0x62, 0x5d, 0x1a, 0x14, 0x60, 0x03, 0x3f, 0xa7, 0xf3, 0x71, 0x20, 0x3f,
	0x17, 0x07, 0x92, 0xcc, 0xab, 0xb0, 0xae, 0x79, 0x15, 0x37, 0x32, 0xaf, 0xd2, 0xc6, 0xe6, 0x55,
	0xfd, 0xa7, 0x99, 0xd7, 0xe7, 0xd9, 0x84, 0x32, 0x75, 0xbf, 0xdb, 0x8f, 0x43, 0xee, 0xdb, 0xc4,
	0x99, 0x26, 0xc0, 0xeb, 0xcc, 0x4a, 0x78, 0x9d, 0x5d, 0x17, 0x5e, 0xe7, 0x52, 0xf7, 0xa8, 0x03,
	0x75, 0x1f, 0x47, 0xe1, 0xa6, 0x2e, 0xa9, 0x09, 0x62, 0xa0, 0xa3, 0x1b, 0x80, 0xa4, 0x4c, 0x12,
	0x64, 0x6f, 0x0a, 0x4e, 0xac, 0xc7, 0xf5, 0x8b, 0x17, 0x4b, 0x90, 0x7a, 0x65, 0x09, 0x52, 0xbf,
	0x02, 0x95, 0xd9, 0x9d, 0x9d, 0x4a, 0xdd, 0x65, 0x5f, 0xdf, 0xd7, 0x75, 0x7e, 0x90, 0x81, 0xce,
	0xea, 0x1d, 0x0f, 0xeb, 0x33, 0x99, 0xc7, 0xaa, 0xcf, 0x20, 0xc8, 0x3f, 0x20, 0xce, 0x54, 0xee,
	0x7f, 0xcd, 0x90, 0xff, 0x85, 0x62, 0x98, 0x3b, 0xf0, 0x2c, 0x3e, 0xa1, 0xea, 0x64, 0x54, 0x33,
	0x66, 0x84, 0xce, 0x6f, 0x33, 0x4b, 0x0d, 0x61, 0xe3, 0xb3, 0x42, 0x3a, 0xfa, 0xc9, 0x2d, 0x41,
	0x3f, 0xfb, 0x70, 0x21, 0xa9, 0x9a, 0x91, 0x97, 0xb3, 0xdd, 0xa6, 0x0b, 0x05, 0x8c, 0x39, 0x30,
	0x50, 0x98, 0x3f, 0x2b, 0xfc, 0x26, 0xa9, 0x76, 0xd8, 0xef, 0xf6, 0x65, 0xa4, 0x64, 0xe8, 0x04,
	0x1a, 0x31, 0xf0, 0xc3, 0x5a, 0x19, 0x79, 0xbd, 0x95, 0x56, 0x52, 0x0b, 0x5b, 0xee, 0x47, 0x01,
	0x91, 0x51, 0xa7, 0x91, 0x2f, 0x86, 0xbe, 0x0c, 0x45, 0x79, 0xdf, 0x12, 0x5c, 0xc8, 0x5d, 0x5f,
	0xdd, 0x9b, 0xf8, 0x31, 0x74, 0x2b, 0xd4, 0x86, 0x72, 0x58, 0x86, 0xd1, 0xe5, 0xef, 0xe0, 0xbb,
	0xfd, 0xe3, 0x0c, 0xd4, 0x62, 0x60, 0x6c, 0x07, 0x8a, 0x3e, 0xf1, 0x67, 0x5a, 0x28, 0xf8, 0xc4,
	0x57, 0xd7, 0x45, 0xf1, 0x2b, 0xb3, 0xa2, 0xaf, 0x6e, 0xcb, 0x5e, 0x86, 0xba, 0x2c, 0xc2, 0x07,
	0xe8, 0x4f, 0x8f, 0x50, 0x93, 0x44, 0x8d, 0xf6, 0xd0, 0xfb, 0x70, 0x25, 0x88, 0x76, 0xe9, 0xea,
	0x68, 0xb1, 0xc8, 0x6d, 0x6f, 0x54, 0x2b, 0xed, 0xcf, 0xa0, 0x20, 0x57, 0x84, 0xda, 0x50, 0x11,
	0x47, 0xfe, 0xe8, 0xfc, 0x4a, 0xe3, 0x69, 0x5f, 0xce, 0xf0, 0x2a, 0x54, 0xd5, 0xed, 0xb6, 0xe2,
	0xaa, 0x4b, 0xad, 0x8a, 0xbc, 0xda, 0x96, 0xfc, 0xf0, 0xea, 0x20, 0x17, 0xb9, 0x3a, 0xe8, 0xfc,
	0x29, 0x07, 0x57, 0x13, 0x37, 0x12, 0x7b, 0x0e, 0xfe, 0xd6, 0x39, 0x99, 0xb0, 0xc4, 0x92, 0x4d,
	0x26, 0xb1, 0x64, 0xf3, 0xff, 0x11, 0x45, 0x09, 0x2f, 0xdb, 0x5d, 0xa5, 0xa8, 0x50, 0x45, 0xef,
	0x40, 0x4b, 0xde, 0x50, 0x88, 0xa0, 0xa3, 0x48, 0xe6, 0x9c, 0xca, 0x76, 0x2c, 0x7b, 0xd8, 0xc7,
	0x98, 0xea, 0x86, 0x41, 0xe5, 0xec, 0x2e, 0x6c, 0xe9, 0x99, 0x05, 0x80, 0x5d, 0xee, 0x66, 0xb5,
	0xfb, 0xea, 0xf2, 0x84, 0xaa, 0xc3, 0x82, 0xd1, 0xb0, 0xe3, 0x97, 0x17, 0x5f, 0x01, 0x08, 0xfa,
	0x23, 0x43, 0x5d, 0x10, 0xde, 0x5d, 0xde, 0xd5, 0xbd, 0x8f, 0x8d, 0x8a, 0x6e, 0x73, 0x6f, 0x88,
	0x4e, 0x60, 0x3b, 0xb2, 0x55, 0xb6, 0xac, 0x8f, 0xe9, 0xa2, 0xf0, 0x6b, 0x6b, 0x56, 0xf4, 0x8c,
	0xa6, 0x3d, 0x5f, 0xce, 0x7d, 0x0f, 0xda, 0xa7, 0x96, 0x3b, 0x92, 0xd7, 0x7b, 0x8b, 0xf6, 0x53,
	0x92, 0xf6, 0x73, 0x59, 0x49, 0x2c, 0x98, 0x4f, 0xe7, 0x27, 0x05, 0x78, 0x73, 0x15, 0xe4, 0xe9,
	0x77, 0xfb, 0xcf, 0xe6, 0x19, 0x3f, 0x97, 0x8e, 0x7a, 0xf2, 0xc9, 0xa8, 0xa7, 0x10, 0x45, 0x3d,
	0xeb, 0x55, 0x7f, 0x8b, 0x4f, 0x5a, 0xfd, 0x2d, 0x2d, 0xab, 0xfe, 0x5e, 0x0a, 0xdd, 0xa6, 0xac,
	0xea, 0x6f, 0x6b, 0x38, 0x45, 0x65, 0x99, 0x53, 0x2c, 0x24, 0x14, 0x48, 0x48, 0x28, 0x73, 0xb5,
	0x8a, 0xea, 0x92, 0x5a, 0x85, 0xd8, 0xcc, 0x5a, 0x94, 0xdf, 0xeb, 0xe2, 0xa7, 0x8e, 0x9c, 0x7e,
	0x56, 0x5c, 0xcb, 0x4a, 0xff, 0x03, 0xca, 0x15, 0xb9, 0x8d, 0xcb, 0x15, 0xf9, 0x0d, 0xcb, 0x15,
	0x85, 0xc7, 0x2f, 0x57, 0x14, 0x37, 0x2b, 0x57, 0x94, 0xd2, 0xdd, 0xaf, 0x9c, 0xec, 0x7e, 0x95,
	0xa8, 0xfb, 0xbd, 0x0f, 0x57, 0x84, 0x78, 0x9a, 0xdb, 0xa8, 0x03, 0x8a, 0xf0, 0x82, 0x0f, 0x56,
	0x78, 0x4e, 0x75, 0x6d, 0xcf, 0xa9, 0x6d, 0xe4, 0x39, 0xf5, 0xe5, 0x9e, 0x23, 0x40, 0x52, 0x63,
	0x49, 0xc5, 0x44, 0xec, 0xc3, 0xd6, 0x17, 0xed, 0x39, 0x7f, 0xc9, 0xc0, 0xff, 0x24, 0xe5, 0xd8,
	0xdb, 0x96, 0xa3, 0x80, 0x50, 0xdc, 0x65, 0xd6, 0x82, 0x9b, 0xcb, 0x13, 0x4e, 0x76, 0x69, 0xc2,
	0x59, 0xa5, 0xd5, 0xdc, 0x0a, 0xad, 0xae, 0x78, 0x4a, 0xf6, 0xab, 0x4c, 0xc2, 0x05, 0xa8, 0x7e,
	0x22, 0x27, 0x7f, 0xe4, 0xbb, 0x86, 0xff, 0x85, 0xed, 0xc0, 0x25, 0x66, 0xb7, 0xcc, 0x6a, 0xa5,
	0x4d, 0xcd, 0x98, 0x5d, 0x34, 0x5f, 0x83, 0x5a, 0x20, 0xec, 0x58, 0x1c, 0x6b, 0xf0, 0x54, 0xd5,
	0xb4, 0x3b, 0xd6, 0x3c, 0xf4, 0xca, 0x2d, 0x85, 0x5e, 0xf9, 0x79, 0xe8, 0xd5, 0x86, 0xb2, 0x7d,
	0x86, 0xed, 0x21, 0x9b, 0x8c, 0xf5, 0x21, 0x2a, 0xfc, 0xee, 0xfc, 0x2d, 0x0b, 0xbb, 0x0b, 0xab,
	0x99, 0xbd, 0xaf, 0x12, 0x61, 0x0f, 0xa3, 0x93, 0xb9, 0x47, 0x63, 0x0a, 0x55, 0xbf, 0x99, 0x12,
	0x97, 0xe6, 0x5a, 0xa7, 0x3e, 0x17, 0x7b, 0x0f, 0x8a, 0xba, 0x80, 0xd6, 0x82, 0x92, 0xe5, 0x38,
	0x14, 0x33, 0x26, 0xb7, 0xa8, 0x62, 0x04, 0x9f, 0xa9, 0xb8, 0xb7, 0xfd, 0xcb, 0x4c, 0xec, 0x19,
	0x18, 0x82, 0xbc, 0xbc, 0x4b, 0x54, 0xcd, 0xe5, 0x7f, 0x64, 0x40, 0x3d, 0xb8, 0xda, 0x90, 0x8f,
	0xd7, 0x34, 0x7c, 0xbf, 0xb9, 0xe6, 0xb4, 0xd5, 0xdc, 0x8c, 0x9a, 0xbe, 0x03, 0x91, 0x5d, 0xa0,
	0xbe, 0xd0, 0x94, 0xac, 0x1e, 0xa8, 0x2e, 0x73, 0x8f, 0xd3, 0x65, 0x55, 0x15, 0x1a, 0x64, 0x0f,
	0x9d, 0xcf, 0x93, 0xee, 0x2c, 0x95, 0xcb, 0x7c, 0x15, 0x5b, 0x23, 0x7e, 0x86, 0x9e, 0x87, 0xb2,
	0xed, 0x4f, 0xcc, 0x11, 0xb1, 0x94, 0xaf, 0x64, 0x8d, 0x92, 0xed, 0x4f, 0x3e, 0x21, 0x96, 0x83,
	0x5e, 0x83, 0x2d, 0xfd, 0x60, 0x4b, 0x83, 0xf7, 0x60, 0x9b, 0x1a, 0x8a, 0xac, 0x4f, 0x7b, 0x4c,
	0x9c, 0xba, 0xa5, 0x06, 0xfd, 0x21, 0x67, 0x26, 0xc3, 0xb6, 0x76, 0x02, 0xa9, 0x8f, 0xfe, 0x90,
	0xb3, 0x63, 0x6c, 0xa3, 0x57, 0xa0, 0x41, 0xf8, 0x19, 0xa6, 0x33, 0x21, 0x55, 0x64, 0xa9, 0x49,
	0x6a, 0x20, 0xf5, 0x58, 0x0f, 0x4c, 0xd1, 0xeb, 0xb0, 0x2d, 0xd6, 0x60, 0x13, 0x91, 0x22, 0x30,
	0x35, 0x27, 0x0c, 0x53, 0x09, 0x37, 0xb2, 0x46, 0xc3, 0xf6, 0x27, 0x07, 0x84, 0xf1, 0x3e, 0xa6,
	0xf7, 0x19, 0xa6, 0xe8, 0x26, 0x5c, 0x88, 0x89, 0xaa, 0xa7, 0x68, 0x32, 0x6e, 0x67, 0x8d, 0xe6,
	0x4c, 0x58, 0x3d, 0x42, 0x43, 0x9f, 0xce, 0xd9, 0x66, 0x51, 0x6a, 0x64, 0x3f, 0x45, 0x23, 0xd1,
	0x8d, 0x4d, 0x33, 0x4c, 0x91, 0x2b, 0xc6, 0xd6, 0xc0, 0xb5, 0x75, 0x7d, 0x52, 0x7d, 0xb4, 0x3f,
	0x8c, 0x19, 0xdc, 0xcb, 0x6a, 0x43, 0x13, 0x9f, 0x1d, 0xda, 0xc1, 0xb3, 0x43, 0x71, 0xe6, 0xe1,
	0x81, 0x43, 0x8b, 0x33, 0x8f, 0xf8, 0xe8, 0xfc, 0xa8, 0xb0, 0x11, 0xd2, 0xf8, 0xaf, 0xc2, 0xc3,
	0x2b, 0x42, 0x77, 0x71, 0xed, 0x84, 0x5c, 0x5a, 0x3b, 0x21, 0x97, 0x97, 0x25, 0xe4, 0x58, 0xae,
	0xa5, 0xad, 0x76, 0x3c, 0xd7, 0x2e, 0xa0, 0xd4, 0x2b, 0x73, 0xb9, 0x36, 0xfd, 0x72, 0xfe, 0x52,
	0xea, 0xe5, 0x7c, 0xca, 0xf5, 0xff, 0xf3, 0xc9, 0xd7, 0xff, 0x4f, 0x3d, 0x9b, 0x7f, 0x7b, 0xbd,
	0x64, 0xae, 0xad, 0x32, 0x75, 0x7d, 0x99, 0xd4, 0xf5, 0x2d, 0x4f, 0xaf, 0xb7, 0x73, 0xdf, 0xc9,
	0x3c, 0xf7, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0xb3, 0x83, 0x31, 0x50, 0x30, 0x00, 0x00,
}
