// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steamdatagram_messages_udp.proto

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ESteamNetworkingUDPMsgID int32

const (
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ChallengeRequest ESteamNetworkingUDPMsgID = 32
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ChallengeReply   ESteamNetworkingUDPMsgID = 33
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectRequest   ESteamNetworkingUDPMsgID = 34
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectOK        ESteamNetworkingUDPMsgID = 35
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectionClosed ESteamNetworkingUDPMsgID = 36
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_NoConnection     ESteamNetworkingUDPMsgID = 37
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_Stats            ESteamNetworkingUDPMsgID = 38
)

var ESteamNetworkingUDPMsgID_name = map[int32]string{
	32: "k_ESteamNetworkingUDPMsg_ChallengeRequest",
	33: "k_ESteamNetworkingUDPMsg_ChallengeReply",
	34: "k_ESteamNetworkingUDPMsg_ConnectRequest",
	35: "k_ESteamNetworkingUDPMsg_ConnectOK",
	36: "k_ESteamNetworkingUDPMsg_ConnectionClosed",
	37: "k_ESteamNetworkingUDPMsg_NoConnection",
	38: "k_ESteamNetworkingUDPMsg_Stats",
}
var ESteamNetworkingUDPMsgID_value = map[string]int32{
	"k_ESteamNetworkingUDPMsg_ChallengeRequest": 32,
	"k_ESteamNetworkingUDPMsg_ChallengeReply":   33,
	"k_ESteamNetworkingUDPMsg_ConnectRequest":   34,
	"k_ESteamNetworkingUDPMsg_ConnectOK":        35,
	"k_ESteamNetworkingUDPMsg_ConnectionClosed": 36,
	"k_ESteamNetworkingUDPMsg_NoConnection":     37,
	"k_ESteamNetworkingUDPMsg_Stats":            38,
}

func (x ESteamNetworkingUDPMsgID) Enum() *ESteamNetworkingUDPMsgID {
	p := new(ESteamNetworkingUDPMsgID)
	*p = x
	return p
}
func (x ESteamNetworkingUDPMsgID) String() string {
	return proto.EnumName(ESteamNetworkingUDPMsgID_name, int32(x))
}
func (x *ESteamNetworkingUDPMsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ESteamNetworkingUDPMsgID_value, data, "ESteamNetworkingUDPMsgID")
	if err != nil {
		return err
	}
	*x = ESteamNetworkingUDPMsgID(value)
	return nil
}
func (ESteamNetworkingUDPMsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor39, []int{0} }

type CMsgSteamSockets_UDP_Stats_Flags int32

const (
	CMsgSteamSockets_UDP_Stats_ACK_REQUEST_E2E       CMsgSteamSockets_UDP_Stats_Flags = 2
	CMsgSteamSockets_UDP_Stats_ACK_REQUEST_IMMEDIATE CMsgSteamSockets_UDP_Stats_Flags = 4
)

var CMsgSteamSockets_UDP_Stats_Flags_name = map[int32]string{
	2: "ACK_REQUEST_E2E",
	4: "ACK_REQUEST_IMMEDIATE",
}
var CMsgSteamSockets_UDP_Stats_Flags_value = map[string]int32{
	"ACK_REQUEST_E2E":       2,
	"ACK_REQUEST_IMMEDIATE": 4,
}

func (x CMsgSteamSockets_UDP_Stats_Flags) Enum() *CMsgSteamSockets_UDP_Stats_Flags {
	p := new(CMsgSteamSockets_UDP_Stats_Flags)
	*p = x
	return p
}
func (x CMsgSteamSockets_UDP_Stats_Flags) String() string {
	return proto.EnumName(CMsgSteamSockets_UDP_Stats_Flags_name, int32(x))
}
func (x *CMsgSteamSockets_UDP_Stats_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamSockets_UDP_Stats_Flags_value, data, "CMsgSteamSockets_UDP_Stats_Flags")
	if err != nil {
		return err
	}
	*x = CMsgSteamSockets_UDP_Stats_Flags(value)
	return nil
}
func (CMsgSteamSockets_UDP_Stats_Flags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor39, []int{6, 0}
}

type CMsgSteamSockets_UDP_ChallengeRequest struct {
	ConnectionId     *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	MyTimestamp      *uint64 `protobuf:"fixed64,3,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	ProtocolVersion  *uint32 `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamSockets_UDP_ChallengeRequest) Reset()         { *m = CMsgSteamSockets_UDP_ChallengeRequest{} }
func (m *CMsgSteamSockets_UDP_ChallengeRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamSockets_UDP_ChallengeRequest) ProtoMessage()    {}
func (*CMsgSteamSockets_UDP_ChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor39, []int{0}
}

func (m *CMsgSteamSockets_UDP_ChallengeRequest) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ChallengeRequest) GetMyTimestamp() uint64 {
	if m != nil && m.MyTimestamp != nil {
		return *m.MyTimestamp
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ChallengeRequest) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ChallengeReply struct {
	ConnectionId     *uint32 `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	Challenge        *uint64 `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	YourTimestamp    *uint64 `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	ProtocolVersion  *uint32 `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamSockets_UDP_ChallengeReply) Reset()         { *m = CMsgSteamSockets_UDP_ChallengeReply{} }
func (m *CMsgSteamSockets_UDP_ChallengeReply) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamSockets_UDP_ChallengeReply) ProtoMessage()    {}
func (*CMsgSteamSockets_UDP_ChallengeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor39, []int{1}
}

func (m *CMsgSteamSockets_UDP_ChallengeReply) GetConnectionId() uint32 {
	if m != nil && m.ConnectionId != nil {
		return *m.ConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ChallengeReply) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ChallengeReply) GetYourTimestamp() uint64 {
	if m != nil && m.YourTimestamp != nil {
		return *m.YourTimestamp
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ChallengeReply) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ConnectRequest struct {
	ClientConnectionId *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	Challenge          *uint64                                  `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	ClientSteamId      *uint64                                  `protobuf:"fixed64,3,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	MyTimestamp        *uint64                                  `protobuf:"fixed64,5,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	PingEstMs          *uint32                                  `protobuf:"varint,6,opt,name=ping_est_ms,json=pingEstMs" json:"ping_est_ms,omitempty"`
	Crypt              *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,7,opt,name=crypt" json:"crypt,omitempty"`
	Cert               *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,4,opt,name=cert" json:"cert,omitempty"`
	ProtocolVersion    *uint32                                  `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	XXX_unrecognized   []byte                                   `json:"-"`
}

func (m *CMsgSteamSockets_UDP_ConnectRequest) Reset()         { *m = CMsgSteamSockets_UDP_ConnectRequest{} }
func (m *CMsgSteamSockets_UDP_ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamSockets_UDP_ConnectRequest) ProtoMessage()    {}
func (*CMsgSteamSockets_UDP_ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor39, []int{2}
}

func (m *CMsgSteamSockets_UDP_ConnectRequest) GetClientConnectionId() uint32 {
	if m != nil && m.ClientConnectionId != nil {
		return *m.ClientConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectRequest) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectRequest) GetClientSteamId() uint64 {
	if m != nil && m.ClientSteamId != nil {
		return *m.ClientSteamId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectRequest) GetMyTimestamp() uint64 {
	if m != nil && m.MyTimestamp != nil {
		return *m.MyTimestamp
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectRequest) GetPingEstMs() uint32 {
	if m != nil && m.PingEstMs != nil {
		return *m.PingEstMs
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if m != nil {
		return m.Crypt
	}
	return nil
}

func (m *CMsgSteamSockets_UDP_ConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CMsgSteamSockets_UDP_ConnectRequest) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ConnectOK struct {
	ClientConnectionId *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId *uint32                                  `protobuf:"fixed32,5,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	ServerSteamId      *uint64                                  `protobuf:"fixed64,2,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	YourTimestamp      *uint64                                  `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	DelayTimeUsec      *uint32                                  `protobuf:"varint,4,opt,name=delay_time_usec,json=delayTimeUsec" json:"delay_time_usec,omitempty"`
	Crypt              *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,7,opt,name=crypt" json:"crypt,omitempty"`
	Cert               *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,8,opt,name=cert" json:"cert,omitempty"`
	ProtocolVersion    *uint32                                  `protobuf:"varint,9,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	XXX_unrecognized   []byte                                   `json:"-"`
}

func (m *CMsgSteamSockets_UDP_ConnectOK) Reset()                    { *m = CMsgSteamSockets_UDP_ConnectOK{} }
func (m *CMsgSteamSockets_UDP_ConnectOK) String() string            { return proto.CompactTextString(m) }
func (*CMsgSteamSockets_UDP_ConnectOK) ProtoMessage()               {}
func (*CMsgSteamSockets_UDP_ConnectOK) Descriptor() ([]byte, []int) { return fileDescriptor39, []int{3} }

func (m *CMsgSteamSockets_UDP_ConnectOK) GetClientConnectionId() uint32 {
	if m != nil && m.ClientConnectionId != nil {
		return *m.ClientConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectOK) GetServerConnectionId() uint32 {
	if m != nil && m.ServerConnectionId != nil {
		return *m.ServerConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectOK) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectOK) GetYourTimestamp() uint64 {
	if m != nil && m.YourTimestamp != nil {
		return *m.YourTimestamp
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectOK) GetDelayTimeUsec() uint32 {
	if m != nil && m.DelayTimeUsec != nil {
		return *m.DelayTimeUsec
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if m != nil {
		return m.Crypt
	}
	return nil
}

func (m *CMsgSteamSockets_UDP_ConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CMsgSteamSockets_UDP_ConnectOK) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ConnectionClosed struct {
	ToConnectionId   *uint32 `protobuf:"fixed32,4,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId *uint32 `protobuf:"fixed32,5,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	Debug            *string `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	ReasonCode       *uint32 `protobuf:"varint,3,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamSockets_UDP_ConnectionClosed) Reset()         { *m = CMsgSteamSockets_UDP_ConnectionClosed{} }
func (m *CMsgSteamSockets_UDP_ConnectionClosed) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamSockets_UDP_ConnectionClosed) ProtoMessage()    {}
func (*CMsgSteamSockets_UDP_ConnectionClosed) Descriptor() ([]byte, []int) {
	return fileDescriptor39, []int{4}
}

func (m *CMsgSteamSockets_UDP_ConnectionClosed) GetToConnectionId() uint32 {
	if m != nil && m.ToConnectionId != nil {
		return *m.ToConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectionClosed) GetFromConnectionId() uint32 {
	if m != nil && m.FromConnectionId != nil {
		return *m.FromConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_ConnectionClosed) GetDebug() string {
	if m != nil && m.Debug != nil {
		return *m.Debug
	}
	return ""
}

func (m *CMsgSteamSockets_UDP_ConnectionClosed) GetReasonCode() uint32 {
	if m != nil && m.ReasonCode != nil {
		return *m.ReasonCode
	}
	return 0
}

type CMsgSteamSockets_UDP_NoConnection struct {
	FromConnectionId *uint32 `protobuf:"fixed32,2,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	ToConnectionId   *uint32 `protobuf:"fixed32,3,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamSockets_UDP_NoConnection) Reset()         { *m = CMsgSteamSockets_UDP_NoConnection{} }
func (m *CMsgSteamSockets_UDP_NoConnection) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamSockets_UDP_NoConnection) ProtoMessage()    {}
func (*CMsgSteamSockets_UDP_NoConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor39, []int{5}
}

func (m *CMsgSteamSockets_UDP_NoConnection) GetFromConnectionId() uint32 {
	if m != nil && m.FromConnectionId != nil {
		return *m.FromConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_NoConnection) GetToConnectionId() uint32 {
	if m != nil && m.ToConnectionId != nil {
		return *m.ToConnectionId
	}
	return 0
}

type CMsgSteamSockets_UDP_Stats struct {
	Stats            *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
	AckE2E           []uint32                            `protobuf:"fixed32,2,rep,name=ack_e2e,json=ackE2e" json:"ack_e2e,omitempty"`
	Flags            *uint32                             `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	ToConnectionId   *uint32                             `protobuf:"fixed32,9,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId *uint32                             `protobuf:"fixed32,10,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	SeqNum           *uint32                             `protobuf:"varint,4,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *CMsgSteamSockets_UDP_Stats) Reset()                    { *m = CMsgSteamSockets_UDP_Stats{} }
func (m *CMsgSteamSockets_UDP_Stats) String() string            { return proto.CompactTextString(m) }
func (*CMsgSteamSockets_UDP_Stats) ProtoMessage()               {}
func (*CMsgSteamSockets_UDP_Stats) Descriptor() ([]byte, []int) { return fileDescriptor39, []int{6} }

func (m *CMsgSteamSockets_UDP_Stats) GetStats() *CMsgSteamDatagramConnectionQuality {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *CMsgSteamSockets_UDP_Stats) GetAckE2E() []uint32 {
	if m != nil {
		return m.AckE2E
	}
	return nil
}

func (m *CMsgSteamSockets_UDP_Stats) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_Stats) GetToConnectionId() uint32 {
	if m != nil && m.ToConnectionId != nil {
		return *m.ToConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_Stats) GetFromConnectionId() uint32 {
	if m != nil && m.FromConnectionId != nil {
		return *m.FromConnectionId
	}
	return 0
}

func (m *CMsgSteamSockets_UDP_Stats) GetSeqNum() uint32 {
	if m != nil && m.SeqNum != nil {
		return *m.SeqNum
	}
	return 0
}

func init() {
	proto.RegisterType((*CMsgSteamSockets_UDP_ChallengeRequest)(nil), "dota.CMsgSteamSockets_UDP_ChallengeRequest")
	proto.RegisterType((*CMsgSteamSockets_UDP_ChallengeReply)(nil), "dota.CMsgSteamSockets_UDP_ChallengeReply")
	proto.RegisterType((*CMsgSteamSockets_UDP_ConnectRequest)(nil), "dota.CMsgSteamSockets_UDP_ConnectRequest")
	proto.RegisterType((*CMsgSteamSockets_UDP_ConnectOK)(nil), "dota.CMsgSteamSockets_UDP_ConnectOK")
	proto.RegisterType((*CMsgSteamSockets_UDP_ConnectionClosed)(nil), "dota.CMsgSteamSockets_UDP_ConnectionClosed")
	proto.RegisterType((*CMsgSteamSockets_UDP_NoConnection)(nil), "dota.CMsgSteamSockets_UDP_NoConnection")
	proto.RegisterType((*CMsgSteamSockets_UDP_Stats)(nil), "dota.CMsgSteamSockets_UDP_Stats")
	proto.RegisterEnum("dota.ESteamNetworkingUDPMsgID", ESteamNetworkingUDPMsgID_name, ESteamNetworkingUDPMsgID_value)
	proto.RegisterEnum("dota.CMsgSteamSockets_UDP_Stats_Flags", CMsgSteamSockets_UDP_Stats_Flags_name, CMsgSteamSockets_UDP_Stats_Flags_value)
}

func init() { proto.RegisterFile("steamdatagram_messages_udp.proto", fileDescriptor39) }

var fileDescriptor39 = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xc6, 0xf9, 0xd9, 0x34, 0x27, 0x4d, 0x63, 0x0d, 0x8b, 0x1a, 0x56, 0xd5, 0x92, 0xf5, 0xb2,
	0x21, 0x0b, 0x74, 0x55, 0xe5, 0x86, 0x1b, 0x84, 0x54, 0x1c, 0x23, 0x45, 0xab, 0x6c, 0x5b, 0x67,
	0xc3, 0xed, 0x68, 0xb0, 0x4f, 0x5c, 0x2b, 0xb6, 0x27, 0xeb, 0x19, 0x17, 0x45, 0xdc, 0xf0, 0x04,
	0x3c, 0x00, 0x6f, 0xc0, 0x03, 0xc0, 0x05, 0x6f, 0xc0, 0x5b, 0x21, 0x7b, 0x9c, 0x74, 0xb3, 0x6b,
	0xa7, 0x69, 0xd5, 0xbb, 0xf8, 0x9b, 0xef, 0x9c, 0xf9, 0xce, 0xf7, 0x9d, 0xd8, 0xd0, 0x13, 0x12,
	0x59, 0xe8, 0x32, 0xc9, 0xbc, 0x98, 0x85, 0x34, 0x44, 0x21, 0x98, 0x87, 0x82, 0x26, 0xee, 0xf2,
	0x62, 0x19, 0x73, 0xc9, 0x49, 0xcd, 0xe5, 0x92, 0x1d, 0x9d, 0x6c, 0xf3, 0x58, 0x22, 0x5f, 0x6f,
	0xc8, 0x8a, 0x78, 0xf4, 0xa4, 0xb8, 0x95, 0x3a, 0x35, 0xfe, 0xd4, 0xe0, 0xcc, 0x9c, 0x08, 0x6f,
	0x9a, 0x92, 0xa6, 0xdc, 0x59, 0xa0, 0x14, 0x74, 0x36, 0x7a, 0x49, 0xcd, 0xd7, 0x2c, 0x08, 0x30,
	0xf2, 0xd0, 0xc6, 0x9b, 0x04, 0x85, 0x24, 0xa7, 0xd0, 0x76, 0x78, 0x14, 0xa1, 0x23, 0x7d, 0x1e,
	0x51, 0xdf, 0xed, 0x6a, 0x3d, 0x6d, 0xd0, 0xb0, 0x1f, 0xbe, 0x05, 0xc7, 0x2e, 0x39, 0x81, 0x87,
	0xe1, 0x8a, 0x4a, 0x3f, 0x44, 0x21, 0x59, 0xb8, 0xec, 0x56, 0x7b, 0xda, 0xe0, 0xc0, 0x6e, 0x85,
	0xab, 0xeb, 0x35, 0x44, 0xce, 0x41, 0xcf, 0xae, 0x76, 0x78, 0x40, 0xdf, 0x60, 0x2c, 0x7c, 0x1e,
	0x75, 0x6b, 0x3d, 0x6d, 0xd0, 0xb6, 0x3b, 0x6b, 0xfc, 0x67, 0x05, 0x1b, 0xff, 0x6a, 0x70, 0xfa,
	0x2e, 0x71, 0xcb, 0x60, 0xb5, 0x9f, 0xb4, 0x27, 0xd0, 0x74, 0xd6, 0x65, 0xdd, 0x4a, 0xa6, 0xeb,
	0x2d, 0x40, 0xce, 0xe0, 0xd1, 0x8a, 0x27, 0xf1, 0x3d, 0xe9, 0xed, 0x14, 0xfd, 0x20, 0xf1, 0x7f,
	0x54, 0xcb, 0xc4, 0x2b, 0x55, 0x6b, 0x5f, 0x9f, 0xc1, 0xa1, 0x13, 0xf8, 0x18, 0x49, 0x5a, 0x34,
	0x03, 0x51, 0x67, 0xe6, 0xfe, 0x93, 0xf4, 0xa1, 0x93, 0xf7, 0xcb, 0x82, 0x4f, 0x5b, 0xe5, 0xa3,
	0x28, 0x38, 0xd3, 0x53, 0x10, 0x55, 0xfd, 0x7e, 0x54, 0xc7, 0xd0, 0x5a, 0xfa, 0x91, 0x47, 0x51,
	0x48, 0x1a, 0x8a, 0xee, 0x41, 0x36, 0x68, 0x33, 0x85, 0x2c, 0x21, 0x27, 0x82, 0x98, 0x50, 0x77,
	0xe2, 0xd5, 0x52, 0x76, 0x1b, 0x3d, 0x6d, 0xd0, 0x1a, 0x3e, 0xbd, 0x48, 0x77, 0xf2, 0x62, 0x33,
	0xf4, 0x28, 0xdf, 0xb9, 0x29, 0x8a, 0xd4, 0x11, 0x33, 0xa5, 0x8e, 0xa3, 0x39, 0x9f, 0xfa, 0x5e,
	0x84, 0xae, 0xad, 0x6a, 0xc9, 0xf7, 0x50, 0x73, 0x30, 0x96, 0x99, 0x8d, 0xad, 0xe1, 0xa0, 0xa4,
	0x87, 0x89, 0xb1, 0xf4, 0xe7, 0xbe, 0xc3, 0x24, 0xe6, 0xe5, 0x59, 0x55, 0x61, 0x20, 0x0f, 0x8a,
	0x03, 0xf9, 0xab, 0x0a, 0xc7, 0xbb, 0x02, 0x79, 0x71, 0xf9, 0x01, 0x59, 0x3c, 0x83, 0x43, 0x81,
	0xf1, 0x1b, 0x8c, 0xef, 0x54, 0xd4, 0x55, 0x85, 0x3a, 0xdb, 0xaa, 0xe8, 0x43, 0x27, 0xaf, 0xd8,
	0xe4, 0xa3, 0x32, 0x6c, 0x2b, 0x78, 0x9d, 0xcf, 0x9e, 0x1b, 0xd9, 0x87, 0x8e, 0x8b, 0x01, 0x53,
	0x49, 0xd2, 0x44, 0xa0, 0x93, 0x2f, 0x64, 0x3b, 0x83, 0x53, 0xe2, 0x4c, 0xa0, 0xf3, 0x71, 0xb3,
	0x7a, 0xf0, 0xd1, 0xb2, 0x6a, 0x16, 0x67, 0xf5, 0x4f, 0xe9, 0x6b, 0x69, 0x63, 0xa5, 0x19, 0x70,
	0x81, 0x2e, 0x19, 0x80, 0x2e, 0xf9, 0x1d, 0xf3, 0x6b, 0x99, 0xf9, 0x8f, 0x24, 0xdf, 0x32, 0xfe,
	0x5b, 0x20, 0xf3, 0x98, 0x87, 0x85, 0x41, 0xe9, 0xe9, 0xc9, 0x16, 0xfb, 0x10, 0xea, 0x2e, 0xfe,
	0x92, 0x78, 0x59, 0x38, 0x4d, 0x5b, 0x3d, 0x90, 0x2f, 0xa0, 0x15, 0x23, 0x13, 0x3c, 0xa2, 0x0e,
	0x77, 0x31, 0x4b, 0xa4, 0x6d, 0x83, 0x82, 0x4c, 0xee, 0xa2, 0xf1, 0x1b, 0x9c, 0x14, 0xea, 0xbe,
	0xba, 0xa5, 0xa5, 0x44, 0x49, 0xa5, 0x44, 0x49, 0xd1, 0x84, 0xd5, 0xa2, 0x09, 0x8d, 0xbf, 0x2b,
	0x70, 0x54, 0x78, 0xfb, 0x54, 0x32, 0x29, 0xc8, 0x0f, 0x50, 0x17, 0xe9, 0x8f, 0x6c, 0x9d, 0x77,
	0xc4, 0xb7, 0x69, 0xf9, 0x2a, 0x61, 0x81, 0x2f, 0x57, 0xb6, 0x2a, 0x23, 0x8f, 0xa1, 0xc1, 0x9c,
	0x05, 0xc5, 0x61, 0xfa, 0xd6, 0xa9, 0x0e, 0x1a, 0xf6, 0x01, 0x73, 0x16, 0xd6, 0x10, 0x53, 0xaf,
	0xe6, 0x01, 0xf3, 0x44, 0xee, 0x87, 0x7a, 0x28, 0xd4, 0xdd, 0x7c, 0x8f, 0x64, 0xa0, 0xc4, 0x8f,
	0xc7, 0xd0, 0x10, 0x78, 0x43, 0xa3, 0x24, 0xcc, 0x37, 0xfd, 0x40, 0xe0, 0xcd, 0x55, 0x12, 0x1a,
	0xdf, 0x41, 0xfd, 0xa7, 0xec, 0xe6, 0x4f, 0xa1, 0xf3, 0xdc, 0xbc, 0xa4, 0xb6, 0xf5, 0x6a, 0x66,
	0x4d, 0xaf, 0xa9, 0x35, 0xb4, 0xf4, 0x0a, 0xf9, 0x1c, 0x3e, 0xbb, 0x0d, 0x8e, 0x27, 0x13, 0x6b,
	0x34, 0x7e, 0x7e, 0x6d, 0xe9, 0xb5, 0xaf, 0xff, 0xab, 0x40, 0xd7, 0xca, 0x3c, 0xb8, 0x42, 0xf9,
	0x2b, 0x8f, 0x17, 0x7e, 0xe4, 0xcd, 0x46, 0x2f, 0x27, 0xc2, 0x1b, 0x8f, 0xc8, 0x53, 0x38, 0x5f,
	0xd0, 0xe2, 0xd3, 0x7b, 0x1f, 0x49, 0xbd, 0x47, 0xbe, 0x81, 0xaf, 0xf6, 0xa1, 0x2f, 0x83, 0x95,
	0x7e, 0xb2, 0x9b, 0xbc, 0xf5, 0x99, 0xd0, 0x0d, 0xd2, 0x07, 0xe3, 0x5d, 0xe4, 0x17, 0x97, 0xfa,
	0xe9, 0x6e, 0xc1, 0x77, 0xfe, 0x3e, 0xfa, 0x97, 0xe4, 0x1c, 0xce, 0x4a, 0xe9, 0xb7, 0xb7, 0x56,
	0x3f, 0x23, 0x06, 0x1c, 0x97, 0x52, 0xb3, 0x15, 0xd3, 0xfb, 0x3f, 0x56, 0x7f, 0xd7, 0x3e, 0xf9,
	0x3f, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x5c, 0xea, 0x69, 0xbf, 0x08, 0x00, 0x00,
}
