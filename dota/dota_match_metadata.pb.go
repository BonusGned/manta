// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_match_metadata.proto

package dota

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CDOTAMatchMetadataFile struct {
	Version              *int32              `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	MatchId              *uint64             `protobuf:"varint,2,req,name=match_id,json=matchId" json:"match_id,omitempty"`
	Metadata             *CDOTAMatchMetadata `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	PrivateMetadata      []byte              `protobuf:"bytes,5,opt,name=private_metadata,json=privateMetadata" json:"private_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CDOTAMatchMetadataFile) Reset()         { *m = CDOTAMatchMetadataFile{} }
func (m *CDOTAMatchMetadataFile) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadataFile) ProtoMessage()    {}
func (*CDOTAMatchMetadataFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{0}
}

func (m *CDOTAMatchMetadataFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadataFile.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadataFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadataFile.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadataFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadataFile.Merge(m, src)
}
func (m *CDOTAMatchMetadataFile) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadataFile.Size(m)
}
func (m *CDOTAMatchMetadataFile) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadataFile.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadataFile proto.InternalMessageInfo

func (m *CDOTAMatchMetadataFile) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *CDOTAMatchMetadataFile) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CDOTAMatchMetadataFile) GetMetadata() *CDOTAMatchMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CDOTAMatchMetadataFile) GetPrivateMetadata() []byte {
	if m != nil {
		return m.PrivateMetadata
	}
	return nil
}

type CDOTAMatchMetadata struct {
	Teams                  []*CDOTAMatchMetadata_Team                   `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	ItemRewards            []*CLobbyTimedRewardDetails                  `protobuf:"bytes,2,rep,name=item_rewards,json=itemRewards" json:"item_rewards,omitempty"`
	LobbyId                *uint64                                      `protobuf:"fixed64,3,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ReportUntilTime        *uint64                                      `protobuf:"fixed64,4,opt,name=report_until_time,json=reportUntilTime" json:"report_until_time,omitempty"`
	EventGameCustomTable   []byte                                       `protobuf:"bytes,5,opt,name=event_game_custom_table,json=eventGameCustomTable" json:"event_game_custom_table,omitempty"`
	PrimaryEventId         *uint32                                      `protobuf:"varint,6,opt,name=primary_event_id,json=primaryEventId" json:"primary_event_id,omitempty"`
	MatchTips              []*CMsgMatchTips                             `protobuf:"bytes,7,rep,name=match_tips,json=matchTips" json:"match_tips,omitempty"`
	MatchmakingStats       *CMsgMatchMatchmakingStats                   `protobuf:"bytes,8,opt,name=matchmaking_stats,json=matchmakingStats" json:"matchmaking_stats,omitempty"`
	MvpData                *CMvpData                                    `protobuf:"bytes,9,opt,name=mvp_data,json=mvpData" json:"mvp_data,omitempty"`
	GuildChallengeProgress []*CDOTAMatchMetadata_GuildChallengeProgress `protobuf:"bytes,10,rep,name=guild_challenge_progress,json=guildChallengeProgress" json:"guild_challenge_progress,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                                     `json:"-"`
	XXX_unrecognized       []byte                                       `json:"-"`
	XXX_sizecache          int32                                        `json:"-"`
}

func (m *CDOTAMatchMetadata) Reset()         { *m = CDOTAMatchMetadata{} }
func (m *CDOTAMatchMetadata) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata) ProtoMessage()    {}
func (*CDOTAMatchMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1}
}

func (m *CDOTAMatchMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata.Merge(m, src)
}
func (m *CDOTAMatchMetadata) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata.Size(m)
}
func (m *CDOTAMatchMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata proto.InternalMessageInfo

func (m *CDOTAMatchMetadata) GetTeams() []*CDOTAMatchMetadata_Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CDOTAMatchMetadata) GetItemRewards() []*CLobbyTimedRewardDetails {
	if m != nil {
		return m.ItemRewards
	}
	return nil
}

func (m *CDOTAMatchMetadata) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CDOTAMatchMetadata) GetReportUntilTime() uint64 {
	if m != nil && m.ReportUntilTime != nil {
		return *m.ReportUntilTime
	}
	return 0
}

func (m *CDOTAMatchMetadata) GetEventGameCustomTable() []byte {
	if m != nil {
		return m.EventGameCustomTable
	}
	return nil
}

func (m *CDOTAMatchMetadata) GetPrimaryEventId() uint32 {
	if m != nil && m.PrimaryEventId != nil {
		return *m.PrimaryEventId
	}
	return 0
}

func (m *CDOTAMatchMetadata) GetMatchTips() []*CMsgMatchTips {
	if m != nil {
		return m.MatchTips
	}
	return nil
}

func (m *CDOTAMatchMetadata) GetMatchmakingStats() *CMsgMatchMatchmakingStats {
	if m != nil {
		return m.MatchmakingStats
	}
	return nil
}

func (m *CDOTAMatchMetadata) GetMvpData() *CMvpData {
	if m != nil {
		return m.MvpData
	}
	return nil
}

func (m *CDOTAMatchMetadata) GetGuildChallengeProgress() []*CDOTAMatchMetadata_GuildChallengeProgress {
	if m != nil {
		return m.GuildChallengeProgress
	}
	return nil
}

type CDOTAMatchMetadata_Team struct {
	DotaTeam             *uint32                           `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Players              []*CDOTAMatchMetadata_Team_Player `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	GraphExperience      []float32                         `protobuf:"fixed32,3,rep,name=graph_experience,json=graphExperience" json:"graph_experience,omitempty"`
	GraphGoldEarned      []float32                         `protobuf:"fixed32,4,rep,name=graph_gold_earned,json=graphGoldEarned" json:"graph_gold_earned,omitempty"`
	GraphNetWorth        []float32                         `protobuf:"fixed32,5,rep,name=graph_net_worth,json=graphNetWorth" json:"graph_net_worth,omitempty"`
	CmFirstPick          *bool                             `protobuf:"varint,6,opt,name=cm_first_pick,json=cmFirstPick" json:"cm_first_pick,omitempty"`
	CmCaptainPlayerId    *uint32                           `protobuf:"varint,7,opt,name=cm_captain_player_id,json=cmCaptainPlayerId" json:"cm_captain_player_id,omitempty"`
	CmBans               []uint32                          `protobuf:"varint,8,rep,name=cm_bans,json=cmBans" json:"cm_bans,omitempty"`
	CmPicks              []uint32                          `protobuf:"varint,9,rep,name=cm_picks,json=cmPicks" json:"cm_picks,omitempty"`
	CmPenalty            *uint32                           `protobuf:"varint,10,opt,name=cm_penalty,json=cmPenalty" json:"cm_penalty,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CDOTAMatchMetadata_Team) Reset()         { *m = CDOTAMatchMetadata_Team{} }
func (m *CDOTAMatchMetadata_Team) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata_Team) ProtoMessage()    {}
func (*CDOTAMatchMetadata_Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0}
}

func (m *CDOTAMatchMetadata_Team) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team.Size(m)
}
func (m *CDOTAMatchMetadata_Team) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team) GetDotaTeam() uint32 {
	if m != nil && m.DotaTeam != nil {
		return *m.DotaTeam
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team) GetPlayers() []*CDOTAMatchMetadata_Team_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team) GetGraphExperience() []float32 {
	if m != nil {
		return m.GraphExperience
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team) GetGraphGoldEarned() []float32 {
	if m != nil {
		return m.GraphGoldEarned
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team) GetGraphNetWorth() []float32 {
	if m != nil {
		return m.GraphNetWorth
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team) GetCmFirstPick() bool {
	if m != nil && m.CmFirstPick != nil {
		return *m.CmFirstPick
	}
	return false
}

func (m *CDOTAMatchMetadata_Team) GetCmCaptainPlayerId() uint32 {
	if m != nil && m.CmCaptainPlayerId != nil {
		return *m.CmCaptainPlayerId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team) GetCmBans() []uint32 {
	if m != nil {
		return m.CmBans
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team) GetCmPicks() []uint32 {
	if m != nil {
		return m.CmPicks
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team) GetCmPenalty() uint32 {
	if m != nil && m.CmPenalty != nil {
		return *m.CmPenalty
	}
	return 0
}

type CDOTAMatchMetadata_Team_PlayerKill struct {
	VictimSlot           *uint32  `protobuf:"varint,1,opt,name=victim_slot,json=victimSlot" json:"victim_slot,omitempty"`
	Count                *uint32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_PlayerKill) Reset()         { *m = CDOTAMatchMetadata_Team_PlayerKill{} }
func (m *CDOTAMatchMetadata_Team_PlayerKill) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata_Team_PlayerKill) ProtoMessage()    {}
func (*CDOTAMatchMetadata_Team_PlayerKill) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 0}
}

func (m *CDOTAMatchMetadata_Team_PlayerKill) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_PlayerKill.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_PlayerKill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_PlayerKill.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_PlayerKill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_PlayerKill.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_PlayerKill) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_PlayerKill.Size(m)
}
func (m *CDOTAMatchMetadata_Team_PlayerKill) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_PlayerKill.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_PlayerKill proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_PlayerKill) GetVictimSlot() uint32 {
	if m != nil && m.VictimSlot != nil {
		return *m.VictimSlot
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_PlayerKill) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CDOTAMatchMetadata_Team_ItemPurchase struct {
	ItemId               *uint32  `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	PurchaseTime         *int32   `protobuf:"varint,2,opt,name=purchase_time,json=purchaseTime" json:"purchase_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_ItemPurchase) Reset()         { *m = CDOTAMatchMetadata_Team_ItemPurchase{} }
func (m *CDOTAMatchMetadata_Team_ItemPurchase) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata_Team_ItemPurchase) ProtoMessage()    {}
func (*CDOTAMatchMetadata_Team_ItemPurchase) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 1}
}

func (m *CDOTAMatchMetadata_Team_ItemPurchase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_ItemPurchase.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_ItemPurchase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_ItemPurchase.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_ItemPurchase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_ItemPurchase.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_ItemPurchase) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_ItemPurchase.Size(m)
}
func (m *CDOTAMatchMetadata_Team_ItemPurchase) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_ItemPurchase.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_ItemPurchase proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_ItemPurchase) GetItemId() uint32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_ItemPurchase) GetPurchaseTime() int32 {
	if m != nil && m.PurchaseTime != nil {
		return *m.PurchaseTime
	}
	return 0
}

type CDOTAMatchMetadata_Team_InventorySnapshot struct {
	ItemId               []uint32 `protobuf:"varint,1,rep,name=item_id,json=itemId" json:"item_id,omitempty"`
	GameTime             *int32   `protobuf:"varint,2,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	Kills                *uint32  `protobuf:"varint,3,opt,name=kills" json:"kills,omitempty"`
	Deaths               *uint32  `protobuf:"varint,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists              *uint32  `protobuf:"varint,5,opt,name=assists" json:"assists,omitempty"`
	Level                *uint32  `protobuf:"varint,6,opt,name=level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_InventorySnapshot) Reset() {
	*m = CDOTAMatchMetadata_Team_InventorySnapshot{}
}
func (m *CDOTAMatchMetadata_Team_InventorySnapshot) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchMetadata_Team_InventorySnapshot) ProtoMessage() {}
func (*CDOTAMatchMetadata_Team_InventorySnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 2}
}

func (m *CDOTAMatchMetadata_Team_InventorySnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_InventorySnapshot.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_InventorySnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_InventorySnapshot.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_InventorySnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_InventorySnapshot.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_InventorySnapshot) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_InventorySnapshot.Size(m)
}
func (m *CDOTAMatchMetadata_Team_InventorySnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_InventorySnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_InventorySnapshot proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_InventorySnapshot) GetItemId() []uint32 {
	if m != nil {
		return m.ItemId
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_InventorySnapshot) GetGameTime() int32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_InventorySnapshot) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_InventorySnapshot) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_InventorySnapshot) GetAssists() uint32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_InventorySnapshot) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

type CDOTAMatchMetadata_Team_AutoStyleCriteria struct {
	NameToken            *uint32  `protobuf:"varint,1,opt,name=name_token,json=nameToken" json:"name_token,omitempty"`
	Value                *float32 `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_AutoStyleCriteria) Reset() {
	*m = CDOTAMatchMetadata_Team_AutoStyleCriteria{}
}
func (m *CDOTAMatchMetadata_Team_AutoStyleCriteria) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchMetadata_Team_AutoStyleCriteria) ProtoMessage() {}
func (*CDOTAMatchMetadata_Team_AutoStyleCriteria) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 3}
}

func (m *CDOTAMatchMetadata_Team_AutoStyleCriteria) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_AutoStyleCriteria.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_AutoStyleCriteria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_AutoStyleCriteria.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_AutoStyleCriteria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_AutoStyleCriteria.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_AutoStyleCriteria) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_AutoStyleCriteria.Size(m)
}
func (m *CDOTAMatchMetadata_Team_AutoStyleCriteria) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_AutoStyleCriteria.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_AutoStyleCriteria proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_AutoStyleCriteria) GetNameToken() uint32 {
	if m != nil && m.NameToken != nil {
		return *m.NameToken
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_AutoStyleCriteria) GetValue() float32 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

type CDOTAMatchMetadata_Team_StrangeGemProgress struct {
	KillEaterType        *uint32  `protobuf:"varint,1,opt,name=kill_eater_type,json=killEaterType" json:"kill_eater_type,omitempty"`
	GemItemDefIndex      *uint32  `protobuf:"varint,2,opt,name=gem_item_def_index,json=gemItemDefIndex" json:"gem_item_def_index,omitempty"`
	RequiredHeroId       *uint32  `protobuf:"varint,3,opt,name=required_hero_id,json=requiredHeroId" json:"required_hero_id,omitempty"`
	StartingValue        *uint32  `protobuf:"varint,4,opt,name=starting_value,json=startingValue" json:"starting_value,omitempty"`
	EndingValue          *uint32  `protobuf:"varint,5,opt,name=ending_value,json=endingValue" json:"ending_value,omitempty"`
	OwnerItemDefIndex    *uint32  `protobuf:"varint,6,opt,name=owner_item_def_index,json=ownerItemDefIndex" json:"owner_item_def_index,omitempty"`
	OwnerItemId          *uint64  `protobuf:"varint,7,opt,name=owner_item_id,json=ownerItemId" json:"owner_item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) Reset() {
	*m = CDOTAMatchMetadata_Team_StrangeGemProgress{}
}
func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchMetadata_Team_StrangeGemProgress) ProtoMessage() {}
func (*CDOTAMatchMetadata_Team_StrangeGemProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 4}
}

func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_StrangeGemProgress.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_StrangeGemProgress.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_StrangeGemProgress.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_StrangeGemProgress.Size(m)
}
func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_StrangeGemProgress.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_StrangeGemProgress proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) GetKillEaterType() uint32 {
	if m != nil && m.KillEaterType != nil {
		return *m.KillEaterType
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) GetGemItemDefIndex() uint32 {
	if m != nil && m.GemItemDefIndex != nil {
		return *m.GemItemDefIndex
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) GetRequiredHeroId() uint32 {
	if m != nil && m.RequiredHeroId != nil {
		return *m.RequiredHeroId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) GetStartingValue() uint32 {
	if m != nil && m.StartingValue != nil {
		return *m.StartingValue
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) GetEndingValue() uint32 {
	if m != nil && m.EndingValue != nil {
		return *m.EndingValue
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) GetOwnerItemDefIndex() uint32 {
	if m != nil && m.OwnerItemDefIndex != nil {
		return *m.OwnerItemDefIndex
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_StrangeGemProgress) GetOwnerItemId() uint64 {
	if m != nil && m.OwnerItemId != nil {
		return *m.OwnerItemId
	}
	return 0
}

type CDOTAMatchMetadata_Team_VictoryPrediction struct {
	ItemId               *uint64  `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	ItemDefIndex         *uint32  `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	StartingValue        *uint32  `protobuf:"varint,3,opt,name=starting_value,json=startingValue" json:"starting_value,omitempty"`
	IsVictory            *bool    `protobuf:"varint,4,opt,name=is_victory,json=isVictory" json:"is_victory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_VictoryPrediction) Reset() {
	*m = CDOTAMatchMetadata_Team_VictoryPrediction{}
}
func (m *CDOTAMatchMetadata_Team_VictoryPrediction) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchMetadata_Team_VictoryPrediction) ProtoMessage() {}
func (*CDOTAMatchMetadata_Team_VictoryPrediction) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 5}
}

func (m *CDOTAMatchMetadata_Team_VictoryPrediction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_VictoryPrediction.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_VictoryPrediction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_VictoryPrediction.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_VictoryPrediction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_VictoryPrediction.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_VictoryPrediction) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_VictoryPrediction.Size(m)
}
func (m *CDOTAMatchMetadata_Team_VictoryPrediction) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_VictoryPrediction.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_VictoryPrediction proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_VictoryPrediction) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_VictoryPrediction) GetItemDefIndex() uint32 {
	if m != nil && m.ItemDefIndex != nil {
		return *m.ItemDefIndex
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_VictoryPrediction) GetStartingValue() uint32 {
	if m != nil && m.StartingValue != nil {
		return *m.StartingValue
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_VictoryPrediction) GetIsVictory() bool {
	if m != nil && m.IsVictory != nil {
		return *m.IsVictory
	}
	return false
}

type CDOTAMatchMetadata_Team_SubChallenge struct {
	SlotId               *uint32  `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	StartValue           *uint32  `protobuf:"varint,2,opt,name=start_value,json=startValue" json:"start_value,omitempty"`
	EndValue             *uint32  `protobuf:"varint,3,opt,name=end_value,json=endValue" json:"end_value,omitempty"`
	Completed            *bool    `protobuf:"varint,4,opt,name=completed" json:"completed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_SubChallenge) Reset()         { *m = CDOTAMatchMetadata_Team_SubChallenge{} }
func (m *CDOTAMatchMetadata_Team_SubChallenge) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata_Team_SubChallenge) ProtoMessage()    {}
func (*CDOTAMatchMetadata_Team_SubChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 6}
}

func (m *CDOTAMatchMetadata_Team_SubChallenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_SubChallenge.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_SubChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_SubChallenge.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_SubChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_SubChallenge.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_SubChallenge) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_SubChallenge.Size(m)
}
func (m *CDOTAMatchMetadata_Team_SubChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_SubChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_SubChallenge proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_SubChallenge) GetSlotId() uint32 {
	if m != nil && m.SlotId != nil {
		return *m.SlotId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_SubChallenge) GetStartValue() uint32 {
	if m != nil && m.StartValue != nil {
		return *m.StartValue
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_SubChallenge) GetEndValue() uint32 {
	if m != nil && m.EndValue != nil {
		return *m.EndValue
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_SubChallenge) GetCompleted() bool {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return false
}

type CDOTAMatchMetadata_Team_CavernChallengeResult struct {
	CompletedPathId      *uint32  `protobuf:"varint,1,opt,name=completed_path_id,json=completedPathId" json:"completed_path_id,omitempty"`
	ClaimedRoomId        *uint32  `protobuf:"varint,2,opt,name=claimed_room_id,json=claimedRoomId" json:"claimed_room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_CavernChallengeResult) Reset() {
	*m = CDOTAMatchMetadata_Team_CavernChallengeResult{}
}
func (m *CDOTAMatchMetadata_Team_CavernChallengeResult) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchMetadata_Team_CavernChallengeResult) ProtoMessage() {}
func (*CDOTAMatchMetadata_Team_CavernChallengeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 7}
}

func (m *CDOTAMatchMetadata_Team_CavernChallengeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_CavernChallengeResult.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_CavernChallengeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_CavernChallengeResult.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_CavernChallengeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_CavernChallengeResult.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_CavernChallengeResult) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_CavernChallengeResult.Size(m)
}
func (m *CDOTAMatchMetadata_Team_CavernChallengeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_CavernChallengeResult.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_CavernChallengeResult proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_CavernChallengeResult) GetCompletedPathId() uint32 {
	if m != nil && m.CompletedPathId != nil {
		return *m.CompletedPathId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_CavernChallengeResult) GetClaimedRoomId() uint32 {
	if m != nil && m.ClaimedRoomId != nil {
		return *m.ClaimedRoomId
	}
	return 0
}

type CDOTAMatchMetadata_Team_ActionGrant struct {
	ActionId             *uint32  `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	Quantity             *uint32  `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	Audit                *uint32  `protobuf:"varint,3,opt,name=audit" json:"audit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_ActionGrant) Reset()         { *m = CDOTAMatchMetadata_Team_ActionGrant{} }
func (m *CDOTAMatchMetadata_Team_ActionGrant) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata_Team_ActionGrant) ProtoMessage()    {}
func (*CDOTAMatchMetadata_Team_ActionGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 8}
}

func (m *CDOTAMatchMetadata_Team_ActionGrant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_ActionGrant.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_ActionGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_ActionGrant.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_ActionGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_ActionGrant.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_ActionGrant) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_ActionGrant.Size(m)
}
func (m *CDOTAMatchMetadata_Team_ActionGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_ActionGrant.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_ActionGrant proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_ActionGrant) GetActionId() uint32 {
	if m != nil && m.ActionId != nil {
		return *m.ActionId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_ActionGrant) GetQuantity() uint32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_ActionGrant) GetAudit() uint32 {
	if m != nil && m.Audit != nil {
		return *m.Audit
	}
	return 0
}

type CDOTAMatchMetadata_Team_CandyGrant struct {
	Points               *uint32  `protobuf:"varint,1,opt,name=points" json:"points,omitempty"`
	Reason               *uint32  `protobuf:"varint,2,opt,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_CandyGrant) Reset()         { *m = CDOTAMatchMetadata_Team_CandyGrant{} }
func (m *CDOTAMatchMetadata_Team_CandyGrant) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata_Team_CandyGrant) ProtoMessage()    {}
func (*CDOTAMatchMetadata_Team_CandyGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 9}
}

func (m *CDOTAMatchMetadata_Team_CandyGrant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_CandyGrant.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_CandyGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_CandyGrant.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_CandyGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_CandyGrant.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_CandyGrant) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_CandyGrant.Size(m)
}
func (m *CDOTAMatchMetadata_Team_CandyGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_CandyGrant.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_CandyGrant proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_CandyGrant) GetPoints() uint32 {
	if m != nil && m.Points != nil {
		return *m.Points
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_CandyGrant) GetReason() uint32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

type CDOTAMatchMetadata_Team_EventData struct {
	EventId                          *uint32                                          `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	EventPoints                      *uint32                                          `protobuf:"varint,2,opt,name=event_points,json=eventPoints" json:"event_points,omitempty"`
	ChallengeInstanceId              *uint32                                          `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeQuestId                 *uint32                                          `protobuf:"varint,4,opt,name=challenge_quest_id,json=challengeQuestId" json:"challenge_quest_id,omitempty"`
	ChallengeQuestChallengeId        *uint32                                          `protobuf:"varint,5,opt,name=challenge_quest_challenge_id,json=challengeQuestChallengeId" json:"challenge_quest_challenge_id,omitempty"`
	ChallengeCompleted               *bool                                            `protobuf:"varint,6,opt,name=challenge_completed,json=challengeCompleted" json:"challenge_completed,omitempty"`
	ChallengeRankCompleted           *uint32                                          `protobuf:"varint,7,opt,name=challenge_rank_completed,json=challengeRankCompleted" json:"challenge_rank_completed,omitempty"`
	ChallengeRankPreviouslyCompleted *uint32                                          `protobuf:"varint,8,opt,name=challenge_rank_previously_completed,json=challengeRankPreviouslyCompleted" json:"challenge_rank_previously_completed,omitempty"`
	EventOwned                       *bool                                            `protobuf:"varint,9,opt,name=event_owned,json=eventOwned" json:"event_owned,omitempty"`
	SubChallengesWithProgress        []*CDOTAMatchMetadata_Team_SubChallenge          `protobuf:"bytes,10,rep,name=sub_challenges_with_progress,json=subChallengesWithProgress" json:"sub_challenges_with_progress,omitempty"`
	WagerWinnings                    *uint32                                          `protobuf:"varint,11,opt,name=wager_winnings,json=wagerWinnings" json:"wager_winnings,omitempty"`
	CavernChallengeActive            *bool                                            `protobuf:"varint,12,opt,name=cavern_challenge_active,json=cavernChallengeActive" json:"cavern_challenge_active,omitempty"`
	CavernChallengeWinnings          *uint32                                          `protobuf:"varint,13,opt,name=cavern_challenge_winnings,json=cavernChallengeWinnings" json:"cavern_challenge_winnings,omitempty"`
	AmountWagered                    *uint32                                          `protobuf:"varint,14,opt,name=amount_wagered,json=amountWagered" json:"amount_wagered,omitempty"`
	PeriodicPointAdjustments         *uint32                                          `protobuf:"varint,16,opt,name=periodic_point_adjustments,json=periodicPointAdjustments" json:"periodic_point_adjustments,omitempty"`
	CavernChallengeMapResults        []*CDOTAMatchMetadata_Team_CavernChallengeResult `protobuf:"bytes,17,rep,name=cavern_challenge_map_results,json=cavernChallengeMapResults" json:"cavern_challenge_map_results,omitempty"`
	CavernChallengePlusShardWinnings *uint32                                          `protobuf:"varint,18,opt,name=cavern_challenge_plus_shard_winnings,json=cavernChallengePlusShardWinnings" json:"cavern_challenge_plus_shard_winnings,omitempty"`
	ActionsGranted                   []*CDOTAMatchMetadata_Team_ActionGrant           `protobuf:"bytes,19,rep,name=actions_granted,json=actionsGranted" json:"actions_granted,omitempty"`
	CavernCrawlMapVariant            *uint32                                          `protobuf:"varint,20,opt,name=cavern_crawl_map_variant,json=cavernCrawlMapVariant" json:"cavern_crawl_map_variant,omitempty"`
	TeamWagerBonusPct                *uint32                                          `protobuf:"varint,21,opt,name=team_wager_bonus_pct,json=teamWagerBonusPct" json:"team_wager_bonus_pct,omitempty"`
	WagerStreakPct                   *uint32                                          `protobuf:"varint,22,opt,name=wager_streak_pct,json=wagerStreakPct" json:"wager_streak_pct,omitempty"`
	CandyPointsGranted               []*CDOTAMatchMetadata_Team_CandyGrant            `protobuf:"bytes,23,rep,name=candy_points_granted,json=candyPointsGranted" json:"candy_points_granted,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}                                         `json:"-"`
	XXX_unrecognized                 []byte                                           `json:"-"`
	XXX_sizecache                    int32                                            `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_EventData) Reset()         { *m = CDOTAMatchMetadata_Team_EventData{} }
func (m *CDOTAMatchMetadata_Team_EventData) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata_Team_EventData) ProtoMessage()    {}
func (*CDOTAMatchMetadata_Team_EventData) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 10}
}

func (m *CDOTAMatchMetadata_Team_EventData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_EventData.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_EventData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_EventData.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_EventData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_EventData.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_EventData) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_EventData.Size(m)
}
func (m *CDOTAMatchMetadata_Team_EventData) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_EventData.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_EventData proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_EventData) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetEventPoints() uint32 {
	if m != nil && m.EventPoints != nil {
		return *m.EventPoints
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetChallengeInstanceId() uint32 {
	if m != nil && m.ChallengeInstanceId != nil {
		return *m.ChallengeInstanceId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetChallengeQuestId() uint32 {
	if m != nil && m.ChallengeQuestId != nil {
		return *m.ChallengeQuestId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetChallengeQuestChallengeId() uint32 {
	if m != nil && m.ChallengeQuestChallengeId != nil {
		return *m.ChallengeQuestChallengeId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetChallengeCompleted() bool {
	if m != nil && m.ChallengeCompleted != nil {
		return *m.ChallengeCompleted
	}
	return false
}

func (m *CDOTAMatchMetadata_Team_EventData) GetChallengeRankCompleted() uint32 {
	if m != nil && m.ChallengeRankCompleted != nil {
		return *m.ChallengeRankCompleted
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetChallengeRankPreviouslyCompleted() uint32 {
	if m != nil && m.ChallengeRankPreviouslyCompleted != nil {
		return *m.ChallengeRankPreviouslyCompleted
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetEventOwned() bool {
	if m != nil && m.EventOwned != nil {
		return *m.EventOwned
	}
	return false
}

func (m *CDOTAMatchMetadata_Team_EventData) GetSubChallengesWithProgress() []*CDOTAMatchMetadata_Team_SubChallenge {
	if m != nil {
		return m.SubChallengesWithProgress
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_EventData) GetWagerWinnings() uint32 {
	if m != nil && m.WagerWinnings != nil {
		return *m.WagerWinnings
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetCavernChallengeActive() bool {
	if m != nil && m.CavernChallengeActive != nil {
		return *m.CavernChallengeActive
	}
	return false
}

func (m *CDOTAMatchMetadata_Team_EventData) GetCavernChallengeWinnings() uint32 {
	if m != nil && m.CavernChallengeWinnings != nil {
		return *m.CavernChallengeWinnings
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetAmountWagered() uint32 {
	if m != nil && m.AmountWagered != nil {
		return *m.AmountWagered
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetPeriodicPointAdjustments() uint32 {
	if m != nil && m.PeriodicPointAdjustments != nil {
		return *m.PeriodicPointAdjustments
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetCavernChallengeMapResults() []*CDOTAMatchMetadata_Team_CavernChallengeResult {
	if m != nil {
		return m.CavernChallengeMapResults
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_EventData) GetCavernChallengePlusShardWinnings() uint32 {
	if m != nil && m.CavernChallengePlusShardWinnings != nil {
		return *m.CavernChallengePlusShardWinnings
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetActionsGranted() []*CDOTAMatchMetadata_Team_ActionGrant {
	if m != nil {
		return m.ActionsGranted
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_EventData) GetCavernCrawlMapVariant() uint32 {
	if m != nil && m.CavernCrawlMapVariant != nil {
		return *m.CavernCrawlMapVariant
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetTeamWagerBonusPct() uint32 {
	if m != nil && m.TeamWagerBonusPct != nil {
		return *m.TeamWagerBonusPct
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetWagerStreakPct() uint32 {
	if m != nil && m.WagerStreakPct != nil {
		return *m.WagerStreakPct
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_EventData) GetCandyPointsGranted() []*CDOTAMatchMetadata_Team_CandyGrant {
	if m != nil {
		return m.CandyPointsGranted
	}
	return nil
}

type CDOTAMatchMetadata_Team_GauntletProgress struct {
	GauntletTier         *uint32  `protobuf:"varint,2,opt,name=gauntlet_tier,json=gauntletTier" json:"gauntlet_tier,omitempty"`
	GauntletWins         *uint32  `protobuf:"varint,3,opt,name=gauntlet_wins,json=gauntletWins" json:"gauntlet_wins,omitempty"`
	GauntletLosses       *uint32  `protobuf:"varint,4,opt,name=gauntlet_losses,json=gauntletLosses" json:"gauntlet_losses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_GauntletProgress) Reset() {
	*m = CDOTAMatchMetadata_Team_GauntletProgress{}
}
func (m *CDOTAMatchMetadata_Team_GauntletProgress) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata_Team_GauntletProgress) ProtoMessage()    {}
func (*CDOTAMatchMetadata_Team_GauntletProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 11}
}

func (m *CDOTAMatchMetadata_Team_GauntletProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_GauntletProgress.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_GauntletProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_GauntletProgress.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_GauntletProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_GauntletProgress.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_GauntletProgress) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_GauntletProgress.Size(m)
}
func (m *CDOTAMatchMetadata_Team_GauntletProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_GauntletProgress.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_GauntletProgress proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_GauntletProgress) GetGauntletTier() uint32 {
	if m != nil && m.GauntletTier != nil {
		return *m.GauntletTier
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_GauntletProgress) GetGauntletWins() uint32 {
	if m != nil && m.GauntletWins != nil {
		return *m.GauntletWins
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_GauntletProgress) GetGauntletLosses() uint32 {
	if m != nil && m.GauntletLosses != nil {
		return *m.GauntletLosses
	}
	return 0
}

type CDOTAMatchMetadata_Team_Player struct {
	AccountId            *uint32                                            `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	AbilityUpgrades      []uint32                                           `protobuf:"varint,2,rep,name=ability_upgrades,json=abilityUpgrades" json:"ability_upgrades,omitempty"`
	PlayerSlot           *uint32                                            `protobuf:"varint,3,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	EquippedEconItems    []*CSOEconItem                                     `protobuf:"bytes,4,rep,name=equipped_econ_items,json=equippedEconItems" json:"equipped_econ_items,omitempty"`
	Kills                []*CDOTAMatchMetadata_Team_PlayerKill              `protobuf:"bytes,5,rep,name=kills" json:"kills,omitempty"`
	Items                []*CDOTAMatchMetadata_Team_ItemPurchase            `protobuf:"bytes,6,rep,name=items" json:"items,omitempty"`
	AvgKillsX16          *uint32                                            `protobuf:"varint,7,opt,name=avg_kills_x16,json=avgKillsX16" json:"avg_kills_x16,omitempty"`
	AvgDeathsX16         *uint32                                            `protobuf:"varint,8,opt,name=avg_deaths_x16,json=avgDeathsX16" json:"avg_deaths_x16,omitempty"`
	AvgAssistsX16        *uint32                                            `protobuf:"varint,9,opt,name=avg_assists_x16,json=avgAssistsX16" json:"avg_assists_x16,omitempty"`
	AvgGpmX16            *uint32                                            `protobuf:"varint,10,opt,name=avg_gpm_x16,json=avgGpmX16" json:"avg_gpm_x16,omitempty"`
	AvgXpmX16            *uint32                                            `protobuf:"varint,11,opt,name=avg_xpm_x16,json=avgXpmX16" json:"avg_xpm_x16,omitempty"`
	BestKillsX16         *uint32                                            `protobuf:"varint,12,opt,name=best_kills_x16,json=bestKillsX16" json:"best_kills_x16,omitempty"`
	BestAssistsX16       *uint32                                            `protobuf:"varint,13,opt,name=best_assists_x16,json=bestAssistsX16" json:"best_assists_x16,omitempty"`
	BestGpmX16           *uint32                                            `protobuf:"varint,14,opt,name=best_gpm_x16,json=bestGpmX16" json:"best_gpm_x16,omitempty"`
	BestXpmX16           *uint32                                            `protobuf:"varint,15,opt,name=best_xpm_x16,json=bestXpmX16" json:"best_xpm_x16,omitempty"`
	WinStreak            *uint32                                            `protobuf:"varint,16,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	BestWinStreak        *uint32                                            `protobuf:"varint,17,opt,name=best_win_streak,json=bestWinStreak" json:"best_win_streak,omitempty"`
	FightScore           *float32                                           `protobuf:"fixed32,18,opt,name=fight_score,json=fightScore" json:"fight_score,omitempty"`
	FarmScore            *float32                                           `protobuf:"fixed32,19,opt,name=farm_score,json=farmScore" json:"farm_score,omitempty"`
	SupportScore         *float32                                           `protobuf:"fixed32,20,opt,name=support_score,json=supportScore" json:"support_score,omitempty"`
	PushScore            *float32                                           `protobuf:"fixed32,21,opt,name=push_score,json=pushScore" json:"push_score,omitempty"`
	LevelUpTimes         []uint32                                           `protobuf:"varint,22,rep,name=level_up_times,json=levelUpTimes" json:"level_up_times,omitempty"`
	GraphNetWorth        []float32                                          `protobuf:"fixed32,23,rep,name=graph_net_worth,json=graphNetWorth" json:"graph_net_worth,omitempty"`
	InventorySnapshot    []*CDOTAMatchMetadata_Team_InventorySnapshot       `protobuf:"bytes,24,rep,name=inventory_snapshot,json=inventorySnapshot" json:"inventory_snapshot,omitempty"`
	AvgStatsCalibrated   *bool                                              `protobuf:"varint,25,opt,name=avg_stats_calibrated,json=avgStatsCalibrated" json:"avg_stats_calibrated,omitempty"`
	AutoStyleCriteria    []*CDOTAMatchMetadata_Team_AutoStyleCriteria       `protobuf:"bytes,26,rep,name=auto_style_criteria,json=autoStyleCriteria" json:"auto_style_criteria,omitempty"`
	EventData            []*CDOTAMatchMetadata_Team_EventData               `protobuf:"bytes,29,rep,name=event_data,json=eventData" json:"event_data,omitempty"`
	StrangeGemProgress   []*CDOTAMatchMetadata_Team_StrangeGemProgress      `protobuf:"bytes,30,rep,name=strange_gem_progress,json=strangeGemProgress" json:"strange_gem_progress,omitempty"`
	HeroXp               *uint32                                            `protobuf:"varint,31,opt,name=hero_xp,json=heroXp" json:"hero_xp,omitempty"`
	CampsStacked         *uint32                                            `protobuf:"varint,32,opt,name=camps_stacked,json=campsStacked" json:"camps_stacked,omitempty"`
	VictoryPrediction    []*CDOTAMatchMetadata_Team_VictoryPrediction       `protobuf:"bytes,33,rep,name=victory_prediction,json=victoryPrediction" json:"victory_prediction,omitempty"`
	LaneSelectionFlags   *uint32                                            `protobuf:"varint,34,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	Rampages             *uint32                                            `protobuf:"varint,35,opt,name=rampages" json:"rampages,omitempty"`
	TripleKills          *uint32                                            `protobuf:"varint,36,opt,name=triple_kills,json=tripleKills" json:"triple_kills,omitempty"`
	AegisSnatched        *uint32                                            `protobuf:"varint,37,opt,name=aegis_snatched,json=aegisSnatched" json:"aegis_snatched,omitempty"`
	RapiersPurchased     *uint32                                            `protobuf:"varint,38,opt,name=rapiers_purchased,json=rapiersPurchased" json:"rapiers_purchased,omitempty"`
	CouriersKilled       *uint32                                            `protobuf:"varint,39,opt,name=couriers_killed,json=couriersKilled" json:"couriers_killed,omitempty"`
	NetWorthRank         *uint32                                            `protobuf:"varint,40,opt,name=net_worth_rank,json=netWorthRank" json:"net_worth_rank,omitempty"`
	SupportGoldSpent     *uint32                                            `protobuf:"varint,41,opt,name=support_gold_spent,json=supportGoldSpent" json:"support_gold_spent,omitempty"`
	ObserverWardsPlaced  *uint32                                            `protobuf:"varint,42,opt,name=observer_wards_placed,json=observerWardsPlaced" json:"observer_wards_placed,omitempty"`
	SentryWardsPlaced    *uint32                                            `protobuf:"varint,43,opt,name=sentry_wards_placed,json=sentryWardsPlaced" json:"sentry_wards_placed,omitempty"`
	WardsDewarded        *uint32                                            `protobuf:"varint,44,opt,name=wards_dewarded,json=wardsDewarded" json:"wards_dewarded,omitempty"`
	StunDuration         *float32                                           `protobuf:"fixed32,45,opt,name=stun_duration,json=stunDuration" json:"stun_duration,omitempty"`
	RankMmrBoostType     *EDOTAMMRBoostType                                 `protobuf:"varint,46,opt,name=rank_mmr_boost_type,json=rankMmrBoostType,enum=dota.EDOTAMMRBoostType,def=0" json:"rank_mmr_boost_type,omitempty"`
	GauntletProgress     *CDOTAMatchMetadata_Team_GauntletProgress          `protobuf:"bytes,47,opt,name=gauntlet_progress,json=gauntletProgress" json:"gauntlet_progress,omitempty"`
	ContractProgress     []*CDOTAMatchMetadata_Team_Player_ContractProgress `protobuf:"bytes,48,rep,name=contract_progress,json=contractProgress" json:"contract_progress,omitempty"`
	GuildIds             []uint32                                           `protobuf:"varint,49,rep,name=guild_ids,json=guildIds" json:"guild_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_Player) Reset()         { *m = CDOTAMatchMetadata_Team_Player{} }
func (m *CDOTAMatchMetadata_Team_Player) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchMetadata_Team_Player) ProtoMessage()    {}
func (*CDOTAMatchMetadata_Team_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 12}
}

func (m *CDOTAMatchMetadata_Team_Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_Player.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_Player.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_Player.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_Player) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_Player.Size(m)
}
func (m *CDOTAMatchMetadata_Team_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_Player.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_Player proto.InternalMessageInfo

const Default_CDOTAMatchMetadata_Team_Player_RankMmrBoostType EDOTAMMRBoostType = EDOTAMMRBoostType_k_EDOTAMMRBoostType_None

func (m *CDOTAMatchMetadata_Team_Player) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetAbilityUpgrades() []uint32 {
	if m != nil {
		return m.AbilityUpgrades
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetPlayerSlot() uint32 {
	if m != nil && m.PlayerSlot != nil {
		return *m.PlayerSlot
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetEquippedEconItems() []*CSOEconItem {
	if m != nil {
		return m.EquippedEconItems
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetKills() []*CDOTAMatchMetadata_Team_PlayerKill {
	if m != nil {
		return m.Kills
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetItems() []*CDOTAMatchMetadata_Team_ItemPurchase {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetAvgKillsX16() uint32 {
	if m != nil && m.AvgKillsX16 != nil {
		return *m.AvgKillsX16
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetAvgDeathsX16() uint32 {
	if m != nil && m.AvgDeathsX16 != nil {
		return *m.AvgDeathsX16
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetAvgAssistsX16() uint32 {
	if m != nil && m.AvgAssistsX16 != nil {
		return *m.AvgAssistsX16
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetAvgGpmX16() uint32 {
	if m != nil && m.AvgGpmX16 != nil {
		return *m.AvgGpmX16
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetAvgXpmX16() uint32 {
	if m != nil && m.AvgXpmX16 != nil {
		return *m.AvgXpmX16
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetBestKillsX16() uint32 {
	if m != nil && m.BestKillsX16 != nil {
		return *m.BestKillsX16
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetBestAssistsX16() uint32 {
	if m != nil && m.BestAssistsX16 != nil {
		return *m.BestAssistsX16
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetBestGpmX16() uint32 {
	if m != nil && m.BestGpmX16 != nil {
		return *m.BestGpmX16
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetBestXpmX16() uint32 {
	if m != nil && m.BestXpmX16 != nil {
		return *m.BestXpmX16
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetWinStreak() uint32 {
	if m != nil && m.WinStreak != nil {
		return *m.WinStreak
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetBestWinStreak() uint32 {
	if m != nil && m.BestWinStreak != nil {
		return *m.BestWinStreak
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetFightScore() float32 {
	if m != nil && m.FightScore != nil {
		return *m.FightScore
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetFarmScore() float32 {
	if m != nil && m.FarmScore != nil {
		return *m.FarmScore
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetSupportScore() float32 {
	if m != nil && m.SupportScore != nil {
		return *m.SupportScore
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetPushScore() float32 {
	if m != nil && m.PushScore != nil {
		return *m.PushScore
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetLevelUpTimes() []uint32 {
	if m != nil {
		return m.LevelUpTimes
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetGraphNetWorth() []float32 {
	if m != nil {
		return m.GraphNetWorth
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetInventorySnapshot() []*CDOTAMatchMetadata_Team_InventorySnapshot {
	if m != nil {
		return m.InventorySnapshot
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetAvgStatsCalibrated() bool {
	if m != nil && m.AvgStatsCalibrated != nil {
		return *m.AvgStatsCalibrated
	}
	return false
}

func (m *CDOTAMatchMetadata_Team_Player) GetAutoStyleCriteria() []*CDOTAMatchMetadata_Team_AutoStyleCriteria {
	if m != nil {
		return m.AutoStyleCriteria
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetEventData() []*CDOTAMatchMetadata_Team_EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetStrangeGemProgress() []*CDOTAMatchMetadata_Team_StrangeGemProgress {
	if m != nil {
		return m.StrangeGemProgress
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetHeroXp() uint32 {
	if m != nil && m.HeroXp != nil {
		return *m.HeroXp
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetCampsStacked() uint32 {
	if m != nil && m.CampsStacked != nil {
		return *m.CampsStacked
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetVictoryPrediction() []*CDOTAMatchMetadata_Team_VictoryPrediction {
	if m != nil {
		return m.VictoryPrediction
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetLaneSelectionFlags() uint32 {
	if m != nil && m.LaneSelectionFlags != nil {
		return *m.LaneSelectionFlags
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetRampages() uint32 {
	if m != nil && m.Rampages != nil {
		return *m.Rampages
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetTripleKills() uint32 {
	if m != nil && m.TripleKills != nil {
		return *m.TripleKills
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetAegisSnatched() uint32 {
	if m != nil && m.AegisSnatched != nil {
		return *m.AegisSnatched
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetRapiersPurchased() uint32 {
	if m != nil && m.RapiersPurchased != nil {
		return *m.RapiersPurchased
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetCouriersKilled() uint32 {
	if m != nil && m.CouriersKilled != nil {
		return *m.CouriersKilled
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetNetWorthRank() uint32 {
	if m != nil && m.NetWorthRank != nil {
		return *m.NetWorthRank
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetSupportGoldSpent() uint32 {
	if m != nil && m.SupportGoldSpent != nil {
		return *m.SupportGoldSpent
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetObserverWardsPlaced() uint32 {
	if m != nil && m.ObserverWardsPlaced != nil {
		return *m.ObserverWardsPlaced
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetSentryWardsPlaced() uint32 {
	if m != nil && m.SentryWardsPlaced != nil {
		return *m.SentryWardsPlaced
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetWardsDewarded() uint32 {
	if m != nil && m.WardsDewarded != nil {
		return *m.WardsDewarded
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetStunDuration() float32 {
	if m != nil && m.StunDuration != nil {
		return *m.StunDuration
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player) GetRankMmrBoostType() EDOTAMMRBoostType {
	if m != nil && m.RankMmrBoostType != nil {
		return *m.RankMmrBoostType
	}
	return Default_CDOTAMatchMetadata_Team_Player_RankMmrBoostType
}

func (m *CDOTAMatchMetadata_Team_Player) GetGauntletProgress() *CDOTAMatchMetadata_Team_GauntletProgress {
	if m != nil {
		return m.GauntletProgress
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetContractProgress() []*CDOTAMatchMetadata_Team_Player_ContractProgress {
	if m != nil {
		return m.ContractProgress
	}
	return nil
}

func (m *CDOTAMatchMetadata_Team_Player) GetGuildIds() []uint32 {
	if m != nil {
		return m.GuildIds
	}
	return nil
}

type CDOTAMatchMetadata_Team_Player_ContractProgress struct {
	GuildId              *uint32  `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId              *uint32  `protobuf:"varint,2,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	ChallengeInstanceId  *uint32  `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter   *uint32  `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ContractStars        *uint32  `protobuf:"varint,5,opt,name=contract_stars,json=contractStars" json:"contract_stars,omitempty"`
	ContractSlot         *uint32  `protobuf:"varint,6,opt,name=contract_slot,json=contractSlot" json:"contract_slot,omitempty"`
	Completed            *bool    `protobuf:"varint,7,opt,name=completed" json:"completed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) Reset() {
	*m = CDOTAMatchMetadata_Team_Player_ContractProgress{}
}
func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchMetadata_Team_Player_ContractProgress) ProtoMessage() {}
func (*CDOTAMatchMetadata_Team_Player_ContractProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 0, 12, 0}
}

func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_Player_ContractProgress.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_Player_ContractProgress.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_Team_Player_ContractProgress.Merge(m, src)
}
func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_Team_Player_ContractProgress.Size(m)
}
func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_Team_Player_ContractProgress.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_Team_Player_ContractProgress proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) GetEventId() uint32 {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) GetChallengeInstanceId() uint32 {
	if m != nil && m.ChallengeInstanceId != nil {
		return *m.ChallengeInstanceId
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) GetChallengeParameter() uint32 {
	if m != nil && m.ChallengeParameter != nil {
		return *m.ChallengeParameter
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) GetContractStars() uint32 {
	if m != nil && m.ContractStars != nil {
		return *m.ContractStars
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) GetContractSlot() uint32 {
	if m != nil && m.ContractSlot != nil {
		return *m.ContractSlot
	}
	return 0
}

func (m *CDOTAMatchMetadata_Team_Player_ContractProgress) GetCompleted() bool {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return false
}

type CDOTAMatchMetadata_GuildChallengeProgress struct {
	GuildId                      *uint32                                                         `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId                      *EEvent                                                         `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	ChallengeInstanceId          *uint32                                                         `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter           *uint32                                                         `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ChallengeTimestamp           *uint32                                                         `protobuf:"varint,5,opt,name=challenge_timestamp,json=challengeTimestamp" json:"challenge_timestamp,omitempty"`
	ChallengeProgressAtStart     *uint32                                                         `protobuf:"varint,6,opt,name=challenge_progress_at_start,json=challengeProgressAtStart" json:"challenge_progress_at_start,omitempty"`
	ChallengeProgressAccumulated *uint32                                                         `protobuf:"varint,7,opt,name=challenge_progress_accumulated,json=challengeProgressAccumulated" json:"challenge_progress_accumulated,omitempty"`
	IndividualProgress           []*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress `protobuf:"bytes,8,rep,name=individual_progress,json=individualProgress" json:"individual_progress,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                                                        `json:"-"`
	XXX_unrecognized             []byte                                                          `json:"-"`
	XXX_sizecache                int32                                                           `json:"-"`
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress) Reset() {
	*m = CDOTAMatchMetadata_GuildChallengeProgress{}
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchMetadata_GuildChallengeProgress) ProtoMessage() {}
func (*CDOTAMatchMetadata_GuildChallengeProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 1}
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress.Merge(m, src)
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress.Size(m)
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress proto.InternalMessageInfo

const Default_CDOTAMatchMetadata_GuildChallengeProgress_EventId EEvent = EEvent_EVENT_ID_NONE

func (m *CDOTAMatchMetadata_GuildChallengeProgress) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress) GetEventId() EEvent {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return Default_CDOTAMatchMetadata_GuildChallengeProgress_EventId
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeInstanceId() uint32 {
	if m != nil && m.ChallengeInstanceId != nil {
		return *m.ChallengeInstanceId
	}
	return 0
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeParameter() uint32 {
	if m != nil && m.ChallengeParameter != nil {
		return *m.ChallengeParameter
	}
	return 0
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeTimestamp() uint32 {
	if m != nil && m.ChallengeTimestamp != nil {
		return *m.ChallengeTimestamp
	}
	return 0
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeProgressAtStart() uint32 {
	if m != nil && m.ChallengeProgressAtStart != nil {
		return *m.ChallengeProgressAtStart
	}
	return 0
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress) GetChallengeProgressAccumulated() uint32 {
	if m != nil && m.ChallengeProgressAccumulated != nil {
		return *m.ChallengeProgressAccumulated
	}
	return 0
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress) GetIndividualProgress() []*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress {
	if m != nil {
		return m.IndividualProgress
	}
	return nil
}

type CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress struct {
	AccountId            *uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Progress             *uint32  `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) Reset() {
	*m = CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress{}
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) ProtoMessage() {}
func (*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{1, 1, 0}
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress.Unmarshal(m, b)
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress.Merge(m, src)
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress.Size(m)
}
func (m *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress proto.InternalMessageInfo

func (m *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress) GetProgress() uint32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

type CDOTAMatchPrivateMetadata struct {
	Teams                []*CDOTAMatchPrivateMetadata_Team       `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	GraphWinProbability  []float32                               `protobuf:"fixed32,2,rep,name=graph_win_probability,json=graphWinProbability" json:"graph_win_probability,omitempty"`
	StringNames          []*CDOTAMatchPrivateMetadata_StringName `protobuf:"bytes,3,rep,name=string_names,json=stringNames" json:"string_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata) Reset()         { *m = CDOTAMatchPrivateMetadata{} }
func (m *CDOTAMatchPrivateMetadata) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchPrivateMetadata) ProtoMessage()    {}
func (*CDOTAMatchPrivateMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2}
}

func (m *CDOTAMatchPrivateMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata.Size(m)
}
func (m *CDOTAMatchPrivateMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata) GetTeams() []*CDOTAMatchPrivateMetadata_Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata) GetGraphWinProbability() []float32 {
	if m != nil {
		return m.GraphWinProbability
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata) GetStringNames() []*CDOTAMatchPrivateMetadata_StringName {
	if m != nil {
		return m.StringNames
	}
	return nil
}

type CDOTAMatchPrivateMetadata_StringName struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                 *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_StringName) Reset()         { *m = CDOTAMatchPrivateMetadata_StringName{} }
func (m *CDOTAMatchPrivateMetadata_StringName) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchPrivateMetadata_StringName) ProtoMessage()    {}
func (*CDOTAMatchPrivateMetadata_StringName) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 0}
}

func (m *CDOTAMatchPrivateMetadata_StringName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_StringName.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_StringName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_StringName.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_StringName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_StringName.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_StringName) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_StringName.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_StringName) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_StringName.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_StringName proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_StringName) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_StringName) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type CDOTAMatchPrivateMetadata_Team struct {
	DotaTeam             *uint32                                    `protobuf:"varint,1,opt,name=dota_team,json=dotaTeam" json:"dota_team,omitempty"`
	Players              []*CDOTAMatchPrivateMetadata_Team_Player   `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	Buildings            []*CDOTAMatchPrivateMetadata_Team_Building `protobuf:"bytes,3,rep,name=buildings" json:"buildings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team) Reset()         { *m = CDOTAMatchPrivateMetadata_Team{} }
func (m *CDOTAMatchPrivateMetadata_Team) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchPrivateMetadata_Team) ProtoMessage()    {}
func (*CDOTAMatchPrivateMetadata_Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1}
}

func (m *CDOTAMatchPrivateMetadata_Team) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team) GetDotaTeam() uint32 {
	if m != nil && m.DotaTeam != nil {
		return *m.DotaTeam
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team) GetPlayers() []*CDOTAMatchPrivateMetadata_Team_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team) GetBuildings() []*CDOTAMatchPrivateMetadata_Team_Building {
	if m != nil {
		return m.Buildings
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player struct {
	AccountId            *uint32                                                `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot           *uint32                                                `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	PositionStream       []byte                                                 `protobuf:"bytes,3,opt,name=position_stream,json=positionStream" json:"position_stream,omitempty"`
	CombatSegments       []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment `protobuf:"bytes,4,rep,name=combat_segments,json=combatSegments" json:"combat_segments,omitempty"`
	DamageUnitNames      []string                                               `protobuf:"bytes,5,rep,name=damage_unit_names,json=damageUnitNames" json:"damage_unit_names,omitempty"`
	BuffRecords          []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord    `protobuf:"bytes,6,rep,name=buff_records,json=buffRecords" json:"buff_records,omitempty"`
	GraphKills           []float32                                              `protobuf:"fixed32,7,rep,name=graph_kills,json=graphKills" json:"graph_kills,omitempty"`
	GraphDeaths          []float32                                              `protobuf:"fixed32,8,rep,name=graph_deaths,json=graphDeaths" json:"graph_deaths,omitempty"`
	GraphAssists         []float32                                              `protobuf:"fixed32,9,rep,name=graph_assists,json=graphAssists" json:"graph_assists,omitempty"`
	GraphLasthits        []float32                                              `protobuf:"fixed32,10,rep,name=graph_lasthits,json=graphLasthits" json:"graph_lasthits,omitempty"`
	GraphDenies          []float32                                              `protobuf:"fixed32,11,rep,name=graph_denies,json=graphDenies" json:"graph_denies,omitempty"`
	GoldReceived         *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived    `protobuf:"bytes,12,opt,name=gold_received,json=goldReceived" json:"gold_received,omitempty"`
	XpReceived           *CDOTAMatchPrivateMetadata_Team_Player_XPReceived      `protobuf:"bytes,13,opt,name=xp_received,json=xpReceived" json:"xp_received,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                               `json:"-"`
	XXX_unrecognized     []byte                                                 `json:"-"`
	XXX_sizecache        int32                                                  `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) Reset()         { *m = CDOTAMatchPrivateMetadata_Team_Player{} }
func (m *CDOTAMatchPrivateMetadata_Team_Player) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchPrivateMetadata_Team_Player) ProtoMessage()    {}
func (*CDOTAMatchPrivateMetadata_Team_Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetPlayerSlot() uint32 {
	if m != nil && m.PlayerSlot != nil {
		return *m.PlayerSlot
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetPositionStream() []byte {
	if m != nil {
		return m.PositionStream
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetCombatSegments() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment {
	if m != nil {
		return m.CombatSegments
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetDamageUnitNames() []string {
	if m != nil {
		return m.DamageUnitNames
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetBuffRecords() []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord {
	if m != nil {
		return m.BuffRecords
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetGraphKills() []float32 {
	if m != nil {
		return m.GraphKills
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetGraphDeaths() []float32 {
	if m != nil {
		return m.GraphDeaths
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetGraphAssists() []float32 {
	if m != nil {
		return m.GraphAssists
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetGraphLasthits() []float32 {
	if m != nil {
		return m.GraphLasthits
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetGraphDenies() []float32 {
	if m != nil {
		return m.GraphDenies
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetGoldReceived() *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived {
	if m != nil {
		return m.GoldReceived
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player) GetXpReceived() *CDOTAMatchPrivateMetadata_Team_Player_XPReceived {
	if m != nil {
		return m.XpReceived
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment struct {
	GameTime             *int32                                                                  `protobuf:"varint,1,opt,name=game_time,json=gameTime" json:"game_time,omitempty"`
	DamageByAbility      []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility  `protobuf:"bytes,2,rep,name=damage_by_ability,json=damageByAbility" json:"damage_by_ability,omitempty"`
	HealingByAbility     []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility `protobuf:"bytes,3,rep,name=healing_by_ability,json=healingByAbility" json:"healing_by_ability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                `json:"-"`
	XXX_unrecognized     []byte                                                                  `json:"-"`
	XXX_sizecache        int32                                                                   `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) ProtoMessage() {}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0, 0}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) GetGameTime() int32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) GetDamageByAbility() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility {
	if m != nil {
		return m.DamageByAbility
	}
	return nil
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment) GetHealingByAbility() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility {
	if m != nil {
		return m.HealingByAbility
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility struct {
	SourceUnitIndex      *uint32                                                                             `protobuf:"varint,3,opt,name=source_unit_index,json=sourceUnitIndex" json:"source_unit_index,omitempty"`
	AbilityId            *uint32                                                                             `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	ByHeroTargets        []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget `protobuf:"bytes,2,rep,name=by_hero_targets,json=byHeroTargets" json:"by_hero_targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                            `json:"-"`
	XXX_unrecognized     []byte                                                                              `json:"-"`
	XXX_sizecache        int32                                                                               `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) ProtoMessage() {}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0, 0, 0}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) GetSourceUnitIndex() uint32 {
	if m != nil && m.SourceUnitIndex != nil {
		return *m.SourceUnitIndex
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility) GetByHeroTargets() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget {
	if m != nil {
		return m.ByHeroTargets
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget struct {
	HeroId               *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Damage               *uint32  `protobuf:"varint,2,opt,name=damage" json:"damage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) ProtoMessage() {
}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0, 0, 0, 0}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget) GetDamage() uint32 {
	if m != nil && m.Damage != nil {
		return *m.Damage
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility struct {
	SourceUnitIndex      *uint32                                                                              `protobuf:"varint,3,opt,name=source_unit_index,json=sourceUnitIndex" json:"source_unit_index,omitempty"`
	AbilityId            *uint32                                                                              `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	ByHeroTargets        []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget `protobuf:"bytes,2,rep,name=by_hero_targets,json=byHeroTargets" json:"by_hero_targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                             `json:"-"`
	XXX_unrecognized     []byte                                                                               `json:"-"`
	XXX_sizecache        int32                                                                                `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) ProtoMessage() {}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0, 0, 1}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) GetSourceUnitIndex() uint32 {
	if m != nil && m.SourceUnitIndex != nil {
		return *m.SourceUnitIndex
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility) GetByHeroTargets() []*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget {
	if m != nil {
		return m.ByHeroTargets
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget struct {
	HeroId               *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Healing              *uint32  `protobuf:"varint,2,opt,name=healing" json:"healing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) ProtoMessage() {
}
func (*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0, 0, 1, 0}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget) GetHealing() uint32 {
	if m != nil && m.Healing != nil {
		return *m.Healing
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_BuffRecord struct {
	BuffAbilityId        *uint32                                                          `protobuf:"varint,1,opt,name=buff_ability_id,json=buffAbilityId" json:"buff_ability_id,omitempty"`
	BuffModifierName     *string                                                          `protobuf:"bytes,3,opt,name=buff_modifier_name,json=buffModifierName" json:"buff_modifier_name,omitempty"`
	ByHeroTargets        []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget `protobuf:"bytes,2,rep,name=by_hero_targets,json=byHeroTargets" json:"by_hero_targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                         `json:"-"`
	XXX_unrecognized     []byte                                                           `json:"-"`
	XXX_sizecache        int32                                                            `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Player_BuffRecord{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) ProtoMessage() {}
func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0, 1}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) GetBuffAbilityId() uint32 {
	if m != nil && m.BuffAbilityId != nil {
		return *m.BuffAbilityId
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) GetBuffModifierName() string {
	if m != nil && m.BuffModifierName != nil {
		return *m.BuffModifierName
	}
	return ""
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord) GetByHeroTargets() []*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget {
	if m != nil {
		return m.ByHeroTargets
	}
	return nil
}

type CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget struct {
	HeroId               *uint32  `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	ElapsedDuration      *float32 `protobuf:"fixed32,2,opt,name=elapsed_duration,json=elapsedDuration" json:"elapsed_duration,omitempty"`
	IsHidden             *bool    `protobuf:"varint,3,opt,name=is_hidden,json=isHidden" json:"is_hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) ProtoMessage() {}
func (*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0, 1, 0}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) GetElapsedDuration() float32 {
	if m != nil && m.ElapsedDuration != nil {
		return *m.ElapsedDuration
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget) GetIsHidden() bool {
	if m != nil && m.IsHidden != nil {
		return *m.IsHidden
	}
	return false
}

type CDOTAMatchPrivateMetadata_Team_Player_GoldReceived struct {
	Creep                *uint32  `protobuf:"varint,1,opt,name=creep" json:"creep,omitempty"`
	Heroes               *uint32  `protobuf:"varint,2,opt,name=heroes" json:"heroes,omitempty"`
	BountyRunes          *uint32  `protobuf:"varint,3,opt,name=bounty_runes,json=bountyRunes" json:"bounty_runes,omitempty"`
	Passive              *uint32  `protobuf:"varint,4,opt,name=passive" json:"passive,omitempty"`
	Buildings            *uint32  `protobuf:"varint,5,opt,name=buildings" json:"buildings,omitempty"`
	Abilities            *uint32  `protobuf:"varint,6,opt,name=abilities" json:"abilities,omitempty"`
	Wards                *uint32  `protobuf:"varint,7,opt,name=wards" json:"wards,omitempty"`
	Other                *uint32  `protobuf:"varint,8,opt,name=other" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Player_GoldReceived{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) ProtoMessage() {}
func (*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0, 2}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetCreep() uint32 {
	if m != nil && m.Creep != nil {
		return *m.Creep
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetHeroes() uint32 {
	if m != nil && m.Heroes != nil {
		return *m.Heroes
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetBountyRunes() uint32 {
	if m != nil && m.BountyRunes != nil {
		return *m.BountyRunes
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetPassive() uint32 {
	if m != nil && m.Passive != nil {
		return *m.Passive
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetBuildings() uint32 {
	if m != nil && m.Buildings != nil {
		return *m.Buildings
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetAbilities() uint32 {
	if m != nil && m.Abilities != nil {
		return *m.Abilities
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetWards() uint32 {
	if m != nil && m.Wards != nil {
		return *m.Wards
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_GoldReceived) GetOther() uint32 {
	if m != nil && m.Other != nil {
		return *m.Other
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Player_XPReceived struct {
	Creep                *uint32  `protobuf:"varint,1,opt,name=creep" json:"creep,omitempty"`
	Heroes               *uint32  `protobuf:"varint,2,opt,name=heroes" json:"heroes,omitempty"`
	Roshan               *uint32  `protobuf:"varint,3,opt,name=roshan" json:"roshan,omitempty"`
	TomeOfKnowledge      *uint32  `protobuf:"varint,4,opt,name=tome_of_knowledge,json=tomeOfKnowledge" json:"tome_of_knowledge,omitempty"`
	Outpost              *uint32  `protobuf:"varint,5,opt,name=outpost" json:"outpost,omitempty"`
	Other                *uint32  `protobuf:"varint,6,opt,name=other" json:"other,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Player_XPReceived{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTAMatchPrivateMetadata_Team_Player_XPReceived) ProtoMessage() {}
func (*CDOTAMatchPrivateMetadata_Team_Player_XPReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 0, 3}
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_XPReceived.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_XPReceived.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_XPReceived.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_XPReceived.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_XPReceived.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Player_XPReceived proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetCreep() uint32 {
	if m != nil && m.Creep != nil {
		return *m.Creep
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetHeroes() uint32 {
	if m != nil && m.Heroes != nil {
		return *m.Heroes
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetRoshan() uint32 {
	if m != nil && m.Roshan != nil {
		return *m.Roshan
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetTomeOfKnowledge() uint32 {
	if m != nil && m.TomeOfKnowledge != nil {
		return *m.TomeOfKnowledge
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetOutpost() uint32 {
	if m != nil && m.Outpost != nil {
		return *m.Outpost
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Player_XPReceived) GetOther() uint32 {
	if m != nil && m.Other != nil {
		return *m.Other
	}
	return 0
}

type CDOTAMatchPrivateMetadata_Team_Building struct {
	UnitName             *string  `protobuf:"bytes,1,opt,name=unit_name,json=unitName" json:"unit_name,omitempty"`
	PositionQuantX       *uint32  `protobuf:"varint,2,opt,name=position_quant_x,json=positionQuantX" json:"position_quant_x,omitempty"`
	PositionQuantY       *uint32  `protobuf:"varint,3,opt,name=position_quant_y,json=positionQuantY" json:"position_quant_y,omitempty"`
	DeathTime            *float32 `protobuf:"fixed32,4,opt,name=death_time,json=deathTime" json:"death_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CDOTAMatchPrivateMetadata_Team_Building) Reset() {
	*m = CDOTAMatchPrivateMetadata_Team_Building{}
}
func (m *CDOTAMatchPrivateMetadata_Team_Building) String() string { return proto.CompactTextString(m) }
func (*CDOTAMatchPrivateMetadata_Team_Building) ProtoMessage()    {}
func (*CDOTAMatchPrivateMetadata_Team_Building) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{2, 1, 1}
}

func (m *CDOTAMatchPrivateMetadata_Team_Building) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Building.Unmarshal(m, b)
}
func (m *CDOTAMatchPrivateMetadata_Team_Building) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Building.Marshal(b, m, deterministic)
}
func (m *CDOTAMatchPrivateMetadata_Team_Building) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Building.Merge(m, src)
}
func (m *CDOTAMatchPrivateMetadata_Team_Building) XXX_Size() int {
	return xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Building.Size(m)
}
func (m *CDOTAMatchPrivateMetadata_Team_Building) XXX_DiscardUnknown() {
	xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Building.DiscardUnknown(m)
}

var xxx_messageInfo_CDOTAMatchPrivateMetadata_Team_Building proto.InternalMessageInfo

func (m *CDOTAMatchPrivateMetadata_Team_Building) GetUnitName() string {
	if m != nil && m.UnitName != nil {
		return *m.UnitName
	}
	return ""
}

func (m *CDOTAMatchPrivateMetadata_Team_Building) GetPositionQuantX() uint32 {
	if m != nil && m.PositionQuantX != nil {
		return *m.PositionQuantX
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Building) GetPositionQuantY() uint32 {
	if m != nil && m.PositionQuantY != nil {
		return *m.PositionQuantY
	}
	return 0
}

func (m *CDOTAMatchPrivateMetadata_Team_Building) GetDeathTime() float32 {
	if m != nil && m.DeathTime != nil {
		return *m.DeathTime
	}
	return 0
}

type CMsgDOTADPCMatch struct {
	Match                *CMsgDOTAMatch      `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Metadata             *CDOTAMatchMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CMsgDOTADPCMatch) Reset()         { *m = CMsgDOTADPCMatch{} }
func (m *CMsgDOTADPCMatch) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTADPCMatch) ProtoMessage()    {}
func (*CMsgDOTADPCMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_83d1a4f0be8376b8, []int{3}
}

func (m *CMsgDOTADPCMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgDOTADPCMatch.Unmarshal(m, b)
}
func (m *CMsgDOTADPCMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgDOTADPCMatch.Marshal(b, m, deterministic)
}
func (m *CMsgDOTADPCMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgDOTADPCMatch.Merge(m, src)
}
func (m *CMsgDOTADPCMatch) XXX_Size() int {
	return xxx_messageInfo_CMsgDOTADPCMatch.Size(m)
}
func (m *CMsgDOTADPCMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgDOTADPCMatch.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgDOTADPCMatch proto.InternalMessageInfo

func (m *CMsgDOTADPCMatch) GetMatch() *CMsgDOTAMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *CMsgDOTADPCMatch) GetMetadata() *CDOTAMatchMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*CDOTAMatchMetadataFile)(nil), "dota.CDOTAMatchMetadataFile")
	proto.RegisterType((*CDOTAMatchMetadata)(nil), "dota.CDOTAMatchMetadata")
	proto.RegisterType((*CDOTAMatchMetadata_Team)(nil), "dota.CDOTAMatchMetadata.Team")
	proto.RegisterType((*CDOTAMatchMetadata_Team_PlayerKill)(nil), "dota.CDOTAMatchMetadata.Team.PlayerKill")
	proto.RegisterType((*CDOTAMatchMetadata_Team_ItemPurchase)(nil), "dota.CDOTAMatchMetadata.Team.ItemPurchase")
	proto.RegisterType((*CDOTAMatchMetadata_Team_InventorySnapshot)(nil), "dota.CDOTAMatchMetadata.Team.InventorySnapshot")
	proto.RegisterType((*CDOTAMatchMetadata_Team_AutoStyleCriteria)(nil), "dota.CDOTAMatchMetadata.Team.AutoStyleCriteria")
	proto.RegisterType((*CDOTAMatchMetadata_Team_StrangeGemProgress)(nil), "dota.CDOTAMatchMetadata.Team.StrangeGemProgress")
	proto.RegisterType((*CDOTAMatchMetadata_Team_VictoryPrediction)(nil), "dota.CDOTAMatchMetadata.Team.VictoryPrediction")
	proto.RegisterType((*CDOTAMatchMetadata_Team_SubChallenge)(nil), "dota.CDOTAMatchMetadata.Team.SubChallenge")
	proto.RegisterType((*CDOTAMatchMetadata_Team_CavernChallengeResult)(nil), "dota.CDOTAMatchMetadata.Team.CavernChallengeResult")
	proto.RegisterType((*CDOTAMatchMetadata_Team_ActionGrant)(nil), "dota.CDOTAMatchMetadata.Team.ActionGrant")
	proto.RegisterType((*CDOTAMatchMetadata_Team_CandyGrant)(nil), "dota.CDOTAMatchMetadata.Team.CandyGrant")
	proto.RegisterType((*CDOTAMatchMetadata_Team_EventData)(nil), "dota.CDOTAMatchMetadata.Team.EventData")
	proto.RegisterType((*CDOTAMatchMetadata_Team_GauntletProgress)(nil), "dota.CDOTAMatchMetadata.Team.GauntletProgress")
	proto.RegisterType((*CDOTAMatchMetadata_Team_Player)(nil), "dota.CDOTAMatchMetadata.Team.Player")
	proto.RegisterType((*CDOTAMatchMetadata_Team_Player_ContractProgress)(nil), "dota.CDOTAMatchMetadata.Team.Player.ContractProgress")
	proto.RegisterType((*CDOTAMatchMetadata_GuildChallengeProgress)(nil), "dota.CDOTAMatchMetadata.GuildChallengeProgress")
	proto.RegisterType((*CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress)(nil), "dota.CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress")
	proto.RegisterType((*CDOTAMatchPrivateMetadata)(nil), "dota.CDOTAMatchPrivateMetadata")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_StringName)(nil), "dota.CDOTAMatchPrivateMetadata.StringName")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team)(nil), "dota.CDOTAMatchPrivateMetadata.Team")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player_GoldReceived)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player.GoldReceived")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Player_XPReceived)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Player.XPReceived")
	proto.RegisterType((*CDOTAMatchPrivateMetadata_Team_Building)(nil), "dota.CDOTAMatchPrivateMetadata.Team.Building")
	proto.RegisterType((*CMsgDOTADPCMatch)(nil), "dota.CMsgDOTADPCMatch")
}

func init() { proto.RegisterFile("dota_match_metadata.proto", fileDescriptor_83d1a4f0be8376b8) }

var fileDescriptor_83d1a4f0be8376b8 = []byte{
	// 3883 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0xcd, 0x72, 0x1c, 0x47,
	0x72, 0x36, 0x86, 0x04, 0x30, 0x93, 0x83, 0xc1, 0x4f, 0x01, 0x04, 0x9b, 0x43, 0x52, 0x84, 0x48,
	0x4a, 0x02, 0xf5, 0x03, 0x52, 0x58, 0x8b, 0x5e, 0x2b, 0xd6, 0xbb, 0x06, 0x01, 0x88, 0x1c, 0x8b,
	0x20, 0xb1, 0x0d, 0x88, 0xe0, 0xfa, 0xaf, 0x5d, 0xd3, 0x5d, 0x98, 0x29, 0xa3, 0xff, 0xd4, 0x55,
	0x3d, 0xe0, 0x5c, 0x6c, 0x47, 0x6c, 0xf8, 0x19, 0xec, 0x70, 0x84, 0x23, 0xec, 0x93, 0x6f, 0x7b,
	0xf0, 0x03, 0x38, 0xfc, 0x00, 0x7e, 0x02, 0x87, 0x2f, 0x7b, 0xf4, 0x2b, 0xf8, 0xe4, 0xc8, 0xac,
	0xea, 0xee, 0xf9, 0x81, 0x28, 0x50, 0xa1, 0xd8, 0xdb, 0xd4, 0x97, 0x59, 0x59, 0xd9, 0x59, 0x99,
	0x59, 0x99, 0x55, 0x03, 0x37, 0x82, 0x44, 0x73, 0x2f, 0xe2, 0xda, 0xef, 0x7b, 0x91, 0xd0, 0x3c,
	0xe0, 0x9a, 0x6f, 0xa5, 0x59, 0xa2, 0x13, 0x76, 0x15, 0x49, 0xed, 0x6b, 0x5d, 0xae, 0x84, 0xd7,
	0xf3, 0x23, 0xa1, 0x14, 0xef, 0x09, 0x65, 0x88, 0xed, 0xcf, 0x68, 0x5e, 0x05, 0x7b, 0x7e, 0x12,
	0x45, 0x49, 0x5c, 0x48, 0xe2, 0x31, 0xef, 0x89, 0x48, 0xc4, 0xda, 0xb2, 0xdf, 0xba, 0x98, 0xdd,
	0x52, 0xaf, 0x13, 0x55, 0xf5, 0x79, 0x26, 0x02, 0x4f, 0xc4, 0x79, 0x64, 0x57, 0xb9, 0xfb, 0x9b,
	0x19, 0x58, 0xdf, 0xdd, 0x7b, 0x79, 0xbc, 0x73, 0x80, 0x62, 0x0f, 0xac, 0x7e, 0x5f, 0xc9, 0x50,
	0x30, 0x07, 0xe6, 0x07, 0x22, 0x53, 0x32, 0x89, 0x9d, 0x99, 0x8d, 0xda, 0xe6, 0xac, 0x5b, 0x0c,
	0xd9, 0x0d, 0xa8, 0x1b, 0x2d, 0x64, 0xe0, 0xd4, 0x36, 0x6a, 0x9b, 0x57, 0xdd, 0x79, 0x1a, 0x77,
	0x02, 0xf6, 0xfb, 0x50, 0x2f, 0x3e, 0xd2, 0xb9, 0xb2, 0x31, 0xb3, 0xd9, 0xdc, 0x76, 0xb6, 0x70,
	0xed, 0xad, 0xe9, 0x45, 0xdc, 0x92, 0x93, 0x3d, 0x80, 0xe5, 0x34, 0x93, 0x03, 0xae, 0x45, 0x69,
	0x22, 0x67, 0x76, 0x63, 0x66, 0x73, 0xc1, 0x5d, 0xb2, 0x78, 0x31, 0xe9, 0xee, 0xff, 0x7d, 0x01,
	0x6c, 0x5a, 0x16, 0xfb, 0x09, 0xcc, 0x6a, 0xc1, 0x23, 0xe5, 0xcc, 0x6c, 0x5c, 0xd9, 0x6c, 0x6e,
	0xdf, 0xfe, 0xae, 0x45, 0xb7, 0x8e, 0x05, 0x8f, 0x5c, 0xc3, 0xcb, 0x76, 0x60, 0x41, 0x6a, 0x11,
	0x79, 0x99, 0x38, 0xe7, 0x59, 0xa0, 0x9c, 0x1a, 0xcd, 0x7d, 0xcf, 0xce, 0x7d, 0x9e, 0x74, 0xbb,
	0xc3, 0x63, 0x19, 0x89, 0xc0, 0x25, 0xfa, 0x9e, 0xd0, 0x5c, 0x86, 0xca, 0x6d, 0xe2, 0x1c, 0x03,
	0x29, 0x34, 0x45, 0x88, 0x7c, 0x68, 0x0a, 0xfc, 0xde, 0x39, 0x77, 0x9e, 0xc6, 0x9d, 0x80, 0x7d,
	0x0c, 0x2b, 0x99, 0x48, 0x93, 0x4c, 0x7b, 0x79, 0xac, 0x65, 0xe8, 0x69, 0x19, 0x09, 0xe7, 0x2a,
	0xf1, 0x2c, 0x19, 0xc2, 0x37, 0x88, 0xe3, 0x0a, 0xec, 0x0b, 0xb8, 0x2e, 0x06, 0x22, 0xd6, 0x5e,
	0x8f, 0x47, 0xc2, 0xf3, 0x73, 0xa5, 0x93, 0xc8, 0xd3, 0xbc, 0x1b, 0x0a, 0x6b, 0x87, 0x35, 0x22,
	0x3f, 0xe5, 0x91, 0xd8, 0x25, 0xe2, 0x31, 0xd2, 0xd8, 0x26, 0xd9, 0x2d, 0xe2, 0xd9, 0xd0, 0x33,
	0xd3, 0x65, 0xe0, 0xcc, 0x6d, 0xcc, 0x6c, 0xb6, 0xdc, 0x45, 0x8b, 0xef, 0x23, 0xdc, 0x09, 0xd8,
	0x36, 0x80, 0xd9, 0x32, 0x2d, 0x53, 0xe5, 0xcc, 0xd3, 0x87, 0xae, 0xda, 0x0f, 0x3d, 0x50, 0x3d,
	0xb2, 0xd1, 0xb1, 0x4c, 0x95, 0xdb, 0x88, 0x8a, 0x9f, 0xec, 0x39, 0xac, 0xd0, 0x20, 0xe2, 0x67,
	0x32, 0xee, 0x79, 0x4a, 0x73, 0xad, 0x9c, 0x3a, 0x6d, 0xea, 0x9d, 0x89, 0xa9, 0x07, 0x15, 0xdf,
	0x11, 0xb2, 0xb9, 0xcb, 0xd1, 0x04, 0xc2, 0x1e, 0x40, 0x3d, 0x1a, 0xa4, 0x1e, 0xed, 0x6d, 0x83,
	0x84, 0x2c, 0x16, 0x42, 0x06, 0xe9, 0x1e, 0xfa, 0xc3, 0x7c, 0x64, 0x7e, 0x30, 0x09, 0x4e, 0x2f,
	0x97, 0x61, 0xe0, 0xf9, 0x7d, 0x1e, 0x86, 0x22, 0xee, 0x09, 0x2f, 0xcd, 0x92, 0x5e, 0x26, 0x94,
	0x72, 0x80, 0x54, 0x7f, 0xf8, 0x9d, 0xfb, 0xfb, 0x14, 0x27, 0xee, 0x16, 0xf3, 0x0e, 0xed, 0x34,
	0x77, 0xbd, 0x77, 0x21, 0xde, 0xfe, 0x9f, 0x4f, 0xe1, 0x2a, 0xba, 0x04, 0xbb, 0x09, 0x0d, 0x8a,
	0x11, 0xf4, 0x0c, 0x67, 0x86, 0x6c, 0x58, 0x47, 0x80, 0x88, 0x3f, 0x87, 0xf9, 0x34, 0xe4, 0x43,
	0x91, 0x15, 0x3e, 0x72, 0xff, 0xad, 0xfe, 0xb5, 0x75, 0x48, 0xcc, 0x6e, 0x31, 0x09, 0xfd, 0xbb,
	0x97, 0xf1, 0xb4, 0xef, 0x89, 0x37, 0xa9, 0xc8, 0xa4, 0x88, 0x7d, 0xe1, 0x5c, 0xd9, 0xb8, 0xb2,
	0x59, 0x73, 0x97, 0x08, 0xdf, 0x2f, 0x61, 0xf4, 0x1a, 0xc3, 0xda, 0x4b, 0xc2, 0xc0, 0x13, 0x3c,
	0x8b, 0x45, 0xe0, 0x5c, 0x1d, 0xe1, 0x7d, 0x9a, 0x84, 0xc1, 0x3e, 0xc1, 0xec, 0x43, 0x30, 0x90,
	0x17, 0x0b, 0xed, 0x9d, 0x27, 0x99, 0xee, 0x3b, 0xb3, 0xc4, 0xd9, 0x22, 0xf8, 0x85, 0xd0, 0x27,
	0x08, 0xb2, 0xbb, 0xd0, 0xf2, 0x23, 0xef, 0x54, 0x66, 0x4a, 0x7b, 0xa9, 0xf4, 0xcf, 0xc8, 0x47,
	0xea, 0x6e, 0xd3, 0x8f, 0xbe, 0x42, 0xec, 0x50, 0xfa, 0x67, 0xec, 0x21, 0xac, 0xf9, 0x91, 0xe7,
	0xf3, 0x54, 0x73, 0x19, 0x7b, 0x46, 0x71, 0x74, 0xa7, 0x79, 0x32, 0xc5, 0x8a, 0x1f, 0xed, 0x1a,
	0x92, 0xf9, 0xb4, 0x4e, 0xc0, 0xae, 0xc3, 0xbc, 0x1f, 0x79, 0x5d, 0x1e, 0xa3, 0x4f, 0x5c, 0xd9,
	0x6c, 0xb9, 0x73, 0x7e, 0xf4, 0x84, 0xc7, 0x14, 0x12, 0x7e, 0x44, 0xeb, 0x28, 0xa7, 0x41, 0x94,
	0x79, 0x3f, 0xc2, 0x35, 0x14, 0xbb, 0x0d, 0x80, 0x24, 0x11, 0xf3, 0x50, 0x0f, 0x1d, 0x20, 0xd1,
	0x0d, 0x3f, 0x3a, 0x34, 0x40, 0x7b, 0x17, 0xc0, 0x88, 0xff, 0x5a, 0x86, 0x21, 0xbb, 0x03, 0xcd,
	0x81, 0xf4, 0xb5, 0x8c, 0x3c, 0x15, 0x26, 0xda, 0xee, 0x09, 0x18, 0xe8, 0x28, 0x4c, 0x34, 0x5b,
	0x83, 0x59, 0x3f, 0xc9, 0x63, 0xed, 0xd4, 0x88, 0x64, 0x06, 0xed, 0xe7, 0xb0, 0xd0, 0xd1, 0x22,
	0x3a, 0xcc, 0x33, 0xbf, 0xcf, 0x95, 0x40, 0x3d, 0x29, 0xc8, 0x65, 0x60, 0x45, 0xcc, 0xe1, 0xb0,
	0x13, 0xb0, 0x7b, 0xd0, 0x4a, 0x2d, 0x93, 0x89, 0x4d, 0x14, 0x33, 0xeb, 0x2e, 0x14, 0x20, 0x06,
	0x66, 0xfb, 0xdf, 0x66, 0x60, 0xa5, 0x13, 0x63, 0x10, 0x25, 0xd9, 0xf0, 0x28, 0xe6, 0xa9, 0xea,
	0x27, 0x7a, 0x5c, 0xe6, 0x95, 0x11, 0x99, 0x37, 0xa1, 0x41, 0x11, 0x3c, 0x22, 0xaf, 0x8e, 0x00,
	0x05, 0xf9, 0x1a, 0xcc, 0x9e, 0xc9, 0x30, 0x54, 0x94, 0x28, 0x5a, 0xae, 0x19, 0xb0, 0x75, 0x98,
	0x0b, 0x04, 0xd7, 0x7d, 0x45, 0xb9, 0xa1, 0xe5, 0xda, 0x11, 0xa6, 0x5f, 0xae, 0x94, 0x54, 0x5a,
	0x51, 0x0a, 0x68, 0xb9, 0xc5, 0x10, 0xe5, 0x84, 0x62, 0x20, 0x42, 0x1b, 0xea, 0x66, 0xd0, 0x7e,
	0x06, 0x2b, 0x3b, 0xb9, 0x4e, 0x8e, 0xf4, 0x30, 0x14, 0xbb, 0x99, 0xd4, 0x22, 0x93, 0x1c, 0x0d,
	0x1e, 0x93, 0x3e, 0xc9, 0x99, 0x88, 0xed, 0xf7, 0x37, 0x10, 0x39, 0x46, 0x00, 0x25, 0x0d, 0x78,
	0x98, 0x1b, 0x55, 0x6b, 0xae, 0x19, 0xb4, 0xff, 0xbd, 0x06, 0xec, 0x48, 0x67, 0x3c, 0xee, 0x89,
	0xa7, 0x22, 0x2a, 0x42, 0x05, 0xbd, 0x0d, 0x35, 0xf6, 0x04, 0xd7, 0x22, 0xf3, 0xf4, 0x30, 0x15,
	0x56, 0x60, 0x0b, 0xe1, 0x7d, 0x44, 0x8f, 0x87, 0xa9, 0x60, 0x9f, 0x00, 0xeb, 0xa1, 0x6d, 0xd0,
	0x40, 0x81, 0x38, 0xf5, 0x64, 0x1c, 0x88, 0x37, 0x76, 0x8f, 0x96, 0x7a, 0x22, 0xc2, 0xdd, 0xd9,
	0x13, 0xa7, 0x1d, 0x84, 0x31, 0x83, 0x65, 0xe2, 0xdb, 0x5c, 0xe2, 0xb9, 0xd4, 0x17, 0x59, 0x52,
	0xe4, 0xd1, 0x96, 0xbb, 0x58, 0xe0, 0xcf, 0x44, 0x96, 0x74, 0x02, 0xf6, 0x01, 0x2c, 0x2a, 0xcd,
	0x33, 0x8d, 0xa9, 0xc8, 0x28, 0x6d, 0xec, 0xd5, 0x2a, 0xd0, 0x57, 0x08, 0xb2, 0xf7, 0x61, 0x41,
	0xc4, 0x41, 0xc5, 0x64, 0x6c, 0xd7, 0x34, 0x98, 0x61, 0x79, 0x08, 0x6b, 0xc9, 0x79, 0x8c, 0xee,
	0x3d, 0xae, 0xa2, 0x31, 0xe7, 0x0a, 0xd1, 0xc6, 0x94, 0xbc, 0x0b, 0xad, 0x91, 0x09, 0x36, 0x28,
	0xae, 0xba, 0xcd, 0x92, 0xb3, 0x13, 0xb4, 0xff, 0x71, 0x06, 0x56, 0x5e, 0x49, 0x1f, 0xdd, 0xe4,
	0x30, 0x13, 0x01, 0x7a, 0x69, 0x12, 0x4f, 0x3a, 0xdf, 0xd5, 0xd2, 0x51, 0xee, 0xc3, 0xe2, 0x85,
	0x06, 0xa2, 0x03, 0xa9, 0x5c, 0x78, 0xfa, 0x9b, 0xaf, 0x5c, 0xf4, 0xcd, 0xb7, 0x01, 0xa4, 0xf2,
	0x06, 0x66, 0x75, 0x32, 0x4b, 0xdd, 0x6d, 0x48, 0x65, 0xd5, 0x69, 0xff, 0x7a, 0x06, 0x16, 0x8e,
	0xf2, 0x6e, 0x99, 0xfc, 0x50, 0x2b, 0x0c, 0xa9, 0x91, 0x90, 0xc0, 0x61, 0x27, 0xc0, 0x90, 0x23,
	0xc9, 0x5e, 0xe5, 0x15, 0x2d, 0x17, 0x08, 0x32, 0x2b, 0xdd, 0x84, 0x86, 0x88, 0x83, 0x31, 0x5d,
	0xea, 0x22, 0x0e, 0x0c, 0xf1, 0x16, 0x34, 0xfc, 0x24, 0x4a, 0x43, 0xa1, 0x29, 0x65, 0x91, 0x16,
	0x25, 0xd0, 0x3e, 0x83, 0x6b, 0xbb, 0x7c, 0x20, 0xb2, 0xb8, 0xd4, 0xc3, 0x15, 0x2a, 0x0f, 0x35,
	0x66, 0xbc, 0x92, 0xcb, 0x4b, 0xb9, 0xee, 0x57, 0x7a, 0x2d, 0x95, 0x84, 0x43, 0xae, 0xb1, 0xbc,
	0xf8, 0x10, 0x96, 0xfc, 0x90, 0xe3, 0x99, 0xec, 0x65, 0x49, 0x12, 0x99, 0x02, 0x84, 0x2c, 0x62,
	0x61, 0x37, 0x49, 0x70, 0x37, 0xfe, 0x1c, 0x9a, 0x3b, 0xb4, 0x03, 0x4f, 0x33, 0x1e, 0x6b, 0x54,
	0x9b, 0xd3, 0xb0, 0x12, 0x5d, 0x37, 0x40, 0x27, 0x60, 0x6d, 0xa8, 0x7f, 0x9b, 0xf3, 0x58, 0x4b,
	0x3d, 0xb4, 0xc2, 0xca, 0x31, 0x06, 0x08, 0xcf, 0x03, 0xa9, 0x8b, 0x90, 0xa5, 0x41, 0xfb, 0x67,
	0x00, 0xbb, 0x3c, 0x0e, 0x86, 0x46, 0xf8, 0x3a, 0xcc, 0xa5, 0x89, 0x8c, 0xb5, 0x2a, 0x8c, 0x69,
	0x46, 0x88, 0x67, 0x82, 0xab, 0x24, 0xb6, 0x52, 0xed, 0xa8, 0xfd, 0x1f, 0x00, 0x0d, 0x3a, 0x96,
	0xe9, 0xac, 0xbb, 0x01, 0xf5, 0xf2, 0xe8, 0x36, 0xf3, 0xe7, 0x85, 0x3d, 0xb3, 0xd1, 0x95, 0x89,
	0x64, 0xc5, 0xd7, 0xac, 0x2b, 0x23, 0x76, 0x68, 0xd6, 0xd8, 0x86, 0x6b, 0xd5, 0x19, 0x29, 0x63,
	0xa5, 0x79, 0xec, 0x8b, 0x2a, 0x86, 0x56, 0x4b, 0x62, 0xc7, 0xd2, 0x3a, 0x01, 0xfb, 0x14, 0x58,
	0x35, 0xe7, 0xdb, 0x5c, 0x28, 0x5a, 0xdb, 0x04, 0xd3, 0x72, 0x49, 0xf9, 0x25, 0x12, 0x3a, 0x01,
	0xfb, 0x05, 0xdc, 0x9a, 0xe4, 0x1e, 0x59, 0x31, 0xb0, 0xf1, 0x75, 0x63, 0x7c, 0x5e, 0xb9, 0xc5,
	0x9d, 0x80, 0x3d, 0x84, 0x4a, 0x0b, 0xaf, 0xf2, 0x0f, 0x73, 0x04, 0x55, 0x9a, 0xec, 0x16, 0x14,
	0xf6, 0x53, 0x70, 0xaa, 0x09, 0x19, 0x8f, 0xcf, 0x46, 0x66, 0x99, 0xd3, 0x68, 0xbd, 0xa4, 0xbb,
	0x3c, 0x3e, 0xab, 0x66, 0x1e, 0xc0, 0xbd, 0x89, 0x99, 0x69, 0x26, 0x06, 0x32, 0xc9, 0x55, 0x38,
	0x1c, 0x11, 0x52, 0x27, 0x21, 0x1b, 0x63, 0x42, 0x0e, 0x4b, 0xc6, 0x4a, 0xdc, 0x1d, 0x30, 0xb6,
	0xf6, 0x30, 0xce, 0x03, 0x2a, 0x5a, 0xea, 0x2e, 0x10, 0xf4, 0x12, 0x11, 0x76, 0x06, 0xb7, 0x54,
	0xde, 0xad, 0xec, 0xa1, 0xbc, 0x73, 0xa9, 0xfb, 0x93, 0xb5, 0xca, 0xc7, 0x6f, 0xaf, 0x15, 0x46,
	0x23, 0xd3, 0xbd, 0xa1, 0x46, 0x46, 0xea, 0x44, 0xea, 0x7e, 0x99, 0x7e, 0x3f, 0x80, 0xc5, 0x73,
	0xde, 0x13, 0x99, 0x77, 0x2e, 0xe3, 0x58, 0xc6, 0x3d, 0xe5, 0x34, 0x8d, 0xe7, 0x13, 0x7a, 0x62,
	0x41, 0xf6, 0x18, 0xae, 0xfb, 0x14, 0x66, 0x23, 0xdb, 0x84, 0xae, 0x3e, 0x10, 0xce, 0x02, 0x7d,
	0xc0, 0x35, 0x7f, 0x3c, 0x0a, 0x77, 0x88, 0xc8, 0xbe, 0x84, 0x1b, 0x53, 0xf3, 0xca, 0x95, 0x5a,
	0xb4, 0xd2, 0xf5, 0x89, 0x99, 0xe5, 0x9a, 0x1f, 0xc0, 0x22, 0x8f, 0xf0, 0xf0, 0xf5, 0x48, 0x17,
	0x11, 0x38, 0x8b, 0x46, 0x35, 0x83, 0x9e, 0x18, 0x90, 0xfd, 0x0c, 0xda, 0x58, 0xe6, 0x24, 0x81,
	0xf4, 0x8d, 0x4b, 0x7b, 0x3c, 0xf8, 0xeb, 0x5c, 0x69, 0xec, 0x62, 0x94, 0xb3, 0x4c, 0x53, 0x9c,
	0x82, 0x83, 0x1c, 0x7c, 0xa7, 0xa2, 0x33, 0x0d, 0xb7, 0xa6, 0x14, 0x8c, 0x78, 0xea, 0x65, 0x94,
	0x45, 0x94, 0xb3, 0x42, 0xc6, 0xfe, 0xc9, 0xdb, 0x8d, 0x7d, 0x61, 0x06, 0x72, 0x6f, 0x4c, 0x7c,
	0xd8, 0x01, 0x4f, 0x0d, 0x45, 0xb1, 0x17, 0x70, 0x7f, 0x6a, 0xd5, 0x34, 0xcc, 0x15, 0xf5, 0x52,
	0x41, 0x65, 0x21, 0x66, 0x7d, 0x6a, 0x5c, 0xd0, 0x61, 0x98, 0xab, 0x23, 0x64, 0x2c, 0x4d, 0xe5,
	0xc2, 0x92, 0x49, 0x3c, 0xca, 0xeb, 0x61, 0xf6, 0x10, 0x81, 0xb3, 0x4a, 0x8a, 0x3f, 0x78, 0xbb,
	0xe2, 0x23, 0xd9, 0xcc, 0x5d, 0xb4, 0x12, 0x9e, 0x1a, 0x01, 0xec, 0x0f, 0xc0, 0x29, 0x74, 0xcc,
	0xf8, 0x79, 0x48, 0x56, 0x19, 0xf0, 0x4c, 0xf2, 0x58, 0x3b, 0x6b, 0xa4, 0x57, 0xb1, 0xe7, 0x48,
	0x3e, 0xe0, 0xe9, 0x2b, 0x43, 0xc4, 0x83, 0x10, 0xcb, 0x5d, 0xb3, 0x6b, 0x5e, 0x37, 0x89, 0x73,
	0xe5, 0xa5, 0xbe, 0x76, 0xae, 0x99, 0x83, 0x10, 0x69, 0xb4, 0x77, 0x4f, 0x90, 0x72, 0xe8, 0x6b,
	0x3c, 0xad, 0x0d, 0xaf, 0xd2, 0x99, 0xe0, 0x67, 0xc4, 0xbc, 0x6e, 0x4e, 0x6b, 0xc2, 0x8f, 0x08,
	0x46, 0xce, 0x3f, 0x85, 0x35, 0x1f, 0x53, 0xa4, 0xcd, 0x5d, 0xe5, 0xc7, 0x5e, 0xa7, 0x8f, 0xdd,
	0xfc, 0xbe, 0x5d, 0x2a, 0x92, 0xab, 0xcb, 0x48, 0x8a, 0xc9, 0x76, 0xf6, 0x7b, 0xdb, 0x7f, 0x3f,
	0x03, 0xcb, 0x4f, 0x79, 0x1e, 0xeb, 0x50, 0xe8, 0x32, 0x3c, 0xee, 0x41, 0xab, 0x67, 0x31, 0x4f,
	0x4b, 0x91, 0x15, 0xe7, 0x69, 0x01, 0x1e, 0x4b, 0x91, 0x8d, 0x31, 0x9d, 0xcb, 0xb8, 0xa8, 0xc4,
	0x4a, 0xa6, 0x13, 0x19, 0x2b, 0xf6, 0x11, 0x2c, 0x95, 0x4c, 0x61, 0xa2, 0x94, 0x28, 0x2a, 0xb3,
	0xc5, 0x02, 0x7e, 0x4e, 0x68, 0xfb, 0x5f, 0xd6, 0x60, 0xce, 0xd4, 0xab, 0x78, 0x02, 0x73, 0x9f,
	0xea, 0xcf, 0x2a, 0x8f, 0x37, 0x2c, 0xd2, 0x09, 0xb0, 0xfe, 0xe7, 0x5d, 0x19, 0x4a, 0x3d, 0xf4,
	0xf2, 0xb4, 0x97, 0xf1, 0x40, 0x98, 0x46, 0xa2, 0xe5, 0x2e, 0x59, 0xfc, 0x1b, 0x0b, 0x63, 0xd2,
	0xb1, 0xc5, 0x37, 0x55, 0xbd, 0x46, 0x41, 0x30, 0x10, 0x55, 0xbd, 0x3b, 0xb0, 0x8a, 0x85, 0x51,
	0x9a, 0x62, 0x27, 0xef, 0xe3, 0x91, 0xa6, 0x45, 0xa4, 0xa8, 0x45, 0x68, 0x6e, 0xaf, 0x58, 0xc3,
	0x1e, 0xbd, 0xdc, 0xf7, 0x93, 0x18, 0x4b, 0x13, 0x77, 0xa5, 0xe0, 0x2e, 0x10, 0xc5, 0x7e, 0x5e,
	0x14, 0xa2, 0xb3, 0x97, 0xd9, 0x8d, 0xaa, 0x24, 0x2f, 0x4a, 0xd6, 0x3f, 0x86, 0x59, 0xb3, 0xe8,
	0xdc, 0x65, 0x12, 0xdc, 0x68, 0x35, 0xee, 0x9a, 0x89, 0x58, 0x51, 0xf1, 0x41, 0xcf, 0x23, 0x71,
	0xde, 0x9b, 0xcf, 0x1f, 0xdb, 0xc4, 0xde, 0xe4, 0x83, 0x1e, 0x2e, 0xa4, 0x5e, 0x7f, 0xfe, 0x18,
	0x4b, 0x24, 0xe4, 0x31, 0xe5, 0x30, 0x31, 0x99, 0xc4, 0xbd, 0xc0, 0x07, 0xbd, 0x3d, 0x02, 0x91,
	0xeb, 0x43, 0x58, 0x42, 0x2e, 0x5b, 0x1b, 0x13, 0x5b, 0xc3, 0x26, 0x9f, 0x41, 0x6f, 0xc7, 0xa0,
	0xc8, 0xf7, 0x1e, 0xa0, 0x70, 0xaf, 0x97, 0x46, 0xc4, 0x63, 0x7b, 0x0f, 0x3e, 0xe8, 0x3d, 0x4d,
	0xa3, 0x11, 0xfa, 0x1b, 0x4b, 0x6f, 0x96, 0xf4, 0xd7, 0x86, 0x7e, 0x1f, 0x16, 0xbb, 0x78, 0xf8,
	0x55, 0x2a, 0x2f, 0x18, 0x6d, 0x10, 0x2d, 0x75, 0xde, 0x84, 0x65, 0xe2, 0x1a, 0x55, 0xc7, 0x24,
	0x4f, 0x9a, 0x3d, 0xa2, 0xcf, 0x06, 0xd0, 0xcc, 0x52, 0x21, 0x93, 0x31, 0x01, 0x31, 0xab, 0x51,
	0xc1, 0x51, 0xa8, 0xb4, 0x54, 0x71, 0x58, 0x9d, 0x6e, 0x03, 0x9c, 0xcb, 0xd8, 0x06, 0xa3, 0x4d,
	0xa0, 0x8d, 0x73, 0x19, 0x9b, 0x30, 0x44, 0xd3, 0x90, 0x80, 0x11, 0x9e, 0x15, 0x63, 0x1a, 0x84,
	0x4f, 0x4a, 0xbe, 0x3b, 0xd0, 0x3c, 0x95, 0xbd, 0xbe, 0xf6, 0x94, 0x9f, 0x64, 0x82, 0x52, 0x59,
	0xcd, 0x05, 0x82, 0x8e, 0x10, 0xc1, 0x75, 0x4e, 0x79, 0x16, 0x59, 0xfa, 0x2a, 0xd1, 0x1b, 0x88,
	0x18, 0xf2, 0x3d, 0x68, 0xa9, 0x3c, 0xa5, 0x9b, 0x0e, 0xc3, 0xb1, 0x46, 0x1c, 0x0b, 0x16, 0x2c,
	0x65, 0xa4, 0xb9, 0xea, 0x5b, 0x8e, 0x6b, 0x46, 0x06, 0x22, 0x86, 0x7c, 0x1f, 0x16, 0xa9, 0x8d,
	0xf1, 0xf2, 0x94, 0x9a, 0x27, 0xe5, 0xac, 0x53, 0x7c, 0x2c, 0x10, 0xfa, 0x4d, 0x8a, 0x0d, 0x94,
	0xba, 0xa8, 0xe1, 0xbd, 0x7e, 0x51, 0xc3, 0xfb, 0x97, 0xc0, 0x64, 0xd1, 0xb4, 0x79, 0xca, 0x76,
	0x6d, 0x8e, 0xf3, 0x3d, 0x57, 0x07, 0xc6, 0x5b, 0x27, 0x9b, 0x3d, 0x77, 0x45, 0x4e, 0xf5, 0x7f,
	0x8f, 0x60, 0x0d, 0x9d, 0x85, 0x6e, 0x44, 0x3c, 0x9f, 0x87, 0xb2, 0x9b, 0x71, 0xcc, 0x6e, 0x37,
	0x4c, 0x51, 0xc3, 0x07, 0xe6, 0xce, 0x63, 0xb7, 0xa4, 0x30, 0x0f, 0x56, 0x79, 0xae, 0x13, 0x4f,
	0x61, 0x7b, 0xe6, 0xf9, 0xb6, 0x3f, 0x73, 0xda, 0x97, 0x51, 0x69, 0xaa, 0xad, 0x73, 0x57, 0xf8,
	0x54, 0xa7, 0xf7, 0x15, 0x98, 0xca, 0xc4, 0x5c, 0xb0, 0xdc, 0x26, 0xb9, 0x1f, 0xbd, 0x5d, 0x6e,
	0x59, 0x84, 0xba, 0x0d, 0x51, 0xd6, 0xa3, 0x5d, 0x58, 0x53, 0xa6, 0xf7, 0xf3, 0xb0, 0x8b, 0x2b,
	0x6b, 0x99, 0xf7, 0x48, 0xe2, 0xa3, 0xef, 0xa9, 0x65, 0xa6, 0xba, 0x46, 0x97, 0xa9, 0xe9, 0x4e,
	0xf2, 0x3a, 0xcc, 0x53, 0xaf, 0xf7, 0x26, 0x75, 0xee, 0x98, 0xd2, 0x18, 0x87, 0xaf, 0x53, 0xf4,
	0x24, 0x9f, 0x47, 0xa9, 0x42, 0xcb, 0xfa, 0x67, 0x22, 0x70, 0x36, 0x4c, 0x8c, 0x11, 0x78, 0x64,
	0x30, 0xdc, 0x5c, 0xdb, 0xea, 0x60, 0x79, 0x67, 0x3b, 0x2d, 0xe7, 0xfd, 0xcb, 0x58, 0x72, 0xaa,
	0x41, 0x73, 0x57, 0x06, 0x53, 0x3d, 0xdb, 0x23, 0x58, 0x0b, 0x79, 0x2c, 0x3c, 0x25, 0x42, 0x61,
	0x9a, 0x86, 0xd3, 0x90, 0xf7, 0x94, 0x73, 0x97, 0x74, 0x61, 0x48, 0x3b, 0x2a, 0x48, 0x5f, 0x21,
	0x05, 0x3b, 0x88, 0x8c, 0x47, 0x29, 0xef, 0x09, 0xe5, 0xdc, 0x33, 0x1d, 0x44, 0x31, 0xc6, 0x22,
	0x5e, 0x67, 0x32, 0x0d, 0x85, 0xc9, 0x1c, 0xce, 0x7d, 0x93, 0xe8, 0x0c, 0x46, 0x79, 0x83, 0xca,
	0x27, 0xd1, 0x93, 0x0a, 0x3d, 0x55, 0xfb, 0x7d, 0x11, 0x38, 0x1f, 0xd8, 0x0c, 0x86, 0xe8, 0x91,
	0x05, 0xd9, 0x27, 0xb0, 0x92, 0xf1, 0x54, 0x8a, 0x4c, 0x79, 0xc5, 0x15, 0x45, 0xe0, 0x7c, 0x68,
	0xca, 0x76, 0x4b, 0x28, 0xd2, 0x6c, 0x80, 0x87, 0x98, 0x9f, 0xe4, 0x19, 0x71, 0xe3, 0xc2, 0x22,
	0x70, 0x3e, 0x32, 0x79, 0xa8, 0x80, 0xbf, 0x26, 0x14, 0x03, 0xaf, 0x0c, 0x26, 0xaa, 0x99, 0x9d,
	0x4d, 0x63, 0xf3, 0xd8, 0x06, 0x13, 0x56, 0xc7, 0xd8, 0x33, 0x14, 0x21, 0x4e, 0xf7, 0x52, 0x2a,
	0x15, 0xb1, 0x76, 0x1e, 0x98, 0xc5, 0x2d, 0xe5, 0x69, 0x12, 0x06, 0x47, 0x88, 0x63, 0x57, 0x92,
	0x74, 0x95, 0xc8, 0x06, 0x58, 0xad, 0xf2, 0x2c, 0x50, 0x5e, 0x1a, 0x72, 0x5f, 0x04, 0xce, 0xc7,
	0xa6, 0x2b, 0x29, 0x88, 0x27, 0x48, 0x3b, 0x24, 0x12, 0xdb, 0x82, 0x55, 0x25, 0x62, 0x9d, 0x0d,
	0xc7, 0x67, 0x7c, 0x62, 0x4a, 0x11, 0x43, 0x1a, 0xe5, 0xa7, 0x72, 0x18, 0x19, 0x03, 0xba, 0x89,
	0x15, 0x81, 0xf3, 0x69, 0x51, 0x0e, 0x67, 0x81, 0xda, 0xb3, 0x20, 0xe5, 0x26, 0x9d, 0xc7, 0x5e,
	0x90, 0x67, 0x9c, 0xfc, 0xe4, 0x33, 0x9b, 0x9b, 0x74, 0x1e, 0xef, 0x59, 0x8c, 0xfd, 0x15, 0xac,
	0x52, 0xb7, 0x10, 0x45, 0x58, 0x05, 0x25, 0x4a, 0x9b, 0xdb, 0x8d, 0xad, 0x8d, 0x99, 0xcd, 0xc5,
	0xed, 0xeb, 0xc6, 0xa5, 0xf6, 0xc9, 0xa5, 0x0e, 0xdc, 0x27, 0x48, 0x3f, 0x1e, 0xa6, 0xe2, 0x4b,
	0xe7, 0xcc, 0x9b, 0x02, 0xbd, 0x17, 0x49, 0x2c, 0x70, 0x3b, 0xe2, 0xb3, 0x83, 0x28, 0x2b, 0x61,
	0xf6, 0x67, 0xb0, 0x52, 0xd6, 0x14, 0x65, 0x48, 0x3d, 0xa4, 0x5b, 0xd0, 0xad, 0xb7, 0xbb, 0xec,
	0x64, 0xa1, 0xe3, 0x2e, 0xf7, 0x26, 0x4b, 0x9f, 0x2e, 0x36, 0xd0, 0xb1, 0xce, 0xb8, 0x3f, 0x22,
	0xfc, 0x11, 0xc5, 0xc3, 0x17, 0x97, 0x39, 0xda, 0xb7, 0x76, 0xed, 0xec, 0x6a, 0x0d, 0x7f, 0x02,
	0xa1, 0x8b, 0x2d, 0xba, 0x92, 0x95, 0x81, 0x72, 0x3e, 0xa7, 0xd4, 0x5c, 0x27, 0xa0, 0x13, 0xa8,
	0xf6, 0x3f, 0xd4, 0x60, 0x79, 0x52, 0x06, 0x36, 0xb6, 0xc5, 0x8c, 0xa2, 0xb1, 0xb5, 0x13, 0xc6,
	0x7a, 0xde, 0xda, 0x78, 0xcf, 0xfb, 0x43, 0x1a, 0xda, 0xb1, 0x0e, 0x33, 0xe5, 0x19, 0x8f, 0x84,
	0x16, 0x99, 0x2d, 0xda, 0xaa, 0x0e, 0xf3, 0xb0, 0xa0, 0xa0, 0xef, 0x94, 0x06, 0x53, 0x9a, 0x67,
	0xc5, 0x0d, 0x5b, 0xab, 0x40, 0x8f, 0x10, 0xa4, 0x6c, 0x54, 0xb2, 0x61, 0x31, 0x36, 0x67, 0xb3,
	0x51, 0xc1, 0x85, 0xe5, 0xd8, 0xd8, 0xa5, 0xc7, 0xfc, 0xe4, 0xa5, 0xc7, 0x7f, 0x5d, 0x85, 0xf5,
	0x8b, 0x6f, 0xa4, 0xdf, 0x66, 0x9f, 0xc7, 0x13, 0xf6, 0x59, 0xdc, 0x5e, 0xb0, 0x4e, 0x48, 0x29,
	0xfb, 0xcb, 0xd6, 0xfe, 0xab, 0xfd, 0x17, 0xc7, 0x5e, 0x67, 0xcf, 0x7b, 0xf1, 0xf2, 0xc5, 0xfe,
	0xef, 0xd8, 0x78, 0x63, 0x13, 0xe8, 0xa8, 0xd6, 0x3c, 0x4a, 0xad, 0x05, 0xab, 0x09, 0xc7, 0x05,
	0x85, 0xfd, 0x11, 0xdc, 0x9c, 0xbe, 0xc7, 0xf7, 0xb8, 0x31, 0x7d, 0x61, 0xd4, 0xaa, 0xe5, 0x2f,
	0x0c, 0xb4, 0x43, 0xbb, 0xa0, 0xd9, 0x1e, 0xbc, 0x77, 0xd1, 0x74, 0xdf, 0xcf, 0xa3, 0x3c, 0xe4,
	0xd5, 0xa5, 0xc0, 0xad, 0x69, 0x09, 0x15, 0x0f, 0x53, 0xb0, 0x2a, 0xe3, 0x40, 0x0e, 0x64, 0x90,
	0xf3, 0xb0, 0x8a, 0x92, 0x3a, 0x45, 0xc9, 0x93, 0x77, 0x7c, 0x4d, 0xd8, 0xea, 0x94, 0xa2, 0xaa,
	0x73, 0x4e, 0x4e, 0x61, 0xed, 0x97, 0xc0, 0xa6, 0x39, 0xbf, 0xaf, 0x57, 0x68, 0x43, 0xbd, 0x54,
	0xcf, 0x5e, 0x47, 0x15, 0xe3, 0xbb, 0xff, 0xbb, 0x0e, 0x37, 0x2a, 0x2d, 0x0f, 0xc7, 0x9f, 0xc6,
	0xd8, 0x97, 0xe3, 0x6f, 0x60, 0x53, 0x6f, 0x14, 0x13, 0xfc, 0x63, 0x4f, 0x61, 0xdb, 0x70, 0xcd,
	0x54, 0x56, 0x58, 0x2c, 0xa6, 0x59, 0xd2, 0xb5, 0x7d, 0x09, 0xb5, 0x29, 0x35, 0x77, 0x95, 0x88,
	0x27, 0x32, 0x3e, 0xac, 0x48, 0xec, 0x00, 0x16, 0x94, 0xce, 0x64, 0xdc, 0xf3, 0x62, 0x8e, 0x15,
	0xdb, 0x95, 0x8b, 0xbb, 0x81, 0xc9, 0x65, 0x8f, 0x68, 0xce, 0x0b, 0x1e, 0x09, 0xb7, 0xa9, 0xca,
	0xdf, 0xaa, 0xfd, 0x08, 0xa0, 0x22, 0xb1, 0x45, 0xa8, 0x95, 0xd6, 0xa9, 0xc9, 0x80, 0x31, 0xb8,
	0x8a, 0xab, 0x90, 0x49, 0x1a, 0x2e, 0xfd, 0x6e, 0xff, 0xf7, 0xda, 0x65, 0x1e, 0x6f, 0xf6, 0x27,
	0x1f, 0x6f, 0x3e, 0xb9, 0x8c, 0x61, 0xa6, 0xde, 0x70, 0xbe, 0x86, 0x46, 0x17, 0xbd, 0x81, 0xda,
	0x7d, 0xf3, 0xa9, 0x9f, 0x5d, 0x4a, 0xd0, 0x13, 0x3b, 0xcb, 0xad, 0xe6, 0xb7, 0x7f, 0xcd, 0x2e,
	0xdb, 0x3a, 0x4e, 0xf4, 0x83, 0xb5, 0xa9, 0x7e, 0xf0, 0x23, 0x58, 0x4a, 0x13, 0x25, 0xa9, 0x50,
	0xa1, 0x2a, 0x3f, 0xa2, 0x70, 0x5f, 0x70, 0x17, 0x0b, 0x98, 0xca, 0xfc, 0x88, 0x75, 0xb1, 0x24,
	0x88, 0xba, 0x18, 0x78, 0xa2, 0x67, 0xee, 0x5c, 0x4c, 0xd3, 0xf8, 0x87, 0xef, 0x60, 0x8f, 0xad,
	0x5d, 0x12, 0x71, 0x64, 0x24, 0x60, 0x35, 0x31, 0x32, 0x54, 0xec, 0x63, 0x58, 0x09, 0x78, 0xc4,
	0x7b, 0xc2, 0xcb, 0x63, 0xa9, 0xad, 0x5f, 0x60, 0x97, 0xd9, 0x70, 0x97, 0x0c, 0xe1, 0x9b, 0x58,
	0x6a, 0xda, 0x6f, 0xf6, 0x2b, 0x58, 0xe8, 0xe6, 0xa7, 0xa7, 0x5e, 0x26, 0xfc, 0x24, 0x0b, 0x8a,
	0x66, 0xf2, 0xf1, 0xbb, 0x28, 0xf3, 0x24, 0x3f, 0x3d, 0x75, 0x69, 0xba, 0xdb, 0xec, 0x96, 0xbf,
	0xa9, 0x89, 0x36, 0xde, 0x6c, 0x6a, 0xae, 0x79, 0xf2, 0x61, 0x20, 0xc8, 0x94, 0x5c, 0xef, 0xc3,
	0x82, 0x61, 0xb0, 0x4f, 0x2f, 0x75, 0xe2, 0x30, 0x93, 0x4c, 0x6f, 0x49, 0x77, 0x05, 0xc4, 0x52,
	0xbc, 0xc2, 0x34, 0x88, 0xc7, 0xcc, 0xb3, 0x8d, 0x1c, 0x9e, 0x24, 0x86, 0x29, 0xe4, 0x4a, 0xf7,
	0xa5, 0x36, 0x77, 0x7e, 0x45, 0x3f, 0xf2, 0xdc, 0x82, 0xa3, 0xcb, 0xc5, 0x52, 0x28, 0xa7, 0x39,
	0xb6, 0x1c, 0x42, 0xec, 0x2f, 0xa0, 0x45, 0x95, 0x55, 0x26, 0x7c, 0x21, 0x07, 0x22, 0xa0, 0xf6,
	0xb2, 0xb9, 0xfd, 0xd3, 0x77, 0x31, 0x07, 0x56, 0x60, 0xae, 0x9d, 0xef, 0x2e, 0xf4, 0x46, 0x46,
	0xec, 0x04, 0x9a, 0x6f, 0xd2, 0x4a, 0x78, 0x8b, 0x84, 0xbf, 0x93, 0xad, 0x5f, 0x1f, 0x96, 0xa2,
	0xe1, 0x4d, 0x5a, 0xfc, 0x6e, 0xff, 0x76, 0x0e, 0x5a, 0x63, 0x3e, 0x31, 0xfe, 0x06, 0x36, 0x33,
	0xf1, 0x06, 0x96, 0x97, 0x0e, 0xd2, 0x1d, 0x7a, 0xa3, 0x39, 0xa6, 0xb9, 0xdd, 0xf9, 0xc1, 0x6e,
	0xb8, 0xb5, 0x47, 0x22, 0x9f, 0x0c, 0x77, 0x8c, 0xc0, 0xc2, 0xd7, 0x4a, 0x80, 0xbd, 0x01, 0xd6,
	0x17, 0x3c, 0xc4, 0x5c, 0x35, 0xb2, 0xae, 0x89, 0xe2, 0x3f, 0xf9, 0xe1, 0xeb, 0x3e, 0x33, 0x32,
	0xab, 0x85, 0x97, 0xfb, 0x13, 0x48, 0xfb, 0x9f, 0x6b, 0xb0, 0x34, 0xa1, 0x1e, 0x46, 0x89, 0x4a,
	0xf2, 0xcc, 0xb7, 0x51, 0x62, 0xde, 0x7f, 0xcc, 0x19, 0xbd, 0x64, 0x08, 0x18, 0x25, 0xe6, 0x09,
	0x08, 0xd3, 0x83, 0xbd, 0x3a, 0x1a, 0x49, 0x0f, 0x06, 0xe9, 0x04, 0xec, 0x6f, 0x60, 0xa9, 0x3b,
	0x34, 0x2f, 0x67, 0x9a, 0x67, 0x3d, 0xa1, 0x8b, 0x24, 0xf7, 0xea, 0x47, 0xb3, 0xe6, 0xd6, 0x93,
	0xe1, 0x33, 0x91, 0x25, 0xc7, 0x24, 0xde, 0x6d, 0x75, 0x47, 0x46, 0xaa, 0xfd, 0x0b, 0x58, 0x18,
	0x25, 0x97, 0xad, 0x5d, 0xf5, 0xb4, 0xd4, 0x37, 0xcf, 0x77, 0xeb, 0x30, 0x67, 0x36, 0xa5, 0x78,
	0x0d, 0x31, 0xa3, 0xf6, 0xbf, 0xd6, 0x60, 0x79, 0xd2, 0x8c, 0x3f, 0xa6, 0x81, 0xfe, 0xf6, 0xbb,
	0x0c, 0x74, 0xf2, 0xe3, 0x6d, 0xfb, 0x5b, 0x2d, 0xb4, 0x73, 0x59, 0x0b, 0x39, 0x48, 0x20, 0xc1,
	0x45, 0x51, 0x6c, 0x87, 0xed, 0xff, 0xac, 0x01, 0x54, 0xa9, 0x8e, 0xee, 0x75, 0x30, 0x71, 0x4e,
	0x7d, 0x76, 0x0b, 0xe1, 0x9d, 0xf2, 0xd3, 0x3f, 0x05, 0x46, 0x7c, 0x51, 0x12, 0xc8, 0x53, 0x29,
	0x32, 0x4a, 0xc7, 0x64, 0xc6, 0x86, 0xbb, 0x8c, 0x94, 0x03, 0x4b, 0xa0, 0x03, 0xf7, 0xec, 0xbb,
	0x0c, 0xb5, 0xfb, 0xc3, 0x32, 0xf2, 0x5b, 0x8d, 0x92, 0x5c, 0xd6, 0x28, 0x0f, 0x60, 0x59, 0x84,
	0x3c, 0x55, 0x22, 0xa8, 0x5a, 0x38, 0xf3, 0x58, 0xbd, 0x64, 0xf1, 0xb2, 0x8b, 0xbb, 0x09, 0x0d,
	0xa9, 0xbc, 0xbe, 0x0c, 0x02, 0x11, 0xd3, 0x57, 0xd6, 0xdd, 0xba, 0x54, 0xcf, 0x68, 0xdc, 0xfe,
	0xed, 0x0c, 0x2c, 0x8c, 0xa6, 0x47, 0xfa, 0xf3, 0x40, 0x26, 0x44, 0x6a, 0xd7, 0x33, 0x03, 0xf4,
	0x52, 0x5c, 0x58, 0x14, 0xa5, 0x97, 0x1d, 0x61, 0x02, 0xef, 0xe2, 0x81, 0x3c, 0xf4, 0xb2, 0x3c,
	0x16, 0xc5, 0xbd, 0x71, 0xd3, 0x60, 0x2e, 0x42, 0xb8, 0x7d, 0x29, 0x1e, 0x15, 0x83, 0xe2, 0x61,
	0xba, 0x18, 0x62, 0x8b, 0x50, 0x55, 0x0e, 0xa6, 0x4e, 0xae, 0x00, 0xa4, 0x9a, 0x8d, 0xc4, 0x83,
	0x61, 0x6e, 0xd4, 0x7d, 0xf1, 0x58, 0x58, 0x83, 0x59, 0xf3, 0xdf, 0x24, 0x53, 0xe4, 0x9a, 0x01,
	0xa2, 0x89, 0xee, 0x8b, 0xcc, 0xde, 0x88, 0x9a, 0x41, 0xfb, 0x37, 0x33, 0x00, 0x55, 0x96, 0x7e,
	0xc7, 0x2f, 0x5c, 0x87, 0xb9, 0x2c, 0x51, 0x7d, 0x1e, 0xdb, 0x6f, 0xb3, 0x23, 0x0c, 0x45, 0x9d,
	0x44, 0xc2, 0x4b, 0x4e, 0xbd, 0xb3, 0x38, 0x39, 0x0f, 0x45, 0xd0, 0x2b, 0x3e, 0x70, 0x09, 0x09,
	0x2f, 0x4f, 0xbf, 0x2e, 0x60, 0x34, 0x41, 0x92, 0xeb, 0x34, 0x51, 0xba, 0xf8, 0xcb, 0x82, 0x1d,
	0x56, 0x0a, 0xcf, 0x8d, 0x2a, 0xfc, 0x4f, 0x33, 0x50, 0x2f, 0xaa, 0x23, 0xdc, 0xbe, 0xb2, 0x66,
	0x20, 0x95, 0x1b, 0x6e, 0x3d, 0xb7, 0xc5, 0x02, 0xfd, 0xd1, 0xa9, 0x28, 0x72, 0xe8, 0x71, 0xd6,
	0x2b, 0x1e, 0xcc, 0xcb, 0x2a, 0xe7, 0x97, 0x08, 0xbf, 0xbe, 0x80, 0x73, 0x58, 0xfc, 0xa1, 0x60,
	0x8c, 0xf3, 0x57, 0x98, 0x38, 0xe8, 0xf4, 0xaf, 0xfe, 0x98, 0x55, 0x73, 0x1b, 0x84, 0xe0, 0x49,
	0x75, 0x57, 0xc1, 0xf2, 0xee, 0x81, 0xea, 0xa1, 0xd7, 0xef, 0x1d, 0xee, 0x92, 0xe3, 0xb3, 0x07,
	0x30, 0x4b, 0xff, 0x6b, 0x22, 0xfd, 0xc6, 0xfe, 0x40, 0x55, 0x06, 0x87, 0x6b, 0x38, 0xc6, 0xfe,
	0x08, 0x57, 0xbb, 0xec, 0x1f, 0xe1, 0x9e, 0x5c, 0xf9, 0xbb, 0x99, 0xdf, 0xfb, 0xff, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x14, 0x4f, 0x5d, 0x2d, 0x32, 0x28, 0x00, 0x00,
}
