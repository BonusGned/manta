// Code generated by protoc-gen-go.
// source: dota_gcmessages_client_tournament.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ETournamentEvent int32

const (
	ETournamentEvent_k_ETournamentEvent_None                                      ETournamentEvent = 0
	ETournamentEvent_k_ETournamentEvent_TournamentCreated                         ETournamentEvent = 1
	ETournamentEvent_k_ETournamentEvent_TournamentsMerged                         ETournamentEvent = 2
	ETournamentEvent_k_ETournamentEvent_GameOutcome                               ETournamentEvent = 3
	ETournamentEvent_k_ETournamentEvent_TeamGivenBye                              ETournamentEvent = 4
	ETournamentEvent_k_ETournamentEvent_TournamentCanceledByAdmin                 ETournamentEvent = 5
	ETournamentEvent_k_ETournamentEvent_TeamAbandoned                             ETournamentEvent = 6
	ETournamentEvent_k_ETournamentEvent_ScheduledGameStarted                      ETournamentEvent = 7
	ETournamentEvent_k_ETournamentEvent_Canceled                                  ETournamentEvent = 8
	ETournamentEvent_k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund  ETournamentEvent = 9
	ETournamentEvent_k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit ETournamentEvent = 10
)

var ETournamentEvent_name = map[int32]string{
	0:  "k_ETournamentEvent_None",
	1:  "k_ETournamentEvent_TournamentCreated",
	2:  "k_ETournamentEvent_TournamentsMerged",
	3:  "k_ETournamentEvent_GameOutcome",
	4:  "k_ETournamentEvent_TeamGivenBye",
	5:  "k_ETournamentEvent_TournamentCanceledByAdmin",
	6:  "k_ETournamentEvent_TeamAbandoned",
	7:  "k_ETournamentEvent_ScheduledGameStarted",
	8:  "k_ETournamentEvent_Canceled",
	9:  "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund",
	10: "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit",
}
var ETournamentEvent_value = map[string]int32{
	"k_ETournamentEvent_None":                                      0,
	"k_ETournamentEvent_TournamentCreated":                         1,
	"k_ETournamentEvent_TournamentsMerged":                         2,
	"k_ETournamentEvent_GameOutcome":                               3,
	"k_ETournamentEvent_TeamGivenBye":                              4,
	"k_ETournamentEvent_TournamentCanceledByAdmin":                 5,
	"k_ETournamentEvent_TeamAbandoned":                             6,
	"k_ETournamentEvent_ScheduledGameStarted":                      7,
	"k_ETournamentEvent_Canceled":                                  8,
	"k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund":  9,
	"k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit": 10,
}

func (x ETournamentEvent) Enum() *ETournamentEvent {
	p := new(ETournamentEvent)
	*p = x
	return p
}
func (x ETournamentEvent) String() string {
	return proto.EnumName(ETournamentEvent_name, int32(x))
}
func (x *ETournamentEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentEvent_value, data, "ETournamentEvent")
	if err != nil {
		return err
	}
	*x = ETournamentEvent(value)
	return nil
}
func (ETournamentEvent) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

type CMsgDOTATournamentInfo struct {
	LeagueId            *uint32                                 `protobuf:"varint,1,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	PhaseList           []*CMsgDOTATournamentInfo_Phase         `protobuf:"bytes,2,rep,name=phase_list,json=phaseList" json:"phase_list,omitempty"`
	TeamsList           []*CMsgDOTATournamentInfo_Team          `protobuf:"bytes,3,rep,name=teams_list,json=teamsList" json:"teams_list,omitempty"`
	UpcomingMatchesList []*CMsgDOTATournamentInfo_UpcomingMatch `protobuf:"bytes,4,rep,name=upcoming_matches_list,json=upcomingMatchesList" json:"upcoming_matches_list,omitempty"`
	NewsList            []*CMsgDOTATournamentInfo_News          `protobuf:"bytes,5,rep,name=news_list,json=newsList" json:"news_list,omitempty"`
	XXX_unrecognized    []byte                                  `json:"-"`
}

func (m *CMsgDOTATournamentInfo) Reset()                    { *m = CMsgDOTATournamentInfo{} }
func (m *CMsgDOTATournamentInfo) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo) ProtoMessage()               {}
func (*CMsgDOTATournamentInfo) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *CMsgDOTATournamentInfo) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo) GetPhaseList() []*CMsgDOTATournamentInfo_Phase {
	if m != nil {
		return m.PhaseList
	}
	return nil
}

func (m *CMsgDOTATournamentInfo) GetTeamsList() []*CMsgDOTATournamentInfo_Team {
	if m != nil {
		return m.TeamsList
	}
	return nil
}

func (m *CMsgDOTATournamentInfo) GetUpcomingMatchesList() []*CMsgDOTATournamentInfo_UpcomingMatch {
	if m != nil {
		return m.UpcomingMatchesList
	}
	return nil
}

func (m *CMsgDOTATournamentInfo) GetNewsList() []*CMsgDOTATournamentInfo_News {
	if m != nil {
		return m.NewsList
	}
	return nil
}

type CMsgDOTATournamentInfo_PhaseGroup struct {
	GroupId          *uint32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	GroupName        *string `protobuf:"bytes,2,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTATournamentInfo_PhaseGroup) Reset()         { *m = CMsgDOTATournamentInfo_PhaseGroup{} }
func (m *CMsgDOTATournamentInfo_PhaseGroup) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_PhaseGroup) ProtoMessage()    {}
func (*CMsgDOTATournamentInfo_PhaseGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{0, 0}
}

func (m *CMsgDOTATournamentInfo_PhaseGroup) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_PhaseGroup) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

type CMsgDOTATournamentInfo_Phase struct {
	PhaseId          *uint32                              `protobuf:"varint,1,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	PhaseName        *string                              `protobuf:"bytes,2,opt,name=phase_name,json=phaseName" json:"phase_name,omitempty"`
	TypeId           *uint32                              `protobuf:"varint,3,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	Iterations       *uint32                              `protobuf:"varint,4,opt,name=iterations" json:"iterations,omitempty"`
	MinStartTime     *uint32                              `protobuf:"varint,5,opt,name=min_start_time,json=minStartTime" json:"min_start_time,omitempty"`
	MaxStartTime     *uint32                              `protobuf:"varint,6,opt,name=max_start_time,json=maxStartTime" json:"max_start_time,omitempty"`
	GroupList        []*CMsgDOTATournamentInfo_PhaseGroup `protobuf:"bytes,7,rep,name=group_list,json=groupList" json:"group_list,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *CMsgDOTATournamentInfo_Phase) Reset()         { *m = CMsgDOTATournamentInfo_Phase{} }
func (m *CMsgDOTATournamentInfo_Phase) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_Phase) ProtoMessage()    {}
func (*CMsgDOTATournamentInfo_Phase) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{0, 1}
}

func (m *CMsgDOTATournamentInfo_Phase) GetPhaseId() uint32 {
	if m != nil && m.PhaseId != nil {
		return *m.PhaseId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetPhaseName() string {
	if m != nil && m.PhaseName != nil {
		return *m.PhaseName
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_Phase) GetTypeId() uint32 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetIterations() uint32 {
	if m != nil && m.Iterations != nil {
		return *m.Iterations
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetMinStartTime() uint32 {
	if m != nil && m.MinStartTime != nil {
		return *m.MinStartTime
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetMaxStartTime() uint32 {
	if m != nil && m.MaxStartTime != nil {
		return *m.MaxStartTime
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetGroupList() []*CMsgDOTATournamentInfo_PhaseGroup {
	if m != nil {
		return m.GroupList
	}
	return nil
}

type CMsgDOTATournamentInfo_Team struct {
	TeamId           *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tag              *string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	TeamLogo         *uint64 `protobuf:"varint,4,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	Eliminated       *bool   `protobuf:"varint,5,opt,name=eliminated" json:"eliminated,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTATournamentInfo_Team) Reset()                    { *m = CMsgDOTATournamentInfo_Team{} }
func (m *CMsgDOTATournamentInfo_Team) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_Team) ProtoMessage()               {}
func (*CMsgDOTATournamentInfo_Team) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0, 2} }

func (m *CMsgDOTATournamentInfo_Team) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Team) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_Team) GetTag() string {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_Team) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Team) GetEliminated() bool {
	if m != nil && m.Eliminated != nil {
		return *m.Eliminated
	}
	return false
}

type CMsgDOTATournamentInfo_UpcomingMatch struct {
	SeriesId                    *uint32 `protobuf:"varint,1,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	Team1Id                     *uint32 `protobuf:"varint,2,opt,name=team1_id,json=team1Id" json:"team1_id,omitempty"`
	Team2Id                     *uint32 `protobuf:"varint,3,opt,name=team2_id,json=team2Id" json:"team2_id,omitempty"`
	Bo                          *uint32 `protobuf:"varint,4,opt,name=bo" json:"bo,omitempty"`
	StageName                   *string `protobuf:"bytes,5,opt,name=stage_name,json=stageName" json:"stage_name,omitempty"`
	StartTime                   *uint32 `protobuf:"varint,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	WinnerStage                 *string `protobuf:"bytes,7,opt,name=winner_stage,json=winnerStage" json:"winner_stage,omitempty"`
	LoserStage                  *string `protobuf:"bytes,8,opt,name=loser_stage,json=loserStage" json:"loser_stage,omitempty"`
	Team1Tag                    *string `protobuf:"bytes,9,opt,name=team1_tag,json=team1Tag" json:"team1_tag,omitempty"`
	Team2Tag                    *string `protobuf:"bytes,10,opt,name=team2_tag,json=team2Tag" json:"team2_tag,omitempty"`
	Team1PrevOpponentTag        *string `protobuf:"bytes,11,opt,name=team1_prev_opponent_tag,json=team1PrevOpponentTag" json:"team1_prev_opponent_tag,omitempty"`
	Team2PrevOpponentTag        *string `protobuf:"bytes,12,opt,name=team2_prev_opponent_tag,json=team2PrevOpponentTag" json:"team2_prev_opponent_tag,omitempty"`
	Team1Logo                   *uint64 `protobuf:"varint,13,opt,name=team1_logo,json=team1Logo" json:"team1_logo,omitempty"`
	Team2Logo                   *uint64 `protobuf:"varint,14,opt,name=team2_logo,json=team2Logo" json:"team2_logo,omitempty"`
	Team1PrevOpponentLogo       *uint64 `protobuf:"varint,15,opt,name=team1_prev_opponent_logo,json=team1PrevOpponentLogo" json:"team1_prev_opponent_logo,omitempty"`
	Team2PrevOpponentLogo       *uint64 `protobuf:"varint,16,opt,name=team2_prev_opponent_logo,json=team2PrevOpponentLogo" json:"team2_prev_opponent_logo,omitempty"`
	Team1PrevOpponentId         *uint32 `protobuf:"varint,17,opt,name=team1_prev_opponent_id,json=team1PrevOpponentId" json:"team1_prev_opponent_id,omitempty"`
	Team2PrevOpponentId         *uint32 `protobuf:"varint,18,opt,name=team2_prev_opponent_id,json=team2PrevOpponentId" json:"team2_prev_opponent_id,omitempty"`
	Team1PrevMatchScore         *uint32 `protobuf:"varint,19,opt,name=team1_prev_match_score,json=team1PrevMatchScore" json:"team1_prev_match_score,omitempty"`
	Team1PrevMatchOpponentScore *uint32 `protobuf:"varint,20,opt,name=team1_prev_match_opponent_score,json=team1PrevMatchOpponentScore" json:"team1_prev_match_opponent_score,omitempty"`
	Team2PrevMatchScore         *uint32 `protobuf:"varint,21,opt,name=team2_prev_match_score,json=team2PrevMatchScore" json:"team2_prev_match_score,omitempty"`
	Team2PrevMatchOpponentScore *uint32 `protobuf:"varint,22,opt,name=team2_prev_match_opponent_score,json=team2PrevMatchOpponentScore" json:"team2_prev_match_opponent_score,omitempty"`
	PhaseType                   *uint32 `protobuf:"varint,23,opt,name=phase_type,json=phaseType" json:"phase_type,omitempty"`
	Team1Score                  *uint32 `protobuf:"varint,24,opt,name=team1_score,json=team1Score" json:"team1_score,omitempty"`
	Team2Score                  *uint32 `protobuf:"varint,25,opt,name=team2_score,json=team2Score" json:"team2_score,omitempty"`
	PhaseId                     *uint32 `protobuf:"varint,26,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	XXX_unrecognized            []byte  `json:"-"`
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) Reset()         { *m = CMsgDOTATournamentInfo_UpcomingMatch{} }
func (m *CMsgDOTATournamentInfo_UpcomingMatch) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_UpcomingMatch) ProtoMessage()    {}
func (*CMsgDOTATournamentInfo_UpcomingMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{0, 3}
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Id() uint32 {
	if m != nil && m.Team1Id != nil {
		return *m.Team1Id
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Id() uint32 {
	if m != nil && m.Team2Id != nil {
		return *m.Team2Id
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetBo() uint32 {
	if m != nil && m.Bo != nil {
		return *m.Bo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetStageName() string {
	if m != nil && m.StageName != nil {
		return *m.StageName
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetWinnerStage() string {
	if m != nil && m.WinnerStage != nil {
		return *m.WinnerStage
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetLoserStage() string {
	if m != nil && m.LoserStage != nil {
		return *m.LoserStage
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Tag() string {
	if m != nil && m.Team1Tag != nil {
		return *m.Team1Tag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Tag() string {
	if m != nil && m.Team2Tag != nil {
		return *m.Team2Tag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevOpponentTag() string {
	if m != nil && m.Team1PrevOpponentTag != nil {
		return *m.Team1PrevOpponentTag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevOpponentTag() string {
	if m != nil && m.Team2PrevOpponentTag != nil {
		return *m.Team2PrevOpponentTag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Logo() uint64 {
	if m != nil && m.Team1Logo != nil {
		return *m.Team1Logo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Logo() uint64 {
	if m != nil && m.Team2Logo != nil {
		return *m.Team2Logo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevOpponentLogo() uint64 {
	if m != nil && m.Team1PrevOpponentLogo != nil {
		return *m.Team1PrevOpponentLogo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevOpponentLogo() uint64 {
	if m != nil && m.Team2PrevOpponentLogo != nil {
		return *m.Team2PrevOpponentLogo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevOpponentId() uint32 {
	if m != nil && m.Team1PrevOpponentId != nil {
		return *m.Team1PrevOpponentId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevOpponentId() uint32 {
	if m != nil && m.Team2PrevOpponentId != nil {
		return *m.Team2PrevOpponentId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevMatchScore() uint32 {
	if m != nil && m.Team1PrevMatchScore != nil {
		return *m.Team1PrevMatchScore
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevMatchOpponentScore() uint32 {
	if m != nil && m.Team1PrevMatchOpponentScore != nil {
		return *m.Team1PrevMatchOpponentScore
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevMatchScore() uint32 {
	if m != nil && m.Team2PrevMatchScore != nil {
		return *m.Team2PrevMatchScore
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevMatchOpponentScore() uint32 {
	if m != nil && m.Team2PrevMatchOpponentScore != nil {
		return *m.Team2PrevMatchOpponentScore
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetPhaseType() uint32 {
	if m != nil && m.PhaseType != nil {
		return *m.PhaseType
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Score() uint32 {
	if m != nil && m.Team1Score != nil {
		return *m.Team1Score
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Score() uint32 {
	if m != nil && m.Team2Score != nil {
		return *m.Team2Score
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetPhaseId() uint32 {
	if m != nil && m.PhaseId != nil {
		return *m.PhaseId
	}
	return 0
}

type CMsgDOTATournamentInfo_News struct {
	Link             *string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Title            *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Image            *string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTATournamentInfo_News) Reset()                    { *m = CMsgDOTATournamentInfo_News{} }
func (m *CMsgDOTATournamentInfo_News) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_News) ProtoMessage()               {}
func (*CMsgDOTATournamentInfo_News) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0, 4} }

func (m *CMsgDOTATournamentInfo_News) GetLink() string {
	if m != nil && m.Link != nil {
		return *m.Link
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_News) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_News) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_News) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CMsgRequestWeekendTourneySchedule struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgRequestWeekendTourneySchedule) Reset()         { *m = CMsgRequestWeekendTourneySchedule{} }
func (m *CMsgRequestWeekendTourneySchedule) String() string { return proto.CompactTextString(m) }
func (*CMsgRequestWeekendTourneySchedule) ProtoMessage()    {}
func (*CMsgRequestWeekendTourneySchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{1}
}

type CMsgWeekendTourneySchedule struct {
	Divisions        []*CMsgWeekendTourneySchedule_Division `protobuf:"bytes,1,rep,name=divisions" json:"divisions,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *CMsgWeekendTourneySchedule) Reset()                    { *m = CMsgWeekendTourneySchedule{} }
func (m *CMsgWeekendTourneySchedule) String() string            { return proto.CompactTextString(m) }
func (*CMsgWeekendTourneySchedule) ProtoMessage()               {}
func (*CMsgWeekendTourneySchedule) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *CMsgWeekendTourneySchedule) GetDivisions() []*CMsgWeekendTourneySchedule_Division {
	if m != nil {
		return m.Divisions
	}
	return nil
}

type CMsgWeekendTourneySchedule_Division struct {
	DivisionCode       *uint32 `protobuf:"varint,1,opt,name=division_code,json=divisionCode" json:"division_code,omitempty"`
	TimeWindowOpen     *uint32 `protobuf:"varint,2,opt,name=time_window_open,json=timeWindowOpen" json:"time_window_open,omitempty"`
	TimeWindowClose    *uint32 `protobuf:"varint,3,opt,name=time_window_close,json=timeWindowClose" json:"time_window_close,omitempty"`
	TimeWindowOpenNext *uint32 `protobuf:"varint,4,opt,name=time_window_open_next,json=timeWindowOpenNext" json:"time_window_open_next,omitempty"`
	TrophyId           *uint32 `protobuf:"varint,5,opt,name=trophy_id,json=trophyId" json:"trophy_id,omitempty"`
	FreeWeekend        *bool   `protobuf:"varint,6,opt,name=free_weekend,json=freeWeekend" json:"free_weekend,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *CMsgWeekendTourneySchedule_Division) Reset()         { *m = CMsgWeekendTourneySchedule_Division{} }
func (m *CMsgWeekendTourneySchedule_Division) String() string { return proto.CompactTextString(m) }
func (*CMsgWeekendTourneySchedule_Division) ProtoMessage()    {}
func (*CMsgWeekendTourneySchedule_Division) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{2, 0}
}

func (m *CMsgWeekendTourneySchedule_Division) GetDivisionCode() uint32 {
	if m != nil && m.DivisionCode != nil {
		return *m.DivisionCode
	}
	return 0
}

func (m *CMsgWeekendTourneySchedule_Division) GetTimeWindowOpen() uint32 {
	if m != nil && m.TimeWindowOpen != nil {
		return *m.TimeWindowOpen
	}
	return 0
}

func (m *CMsgWeekendTourneySchedule_Division) GetTimeWindowClose() uint32 {
	if m != nil && m.TimeWindowClose != nil {
		return *m.TimeWindowClose
	}
	return 0
}

func (m *CMsgWeekendTourneySchedule_Division) GetTimeWindowOpenNext() uint32 {
	if m != nil && m.TimeWindowOpenNext != nil {
		return *m.TimeWindowOpenNext
	}
	return 0
}

func (m *CMsgWeekendTourneySchedule_Division) GetTrophyId() uint32 {
	if m != nil && m.TrophyId != nil {
		return *m.TrophyId
	}
	return 0
}

func (m *CMsgWeekendTourneySchedule_Division) GetFreeWeekend() bool {
	if m != nil && m.FreeWeekend != nil {
		return *m.FreeWeekend
	}
	return false
}

type CMsgWeekendTourneyOpts struct {
	Participating    *bool   `protobuf:"varint,1,opt,name=participating" json:"participating,omitempty"`
	DivisionId       *uint32 `protobuf:"varint,2,opt,name=division_id,json=divisionId" json:"division_id,omitempty"`
	Buyin            *uint32 `protobuf:"varint,3,opt,name=buyin" json:"buyin,omitempty"`
	SkillLevel       *uint32 `protobuf:"varint,4,opt,name=skill_level,json=skillLevel" json:"skill_level,omitempty"`
	MatchGroups      *uint32 `protobuf:"varint,5,opt,name=match_groups,json=matchGroups" json:"match_groups,omitempty"`
	TeamId           *uint32 `protobuf:"varint,6,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	PickupTeamName   *string `protobuf:"bytes,7,opt,name=pickup_team_name,json=pickupTeamName" json:"pickup_team_name,omitempty"`
	PickupTeamLogo   *uint64 `protobuf:"varint,8,opt,name=pickup_team_logo,json=pickupTeamLogo" json:"pickup_team_logo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgWeekendTourneyOpts) Reset()                    { *m = CMsgWeekendTourneyOpts{} }
func (m *CMsgWeekendTourneyOpts) String() string            { return proto.CompactTextString(m) }
func (*CMsgWeekendTourneyOpts) ProtoMessage()               {}
func (*CMsgWeekendTourneyOpts) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *CMsgWeekendTourneyOpts) GetParticipating() bool {
	if m != nil && m.Participating != nil {
		return *m.Participating
	}
	return false
}

func (m *CMsgWeekendTourneyOpts) GetDivisionId() uint32 {
	if m != nil && m.DivisionId != nil {
		return *m.DivisionId
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetBuyin() uint32 {
	if m != nil && m.Buyin != nil {
		return *m.Buyin
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetSkillLevel() uint32 {
	if m != nil && m.SkillLevel != nil {
		return *m.SkillLevel
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetMatchGroups() uint32 {
	if m != nil && m.MatchGroups != nil {
		return *m.MatchGroups
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetPickupTeamName() string {
	if m != nil && m.PickupTeamName != nil {
		return *m.PickupTeamName
	}
	return ""
}

func (m *CMsgWeekendTourneyOpts) GetPickupTeamLogo() uint64 {
	if m != nil && m.PickupTeamLogo != nil {
		return *m.PickupTeamLogo
	}
	return 0
}

type CMsgWeekendTourneyLeave struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgWeekendTourneyLeave) Reset()                    { *m = CMsgWeekendTourneyLeave{} }
func (m *CMsgWeekendTourneyLeave) String() string            { return proto.CompactTextString(m) }
func (*CMsgWeekendTourneyLeave) ProtoMessage()               {}
func (*CMsgWeekendTourneyLeave) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

type CMsgDOTATournament struct {
	TournamentId       *uint32                    `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	DivisionId         *uint32                    `protobuf:"varint,2,opt,name=division_id,json=divisionId" json:"division_id,omitempty"`
	ScheduleTime       *uint32                    `protobuf:"varint,3,opt,name=schedule_time,json=scheduleTime" json:"schedule_time,omitempty"`
	SkillLevel         *uint32                    `protobuf:"varint,4,opt,name=skill_level,json=skillLevel" json:"skill_level,omitempty"`
	TournamentTemplate *ETournamentTemplate       `protobuf:"varint,5,opt,name=tournament_template,json=tournamentTemplate,enum=dota.ETournamentTemplate,def=0" json:"tournament_template,omitempty"`
	State              *ETournamentState          `protobuf:"varint,6,opt,name=state,enum=dota.ETournamentState,def=0" json:"state,omitempty"`
	StateSeqNum        *uint32                    `protobuf:"varint,10,opt,name=state_seq_num,json=stateSeqNum" json:"state_seq_num,omitempty"`
	SeasonTrophyId     *uint32                    `protobuf:"varint,11,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
	Teams              []*CMsgDOTATournament_Team `protobuf:"bytes,7,rep,name=teams" json:"teams,omitempty"`
	Games              []*CMsgDOTATournament_Game `protobuf:"bytes,8,rep,name=games" json:"games,omitempty"`
	Nodes              []*CMsgDOTATournament_Node `protobuf:"bytes,9,rep,name=nodes" json:"nodes,omitempty"`
	XXX_unrecognized   []byte                     `json:"-"`
}

func (m *CMsgDOTATournament) Reset()                    { *m = CMsgDOTATournament{} }
func (m *CMsgDOTATournament) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournament) ProtoMessage()               {}
func (*CMsgDOTATournament) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

const Default_CMsgDOTATournament_TournamentTemplate ETournamentTemplate = ETournamentTemplate_k_ETournamentTemplate_None
const Default_CMsgDOTATournament_State ETournamentState = ETournamentState_k_ETournamentState_Unknown

func (m *CMsgDOTATournament) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTATournament) GetDivisionId() uint32 {
	if m != nil && m.DivisionId != nil {
		return *m.DivisionId
	}
	return 0
}

func (m *CMsgDOTATournament) GetScheduleTime() uint32 {
	if m != nil && m.ScheduleTime != nil {
		return *m.ScheduleTime
	}
	return 0
}

func (m *CMsgDOTATournament) GetSkillLevel() uint32 {
	if m != nil && m.SkillLevel != nil {
		return *m.SkillLevel
	}
	return 0
}

func (m *CMsgDOTATournament) GetTournamentTemplate() ETournamentTemplate {
	if m != nil && m.TournamentTemplate != nil {
		return *m.TournamentTemplate
	}
	return Default_CMsgDOTATournament_TournamentTemplate
}

func (m *CMsgDOTATournament) GetState() ETournamentState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CMsgDOTATournament_State
}

func (m *CMsgDOTATournament) GetStateSeqNum() uint32 {
	if m != nil && m.StateSeqNum != nil {
		return *m.StateSeqNum
	}
	return 0
}

func (m *CMsgDOTATournament) GetSeasonTrophyId() uint32 {
	if m != nil && m.SeasonTrophyId != nil {
		return *m.SeasonTrophyId
	}
	return 0
}

func (m *CMsgDOTATournament) GetTeams() []*CMsgDOTATournament_Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CMsgDOTATournament) GetGames() []*CMsgDOTATournament_Game {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *CMsgDOTATournament) GetNodes() []*CMsgDOTATournament_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type CMsgDOTATournament_Team struct {
	TeamGid          *uint64  `protobuf:"fixed64,1,opt,name=team_gid,json=teamGid" json:"team_gid,omitempty"`
	NodeOrState      *uint32  `protobuf:"varint,2,opt,name=node_or_state,json=nodeOrState" json:"node_or_state,omitempty"`
	Players          []uint32 `protobuf:"varint,3,rep,packed,name=players" json:"players,omitempty"`
	PlayerBuyin      []uint32 `protobuf:"varint,9,rep,packed,name=player_buyin,json=playerBuyin" json:"player_buyin,omitempty"`
	PlayerSkillLevel []uint32 `protobuf:"varint,10,rep,packed,name=player_skill_level,json=playerSkillLevel" json:"player_skill_level,omitempty"`
	MatchGroupMask   *uint32  `protobuf:"varint,12,opt,name=match_group_mask,json=matchGroupMask" json:"match_group_mask,omitempty"`
	TeamId           *uint32  `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName         *string  `protobuf:"bytes,5,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamBaseLogo     *uint64  `protobuf:"varint,7,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	TeamUiLogo       *uint64  `protobuf:"varint,8,opt,name=team_ui_logo,json=teamUiLogo" json:"team_ui_logo,omitempty"`
	TeamDate         *uint32  `protobuf:"varint,11,opt,name=team_date,json=teamDate" json:"team_date,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTATournament_Team) Reset()                    { *m = CMsgDOTATournament_Team{} }
func (m *CMsgDOTATournament_Team) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournament_Team) ProtoMessage()               {}
func (*CMsgDOTATournament_Team) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5, 0} }

func (m *CMsgDOTATournament_Team) GetTeamGid() uint64 {
	if m != nil && m.TeamGid != nil {
		return *m.TeamGid
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetNodeOrState() uint32 {
	if m != nil && m.NodeOrState != nil {
		return *m.NodeOrState
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetPlayers() []uint32 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTATournament_Team) GetPlayerBuyin() []uint32 {
	if m != nil {
		return m.PlayerBuyin
	}
	return nil
}

func (m *CMsgDOTATournament_Team) GetPlayerSkillLevel() []uint32 {
	if m != nil {
		return m.PlayerSkillLevel
	}
	return nil
}

func (m *CMsgDOTATournament_Team) GetMatchGroupMask() uint32 {
	if m != nil && m.MatchGroupMask != nil {
		return *m.MatchGroupMask
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTATournament_Team) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetTeamUiLogo() uint64 {
	if m != nil && m.TeamUiLogo != nil {
		return *m.TeamUiLogo
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetTeamDate() uint32 {
	if m != nil && m.TeamDate != nil {
		return *m.TeamDate
	}
	return 0
}

type CMsgDOTATournament_Game struct {
	NodeIdx          *uint32               `protobuf:"varint,1,opt,name=node_idx,json=nodeIdx" json:"node_idx,omitempty"`
	LobbyId          *uint64               `protobuf:"fixed64,2,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	MatchId          *uint64               `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TeamAGood        *bool                 `protobuf:"varint,4,opt,name=team_a_good,json=teamAGood" json:"team_a_good,omitempty"`
	State            *ETournamentGameState `protobuf:"varint,5,opt,name=state,enum=dota.ETournamentGameState,def=0" json:"state,omitempty"`
	StartTime        *uint32               `protobuf:"varint,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgDOTATournament_Game) Reset()                    { *m = CMsgDOTATournament_Game{} }
func (m *CMsgDOTATournament_Game) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournament_Game) ProtoMessage()               {}
func (*CMsgDOTATournament_Game) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5, 1} }

const Default_CMsgDOTATournament_Game_State ETournamentGameState = ETournamentGameState_k_ETournamentGameState_Unknown

func (m *CMsgDOTATournament_Game) GetNodeIdx() uint32 {
	if m != nil && m.NodeIdx != nil {
		return *m.NodeIdx
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetTeamAGood() bool {
	if m != nil && m.TeamAGood != nil {
		return *m.TeamAGood
	}
	return false
}

func (m *CMsgDOTATournament_Game) GetState() ETournamentGameState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CMsgDOTATournament_Game_State
}

func (m *CMsgDOTATournament_Game) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

type CMsgDOTATournament_Node struct {
	NodeId           *uint32               `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	TeamIdxA         *uint32               `protobuf:"varint,2,opt,name=team_idx_a,json=teamIdxA" json:"team_idx_a,omitempty"`
	TeamIdxB         *uint32               `protobuf:"varint,3,opt,name=team_idx_b,json=teamIdxB" json:"team_idx_b,omitempty"`
	NodeState        *ETournamentNodeState `protobuf:"varint,4,opt,name=node_state,json=nodeState,enum=dota.ETournamentNodeState,def=0" json:"node_state,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgDOTATournament_Node) Reset()                    { *m = CMsgDOTATournament_Node{} }
func (m *CMsgDOTATournament_Node) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournament_Node) ProtoMessage()               {}
func (*CMsgDOTATournament_Node) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5, 2} }

const Default_CMsgDOTATournament_Node_NodeState ETournamentNodeState = ETournamentNodeState_k_ETournamentNodeState_Unknown

func (m *CMsgDOTATournament_Node) GetNodeId() uint32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetTeamIdxA() uint32 {
	if m != nil && m.TeamIdxA != nil {
		return *m.TeamIdxA
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetTeamIdxB() uint32 {
	if m != nil && m.TeamIdxB != nil {
		return *m.TeamIdxB
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetNodeState() ETournamentNodeState {
	if m != nil && m.NodeState != nil {
		return *m.NodeState
	}
	return Default_CMsgDOTATournament_Node_NodeState
}

type CMsgDOTATournamentStateChange struct {
	NewTournamentId     *uint32                                     `protobuf:"varint,1,opt,name=new_tournament_id,json=newTournamentId" json:"new_tournament_id,omitempty"`
	Event               *ETournamentEvent                           `protobuf:"varint,2,opt,name=event,enum=dota.ETournamentEvent,def=0" json:"event,omitempty"`
	NewTournamentState  *ETournamentState                           `protobuf:"varint,3,opt,name=new_tournament_state,json=newTournamentState,enum=dota.ETournamentState,def=0" json:"new_tournament_state,omitempty"`
	GameChanges         []*CMsgDOTATournamentStateChange_GameChange `protobuf:"bytes,4,rep,name=game_changes,json=gameChanges" json:"game_changes,omitempty"`
	TeamChanges         []*CMsgDOTATournamentStateChange_TeamChange `protobuf:"bytes,5,rep,name=team_changes,json=teamChanges" json:"team_changes,omitempty"`
	MergedTournamentIds []uint32                                    `protobuf:"varint,6,rep,packed,name=merged_tournament_ids,json=mergedTournamentIds" json:"merged_tournament_ids,omitempty"`
	StateSeqNum         *uint32                                     `protobuf:"varint,7,opt,name=state_seq_num,json=stateSeqNum" json:"state_seq_num,omitempty"`
	XXX_unrecognized    []byte                                      `json:"-"`
}

func (m *CMsgDOTATournamentStateChange) Reset()                    { *m = CMsgDOTATournamentStateChange{} }
func (m *CMsgDOTATournamentStateChange) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentStateChange) ProtoMessage()               {}
func (*CMsgDOTATournamentStateChange) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

const Default_CMsgDOTATournamentStateChange_Event ETournamentEvent = ETournamentEvent_k_ETournamentEvent_None
const Default_CMsgDOTATournamentStateChange_NewTournamentState ETournamentState = ETournamentState_k_ETournamentState_Unknown

func (m *CMsgDOTATournamentStateChange) GetNewTournamentId() uint32 {
	if m != nil && m.NewTournamentId != nil {
		return *m.NewTournamentId
	}
	return 0
}

func (m *CMsgDOTATournamentStateChange) GetEvent() ETournamentEvent {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return Default_CMsgDOTATournamentStateChange_Event
}

func (m *CMsgDOTATournamentStateChange) GetNewTournamentState() ETournamentState {
	if m != nil && m.NewTournamentState != nil {
		return *m.NewTournamentState
	}
	return Default_CMsgDOTATournamentStateChange_NewTournamentState
}

func (m *CMsgDOTATournamentStateChange) GetGameChanges() []*CMsgDOTATournamentStateChange_GameChange {
	if m != nil {
		return m.GameChanges
	}
	return nil
}

func (m *CMsgDOTATournamentStateChange) GetTeamChanges() []*CMsgDOTATournamentStateChange_TeamChange {
	if m != nil {
		return m.TeamChanges
	}
	return nil
}

func (m *CMsgDOTATournamentStateChange) GetMergedTournamentIds() []uint32 {
	if m != nil {
		return m.MergedTournamentIds
	}
	return nil
}

func (m *CMsgDOTATournamentStateChange) GetStateSeqNum() uint32 {
	if m != nil && m.StateSeqNum != nil {
		return *m.StateSeqNum
	}
	return 0
}

type CMsgDOTATournamentStateChange_GameChange struct {
	MatchId          *uint64               `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	NewState         *ETournamentGameState `protobuf:"varint,2,opt,name=new_state,json=newState,enum=dota.ETournamentGameState,def=0" json:"new_state,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgDOTATournamentStateChange_GameChange) Reset() {
	*m = CMsgDOTATournamentStateChange_GameChange{}
}
func (m *CMsgDOTATournamentStateChange_GameChange) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentStateChange_GameChange) ProtoMessage()    {}
func (*CMsgDOTATournamentStateChange_GameChange) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{6, 0}
}

const Default_CMsgDOTATournamentStateChange_GameChange_NewState ETournamentGameState = ETournamentGameState_k_ETournamentGameState_Unknown

func (m *CMsgDOTATournamentStateChange_GameChange) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTATournamentStateChange_GameChange) GetNewState() ETournamentGameState {
	if m != nil && m.NewState != nil {
		return *m.NewState
	}
	return Default_CMsgDOTATournamentStateChange_GameChange_NewState
}

type CMsgDOTATournamentStateChange_TeamChange struct {
	TeamGid          *uint64 `protobuf:"varint,1,opt,name=team_gid,json=teamGid" json:"team_gid,omitempty"`
	NewNodeOrState   *uint32 `protobuf:"varint,2,opt,name=new_node_or_state,json=newNodeOrState" json:"new_node_or_state,omitempty"`
	OldNodeOrState   *uint32 `protobuf:"varint,3,opt,name=old_node_or_state,json=oldNodeOrState" json:"old_node_or_state,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTATournamentStateChange_TeamChange) Reset() {
	*m = CMsgDOTATournamentStateChange_TeamChange{}
}
func (m *CMsgDOTATournamentStateChange_TeamChange) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentStateChange_TeamChange) ProtoMessage()    {}
func (*CMsgDOTATournamentStateChange_TeamChange) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{6, 1}
}

func (m *CMsgDOTATournamentStateChange_TeamChange) GetTeamGid() uint64 {
	if m != nil && m.TeamGid != nil {
		return *m.TeamGid
	}
	return 0
}

func (m *CMsgDOTATournamentStateChange_TeamChange) GetNewNodeOrState() uint32 {
	if m != nil && m.NewNodeOrState != nil {
		return *m.NewNodeOrState
	}
	return 0
}

func (m *CMsgDOTATournamentStateChange_TeamChange) GetOldNodeOrState() uint32 {
	if m != nil && m.OldNodeOrState != nil {
		return *m.OldNodeOrState
	}
	return 0
}

type CMsgDOTATournamentRequest struct {
	TournamentId        *uint32 `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	ClientTournamentGid *uint64 `protobuf:"varint,2,opt,name=client_tournament_gid,json=clientTournamentGid" json:"client_tournament_gid,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CMsgDOTATournamentRequest) Reset()                    { *m = CMsgDOTATournamentRequest{} }
func (m *CMsgDOTATournamentRequest) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentRequest) ProtoMessage()               {}
func (*CMsgDOTATournamentRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{7} }

func (m *CMsgDOTATournamentRequest) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTATournamentRequest) GetClientTournamentGid() uint64 {
	if m != nil && m.ClientTournamentGid != nil {
		return *m.ClientTournamentGid
	}
	return 0
}

type CMsgDOTATournamentResponse struct {
	Result           *uint32             `protobuf:"varint,1,opt,name=result,def=2" json:"result,omitempty"`
	Tournament       *CMsgDOTATournament `protobuf:"bytes,2,opt,name=tournament" json:"tournament,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *CMsgDOTATournamentResponse) Reset()                    { *m = CMsgDOTATournamentResponse{} }
func (m *CMsgDOTATournamentResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentResponse) ProtoMessage()               {}
func (*CMsgDOTATournamentResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{8} }

const Default_CMsgDOTATournamentResponse_Result uint32 = 2

func (m *CMsgDOTATournamentResponse) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTATournamentResponse_Result
}

func (m *CMsgDOTATournamentResponse) GetTournament() *CMsgDOTATournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

type CMsgDOTAClearTournamentGame struct {
	TournamentId     *uint32 `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	GameId           *uint32 `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAClearTournamentGame) Reset()                    { *m = CMsgDOTAClearTournamentGame{} }
func (m *CMsgDOTAClearTournamentGame) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAClearTournamentGame) ProtoMessage()               {}
func (*CMsgDOTAClearTournamentGame) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{9} }

func (m *CMsgDOTAClearTournamentGame) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTAClearTournamentGame) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerSkillLevelStats struct {
	SkillLevel       *uint32 `protobuf:"varint,1,opt,name=skill_level,json=skillLevel" json:"skill_level,omitempty"`
	TimesWon_0       *uint32 `protobuf:"varint,2,opt,name=times_won_0,json=timesWon0" json:"times_won_0,omitempty"`
	TimesWon_1       *uint32 `protobuf:"varint,3,opt,name=times_won_1,json=timesWon1" json:"times_won_1,omitempty"`
	TimesWon_2       *uint32 `protobuf:"varint,4,opt,name=times_won_2,json=timesWon2" json:"times_won_2,omitempty"`
	TimesWon_3       *uint32 `protobuf:"varint,5,opt,name=times_won_3,json=timesWon3" json:"times_won_3,omitempty"`
	TimesByeAndLost  *uint32 `protobuf:"varint,6,opt,name=times_bye_and_lost,json=timesByeAndLost" json:"times_bye_and_lost,omitempty"`
	TimesByeAndWon   *uint32 `protobuf:"varint,7,opt,name=times_bye_and_won,json=timesByeAndWon" json:"times_bye_and_won,omitempty"`
	TotalGamesWon    *uint32 `protobuf:"varint,8,opt,name=total_games_won,json=totalGamesWon" json:"total_games_won,omitempty"`
	Score            *uint32 `protobuf:"varint,9,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) Reset() {
	*m = CMsgDOTAWeekendTourneyPlayerSkillLevelStats{}
}
func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAWeekendTourneyPlayerSkillLevelStats) ProtoMessage() {}
func (*CMsgDOTAWeekendTourneyPlayerSkillLevelStats) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{10}
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetSkillLevel() uint32 {
	if m != nil && m.SkillLevel != nil {
		return *m.SkillLevel
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesWon_0() uint32 {
	if m != nil && m.TimesWon_0 != nil {
		return *m.TimesWon_0
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesWon_1() uint32 {
	if m != nil && m.TimesWon_1 != nil {
		return *m.TimesWon_1
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesWon_2() uint32 {
	if m != nil && m.TimesWon_2 != nil {
		return *m.TimesWon_2
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesWon_3() uint32 {
	if m != nil && m.TimesWon_3 != nil {
		return *m.TimesWon_3
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesByeAndLost() uint32 {
	if m != nil && m.TimesByeAndLost != nil {
		return *m.TimesByeAndLost
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTimesByeAndWon() uint32 {
	if m != nil && m.TimesByeAndWon != nil {
		return *m.TimesByeAndWon
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetTotalGamesWon() uint32 {
	if m != nil && m.TotalGamesWon != nil {
		return *m.TotalGamesWon
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerSkillLevelStats) GetScore() uint32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerStats struct {
	AccountId        *uint32                                        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SeasonTrophyId   *uint32                                        `protobuf:"varint,2,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
	SkillLevels      []*CMsgDOTAWeekendTourneyPlayerSkillLevelStats `protobuf:"bytes,3,rep,name=skill_levels,json=skillLevels" json:"skill_levels,omitempty"`
	CurrentTier      *uint32                                        `protobuf:"varint,4,opt,name=current_tier,json=currentTier" json:"current_tier,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *CMsgDOTAWeekendTourneyPlayerStats) Reset()         { *m = CMsgDOTAWeekendTourneyPlayerStats{} }
func (m *CMsgDOTAWeekendTourneyPlayerStats) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAWeekendTourneyPlayerStats) ProtoMessage()    {}
func (*CMsgDOTAWeekendTourneyPlayerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{11}
}

func (m *CMsgDOTAWeekendTourneyPlayerStats) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerStats) GetSeasonTrophyId() uint32 {
	if m != nil && m.SeasonTrophyId != nil {
		return *m.SeasonTrophyId
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerStats) GetSkillLevels() []*CMsgDOTAWeekendTourneyPlayerSkillLevelStats {
	if m != nil {
		return m.SkillLevels
	}
	return nil
}

func (m *CMsgDOTAWeekendTourneyPlayerStats) GetCurrentTier() uint32 {
	if m != nil && m.CurrentTier != nil {
		return *m.CurrentTier
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerStatsRequest struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SeasonTrophyId   *uint32 `protobuf:"varint,2,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAWeekendTourneyPlayerStatsRequest) Reset() {
	*m = CMsgDOTAWeekendTourneyPlayerStatsRequest{}
}
func (m *CMsgDOTAWeekendTourneyPlayerStatsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAWeekendTourneyPlayerStatsRequest) ProtoMessage()    {}
func (*CMsgDOTAWeekendTourneyPlayerStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{12}
}

func (m *CMsgDOTAWeekendTourneyPlayerStatsRequest) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerStatsRequest) GetSeasonTrophyId() uint32 {
	if m != nil && m.SeasonTrophyId != nil {
		return *m.SeasonTrophyId
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerHistoryRequest struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	SeasonTrophyId   *uint32 `protobuf:"varint,2,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAWeekendTourneyPlayerHistoryRequest) Reset() {
	*m = CMsgDOTAWeekendTourneyPlayerHistoryRequest{}
}
func (m *CMsgDOTAWeekendTourneyPlayerHistoryRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAWeekendTourneyPlayerHistoryRequest) ProtoMessage() {}
func (*CMsgDOTAWeekendTourneyPlayerHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{13}
}

func (m *CMsgDOTAWeekendTourneyPlayerHistoryRequest) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerHistoryRequest) GetSeasonTrophyId() uint32 {
	if m != nil && m.SeasonTrophyId != nil {
		return *m.SeasonTrophyId
	}
	return 0
}

type CMsgDOTAWeekendTourneyPlayerHistory struct {
	AccountId        *uint32                                           `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Tournaments      []*CMsgDOTAWeekendTourneyPlayerHistory_Tournament `protobuf:"bytes,3,rep,name=tournaments" json:"tournaments,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory) Reset()         { *m = CMsgDOTAWeekendTourneyPlayerHistory{} }
func (m *CMsgDOTAWeekendTourneyPlayerHistory) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAWeekendTourneyPlayerHistory) ProtoMessage()    {}
func (*CMsgDOTAWeekendTourneyPlayerHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{14}
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory) GetTournaments() []*CMsgDOTAWeekendTourneyPlayerHistory_Tournament {
	if m != nil {
		return m.Tournaments
	}
	return nil
}

type CMsgDOTAWeekendTourneyPlayerHistory_Tournament struct {
	TournamentId     *uint32  `protobuf:"varint,1,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	StartTime        *uint32  `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	TournamentTier   *uint32  `protobuf:"varint,3,opt,name=tournament_tier,json=tournamentTier" json:"tournament_tier,omitempty"`
	TeamId           *uint32  `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamDate         *uint32  `protobuf:"varint,5,opt,name=team_date,json=teamDate" json:"team_date,omitempty"`
	TeamResult       *uint32  `protobuf:"varint,6,opt,name=team_result,json=teamResult" json:"team_result,omitempty"`
	AccountId        []uint32 `protobuf:"varint,7,rep,name=account_id,json=accountId" json:"account_id,omitempty"`
	TeamName         *string  `protobuf:"bytes,8,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	SeasonTrophyId   *uint32  `protobuf:"varint,9,opt,name=season_trophy_id,json=seasonTrophyId" json:"season_trophy_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) Reset() {
	*m = CMsgDOTAWeekendTourneyPlayerHistory_Tournament{}
}
func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAWeekendTourneyPlayerHistory_Tournament) ProtoMessage() {}
func (*CMsgDOTAWeekendTourneyPlayerHistory_Tournament) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{14, 0}
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTournamentTier() uint32 {
	if m != nil && m.TournamentTier != nil {
		return *m.TournamentTier
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTeamDate() uint32 {
	if m != nil && m.TeamDate != nil {
		return *m.TeamDate
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTeamResult() uint32 {
	if m != nil && m.TeamResult != nil {
		return *m.TeamResult
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetAccountId() []uint32 {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAWeekendTourneyPlayerHistory_Tournament) GetSeasonTrophyId() uint32 {
	if m != nil && m.SeasonTrophyId != nil {
		return *m.SeasonTrophyId
	}
	return 0
}

type CMsgDOTAWeekendTourneyParticipationDetails struct {
	Divisions        []*CMsgDOTAWeekendTourneyParticipationDetails_Division `protobuf:"bytes,1,rep,name=divisions" json:"divisions,omitempty"`
	XXX_unrecognized []byte                                                 `json:"-"`
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails) Reset() {
	*m = CMsgDOTAWeekendTourneyParticipationDetails{}
}
func (m *CMsgDOTAWeekendTourneyParticipationDetails) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAWeekendTourneyParticipationDetails) ProtoMessage() {}
func (*CMsgDOTAWeekendTourneyParticipationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{15}
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails) GetDivisions() []*CMsgDOTAWeekendTourneyParticipationDetails_Division {
	if m != nil {
		return m.Divisions
	}
	return nil
}

type CMsgDOTAWeekendTourneyParticipationDetails_Tier struct {
	Tier             *uint32 `protobuf:"varint,1,opt,name=tier" json:"tier,omitempty"`
	Players          *uint32 `protobuf:"varint,2,opt,name=players" json:"players,omitempty"`
	Teams            *uint32 `protobuf:"varint,3,opt,name=teams" json:"teams,omitempty"`
	WinningTeams     *uint32 `protobuf:"varint,4,opt,name=winning_teams,json=winningTeams" json:"winning_teams,omitempty"`
	PlayersStreak_2  *uint32 `protobuf:"varint,5,opt,name=players_streak_2,json=playersStreak2" json:"players_streak_2,omitempty"`
	PlayersStreak_3  *uint32 `protobuf:"varint,6,opt,name=players_streak_3,json=playersStreak3" json:"players_streak_3,omitempty"`
	PlayersStreak_4  *uint32 `protobuf:"varint,7,opt,name=players_streak_4,json=playersStreak4" json:"players_streak_4,omitempty"`
	PlayersStreak_5  *uint32 `protobuf:"varint,8,opt,name=players_streak_5,json=playersStreak5" json:"players_streak_5,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) Reset() {
	*m = CMsgDOTAWeekendTourneyParticipationDetails_Tier{}
}
func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAWeekendTourneyParticipationDetails_Tier) ProtoMessage() {}
func (*CMsgDOTAWeekendTourneyParticipationDetails_Tier) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{15, 0}
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetTier() uint32 {
	if m != nil && m.Tier != nil {
		return *m.Tier
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayers() uint32 {
	if m != nil && m.Players != nil {
		return *m.Players
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetTeams() uint32 {
	if m != nil && m.Teams != nil {
		return *m.Teams
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetWinningTeams() uint32 {
	if m != nil && m.WinningTeams != nil {
		return *m.WinningTeams
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayersStreak_2() uint32 {
	if m != nil && m.PlayersStreak_2 != nil {
		return *m.PlayersStreak_2
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayersStreak_3() uint32 {
	if m != nil && m.PlayersStreak_3 != nil {
		return *m.PlayersStreak_3
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayersStreak_4() uint32 {
	if m != nil && m.PlayersStreak_4 != nil {
		return *m.PlayersStreak_4
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Tier) GetPlayersStreak_5() uint32 {
	if m != nil && m.PlayersStreak_5 != nil {
		return *m.PlayersStreak_5
	}
	return 0
}

type CMsgDOTAWeekendTourneyParticipationDetails_Division struct {
	DivisionId       *uint32                                            `protobuf:"varint,1,opt,name=division_id,json=divisionId" json:"division_id,omitempty"`
	ScheduleTime     *uint32                                            `protobuf:"varint,2,opt,name=schedule_time,json=scheduleTime" json:"schedule_time,omitempty"`
	Tiers            []*CMsgDOTAWeekendTourneyParticipationDetails_Tier `protobuf:"bytes,3,rep,name=tiers" json:"tiers,omitempty"`
	XXX_unrecognized []byte                                             `json:"-"`
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Division) Reset() {
	*m = CMsgDOTAWeekendTourneyParticipationDetails_Division{}
}
func (m *CMsgDOTAWeekendTourneyParticipationDetails_Division) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAWeekendTourneyParticipationDetails_Division) ProtoMessage() {}
func (*CMsgDOTAWeekendTourneyParticipationDetails_Division) Descriptor() ([]byte, []int) {
	return fileDescriptor15, []int{15, 1}
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Division) GetDivisionId() uint32 {
	if m != nil && m.DivisionId != nil {
		return *m.DivisionId
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Division) GetScheduleTime() uint32 {
	if m != nil && m.ScheduleTime != nil {
		return *m.ScheduleTime
	}
	return 0
}

func (m *CMsgDOTAWeekendTourneyParticipationDetails_Division) GetTiers() []*CMsgDOTAWeekendTourneyParticipationDetails_Tier {
	if m != nil {
		return m.Tiers
	}
	return nil
}

func init() {
	proto.RegisterType((*CMsgDOTATournamentInfo)(nil), "dota.CMsgDOTATournamentInfo")
	proto.RegisterType((*CMsgDOTATournamentInfo_PhaseGroup)(nil), "dota.CMsgDOTATournamentInfo.PhaseGroup")
	proto.RegisterType((*CMsgDOTATournamentInfo_Phase)(nil), "dota.CMsgDOTATournamentInfo.Phase")
	proto.RegisterType((*CMsgDOTATournamentInfo_Team)(nil), "dota.CMsgDOTATournamentInfo.Team")
	proto.RegisterType((*CMsgDOTATournamentInfo_UpcomingMatch)(nil), "dota.CMsgDOTATournamentInfo.UpcomingMatch")
	proto.RegisterType((*CMsgDOTATournamentInfo_News)(nil), "dota.CMsgDOTATournamentInfo.News")
	proto.RegisterType((*CMsgRequestWeekendTourneySchedule)(nil), "dota.CMsgRequestWeekendTourneySchedule")
	proto.RegisterType((*CMsgWeekendTourneySchedule)(nil), "dota.CMsgWeekendTourneySchedule")
	proto.RegisterType((*CMsgWeekendTourneySchedule_Division)(nil), "dota.CMsgWeekendTourneySchedule.Division")
	proto.RegisterType((*CMsgWeekendTourneyOpts)(nil), "dota.CMsgWeekendTourneyOpts")
	proto.RegisterType((*CMsgWeekendTourneyLeave)(nil), "dota.CMsgWeekendTourneyLeave")
	proto.RegisterType((*CMsgDOTATournament)(nil), "dota.CMsgDOTATournament")
	proto.RegisterType((*CMsgDOTATournament_Team)(nil), "dota.CMsgDOTATournament.Team")
	proto.RegisterType((*CMsgDOTATournament_Game)(nil), "dota.CMsgDOTATournament.Game")
	proto.RegisterType((*CMsgDOTATournament_Node)(nil), "dota.CMsgDOTATournament.Node")
	proto.RegisterType((*CMsgDOTATournamentStateChange)(nil), "dota.CMsgDOTATournamentStateChange")
	proto.RegisterType((*CMsgDOTATournamentStateChange_GameChange)(nil), "dota.CMsgDOTATournamentStateChange.GameChange")
	proto.RegisterType((*CMsgDOTATournamentStateChange_TeamChange)(nil), "dota.CMsgDOTATournamentStateChange.TeamChange")
	proto.RegisterType((*CMsgDOTATournamentRequest)(nil), "dota.CMsgDOTATournamentRequest")
	proto.RegisterType((*CMsgDOTATournamentResponse)(nil), "dota.CMsgDOTATournamentResponse")
	proto.RegisterType((*CMsgDOTAClearTournamentGame)(nil), "dota.CMsgDOTAClearTournamentGame")
	proto.RegisterType((*CMsgDOTAWeekendTourneyPlayerSkillLevelStats)(nil), "dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats")
	proto.RegisterType((*CMsgDOTAWeekendTourneyPlayerStats)(nil), "dota.CMsgDOTAWeekendTourneyPlayerStats")
	proto.RegisterType((*CMsgDOTAWeekendTourneyPlayerStatsRequest)(nil), "dota.CMsgDOTAWeekendTourneyPlayerStatsRequest")
	proto.RegisterType((*CMsgDOTAWeekendTourneyPlayerHistoryRequest)(nil), "dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest")
	proto.RegisterType((*CMsgDOTAWeekendTourneyPlayerHistory)(nil), "dota.CMsgDOTAWeekendTourneyPlayerHistory")
	proto.RegisterType((*CMsgDOTAWeekendTourneyPlayerHistory_Tournament)(nil), "dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament")
	proto.RegisterType((*CMsgDOTAWeekendTourneyParticipationDetails)(nil), "dota.CMsgDOTAWeekendTourneyParticipationDetails")
	proto.RegisterType((*CMsgDOTAWeekendTourneyParticipationDetails_Tier)(nil), "dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier")
	proto.RegisterType((*CMsgDOTAWeekendTourneyParticipationDetails_Division)(nil), "dota.CMsgDOTAWeekendTourneyParticipationDetails.Division")
	proto.RegisterEnum("dota.ETournamentEvent", ETournamentEvent_name, ETournamentEvent_value)
}

func init() { proto.RegisterFile("dota_gcmessages_client_tournament.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 2600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x72, 0x1b, 0xc7,
	0x11, 0x36, 0x40, 0x00, 0x04, 0x1a, 0x04, 0x04, 0x8f, 0x44, 0x11, 0x82, 0x2c, 0x4b, 0x06, 0x95,
	0x88, 0x96, 0x53, 0x2c, 0x71, 0x69, 0xe5, 0xc7, 0x49, 0x25, 0x26, 0xa9, 0x1f, 0xa3, 0x22, 0x91,
	0xca, 0x12, 0x0e, 0x2b, 0x95, 0xaa, 0x6c, 0x2d, 0xb1, 0x23, 0x68, 0x8b, 0xbb, 0x33, 0xd0, 0xce,
	0x80, 0x20, 0x0e, 0xa9, 0x72, 0xf2, 0x00, 0xb9, 0xe6, 0x94, 0x6b, 0x2a, 0x4f, 0xe0, 0x6b, 0xce,
	0x79, 0x80, 0xdc, 0x73, 0x48, 0x2a, 0x79, 0x81, 0x54, 0xe5, 0x90, 0x43, 0x6a, 0x7a, 0x66, 0xb1,
	0xbb, 0xc0, 0xf2, 0xc7, 0x8e, 0x6f, 0xbb, 0xdd, 0x5f, 0xf7, 0xcc, 0x74, 0x4f, 0x7f, 0xd3, 0x33,
	0xf0, 0xc0, 0xe3, 0xd2, 0x75, 0x86, 0x83, 0x90, 0x0a, 0xe1, 0x0e, 0xa9, 0x70, 0x06, 0x81, 0x4f,
	0x99, 0x74, 0x24, 0x1f, 0x47, 0xcc, 0x0d, 0x29, 0x93, 0x9b, 0xa3, 0x88, 0x4b, 0x4e, 0x4a, 0x0a,
	0xd8, 0x59, 0x43, 0xb8, 0xc1, 0x50, 0x36, 0x0e, 0x85, 0x56, 0x77, 0xff, 0x72, 0x0d, 0x6e, 0xee,
	0xbd, 0x14, 0xc3, 0x27, 0x07, 0xfd, 0x9d, 0xfe, 0xcc, 0xb6, 0xc7, 0x5e, 0x73, 0x72, 0x1b, 0x6a,
	0x01, 0x75, 0x87, 0x63, 0xea, 0xf8, 0x5e, 0xbb, 0x70, 0xaf, 0xb0, 0xd1, 0xb0, 0xab, 0x5a, 0xd0,
	0xf3, 0xc8, 0x0e, 0xc0, 0xe8, 0x8d, 0x2b, 0xa8, 0x13, 0xf8, 0x42, 0xb6, 0x8b, 0xf7, 0x96, 0x36,
	0xea, 0x56, 0x77, 0x53, 0x8d, 0xb2, 0x99, 0xef, 0x6e, 0xf3, 0x95, 0x82, 0xdb, 0x35, 0xb4, 0x7a,
	0xe1, 0x0b, 0x49, 0x3e, 0x05, 0x90, 0xd4, 0x0d, 0x85, 0x76, 0xb1, 0x84, 0x2e, 0x3e, 0xb8, 0xd0,
	0x45, 0x9f, 0xba, 0xa1, 0x5d, 0x43, 0x23, 0xf4, 0xf0, 0x2b, 0x58, 0x1d, 0x8f, 0x06, 0x3c, 0xf4,
	0xd9, 0xd0, 0x09, 0x5d, 0x39, 0x78, 0x43, 0x8d, 0xb3, 0x12, 0x3a, 0x7b, 0x78, 0xa1, 0xb3, 0xcf,
	0x8d, 0xe5, 0x4b, 0x65, 0x68, 0x5f, 0x1f, 0xa7, 0x7f, 0xa9, 0xf6, 0xff, 0x63, 0xa8, 0x31, 0x3a,
	0x31, 0x3e, 0xcb, 0x57, 0x98, 0xe0, 0x3e, 0x9d, 0x08, 0xbb, 0xaa, 0x6c, 0x94, 0x7d, 0xe7, 0x19,
	0x00, 0xae, 0xfa, 0x79, 0xc4, 0xc7, 0x23, 0x72, 0x0b, 0xaa, 0x43, 0xf5, 0x91, 0x84, 0x73, 0x19,
	0xff, 0x7b, 0x1e, 0xb9, 0x03, 0xa0, 0x55, 0xca, 0x57, 0xbb, 0x78, 0xaf, 0xb0, 0x51, 0xb3, 0x6b,
	0x28, 0xd9, 0x77, 0x43, 0xda, 0xf9, 0x5d, 0x11, 0xca, 0xe8, 0x48, 0xf9, 0xd0, 0x61, 0x4f, 0x7c,
	0xe0, 0xbf, 0xf6, 0xa1, 0x55, 0x69, 0x1f, 0x28, 0x51, 0x3e, 0xc8, 0x1a, 0x2c, 0xcb, 0xe9, 0x08,
	0x0d, 0x97, 0xd0, 0xb0, 0xa2, 0x7e, 0x7b, 0x1e, 0x79, 0x1f, 0xc0, 0x97, 0x34, 0x72, 0xa5, 0xcf,
	0x99, 0x68, 0x97, 0x50, 0x97, 0x92, 0x90, 0xfb, 0xd0, 0x0c, 0x7d, 0xe6, 0x08, 0xe9, 0x46, 0xd2,
	0x91, 0x7e, 0x48, 0xdb, 0x65, 0xc4, 0xac, 0x84, 0x3e, 0x3b, 0x54, 0xc2, 0xbe, 0x1f, 0x52, 0x44,
	0xb9, 0x67, 0x69, 0x54, 0xc5, 0xa0, 0xdc, 0xb3, 0x04, 0xf5, 0x2c, 0x5e, 0x27, 0x46, 0x74, 0x19,
	0x23, 0xfa, 0xe0, 0xf2, 0x5d, 0x83, 0xf1, 0x33, 0x01, 0xc1, 0xc0, 0xfe, 0xb6, 0x00, 0x25, 0xb5,
	0x19, 0x70, 0x55, 0xd4, 0x0d, 0x93, 0x70, 0x54, 0xd4, 0x6f, 0xcf, 0x23, 0x04, 0x4a, 0xa9, 0x38,
	0xe0, 0x37, 0x69, 0xc1, 0x92, 0x74, 0x87, 0xb8, 0xfc, 0x9a, 0xad, 0x3e, 0xd5, 0x16, 0x47, 0xf3,
	0x80, 0x0f, 0x39, 0x2e, 0xbd, 0x64, 0x57, 0x95, 0xe0, 0x05, 0x1f, 0x72, 0x15, 0x18, 0x1a, 0xf8,
	0xa1, 0xcf, 0x5c, 0x49, 0x3d, 0x5c, 0x74, 0xd5, 0x4e, 0x49, 0x3a, 0x7f, 0xaa, 0x42, 0x23, 0xb3,
	0x89, 0x94, 0x3b, 0x41, 0x23, 0x9f, 0x8a, 0x54, 0xc5, 0x68, 0x41, 0xcf, 0x53, 0xa9, 0x53, 0xae,
	0xb7, 0x94, 0xae, 0xa8, 0x53, 0x87, 0xff, 0x89, 0xca, 0x4a, 0x92, 0x83, 0x2a, 0xab, 0xe7, 0x91,
	0x26, 0x14, 0x8f, 0xb9, 0xc9, 0x4a, 0xf1, 0x98, 0xab, 0x2c, 0x0b, 0xe9, 0x0e, 0x4d, 0x96, 0xcb,
	0x3a, 0xcb, 0x28, 0xc1, 0x2c, 0x6b, 0x75, 0x36, 0x05, 0x35, 0x31, 0x8b, 0xff, 0x07, 0xb0, 0x32,
	0xf1, 0x19, 0xa3, 0x91, 0x83, 0x26, 0xed, 0x65, 0xb4, 0xaf, 0x6b, 0xd9, 0xa1, 0x12, 0x91, 0xbb,
	0x50, 0x0f, 0xb8, 0x98, 0x21, 0xaa, 0x88, 0x00, 0x14, 0x69, 0x80, 0x89, 0xd9, 0x96, 0xa3, 0x62,
	0x59, 0x43, 0xb5, 0x5e, 0x58, 0x3f, 0x09, 0xa8, 0x85, 0x4a, 0x48, 0x94, 0x96, 0x52, 0x3e, 0x86,
	0x35, 0x6d, 0x39, 0x8a, 0xe8, 0xa9, 0xc3, 0x47, 0x23, 0xce, 0x90, 0xb2, 0xdc, 0x61, 0xbb, 0x8e,
	0xd0, 0x1b, 0xa8, 0x7e, 0x15, 0xd1, 0xd3, 0x03, 0xa3, 0x4c, 0x99, 0x59, 0x39, 0x66, 0x2b, 0x89,
	0x99, 0x35, 0x6f, 0x76, 0x47, 0xd3, 0xcb, 0x96, 0x4e, 0x6e, 0x03, 0x93, 0xab, 0x67, 0x8e, 0xd9,
	0x35, 0x6a, 0x4b, 0xab, 0x9b, 0x89, 0xda, 0x42, 0xf5, 0xf7, 0xa0, 0x9d, 0x37, 0x57, 0x04, 0x5f,
	0x43, 0xf0, 0xea, 0xc2, 0x64, 0xd3, 0x86, 0x56, 0x9e, 0x61, 0x2b, 0x31, 0xb4, 0x16, 0x0c, 0xb7,
	0xe1, 0x66, 0xde, 0x88, 0xbe, 0xd7, 0x7e, 0x17, 0xd3, 0x78, 0x7d, 0x61, 0xbc, 0x9e, 0x17, 0x1b,
	0x59, 0x8b, 0x46, 0x24, 0x31, 0xb2, 0xf2, 0x8d, 0xcc, 0x48, 0x48, 0x9c, 0x8e, 0x18, 0xf0, 0x88,
	0xb6, 0xaf, 0xcf, 0x8d, 0x84, 0xdb, 0xfa, 0x50, 0xa9, 0xc8, 0x13, 0xb8, 0xbb, 0x60, 0x34, 0x1b,
	0x4f, 0x5b, 0xdf, 0x40, 0xeb, 0xdb, 0x59, 0xeb, 0x78, 0x5c, 0xed, 0x25, 0x3b, 0xdf, 0xf4, 0xd0,
	0xab, 0x73, 0xf3, 0x5d, 0x1c, 0xda, 0xba, 0x60, 0xe8, 0x9b, 0xc9, 0xd0, 0xd6, 0x39, 0x43, 0xcf,
	0xf8, 0x51, 0xf1, 0x5e, 0x7b, 0x4d, 0x97, 0x06, 0x4a, 0xfa, 0xd3, 0x11, 0xee, 0x7b, 0xbd, 0x3e,
	0xed, 0xb0, 0xad, 0x79, 0x10, 0x45, 0xda, 0xde, 0x00, 0x2c, 0x03, 0xb8, 0x95, 0x00, 0x2c, 0x0d,
	0x48, 0x73, 0x73, 0x27, 0xc3, 0xcd, 0x1d, 0x0f, 0x4a, 0xea, 0x68, 0x50, 0xac, 0x14, 0xf8, 0xec,
	0x04, 0xb9, 0xa1, 0x66, 0xe3, 0x37, 0xb9, 0x01, 0x65, 0xe9, 0xcb, 0x20, 0xa6, 0x2a, 0xfd, 0xa3,
	0xa4, 0x7e, 0xa8, 0x0a, 0x50, 0xb3, 0x95, 0xfe, 0x21, 0xef, 0x41, 0x4d, 0x15, 0xb6, 0x90, 0x6e,
	0x38, 0x32, 0xa4, 0x90, 0x08, 0xba, 0xeb, 0xf0, 0x81, 0x62, 0x51, 0x9b, 0xbe, 0x1d, 0x53, 0x21,
	0x8f, 0x28, 0x3d, 0xa1, 0xcc, 0x43, 0x3e, 0xa5, 0xd3, 0xc3, 0xc1, 0x1b, 0xea, 0x8d, 0x03, 0xda,
	0xfd, 0x5b, 0x11, 0x3a, 0x0a, 0x95, 0xaf, 0x26, 0xcf, 0xa1, 0xe6, 0xf9, 0xa7, 0xbe, 0xc0, 0xc3,
	0xa0, 0x80, 0x04, 0xfd, 0x61, 0x42, 0xd0, 0xf9, 0x46, 0x9b, 0x4f, 0x8c, 0x85, 0x9d, 0xd8, 0x76,
	0xfe, 0x53, 0x80, 0x6a, 0x2c, 0x27, 0xeb, 0xd0, 0x88, 0x35, 0xce, 0x80, 0x7b, 0xd4, 0x90, 0xe3,
	0x4a, 0x2c, 0xdc, 0xe3, 0x1e, 0x25, 0x1b, 0xd0, 0x52, 0x6b, 0x71, 0x26, 0x3e, 0xf3, 0xf8, 0xc4,
	0xe1, 0x23, 0xca, 0x0c, 0x51, 0x36, 0x95, 0xfc, 0x08, 0xc5, 0x07, 0x23, 0xca, 0xc8, 0x43, 0x78,
	0x37, 0x8d, 0x1c, 0x28, 0x76, 0x32, 0xc4, 0x79, 0x2d, 0x81, 0xee, 0x29, 0x31, 0xd9, 0x82, 0xd5,
	0x79, 0xaf, 0x0e, 0xa3, 0x67, 0xd2, 0x84, 0x8f, 0x64, 0x5d, 0xef, 0xd3, 0x33, 0x89, 0x24, 0x16,
	0xf1, 0xd1, 0x9b, 0xa9, 0xca, 0xa4, 0x3e, 0xec, 0xaa, 0x5a, 0xd0, 0xf3, 0x14, 0x85, 0xbe, 0x8e,
	0x28, 0x75, 0x26, 0x3a, 0x14, 0xc8, 0xb1, 0x55, 0xbb, 0xae, 0x64, 0x26, 0x3a, 0xdd, 0x3f, 0x16,
	0x75, 0x4f, 0x95, 0x8d, 0xd6, 0xc1, 0x48, 0xaa, 0xc3, 0xb4, 0x31, 0x72, 0x23, 0xe9, 0x0f, 0xfc,
	0x91, 0x2b, 0x7d, 0x36, 0xc4, 0x40, 0x54, 0xed, 0xac, 0x50, 0x6d, 0xb5, 0x59, 0xb8, 0x66, 0xa7,
	0x05, 0xc4, 0xa2, 0x9e, 0xa7, 0x76, 0xc7, 0xf1, 0x78, 0xea, 0x33, 0xb3, 0x68, 0xfd, 0xa3, 0xcc,
	0xc4, 0x89, 0x1f, 0x04, 0x4e, 0x40, 0x4f, 0x69, 0x10, 0x1f, 0xe5, 0x28, 0x7a, 0xa1, 0x24, 0x6a,
	0xee, 0xba, 0x7a, 0xf0, 0x24, 0x15, 0x66, 0x6d, 0x75, 0x94, 0xe1, 0x19, 0x2b, 0xd2, 0x07, 0x6a,
	0x25, 0x73, 0xa0, 0x6e, 0x40, 0x6b, 0xe4, 0x0f, 0x4e, 0xc6, 0x23, 0x07, 0xf5, 0x78, 0xfc, 0xe8,
	0xe3, 0xa3, 0xa9, 0xe5, 0xea, 0x3c, 0xc6, 0x33, 0x68, 0x0e, 0x89, 0xcc, 0x57, 0x45, 0xe6, 0x4b,
	0x21, 0x15, 0xe5, 0x75, 0x6f, 0xc1, 0xda, 0x62, 0x9c, 0x5e, 0x50, 0xf7, 0x94, 0x76, 0xff, 0x09,
	0x40, 0x16, 0x5b, 0x02, 0xb5, 0x91, 0x92, 0x0e, 0x37, 0x39, 0x65, 0x57, 0x12, 0x61, 0xcf, 0xbb,
	0x3c, 0x7c, 0xeb, 0xd0, 0x10, 0x66, 0xef, 0xea, 0x83, 0x52, 0x87, 0x71, 0x25, 0x16, 0xe2, 0x59,
	0x79, 0x69, 0x34, 0x5f, 0xc3, 0xf5, 0xd4, 0x5c, 0x24, 0x0d, 0x47, 0x81, 0x2b, 0xf5, 0x99, 0xdc,
	0xb4, 0x6e, 0xe9, 0xa2, 0x79, 0x9a, 0xcc, 0xbd, 0x6f, 0x00, 0x9f, 0x74, 0x4e, 0x9c, 0x1c, 0xb1,
	0xb3, 0xcf, 0x19, 0xb5, 0x89, 0x5c, 0x50, 0x90, 0xcf, 0xa0, 0x2c, 0xa4, 0xf2, 0x5c, 0x41, 0xcf,
	0x37, 0x17, 0x3c, 0x1f, 0xca, 0x45, 0xb7, 0x28, 0x73, 0x3e, 0x67, 0x27, 0x8c, 0x4f, 0x98, 0xad,
	0x1d, 0x90, 0x2e, 0x34, 0xf0, 0xc3, 0x11, 0xf4, 0xad, 0xc3, 0xc6, 0x21, 0x9e, 0xd0, 0x0d, 0xbb,
	0x8e, 0xc2, 0x43, 0xfa, 0x76, 0x7f, 0x1c, 0xaa, 0xec, 0x09, 0xea, 0x0a, 0xce, 0x9c, 0xa4, 0x06,
	0xea, 0xba, 0x0a, 0xb5, 0xbc, 0x1f, 0x57, 0xc2, 0x36, 0x94, 0xb1, 0x15, 0x37, 0x7d, 0xdc, 0x9d,
	0xf3, 0xfa, 0x38, 0xdd, 0xb6, 0x6b, 0xac, 0x32, 0x1a, 0xba, 0x21, 0x15, 0xed, 0xea, 0x25, 0x46,
	0xcf, 0xdd, 0x90, 0xda, 0x1a, 0xab, 0x8c, 0x18, 0xf7, 0xa8, 0x68, 0xd7, 0x2e, 0x31, 0xda, 0xe7,
	0x1e, 0xb5, 0x35, 0xb6, 0xf3, 0x9b, 0x25, 0xd3, 0x23, 0x9a, 0xee, 0xca, 0x19, 0x9a, 0xed, 0x52,
	0xd1, 0xdd, 0xd5, 0x73, 0xdf, 0x53, 0x01, 0x51, 0x60, 0x87, 0x63, 0xbb, 0x23, 0xa9, 0xd9, 0x2b,
	0x75, 0x25, 0x3c, 0x88, 0x30, 0x86, 0xe4, 0x3d, 0x58, 0x1e, 0x05, 0xee, 0x94, 0x46, 0x02, 0xef,
	0x28, 0x8d, 0xdd, 0x62, 0xab, 0x60, 0xc7, 0x22, 0xf2, 0x2d, 0x58, 0xd1, 0x9f, 0x8e, 0x2e, 0xc8,
	0xda, 0x0c, 0x52, 0xd7, 0xf2, 0x5d, 0x2c, 0xcd, 0x47, 0x40, 0x0c, 0x2c, 0xbd, 0xa7, 0x60, 0x06,
	0x6e, 0x69, 0xed, 0x61, 0xb2, 0xbb, 0x36, 0xa0, 0x95, 0xaa, 0x55, 0x27, 0x74, 0xc5, 0x09, 0xb6,
	0x3b, 0x0d, 0xbb, 0x99, 0xd4, 0xeb, 0x4b, 0x57, 0x9c, 0xa4, 0x4b, 0xb6, 0x94, 0x29, 0xd9, 0xb8,
	0xbb, 0x4d, 0xb5, 0x8a, 0x18, 0x09, 0xac, 0xd2, 0xfb, 0xd0, 0x44, 0xe5, 0x31, 0x5e, 0xe2, 0x54,
	0x8d, 0x2e, 0x63, 0x8d, 0xae, 0x28, 0xe9, 0xae, 0xba, 0xa3, 0xa9, 0xa6, 0xe4, 0x1e, 0xe0, 0xbf,
	0x33, 0xf6, 0xd3, 0x75, 0x8c, 0xa7, 0xde, 0xe7, 0x3e, 0x22, 0xe2, 0x41, 0x3c, 0x15, 0xbe, 0xba,
	0x21, 0x4b, 0xea, 0x86, 0x4f, 0x5c, 0x49, 0x3b, 0xff, 0x2a, 0x40, 0x49, 0x25, 0x52, 0xe5, 0x00,
	0x03, 0xed, 0x7b, 0x67, 0xf1, 0xbd, 0x45, 0xfd, 0xf7, 0xbc, 0x33, 0xa5, 0x0a, 0xf8, 0xf1, 0xf1,
	0x34, 0x2e, 0xd5, 0x8a, 0xbd, 0x8c, 0xff, 0xba, 0x2f, 0xd6, 0x31, 0x30, 0x7d, 0x71, 0xc9, 0x5e,
	0xc6, 0x7f, 0xbc, 0xb5, 0xe0, 0x69, 0xec, 0xb8, 0xce, 0x90, 0x73, 0xbd, 0xf0, 0xaa, 0xee, 0xdf,
	0x76, 0x9e, 0x73, 0xee, 0x91, 0x57, 0x71, 0xd1, 0xe8, 0x72, 0xec, 0x2c, 0x14, 0x8d, 0x9a, 0x96,
	0x2e, 0x9c, 0xf7, 0x33, 0x85, 0x33, 0x93, 0xcf, 0x17, 0xcf, 0xc5, 0xad, 0x75, 0xe7, 0xcb, 0x02,
	0x94, 0xd4, 0xf6, 0x53, 0xe9, 0x30, 0x4b, 0x8d, 0xaf, 0x24, 0x7a, 0xa5, 0xe4, 0x3d, 0xdd, 0x71,
	0xaa, 0x18, 0x38, 0xae, 0xd9, 0x69, 0x55, 0x9d, 0xaa, 0xb3, 0x9d, 0x8c, 0xf6, 0xd8, 0x10, 0x52,
	0xac, 0xdd, 0x25, 0xbf, 0x00, 0x40, 0xa7, 0x7a, 0x4d, 0xa5, 0x73, 0xd6, 0xa4, 0xc6, 0xcf, 0x5b,
	0xd3, 0x4c, 0x3e, 0x5b, 0x53, 0x8d, 0xc5, 0xa2, 0xee, 0x7f, 0xcb, 0x70, 0x67, 0xb1, 0x94, 0x50,
	0xb7, 0xf7, 0xc6, 0x65, 0x43, 0xaa, 0x8e, 0x5b, 0x46, 0x27, 0x4e, 0x1e, 0xf1, 0x5e, 0x63, 0x74,
	0xd2, 0x4f, 0x73, 0xef, 0x53, 0x28, 0xd3, 0x53, 0xca, 0x24, 0xae, 0x2f, 0x8f, 0xac, 0x9e, 0x2a,
	0xed, 0x27, 0x6b, 0x99, 0xf9, 0xa1, 0x4c, 0x13, 0xa0, 0xb6, 0x26, 0x1e, 0xdc, 0x98, 0x1b, 0x52,
	0xaf, 0x7c, 0xe9, 0x6b, 0x53, 0x20, 0xc9, 0xcc, 0x54, 0x97, 0xf6, 0xcf, 0x60, 0x45, 0x11, 0x8c,
	0x33, 0xc0, 0x75, 0x0a, 0xf3, 0x6c, 0xb0, 0x79, 0x1e, 0xbd, 0xa4, 0x62, 0x82, 0xf4, 0xa4, 0x3f,
	0xed, 0xfa, 0x70, 0xf6, 0x2d, 0x94, 0x4b, 0x4c, 0x63, 0xec, 0xb2, 0x7c, 0x75, 0x97, 0x8a, 0xac,
	0x62, 0x97, 0x72, 0xf6, 0x2d, 0xc8, 0x77, 0x61, 0x35, 0xa4, 0xd1, 0x90, 0x7a, 0xd9, 0x0c, 0x88,
	0x76, 0x65, 0x46, 0x1f, 0xd7, 0x35, 0x20, 0x9d, 0x09, 0xb1, 0xc8, 0xf6, 0xcb, 0x0b, 0x6c, 0xdf,
	0xf9, 0xa2, 0x00, 0x90, 0x2c, 0x25, 0x53, 0x70, 0x85, 0x6c, 0xc1, 0x1d, 0xe1, 0x5b, 0x48, 0x8a,
	0x26, 0xff, 0xbf, 0xa2, 0xaa, 0x32, 0x3a, 0x41, 0x49, 0xe7, 0xd7, 0x00, 0xc9, 0xca, 0x17, 0xc8,
	0xba, 0x94, 0x90, 0xf5, 0x87, 0x7a, 0x1b, 0xe6, 0x11, 0x76, 0x93, 0xd1, 0xc9, 0x7e, 0x8a, 0xb3,
	0x3f, 0x84, 0x77, 0x79, 0xe0, 0xcd, 0x41, 0x75, 0x4d, 0x35, 0x79, 0xe0, 0xa5, 0xa0, 0x5d, 0x09,
	0xb7, 0x16, 0xd3, 0x62, 0x5a, 0xe8, 0xab, 0xb5, 0x1b, 0x16, 0xac, 0x2e, 0x3c, 0xbe, 0xe1, 0xfc,
	0x8b, 0x38, 0xff, 0xeb, 0x5a, 0x99, 0x0a, 0x86, 0xef, 0x75, 0xdf, 0xea, 0x26, 0x7c, 0x7e, 0x54,
	0x31, 0xe2, 0x0c, 0x5f, 0x79, 0x2a, 0x11, 0x15, 0xe3, 0x40, 0xea, 0xf1, 0x3e, 0x29, 0x58, 0xb6,
	0x11, 0x90, 0xef, 0x03, 0x24, 0xa3, 0xe0, 0x08, 0x75, 0xab, 0x7d, 0xde, 0xee, 0xb2, 0x53, 0xd8,
	0xee, 0x2f, 0xe1, 0x76, 0x8c, 0xd8, 0x0b, 0xa8, 0x1b, 0x65, 0xb3, 0x73, 0xb5, 0xa5, 0xae, 0xc1,
	0x32, 0x16, 0xcc, 0xac, 0xab, 0xaa, 0xa8, 0xdf, 0x9e, 0xd7, 0xfd, 0x7b, 0x11, 0x3e, 0x8a, 0xbd,
	0x67, 0xdb, 0xb9, 0x57, 0x73, 0x07, 0x9b, 0x8a, 0xba, 0x98, 0x6f, 0xae, 0x0a, 0x0b, 0xcd, 0x95,
	0xe2, 0x77, 0x75, 0xb1, 0x71, 0x26, 0x9c, 0x39, 0x8f, 0xcc, 0x68, 0xfa, 0xae, 0x73, 0xc4, 0xd9,
	0xa3, 0xac, 0x7e, 0xcb, 0xe4, 0x76, 0xa6, 0xdf, 0xca, 0xea, 0xad, 0xcc, 0x5d, 0xe9, 0x88, 0x33,
	0x2b, 0xab, 0xdf, 0x36, 0x9d, 0xf0, 0x4c, 0xbf, 0x4d, 0x3e, 0x02, 0xa2, 0xf5, 0xc7, 0x53, 0xea,
	0xb8, 0xcc, 0x73, 0x02, 0x2e, 0xa4, 0x61, 0x7d, 0xbc, 0x63, 0x88, 0xdd, 0x29, 0xdd, 0x61, 0xde,
	0x0b, 0x2e, 0xa4, 0xda, 0x6e, 0x59, 0xf0, 0x84, 0x33, 0x53, 0x6d, 0xcd, 0x14, 0xf6, 0x88, 0x33,
	0xf2, 0x6d, 0xb8, 0x26, 0xb9, 0x74, 0x03, 0x07, 0x3b, 0x1b, 0x04, 0x56, 0x11, 0xd8, 0x40, 0xb1,
	0x4a, 0x85, 0x9a, 0x80, 0xea, 0xf0, 0xf5, 0x3d, 0xb3, 0xa6, 0x3b, 0x7c, 0xfc, 0xe9, 0xfe, 0xa3,
	0xa0, 0xaf, 0x78, 0xe7, 0x86, 0x19, 0x83, 0x7b, 0x07, 0xc0, 0x1d, 0x0c, 0xf8, 0x38, 0x9d, 0xc7,
	0x9a, 0x91, 0xe8, 0x4e, 0x7e, 0xa1, 0xc3, 0x2b, 0xe6, 0x76, 0x78, 0x7d, 0x58, 0x49, 0x65, 0x49,
	0x98, 0x37, 0xda, 0xad, 0xec, 0x76, 0xbb, 0x42, 0xba, 0xed, 0x7a, 0x92, 0x59, 0xa1, 0x6e, 0x21,
	0x83, 0x71, 0x14, 0x61, 0xc1, 0xf8, 0x34, 0x32, 0xb9, 0xa9, 0x1b, 0x59, 0xdf, 0xa7, 0x51, 0x57,
	0xc0, 0xc6, 0xa5, 0xcb, 0x8c, 0x6b, 0xf4, 0x9b, 0x5a, 0x6d, 0x77, 0x0c, 0x0f, 0x2f, 0x1a, 0xf4,
	0x33, 0x5f, 0x48, 0x1e, 0x4d, 0xbf, 0xf1, 0x61, 0xff, 0xba, 0x04, 0xeb, 0x57, 0x18, 0xf7, 0xb2,
	0x01, 0x7f, 0x0e, 0xf5, 0xa4, 0x54, 0xe3, 0x54, 0x7d, 0x7c, 0x79, 0xaa, 0x8c, 0xfb, 0xcd, 0x14,
	0x6b, 0xa4, 0x1d, 0x75, 0xbe, 0x2c, 0x02, 0x7c, 0xd5, 0x0b, 0x58, 0xb6, 0x55, 0x2a, 0xce, 0xbf,
	0x42, 0x3e, 0x50, 0x35, 0x90, 0x5c, 0x9c, 0xd4, 0x1e, 0x30, 0xdc, 0x9c, 0xba, 0xfd, 0xf8, 0x34,
	0xba, 0xbc, 0xb3, 0xf5, 0xe2, 0x0e, 0x2f, 0xd5, 0x74, 0xc6, 0x0f, 0x35, 0x8e, 0xa1, 0xd0, 0x4a,
	0xf2, 0x50, 0x63, 0x6b, 0x0e, 0xcd, 0x46, 0x52, 0xdd, 0x5e, 0x32, 0x91, 0xcc, 0xb4, 0xcd, 0xd5,
	0xb9, 0xb6, 0x39, 0x2f, 0xaf, 0xb5, 0xdc, 0xbc, 0xfe, 0xb9, 0x74, 0xee, 0x7e, 0x4a, 0x2e, 0xfb,
	0x9c, 0x3d, 0xa1, 0xd2, 0xf5, 0x03, 0xa1, 0xce, 0xd7, 0xf9, 0x87, 0x97, 0x1f, 0x5c, 0x98, 0xbd,
	0x1c, 0x27, 0xb9, 0x0f, 0x31, 0xbf, 0x2f, 0x42, 0x09, 0xa3, 0x49, 0xa0, 0x84, 0xb1, 0xd6, 0x19,
	0xc3, 0x6f, 0xd2, 0x4e, 0x2e, 0x37, 0xe6, 0x4d, 0x3a, 0xbe, 0xd8, 0xdc, 0x88, 0x6f, 0x77, 0xe6,
	0x89, 0x41, 0x5f, 0xdf, 0xd6, 0xa1, 0x31, 0xf1, 0x19, 0xf3, 0xd9, 0xd0, 0xd1, 0x5a, 0x9d, 0x97,
	0x15, 0x23, 0xec, 0x23, 0x68, 0x03, 0xcc, 0x75, 0x46, 0x38, 0x42, 0x46, 0xd4, 0x3d, 0x71, 0x2c,
	0x93, 0xa4, 0xa6, 0x91, 0x1f, 0xa2, 0xd8, 0xca, 0x41, 0x6e, 0x9b, 0x7c, 0x65, 0x91, 0xdb, 0x39,
	0xc8, 0x8f, 0x63, 0x86, 0xcd, 0x20, 0x3f, 0xce, 0x41, 0x3e, 0x36, 0x14, 0x9b, 0x45, 0x3e, 0xee,
	0xfc, 0x21, 0xfd, 0x44, 0x35, 0xf7, 0x68, 0x50, 0xb8, 0xfc, 0xd1, 0xa0, 0x98, 0xf3, 0x68, 0xf0,
	0x53, 0x28, 0xab, 0xb8, 0xc6, 0xf5, 0xf7, 0xf8, 0x2b, 0x67, 0x50, 0x65, 0xca, 0xd6, 0x3e, 0x1e,
	0xfe, 0x7b, 0x09, 0x5a, 0xf3, 0x5d, 0x32, 0xb9, 0x0d, 0xe7, 0xf5, 0xce, 0xad, 0x77, 0xc8, 0x06,
	0xdc, 0xcf, 0x51, 0x26, 0xff, 0x7b, 0x11, 0x75, 0x25, 0xf5, 0x5a, 0x85, 0x4b, 0x91, 0xe2, 0x25,
	0x76, 0x94, 0xad, 0x22, 0xe9, 0xc2, 0xfb, 0x39, 0x48, 0x75, 0x50, 0x1d, 0x8c, 0xe5, 0x80, 0x87,
	0xb4, 0xb5, 0x44, 0xd6, 0xe1, 0x6e, 0x9e, 0x37, 0x6c, 0xdc, 0x4e, 0x29, 0xdb, 0x9d, 0xd2, 0x56,
	0x89, 0x3c, 0x82, 0xef, 0x5c, 0x3c, 0x39, 0x97, 0x0d, 0x68, 0x40, 0xbd, 0xdd, 0xe9, 0x8e, 0x17,
	0xfa, 0xac, 0x55, 0x26, 0xf7, 0xe1, 0xde, 0x39, 0x6e, 0x77, 0x8e, 0x5d, 0xe6, 0x71, 0x46, 0xbd,
	0x56, 0x85, 0x7c, 0x04, 0x0f, 0x72, 0x50, 0xf1, 0xe3, 0xa4, 0x67, 0x7a, 0xcf, 0x48, 0xad, 0x7b,
	0x99, 0xdc, 0x85, 0xdb, 0x39, 0xe0, 0x78, 0xe8, 0x56, 0x95, 0xfc, 0x04, 0x7e, 0x78, 0xce, 0x98,
	0x99, 0x7c, 0xa9, 0x6c, 0x7b, 0x07, 0x63, 0xe9, 0x3c, 0x65, 0x32, 0x9a, 0x3e, 0xa3, 0xd4, 0xa6,
	0xaf, 0xc7, 0xcc, 0x6b, 0xd5, 0xc8, 0xa7, 0xf0, 0xa3, 0xaf, 0xe5, 0xe0, 0x19, 0x8f, 0x5e, 0x53,
	0x5f, 0xb6, 0x60, 0xb7, 0xfc, 0x59, 0xe1, 0x8b, 0xc2, 0x3b, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x99, 0xf3, 0x5d, 0x32, 0xe3, 0x1d, 0x00, 0x00,
}
