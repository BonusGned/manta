// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steamdatagram_messages.proto

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ESteamDatagramMsgID int32

const (
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Invalid                       ESteamDatagramMsgID = 0
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingRequest             ESteamDatagramMsgID = 1
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingReply               ESteamDatagramMsgID = 2
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingRequest         ESteamDatagramMsgID = 3
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingReply           ESteamDatagramMsgID = 4
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionRequest      ESteamDatagramMsgID = 5
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionEstablished  ESteamDatagramMsgID = 6
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoSession                     ESteamDatagramMsgID = 7
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Diagnostic                    ESteamDatagramMsgID = 8
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataClientToRouter            ESteamDatagramMsgID = 9
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToServer            ESteamDatagramMsgID = 10
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataServerToRouter            ESteamDatagramMsgID = 11
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToClient            ESteamDatagramMsgID = 12
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Stats                         ESteamDatagramMsgID = 13
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleRequest       ESteamDatagramMsgID = 14
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleReply         ESteamDatagramMsgID = 15
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary ESteamDatagramMsgID = 16
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayHealth                   ESteamDatagramMsgID = 17
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectRequest                ESteamDatagramMsgID = 18
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectOK                     ESteamDatagramMsgID = 19
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectionClosed              ESteamDatagramMsgID = 20
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoConnection                  ESteamDatagramMsgID = 21
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingRequest       ESteamDatagramMsgID = 22
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingReply         ESteamDatagramMsgID = 23
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionRequest             ESteamDatagramMsgID = 24
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionEstablished         ESteamDatagramMsgID = 25
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PStatsClient                ESteamDatagramMsgID = 26
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PStatsRelay                 ESteamDatagramMsgID = 27
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PBadRoute                   ESteamDatagramMsgID = 28
)

var ESteamDatagramMsgID_name = map[int32]string{
	0:  "k_ESteamDatagramMsg_Invalid",
	1:  "k_ESteamDatagramMsg_RouterPingRequest",
	2:  "k_ESteamDatagramMsg_RouterPingReply",
	3:  "k_ESteamDatagramMsg_GameserverPingRequest",
	4:  "k_ESteamDatagramMsg_GameserverPingReply",
	5:  "k_ESteamDatagramMsg_GameserverSessionRequest",
	6:  "k_ESteamDatagramMsg_GameserverSessionEstablished",
	7:  "k_ESteamDatagramMsg_NoSession",
	8:  "k_ESteamDatagramMsg_Diagnostic",
	9:  "k_ESteamDatagramMsg_DataClientToRouter",
	10: "k_ESteamDatagramMsg_DataRouterToServer",
	11: "k_ESteamDatagramMsg_DataServerToRouter",
	12: "k_ESteamDatagramMsg_DataRouterToClient",
	13: "k_ESteamDatagramMsg_Stats",
	14: "k_ESteamDatagramMsg_ClientPingSampleRequest",
	15: "k_ESteamDatagramMsg_ClientPingSampleReply",
	16: "k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary",
	17: "k_ESteamDatagramMsg_RelayHealth",
	18: "k_ESteamDatagramMsg_ConnectRequest",
	19: "k_ESteamDatagramMsg_ConnectOK",
	20: "k_ESteamDatagramMsg_ConnectionClosed",
	21: "k_ESteamDatagramMsg_NoConnection",
	22: "k_ESteamDatagramMsg_RelayToRelayPingRequest",
	23: "k_ESteamDatagramMsg_RelayToRelayPingReply",
	24: "k_ESteamDatagramMsg_P2PSessionRequest",
	25: "k_ESteamDatagramMsg_P2PSessionEstablished",
	26: "k_ESteamDatagramMsg_P2PStatsClient",
	27: "k_ESteamDatagramMsg_P2PStatsRelay",
	28: "k_ESteamDatagramMsg_P2PBadRoute",
}
var ESteamDatagramMsgID_value = map[string]int32{
	"k_ESteamDatagramMsg_Invalid":                       0,
	"k_ESteamDatagramMsg_RouterPingRequest":             1,
	"k_ESteamDatagramMsg_RouterPingReply":               2,
	"k_ESteamDatagramMsg_GameserverPingRequest":         3,
	"k_ESteamDatagramMsg_GameserverPingReply":           4,
	"k_ESteamDatagramMsg_GameserverSessionRequest":      5,
	"k_ESteamDatagramMsg_GameserverSessionEstablished":  6,
	"k_ESteamDatagramMsg_NoSession":                     7,
	"k_ESteamDatagramMsg_Diagnostic":                    8,
	"k_ESteamDatagramMsg_DataClientToRouter":            9,
	"k_ESteamDatagramMsg_DataRouterToServer":            10,
	"k_ESteamDatagramMsg_DataServerToRouter":            11,
	"k_ESteamDatagramMsg_DataRouterToClient":            12,
	"k_ESteamDatagramMsg_Stats":                         13,
	"k_ESteamDatagramMsg_ClientPingSampleRequest":       14,
	"k_ESteamDatagramMsg_ClientPingSampleReply":         15,
	"k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary": 16,
	"k_ESteamDatagramMsg_RelayHealth":                   17,
	"k_ESteamDatagramMsg_ConnectRequest":                18,
	"k_ESteamDatagramMsg_ConnectOK":                     19,
	"k_ESteamDatagramMsg_ConnectionClosed":              20,
	"k_ESteamDatagramMsg_NoConnection":                  21,
	"k_ESteamDatagramMsg_RelayToRelayPingRequest":       22,
	"k_ESteamDatagramMsg_RelayToRelayPingReply":         23,
	"k_ESteamDatagramMsg_P2PSessionRequest":             24,
	"k_ESteamDatagramMsg_P2PSessionEstablished":         25,
	"k_ESteamDatagramMsg_P2PStatsClient":                26,
	"k_ESteamDatagramMsg_P2PStatsRelay":                 27,
	"k_ESteamDatagramMsg_P2PBadRoute":                   28,
}

func (x ESteamDatagramMsgID) Enum() *ESteamDatagramMsgID {
	p := new(ESteamDatagramMsgID)
	*p = x
	return p
}
func (x ESteamDatagramMsgID) String() string {
	return proto.EnumName(ESteamDatagramMsgID_name, int32(x))
}
func (x *ESteamDatagramMsgID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ESteamDatagramMsgID_value, data, "ESteamDatagramMsgID")
	if err != nil {
		return err
	}
	*x = ESteamDatagramMsgID(value)
	return nil
}
func (ESteamDatagramMsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor37, []int{0} }

type CMsgSteamDatagramSessionCryptInfo_EKeyType int32

const (
	CMsgSteamDatagramSessionCryptInfo_INVALID    CMsgSteamDatagramSessionCryptInfo_EKeyType = 0
	CMsgSteamDatagramSessionCryptInfo_CURVE25519 CMsgSteamDatagramSessionCryptInfo_EKeyType = 1
)

var CMsgSteamDatagramSessionCryptInfo_EKeyType_name = map[int32]string{
	0: "INVALID",
	1: "CURVE25519",
}
var CMsgSteamDatagramSessionCryptInfo_EKeyType_value = map[string]int32{
	"INVALID":    0,
	"CURVE25519": 1,
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) Enum() *CMsgSteamDatagramSessionCryptInfo_EKeyType {
	p := new(CMsgSteamDatagramSessionCryptInfo_EKeyType)
	*p = x
	return p
}
func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) String() string {
	return proto.EnumName(CMsgSteamDatagramSessionCryptInfo_EKeyType_name, int32(x))
}
func (x *CMsgSteamDatagramSessionCryptInfo_EKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramSessionCryptInfo_EKeyType_value, data, "CMsgSteamDatagramSessionCryptInfo_EKeyType")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramSessionCryptInfo_EKeyType(value)
	return nil
}
func (CMsgSteamDatagramSessionCryptInfo_EKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor37, []int{1, 0}
}

type CMsgSteamDatagramRouterPingReply struct {
	ClientTimestamp            *uint32                                            `protobuf:"fixed32,1,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	LatencyDatacenterIds       []uint32                                           `protobuf:"fixed32,2,rep,packed,name=latency_datacenter_ids,json=latencyDatacenterIds" json:"latency_datacenter_ids,omitempty"`
	LatencyPingMs              []uint32                                           `protobuf:"varint,3,rep,packed,name=latency_ping_ms,json=latencyPingMs" json:"latency_ping_ms,omitempty"`
	YourPublicIp               *uint32                                            `protobuf:"fixed32,4,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	ServerTime                 *uint32                                            `protobuf:"fixed32,5,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge                  *uint64                                            `protobuf:"fixed64,6,opt,name=challenge" json:"challenge,omitempty"`
	SecondsUntilShutdown       *uint32                                            `protobuf:"varint,7,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	ClientCookie               *uint32                                            `protobuf:"fixed32,8,opt,name=client_cookie,json=clientCookie" json:"client_cookie,omitempty"`
	ScoringPenaltyRelayCluster *uint32                                            `protobuf:"varint,9,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	RouteExceptions            []*CMsgSteamDatagramRouterPingReply_RouteException `protobuf:"bytes,10,rep,name=route_exceptions,json=routeExceptions" json:"route_exceptions,omitempty"`
	XXX_unrecognized           []byte                                             `json:"-"`
}

func (m *CMsgSteamDatagramRouterPingReply) Reset()         { *m = CMsgSteamDatagramRouterPingReply{} }
func (m *CMsgSteamDatagramRouterPingReply) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramRouterPingReply) ProtoMessage()    {}
func (*CMsgSteamDatagramRouterPingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor37, []int{0}
}

func (m *CMsgSteamDatagramRouterPingReply) GetClientTimestamp() uint32 {
	if m != nil && m.ClientTimestamp != nil {
		return *m.ClientTimestamp
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetLatencyDatacenterIds() []uint32 {
	if m != nil {
		return m.LatencyDatacenterIds
	}
	return nil
}

func (m *CMsgSteamDatagramRouterPingReply) GetLatencyPingMs() []uint32 {
	if m != nil {
		return m.LatencyPingMs
	}
	return nil
}

func (m *CMsgSteamDatagramRouterPingReply) GetYourPublicIp() uint32 {
	if m != nil && m.YourPublicIp != nil {
		return *m.YourPublicIp
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetServerTime() uint32 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetChallenge() uint64 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetSecondsUntilShutdown() uint32 {
	if m != nil && m.SecondsUntilShutdown != nil {
		return *m.SecondsUntilShutdown
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetClientCookie() uint32 {
	if m != nil && m.ClientCookie != nil {
		return *m.ClientCookie
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetScoringPenaltyRelayCluster() uint32 {
	if m != nil && m.ScoringPenaltyRelayCluster != nil {
		return *m.ScoringPenaltyRelayCluster
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply) GetRouteExceptions() []*CMsgSteamDatagramRouterPingReply_RouteException {
	if m != nil {
		return m.RouteExceptions
	}
	return nil
}

type CMsgSteamDatagramRouterPingReply_RouteException struct {
	DataCenterId     *uint32 `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	Flags            *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Penalty          *uint32 `protobuf:"varint,3,opt,name=penalty" json:"penalty,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramRouterPingReply_RouteException) Reset() {
	*m = CMsgSteamDatagramRouterPingReply_RouteException{}
}
func (m *CMsgSteamDatagramRouterPingReply_RouteException) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamDatagramRouterPingReply_RouteException) ProtoMessage() {}
func (*CMsgSteamDatagramRouterPingReply_RouteException) Descriptor() ([]byte, []int) {
	return fileDescriptor37, []int{0, 0}
}

func (m *CMsgSteamDatagramRouterPingReply_RouteException) GetDataCenterId() uint32 {
	if m != nil && m.DataCenterId != nil {
		return *m.DataCenterId
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply_RouteException) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *CMsgSteamDatagramRouterPingReply_RouteException) GetPenalty() uint32 {
	if m != nil && m.Penalty != nil {
		return *m.Penalty
	}
	return 0
}

type CMsgSteamDatagramSessionCryptInfo struct {
	KeyType          *CMsgSteamDatagramSessionCryptInfo_EKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=dota.CMsgSteamDatagramSessionCryptInfo_EKeyType,def=0" json:"key_type,omitempty"`
	KeyData          []byte                                      `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	Nonce            *uint64                                     `protobuf:"fixed64,3,opt,name=nonce" json:"nonce,omitempty"`
	IsSnp            *bool                                       `protobuf:"varint,4,opt,name=is_snp,json=isSnp" json:"is_snp,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CMsgSteamDatagramSessionCryptInfo) Reset()         { *m = CMsgSteamDatagramSessionCryptInfo{} }
func (m *CMsgSteamDatagramSessionCryptInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramSessionCryptInfo) ProtoMessage()    {}
func (*CMsgSteamDatagramSessionCryptInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor37, []int{1}
}

const Default_CMsgSteamDatagramSessionCryptInfo_KeyType CMsgSteamDatagramSessionCryptInfo_EKeyType = CMsgSteamDatagramSessionCryptInfo_INVALID

func (m *CMsgSteamDatagramSessionCryptInfo) GetKeyType() CMsgSteamDatagramSessionCryptInfo_EKeyType {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return Default_CMsgSteamDatagramSessionCryptInfo_KeyType
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetIsSnp() bool {
	if m != nil && m.IsSnp != nil {
		return *m.IsSnp
	}
	return false
}

type CMsgSteamDatagramSessionCryptInfoSigned struct {
	Info             []byte `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Signature        []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgSteamDatagramSessionCryptInfoSigned) Reset() {
	*m = CMsgSteamDatagramSessionCryptInfoSigned{}
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramSessionCryptInfoSigned) ProtoMessage()    {}
func (*CMsgSteamDatagramSessionCryptInfoSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor37, []int{2}
}

func (m *CMsgSteamDatagramSessionCryptInfoSigned) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CMsgSteamDatagramSessionCryptInfoSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type CMsgSteamDatagramDiagnostic struct {
	Severity         *uint32 `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	Text             *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSteamDatagramDiagnostic) Reset()                    { *m = CMsgSteamDatagramDiagnostic{} }
func (m *CMsgSteamDatagramDiagnostic) String() string            { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDiagnostic) ProtoMessage()               {}
func (*CMsgSteamDatagramDiagnostic) Descriptor() ([]byte, []int) { return fileDescriptor37, []int{3} }

func (m *CMsgSteamDatagramDiagnostic) GetSeverity() uint32 {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return 0
}

func (m *CMsgSteamDatagramDiagnostic) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type CMsgSteamDatagramLinkInstantaneousStats struct {
	OutPacketsPerSecX10     *uint32 `protobuf:"varint,1,opt,name=out_packets_per_sec_x10,json=outPacketsPerSecX10" json:"out_packets_per_sec_x10,omitempty"`
	OutBytesPerSec          *uint32 `protobuf:"varint,2,opt,name=out_bytes_per_sec,json=outBytesPerSec" json:"out_bytes_per_sec,omitempty"`
	InPacketsPerSecX10      *uint32 `protobuf:"varint,3,opt,name=in_packets_per_sec_x10,json=inPacketsPerSecX10" json:"in_packets_per_sec_x10,omitempty"`
	InBytesPerSec           *uint32 `protobuf:"varint,4,opt,name=in_bytes_per_sec,json=inBytesPerSec" json:"in_bytes_per_sec,omitempty"`
	PingMs                  *uint32 `protobuf:"varint,5,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	PacketsDroppedPct       *uint32 `protobuf:"varint,6,opt,name=packets_dropped_pct,json=packetsDroppedPct" json:"packets_dropped_pct,omitempty"`
	PacketsWeirdSequencePct *uint32 `protobuf:"varint,7,opt,name=packets_weird_sequence_pct,json=packetsWeirdSequencePct" json:"packets_weird_sequence_pct,omitempty"`
	PeakJitterUsec          *uint32 `protobuf:"varint,8,opt,name=peak_jitter_usec,json=peakJitterUsec" json:"peak_jitter_usec,omitempty"`
	XXX_unrecognized        []byte  `json:"-"`
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) Reset() {
	*m = CMsgSteamDatagramLinkInstantaneousStats{}
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramLinkInstantaneousStats) ProtoMessage()    {}
func (*CMsgSteamDatagramLinkInstantaneousStats) Descriptor() ([]byte, []int) {
	return fileDescriptor37, []int{4}
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetOutPacketsPerSecX10() uint32 {
	if m != nil && m.OutPacketsPerSecX10 != nil {
		return *m.OutPacketsPerSecX10
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetOutBytesPerSec() uint32 {
	if m != nil && m.OutBytesPerSec != nil {
		return *m.OutBytesPerSec
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetInPacketsPerSecX10() uint32 {
	if m != nil && m.InPacketsPerSecX10 != nil {
		return *m.InPacketsPerSecX10
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetInBytesPerSec() uint32 {
	if m != nil && m.InBytesPerSec != nil {
		return *m.InBytesPerSec
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPingMs() uint32 {
	if m != nil && m.PingMs != nil {
		return *m.PingMs
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsDroppedPct() uint32 {
	if m != nil && m.PacketsDroppedPct != nil {
		return *m.PacketsDroppedPct
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsWeirdSequencePct() uint32 {
	if m != nil && m.PacketsWeirdSequencePct != nil {
		return *m.PacketsWeirdSequencePct
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPeakJitterUsec() uint32 {
	if m != nil && m.PeakJitterUsec != nil {
		return *m.PeakJitterUsec
	}
	return 0
}

type CMsgSteamDatagramLinkLifetimeStats struct {
	PacketsSent               *uint64 `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
	KbSent                    *uint64 `protobuf:"varint,4,opt,name=kb_sent,json=kbSent" json:"kb_sent,omitempty"`
	PacketsRecv               *uint64 `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv" json:"packets_recv,omitempty"`
	KbRecv                    *uint64 `protobuf:"varint,6,opt,name=kb_recv,json=kbRecv" json:"kb_recv,omitempty"`
	PacketsRecvSequenced      *uint64 `protobuf:"varint,7,opt,name=packets_recv_sequenced,json=packetsRecvSequenced" json:"packets_recv_sequenced,omitempty"`
	PacketsRecvDropped        *uint64 `protobuf:"varint,8,opt,name=packets_recv_dropped,json=packetsRecvDropped" json:"packets_recv_dropped,omitempty"`
	PacketsRecvOutOfOrder     *uint64 `protobuf:"varint,9,opt,name=packets_recv_out_of_order,json=packetsRecvOutOfOrder" json:"packets_recv_out_of_order,omitempty"`
	PacketsRecvDuplicate      *uint64 `protobuf:"varint,10,opt,name=packets_recv_duplicate,json=packetsRecvDuplicate" json:"packets_recv_duplicate,omitempty"`
	PacketsRecvLurch          *uint64 `protobuf:"varint,11,opt,name=packets_recv_lurch,json=packetsRecvLurch" json:"packets_recv_lurch,omitempty"`
	QualityHistogram_100      *uint32 `protobuf:"varint,21,opt,name=quality_histogram_100,json=qualityHistogram100" json:"quality_histogram_100,omitempty"`
	QualityHistogram_99       *uint32 `protobuf:"varint,22,opt,name=quality_histogram_99,json=qualityHistogram99" json:"quality_histogram_99,omitempty"`
	QualityHistogram_97       *uint32 `protobuf:"varint,23,opt,name=quality_histogram_97,json=qualityHistogram97" json:"quality_histogram_97,omitempty"`
	QualityHistogram_95       *uint32 `protobuf:"varint,24,opt,name=quality_histogram_95,json=qualityHistogram95" json:"quality_histogram_95,omitempty"`
	QualityHistogram_90       *uint32 `protobuf:"varint,25,opt,name=quality_histogram_90,json=qualityHistogram90" json:"quality_histogram_90,omitempty"`
	QualityHistogram_75       *uint32 `protobuf:"varint,26,opt,name=quality_histogram_75,json=qualityHistogram75" json:"quality_histogram_75,omitempty"`
	QualityHistogram_50       *uint32 `protobuf:"varint,27,opt,name=quality_histogram_50,json=qualityHistogram50" json:"quality_histogram_50,omitempty"`
	QualityHistogram_1        *uint32 `protobuf:"varint,28,opt,name=quality_histogram_1,json=qualityHistogram1" json:"quality_histogram_1,omitempty"`
	QualityHistogramDead      *uint32 `protobuf:"varint,29,opt,name=quality_histogram_dead,json=qualityHistogramDead" json:"quality_histogram_dead,omitempty"`
	QualityNtile_2Nd          *uint32 `protobuf:"varint,30,opt,name=quality_ntile_2nd,json=qualityNtile2nd" json:"quality_ntile_2nd,omitempty"`
	QualityNtile_5Th          *uint32 `protobuf:"varint,31,opt,name=quality_ntile_5th,json=qualityNtile5th" json:"quality_ntile_5th,omitempty"`
	QualityNtile_25Th         *uint32 `protobuf:"varint,32,opt,name=quality_ntile_25th,json=qualityNtile25th" json:"quality_ntile_25th,omitempty"`
	QualityNtile_50Th         *uint32 `protobuf:"varint,33,opt,name=quality_ntile_50th,json=qualityNtile50th" json:"quality_ntile_50th,omitempty"`
	PingHistogram_25          *uint32 `protobuf:"varint,41,opt,name=ping_histogram_25,json=pingHistogram25" json:"ping_histogram_25,omitempty"`
	PingHistogram_50          *uint32 `protobuf:"varint,42,opt,name=ping_histogram_50,json=pingHistogram50" json:"ping_histogram_50,omitempty"`
	PingHistogram_75          *uint32 `protobuf:"varint,43,opt,name=ping_histogram_75,json=pingHistogram75" json:"ping_histogram_75,omitempty"`
	PingHistogram_100         *uint32 `protobuf:"varint,44,opt,name=ping_histogram_100,json=pingHistogram100" json:"ping_histogram_100,omitempty"`
	PingHistogram_125         *uint32 `protobuf:"varint,45,opt,name=ping_histogram_125,json=pingHistogram125" json:"ping_histogram_125,omitempty"`
	PingHistogram_150         *uint32 `protobuf:"varint,46,opt,name=ping_histogram_150,json=pingHistogram150" json:"ping_histogram_150,omitempty"`
	PingHistogram_200         *uint32 `protobuf:"varint,47,opt,name=ping_histogram_200,json=pingHistogram200" json:"ping_histogram_200,omitempty"`
	PingHistogram_300         *uint32 `protobuf:"varint,48,opt,name=ping_histogram_300,json=pingHistogram300" json:"ping_histogram_300,omitempty"`
	PingHistogramMax          *uint32 `protobuf:"varint,49,opt,name=ping_histogram_max,json=pingHistogramMax" json:"ping_histogram_max,omitempty"`
	PingNtile_5Th             *uint32 `protobuf:"varint,50,opt,name=ping_ntile_5th,json=pingNtile5th" json:"ping_ntile_5th,omitempty"`
	PingNtile_50Th            *uint32 `protobuf:"varint,51,opt,name=ping_ntile_50th,json=pingNtile50th" json:"ping_ntile_50th,omitempty"`
	PingNtile_75Th            *uint32 `protobuf:"varint,52,opt,name=ping_ntile_75th,json=pingNtile75th" json:"ping_ntile_75th,omitempty"`
	PingNtile_95Th            *uint32 `protobuf:"varint,53,opt,name=ping_ntile_95th,json=pingNtile95th" json:"ping_ntile_95th,omitempty"`
	PingNtile_98Th            *uint32 `protobuf:"varint,54,opt,name=ping_ntile_98th,json=pingNtile98th" json:"ping_ntile_98th,omitempty"`
	JitterHistogramNegligible *uint32 `protobuf:"varint,61,opt,name=jitter_histogram_negligible,json=jitterHistogramNegligible" json:"jitter_histogram_negligible,omitempty"`
	JitterHistogram_1         *uint32 `protobuf:"varint,62,opt,name=jitter_histogram_1,json=jitterHistogram1" json:"jitter_histogram_1,omitempty"`
	JitterHistogram_2         *uint32 `protobuf:"varint,63,opt,name=jitter_histogram_2,json=jitterHistogram2" json:"jitter_histogram_2,omitempty"`
	JitterHistogram_5         *uint32 `protobuf:"varint,64,opt,name=jitter_histogram_5,json=jitterHistogram5" json:"jitter_histogram_5,omitempty"`
	JitterHistogram_10        *uint32 `protobuf:"varint,65,opt,name=jitter_histogram_10,json=jitterHistogram10" json:"jitter_histogram_10,omitempty"`
	JitterHistogram_20        *uint32 `protobuf:"varint,66,opt,name=jitter_histogram_20,json=jitterHistogram20" json:"jitter_histogram_20,omitempty"`
	TxspeedMax                *uint32 `protobuf:"varint,67,opt,name=txspeed_max,json=txspeedMax" json:"txspeed_max,omitempty"`
	TxspeedHistogram_16       *uint32 `protobuf:"varint,68,opt,name=txspeed_histogram_16,json=txspeedHistogram16" json:"txspeed_histogram_16,omitempty"`
	TxspeedHistogram_32       *uint32 `protobuf:"varint,69,opt,name=txspeed_histogram_32,json=txspeedHistogram32" json:"txspeed_histogram_32,omitempty"`
	TxspeedHistogram_64       *uint32 `protobuf:"varint,70,opt,name=txspeed_histogram_64,json=txspeedHistogram64" json:"txspeed_histogram_64,omitempty"`
	TxspeedHistogram_128      *uint32 `protobuf:"varint,71,opt,name=txspeed_histogram_128,json=txspeedHistogram128" json:"txspeed_histogram_128,omitempty"`
	TxspeedHistogram_256      *uint32 `protobuf:"varint,72,opt,name=txspeed_histogram_256,json=txspeedHistogram256" json:"txspeed_histogram_256,omitempty"`
	TxspeedHistogram_512      *uint32 `protobuf:"varint,73,opt,name=txspeed_histogram_512,json=txspeedHistogram512" json:"txspeed_histogram_512,omitempty"`
	TxspeedHistogram_1024     *uint32 `protobuf:"varint,74,opt,name=txspeed_histogram_1024,json=txspeedHistogram1024" json:"txspeed_histogram_1024,omitempty"`
	TxspeedHistogramMax       *uint32 `protobuf:"varint,75,opt,name=txspeed_histogram_max,json=txspeedHistogramMax" json:"txspeed_histogram_max,omitempty"`
	TxspeedNtile_5Th          *uint32 `protobuf:"varint,76,opt,name=txspeed_ntile_5th,json=txspeedNtile5th" json:"txspeed_ntile_5th,omitempty"`
	TxspeedNtile_50Th         *uint32 `protobuf:"varint,77,opt,name=txspeed_ntile_50th,json=txspeedNtile50th" json:"txspeed_ntile_50th,omitempty"`
	TxspeedNtile_75Th         *uint32 `protobuf:"varint,78,opt,name=txspeed_ntile_75th,json=txspeedNtile75th" json:"txspeed_ntile_75th,omitempty"`
	TxspeedNtile_95Th         *uint32 `protobuf:"varint,79,opt,name=txspeed_ntile_95th,json=txspeedNtile95th" json:"txspeed_ntile_95th,omitempty"`
	TxspeedNtile_98Th         *uint32 `protobuf:"varint,80,opt,name=txspeed_ntile_98th,json=txspeedNtile98th" json:"txspeed_ntile_98th,omitempty"`
	RxspeedMax                *uint32 `protobuf:"varint,81,opt,name=rxspeed_max,json=rxspeedMax" json:"rxspeed_max,omitempty"`
	RxspeedHistogram_16       *uint32 `protobuf:"varint,82,opt,name=rxspeed_histogram_16,json=rxspeedHistogram16" json:"rxspeed_histogram_16,omitempty"`
	RxspeedHistogram_32       *uint32 `protobuf:"varint,83,opt,name=rxspeed_histogram_32,json=rxspeedHistogram32" json:"rxspeed_histogram_32,omitempty"`
	RxspeedHistogram_64       *uint32 `protobuf:"varint,84,opt,name=rxspeed_histogram_64,json=rxspeedHistogram64" json:"rxspeed_histogram_64,omitempty"`
	RxspeedHistogram_128      *uint32 `protobuf:"varint,85,opt,name=rxspeed_histogram_128,json=rxspeedHistogram128" json:"rxspeed_histogram_128,omitempty"`
	RxspeedHistogram_256      *uint32 `protobuf:"varint,86,opt,name=rxspeed_histogram_256,json=rxspeedHistogram256" json:"rxspeed_histogram_256,omitempty"`
	RxspeedHistogram_512      *uint32 `protobuf:"varint,87,opt,name=rxspeed_histogram_512,json=rxspeedHistogram512" json:"rxspeed_histogram_512,omitempty"`
	RxspeedHistogram_1024     *uint32 `protobuf:"varint,88,opt,name=rxspeed_histogram_1024,json=rxspeedHistogram1024" json:"rxspeed_histogram_1024,omitempty"`
	RxspeedHistogramMax       *uint32 `protobuf:"varint,89,opt,name=rxspeed_histogram_max,json=rxspeedHistogramMax" json:"rxspeed_histogram_max,omitempty"`
	RxspeedNtile_5Th          *uint32 `protobuf:"varint,90,opt,name=rxspeed_ntile_5th,json=rxspeedNtile5th" json:"rxspeed_ntile_5th,omitempty"`
	RxspeedNtile_50Th         *uint32 `protobuf:"varint,91,opt,name=rxspeed_ntile_50th,json=rxspeedNtile50th" json:"rxspeed_ntile_50th,omitempty"`
	RxspeedNtile_75Th         *uint32 `protobuf:"varint,92,opt,name=rxspeed_ntile_75th,json=rxspeedNtile75th" json:"rxspeed_ntile_75th,omitempty"`
	RxspeedNtile_95Th         *uint32 `protobuf:"varint,93,opt,name=rxspeed_ntile_95th,json=rxspeedNtile95th" json:"rxspeed_ntile_95th,omitempty"`
	RxspeedNtile_98Th         *uint32 `protobuf:"varint,94,opt,name=rxspeed_ntile_98th,json=rxspeedNtile98th" json:"rxspeed_ntile_98th,omitempty"`
	XXX_unrecognized          []byte  `json:"-"`
}

func (m *CMsgSteamDatagramLinkLifetimeStats) Reset()         { *m = CMsgSteamDatagramLinkLifetimeStats{} }
func (m *CMsgSteamDatagramLinkLifetimeStats) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramLinkLifetimeStats) ProtoMessage()    {}
func (*CMsgSteamDatagramLinkLifetimeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor37, []int{5}
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsSent() uint64 {
	if m != nil && m.PacketsSent != nil {
		return *m.PacketsSent
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetKbSent() uint64 {
	if m != nil && m.KbSent != nil {
		return *m.KbSent
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecv() uint64 {
	if m != nil && m.PacketsRecv != nil {
		return *m.PacketsRecv
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetKbRecv() uint64 {
	if m != nil && m.KbRecv != nil {
		return *m.KbRecv
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvSequenced() uint64 {
	if m != nil && m.PacketsRecvSequenced != nil {
		return *m.PacketsRecvSequenced
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDropped() uint64 {
	if m != nil && m.PacketsRecvDropped != nil {
		return *m.PacketsRecvDropped
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvOutOfOrder() uint64 {
	if m != nil && m.PacketsRecvOutOfOrder != nil {
		return *m.PacketsRecvOutOfOrder
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDuplicate() uint64 {
	if m != nil && m.PacketsRecvDuplicate != nil {
		return *m.PacketsRecvDuplicate
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvLurch() uint64 {
	if m != nil && m.PacketsRecvLurch != nil {
		return *m.PacketsRecvLurch
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_100() uint32 {
	if m != nil && m.QualityHistogram_100 != nil {
		return *m.QualityHistogram_100
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_99() uint32 {
	if m != nil && m.QualityHistogram_99 != nil {
		return *m.QualityHistogram_99
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_97() uint32 {
	if m != nil && m.QualityHistogram_97 != nil {
		return *m.QualityHistogram_97
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_95() uint32 {
	if m != nil && m.QualityHistogram_95 != nil {
		return *m.QualityHistogram_95
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_90() uint32 {
	if m != nil && m.QualityHistogram_90 != nil {
		return *m.QualityHistogram_90
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_75() uint32 {
	if m != nil && m.QualityHistogram_75 != nil {
		return *m.QualityHistogram_75
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_50() uint32 {
	if m != nil && m.QualityHistogram_50 != nil {
		return *m.QualityHistogram_50
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_1() uint32 {
	if m != nil && m.QualityHistogram_1 != nil {
		return *m.QualityHistogram_1
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogramDead() uint32 {
	if m != nil && m.QualityHistogramDead != nil {
		return *m.QualityHistogramDead
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_2Nd() uint32 {
	if m != nil && m.QualityNtile_2Nd != nil {
		return *m.QualityNtile_2Nd
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_5Th() uint32 {
	if m != nil && m.QualityNtile_5Th != nil {
		return *m.QualityNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_25Th() uint32 {
	if m != nil && m.QualityNtile_25Th != nil {
		return *m.QualityNtile_25Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_50Th() uint32 {
	if m != nil && m.QualityNtile_50Th != nil {
		return *m.QualityNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_25() uint32 {
	if m != nil && m.PingHistogram_25 != nil {
		return *m.PingHistogram_25
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_50() uint32 {
	if m != nil && m.PingHistogram_50 != nil {
		return *m.PingHistogram_50
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_75() uint32 {
	if m != nil && m.PingHistogram_75 != nil {
		return *m.PingHistogram_75
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_100() uint32 {
	if m != nil && m.PingHistogram_100 != nil {
		return *m.PingHistogram_100
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_125() uint32 {
	if m != nil && m.PingHistogram_125 != nil {
		return *m.PingHistogram_125
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_150() uint32 {
	if m != nil && m.PingHistogram_150 != nil {
		return *m.PingHistogram_150
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_200() uint32 {
	if m != nil && m.PingHistogram_200 != nil {
		return *m.PingHistogram_200
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_300() uint32 {
	if m != nil && m.PingHistogram_300 != nil {
		return *m.PingHistogram_300
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogramMax() uint32 {
	if m != nil && m.PingHistogramMax != nil {
		return *m.PingHistogramMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_5Th() uint32 {
	if m != nil && m.PingNtile_5Th != nil {
		return *m.PingNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_50Th() uint32 {
	if m != nil && m.PingNtile_50Th != nil {
		return *m.PingNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_75Th() uint32 {
	if m != nil && m.PingNtile_75Th != nil {
		return *m.PingNtile_75Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_95Th() uint32 {
	if m != nil && m.PingNtile_95Th != nil {
		return *m.PingNtile_95Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_98Th() uint32 {
	if m != nil && m.PingNtile_98Th != nil {
		return *m.PingNtile_98Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogramNegligible() uint32 {
	if m != nil && m.JitterHistogramNegligible != nil {
		return *m.JitterHistogramNegligible
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_1() uint32 {
	if m != nil && m.JitterHistogram_1 != nil {
		return *m.JitterHistogram_1
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_2() uint32 {
	if m != nil && m.JitterHistogram_2 != nil {
		return *m.JitterHistogram_2
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_5() uint32 {
	if m != nil && m.JitterHistogram_5 != nil {
		return *m.JitterHistogram_5
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_10() uint32 {
	if m != nil && m.JitterHistogram_10 != nil {
		return *m.JitterHistogram_10
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_20() uint32 {
	if m != nil && m.JitterHistogram_20 != nil {
		return *m.JitterHistogram_20
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedMax() uint32 {
	if m != nil && m.TxspeedMax != nil {
		return *m.TxspeedMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_16() uint32 {
	if m != nil && m.TxspeedHistogram_16 != nil {
		return *m.TxspeedHistogram_16
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_32() uint32 {
	if m != nil && m.TxspeedHistogram_32 != nil {
		return *m.TxspeedHistogram_32
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_64() uint32 {
	if m != nil && m.TxspeedHistogram_64 != nil {
		return *m.TxspeedHistogram_64
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_128() uint32 {
	if m != nil && m.TxspeedHistogram_128 != nil {
		return *m.TxspeedHistogram_128
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_256() uint32 {
	if m != nil && m.TxspeedHistogram_256 != nil {
		return *m.TxspeedHistogram_256
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_512() uint32 {
	if m != nil && m.TxspeedHistogram_512 != nil {
		return *m.TxspeedHistogram_512
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_1024() uint32 {
	if m != nil && m.TxspeedHistogram_1024 != nil {
		return *m.TxspeedHistogram_1024
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogramMax() uint32 {
	if m != nil && m.TxspeedHistogramMax != nil {
		return *m.TxspeedHistogramMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_5Th() uint32 {
	if m != nil && m.TxspeedNtile_5Th != nil {
		return *m.TxspeedNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_50Th() uint32 {
	if m != nil && m.TxspeedNtile_50Th != nil {
		return *m.TxspeedNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_75Th() uint32 {
	if m != nil && m.TxspeedNtile_75Th != nil {
		return *m.TxspeedNtile_75Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_95Th() uint32 {
	if m != nil && m.TxspeedNtile_95Th != nil {
		return *m.TxspeedNtile_95Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_98Th() uint32 {
	if m != nil && m.TxspeedNtile_98Th != nil {
		return *m.TxspeedNtile_98Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedMax() uint32 {
	if m != nil && m.RxspeedMax != nil {
		return *m.RxspeedMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_16() uint32 {
	if m != nil && m.RxspeedHistogram_16 != nil {
		return *m.RxspeedHistogram_16
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_32() uint32 {
	if m != nil && m.RxspeedHistogram_32 != nil {
		return *m.RxspeedHistogram_32
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_64() uint32 {
	if m != nil && m.RxspeedHistogram_64 != nil {
		return *m.RxspeedHistogram_64
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_128() uint32 {
	if m != nil && m.RxspeedHistogram_128 != nil {
		return *m.RxspeedHistogram_128
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_256() uint32 {
	if m != nil && m.RxspeedHistogram_256 != nil {
		return *m.RxspeedHistogram_256
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_512() uint32 {
	if m != nil && m.RxspeedHistogram_512 != nil {
		return *m.RxspeedHistogram_512
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_1024() uint32 {
	if m != nil && m.RxspeedHistogram_1024 != nil {
		return *m.RxspeedHistogram_1024
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogramMax() uint32 {
	if m != nil && m.RxspeedHistogramMax != nil {
		return *m.RxspeedHistogramMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_5Th() uint32 {
	if m != nil && m.RxspeedNtile_5Th != nil {
		return *m.RxspeedNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_50Th() uint32 {
	if m != nil && m.RxspeedNtile_50Th != nil {
		return *m.RxspeedNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_75Th() uint32 {
	if m != nil && m.RxspeedNtile_75Th != nil {
		return *m.RxspeedNtile_75Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_95Th() uint32 {
	if m != nil && m.RxspeedNtile_95Th != nil {
		return *m.RxspeedNtile_95Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_98Th() uint32 {
	if m != nil && m.RxspeedNtile_98Th != nil {
		return *m.RxspeedNtile_98Th
	}
	return 0
}

type CMsgSteamDatagramConnectionQuality struct {
	Instantaneous    *CMsgSteamDatagramLinkInstantaneousStats `protobuf:"bytes,1,opt,name=instantaneous" json:"instantaneous,omitempty"`
	Lifetime         *CMsgSteamDatagramLinkLifetimeStats      `protobuf:"bytes,2,opt,name=lifetime" json:"lifetime,omitempty"`
	XXX_unrecognized []byte                                   `json:"-"`
}

func (m *CMsgSteamDatagramConnectionQuality) Reset()         { *m = CMsgSteamDatagramConnectionQuality{} }
func (m *CMsgSteamDatagramConnectionQuality) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramConnectionQuality) ProtoMessage()    {}
func (*CMsgSteamDatagramConnectionQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor37, []int{6}
}

func (m *CMsgSteamDatagramConnectionQuality) GetInstantaneous() *CMsgSteamDatagramLinkInstantaneousStats {
	if m != nil {
		return m.Instantaneous
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionQuality) GetLifetime() *CMsgSteamDatagramLinkLifetimeStats {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func init() {
	proto.RegisterType((*CMsgSteamDatagramRouterPingReply)(nil), "dota.CMsgSteamDatagramRouterPingReply")
	proto.RegisterType((*CMsgSteamDatagramRouterPingReply_RouteException)(nil), "dota.CMsgSteamDatagramRouterPingReply.RouteException")
	proto.RegisterType((*CMsgSteamDatagramSessionCryptInfo)(nil), "dota.CMsgSteamDatagramSessionCryptInfo")
	proto.RegisterType((*CMsgSteamDatagramSessionCryptInfoSigned)(nil), "dota.CMsgSteamDatagramSessionCryptInfoSigned")
	proto.RegisterType((*CMsgSteamDatagramDiagnostic)(nil), "dota.CMsgSteamDatagramDiagnostic")
	proto.RegisterType((*CMsgSteamDatagramLinkInstantaneousStats)(nil), "dota.CMsgSteamDatagramLinkInstantaneousStats")
	proto.RegisterType((*CMsgSteamDatagramLinkLifetimeStats)(nil), "dota.CMsgSteamDatagramLinkLifetimeStats")
	proto.RegisterType((*CMsgSteamDatagramConnectionQuality)(nil), "dota.CMsgSteamDatagramConnectionQuality")
	proto.RegisterEnum("dota.ESteamDatagramMsgID", ESteamDatagramMsgID_name, ESteamDatagramMsgID_value)
	proto.RegisterEnum("dota.CMsgSteamDatagramSessionCryptInfo_EKeyType", CMsgSteamDatagramSessionCryptInfo_EKeyType_name, CMsgSteamDatagramSessionCryptInfo_EKeyType_value)
}

func init() { proto.RegisterFile("steamdatagram_messages.proto", fileDescriptor37) }

var fileDescriptor37 = []byte{
	// 2050 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x98, 0xfd, 0x7a, 0xd4, 0xb8,
	0xf5, 0xc7, 0x19, 0x32, 0x79, 0x41, 0x79, 0x33, 0x22, 0x04, 0x25, 0xc0, 0x12, 0x06, 0x16, 0x42,
	0x80, 0xac, 0xc7, 0xc4, 0x99, 0xe4, 0xf7, 0x7b, 0xba, 0x2d, 0xcc, 0xa4, 0x4b, 0x16, 0x02, 0xb3,
	0x9e, 0xc0, 0x6e, 0xbb, 0x6d, 0x5d, 0xc7, 0x56, 0x66, 0xdc, 0x78, 0x64, 0x23, 0x69, 0x42, 0xe6,
	0xbf, 0xbd, 0x8b, 0x5e, 0x4e, 0xef, 0xa6, 0xcf, 0xd3, 0x5e, 0x45, 0x1f, 0x49, 0xf6, 0xbc, 0x59,
	0x0e, 0xfc, 0x05, 0xa3, 0xf3, 0xf9, 0x1e, 0x1d, 0x1d, 0x7d, 0x25, 0xc7, 0x06, 0x77, 0x18, 0xc7,
	0x5e, 0x37, 0xf0, 0xb8, 0xd7, 0xa6, 0x5e, 0xd7, 0xed, 0x62, 0xc6, 0xbc, 0x36, 0x66, 0xdb, 0x09,
	0x8d, 0x79, 0x0c, 0xcb, 0x41, 0xcc, 0xbd, 0xca, 0x6f, 0xd3, 0x60, 0xa3, 0x7e, 0xc4, 0xda, 0x2d,
	0x81, 0x36, 0x52, 0xd4, 0x89, 0x7b, 0x1c, 0xd3, 0x66, 0x48, 0xda, 0x0e, 0x4e, 0xa2, 0x3e, 0x7c,
	0x02, 0x0c, 0x3f, 0x0a, 0x31, 0xe1, 0x2e, 0x0f, 0xbb, 0x98, 0x71, 0xaf, 0x9b, 0xa0, 0xd2, 0x46,
	0x69, 0x73, 0xd6, 0x59, 0x56, 0xe3, 0xc7, 0xd9, 0x30, 0xdc, 0x03, 0xab, 0x91, 0xc7, 0x31, 0xf1,
	0xfb, 0xae, 0x98, 0xd8, 0xc7, 0x84, 0x63, 0xea, 0x86, 0x01, 0x43, 0x57, 0x37, 0xa6, 0x36, 0x67,
	0x5f, 0x5d, 0x35, 0x4a, 0xce, 0x4a, 0x4a, 0x34, 0x06, 0xc0, 0x61, 0xc0, 0xe0, 0x16, 0x58, 0xce,
	0x94, 0x49, 0x48, 0xda, 0x6e, 0x97, 0xa1, 0xa9, 0x8d, 0xa9, 0xcd, 0x45, 0x29, 0x59, 0x4c, 0x43,
	0xa2, 0xa6, 0x23, 0x06, 0x1f, 0x82, 0xa5, 0x7e, 0xdc, 0xa3, 0x6e, 0xd2, 0x3b, 0x89, 0x42, 0xdf,
	0x0d, 0x13, 0x54, 0x96, 0xe5, 0x2c, 0x88, 0xd1, 0xa6, 0x1c, 0x3c, 0x4c, 0xe0, 0x3d, 0x30, 0xcf,
	0x30, 0x3d, 0xc7, 0x54, 0x96, 0x8d, 0xa6, 0x25, 0x02, 0xd4, 0x90, 0xa8, 0x18, 0xde, 0x01, 0xd7,
	0xfc, 0x8e, 0x17, 0x45, 0x98, 0xb4, 0x31, 0x9a, 0xd9, 0x28, 0x6d, 0xce, 0x38, 0xc3, 0x01, 0xb8,
	0x03, 0x56, 0x19, 0xf6, 0x63, 0x12, 0x30, 0xb7, 0x47, 0x78, 0x18, 0xb9, 0xac, 0xd3, 0xe3, 0x41,
	0xfc, 0x99, 0xa0, 0xd9, 0x8d, 0xd2, 0xe6, 0xa2, 0xb3, 0x92, 0x46, 0x3f, 0x88, 0x60, 0x2b, 0x8d,
	0xc1, 0x07, 0x60, 0x31, 0xed, 0x95, 0x1f, 0xc7, 0x67, 0x21, 0x46, 0x73, 0xaa, 0x32, 0x35, 0x58,
	0x97, 0x63, 0xf0, 0x25, 0xb8, 0xcb, 0xfc, 0x98, 0x8a, 0x65, 0x26, 0x98, 0x78, 0x11, 0xef, 0xbb,
	0x14, 0x47, 0x5e, 0xdf, 0xf5, 0xa3, 0x1e, 0xe3, 0x98, 0xa2, 0x6b, 0x72, 0x86, 0xf5, 0x14, 0x6a,
	0x2a, 0xc6, 0x11, 0x48, 0x5d, 0x11, 0xf0, 0xef, 0xc0, 0xa0, 0x62, 0x9b, 0x5c, 0x7c, 0xe1, 0xe3,
	0x84, 0x87, 0x31, 0x61, 0x08, 0x6c, 0x4c, 0x6d, 0xce, 0x5b, 0xf6, 0xb6, 0xd8, 0xd9, 0xed, 0x2f,
	0xed, 0xea, 0xb6, 0xfc, 0x7d, 0x90, 0xa9, 0x9d, 0x65, 0x3a, 0xf6, 0x9b, 0xad, 0x9f, 0x82, 0xa5,
	0x71, 0x44, 0xb4, 0x5d, 0x6c, 0xaa, 0x3b, 0xd8, 0xd5, 0xd4, 0x05, 0x0b, 0x62, 0xb4, 0x9e, 0xee,
	0x24, 0x5c, 0x01, 0xd3, 0xa7, 0x91, 0xd7, 0x16, 0x3b, 0x2e, 0x16, 0xa1, 0x7e, 0x40, 0x04, 0x66,
	0xd3, 0xa5, 0xa2, 0x29, 0x39, 0x9e, 0xfd, 0xac, 0xfc, 0xb7, 0x04, 0xee, 0xe7, 0x8a, 0x6d, 0x61,
	0xc6, 0xc2, 0x98, 0xd4, 0x69, 0x3f, 0xe1, 0x87, 0xe4, 0x34, 0x86, 0xc7, 0x60, 0xee, 0x0c, 0xf7,
	0x5d, 0xde, 0x4f, 0xb0, 0x9c, 0x75, 0xc9, 0x32, 0x0b, 0xd6, 0x39, 0x29, 0xdd, 0x3e, 0x78, 0x83,
	0xfb, 0xc7, 0xfd, 0x04, 0xff, 0xdf, 0xec, 0xe1, 0xbb, 0x8f, 0x2f, 0xdf, 0x1e, 0x36, 0x9c, 0xd9,
	0x33, 0x35, 0x02, 0xd7, 0x54, 0x56, 0x51, 0xbf, 0x2c, 0x77, 0x41, 0x86, 0x44, 0x26, 0xb1, 0x0c,
	0x12, 0x13, 0x1f, 0xcb, 0x72, 0x67, 0x1c, 0xf5, 0x03, 0xde, 0x04, 0x33, 0x21, 0x73, 0x19, 0x51,
	0x8e, 0x9b, 0x73, 0xa6, 0x43, 0xd6, 0x22, 0x49, 0xe5, 0x31, 0x98, 0xcb, 0x66, 0x81, 0xf3, 0x20,
	0x9b, 0xc7, 0xb8, 0x02, 0x97, 0x00, 0xa8, 0x7f, 0x70, 0x3e, 0x1e, 0x58, 0xb6, 0x5d, 0xdd, 0x37,
	0x4a, 0x95, 0x5f, 0xc1, 0xe3, 0x2f, 0x16, 0xdc, 0x0a, 0xdb, 0x04, 0x07, 0x10, 0x82, 0x72, 0x48,
	0x4e, 0x63, 0xb9, 0xda, 0x05, 0x47, 0xfe, 0x5f, 0x38, 0x96, 0x85, 0x6d, 0xe2, 0xf1, 0x1e, 0xc5,
	0x69, 0xc1, 0xc3, 0x81, 0xca, 0x11, 0xb8, 0x9d, 0x4b, 0xde, 0x08, 0xbd, 0x36, 0x89, 0x19, 0x0f,
	0x7d, 0xb8, 0x0e, 0xe6, 0x18, 0x3e, 0xc7, 0x34, 0xe4, 0x7d, 0x99, 0x74, 0xd1, 0x19, 0xfc, 0x16,
	0x93, 0x71, 0x7c, 0xc1, 0x65, 0xce, 0x6b, 0x8e, 0xfc, 0x7f, 0xe5, 0x9f, 0x53, 0x9a, 0x62, 0xdf,
	0x86, 0xe4, 0xec, 0x90, 0x30, 0xee, 0x11, 0xee, 0x11, 0x1c, 0xf7, 0x58, 0x8b, 0x7b, 0x9c, 0xc1,
	0x1d, 0x70, 0x2b, 0xee, 0x71, 0x37, 0xf1, 0xfc, 0x33, 0xcc, 0x99, 0x9b, 0x60, 0xea, 0x32, 0xec,
	0xbb, 0x17, 0x55, 0x33, 0x9d, 0xea, 0x46, 0xdc, 0xe3, 0x4d, 0x15, 0x6d, 0x62, 0xda, 0xc2, 0xfe,
	0x2f, 0x55, 0x13, 0x3e, 0x01, 0xd7, 0x85, 0xea, 0xa4, 0xcf, 0xf1, 0x40, 0x93, 0xda, 0x66, 0x29,
	0xee, 0xf1, 0x57, 0x62, 0x5c, 0xd1, 0xd0, 0x02, 0xab, 0x21, 0xd1, 0xe6, 0x57, 0x76, 0x82, 0x21,
	0xc9, 0xa5, 0x7f, 0x0c, 0x8c, 0x90, 0x4c, 0x64, 0x2f, 0x4b, 0x7a, 0x31, 0x24, 0xa3, 0xc9, 0x6f,
	0x81, 0xd9, 0xec, 0xce, 0x99, 0x96, 0xf1, 0x99, 0x44, 0x5d, 0x34, 0xdb, 0xe0, 0x46, 0x36, 0x65,
	0x40, 0xe3, 0x24, 0xc1, 0x81, 0x9b, 0xf8, 0x5c, 0xde, 0x15, 0x8b, 0xce, 0xf5, 0x34, 0xd4, 0x50,
	0x91, 0xa6, 0xcf, 0xe1, 0xff, 0x83, 0xf5, 0x8c, 0xff, 0x8c, 0x43, 0x1a, 0xb8, 0x0c, 0x7f, 0xea,
	0x61, 0xe2, 0x63, 0x29, 0x53, 0xf7, 0xc6, 0xad, 0x94, 0xf8, 0x59, 0x00, 0xad, 0x34, 0x2e, 0xc4,
	0x9b, 0xc0, 0x48, 0xb0, 0x77, 0xe6, 0xfe, 0x23, 0xe4, 0xe2, 0x78, 0xf5, 0x44, 0xb9, 0x73, 0xaa,
	0x19, 0x62, 0xfc, 0x47, 0x39, 0xfc, 0x81, 0x61, 0xbf, 0xf2, 0xef, 0x35, 0x50, 0xd1, 0xee, 0xcc,
	0xdb, 0xf0, 0x14, 0x8b, 0xcb, 0x4e, 0x6d, 0xca, 0x7d, 0xb0, 0x90, 0x55, 0xc3, 0x30, 0xe1, 0xb2,
	0x53, 0x65, 0x67, 0x3e, 0x1d, 0x6b, 0x61, 0xc2, 0xc5, 0xca, 0xcf, 0x4e, 0x54, 0xb4, 0x2c, 0xa3,
	0x33, 0x67, 0x27, 0x32, 0x30, 0xa2, 0xa5, 0xd8, 0x3f, 0x97, 0x7d, 0x19, 0x6a, 0x1d, 0xec, 0x9f,
	0xa7, 0x5a, 0x19, 0x9d, 0xc9, 0xb4, 0x32, 0xb0, 0x03, 0x56, 0x47, 0xb5, 0x83, 0x26, 0x04, 0xb2,
	0x03, 0x65, 0x67, 0x65, 0x24, 0x4b, 0xd6, 0x80, 0x00, 0x9a, 0x60, 0x65, 0x4c, 0x95, 0x36, 0x5c,
	0xb6, 0xa0, 0xec, 0xc0, 0x11, 0x4d, 0xda, 0x70, 0xb8, 0x07, 0xd6, 0xc6, 0x14, 0xc2, 0x4b, 0xf1,
	0xa9, 0x1b, 0xd3, 0x20, 0xbd, 0x42, 0xcb, 0xce, 0xcd, 0x11, 0xd9, 0xfb, 0x1e, 0x7f, 0x7f, 0xfa,
	0x5e, 0x04, 0x73, 0x15, 0x06, 0xbd, 0x24, 0x0a, 0x7d, 0x8f, 0x63, 0x04, 0x72, 0x15, 0x36, 0xb2,
	0x18, 0x7c, 0x06, 0xe0, 0x98, 0x2a, 0xea, 0x51, 0xbf, 0x83, 0xe6, 0xa5, 0xc2, 0x18, 0x51, 0xbc,
	0x15, 0xe3, 0xd0, 0x02, 0x37, 0x3f, 0xf5, 0xbc, 0x28, 0xe4, 0x7d, 0xb7, 0x13, 0x32, 0x1e, 0xcb,
	0x87, 0x70, 0xd5, 0x34, 0xd1, 0x4d, 0x75, 0x20, 0xd2, 0xe0, 0xeb, 0x2c, 0x56, 0x35, 0x4d, 0xd1,
	0x83, 0xbc, 0x66, 0x7f, 0x1f, 0xad, 0x2a, 0x8f, 0x4f, 0x4a, 0xf6, 0xf7, 0x0b, 0x14, 0x35, 0x74,
	0xab, 0x40, 0x51, 0x2b, 0x50, 0xd8, 0x08, 0x15, 0x28, 0xec, 0x02, 0x85, 0x89, 0xd6, 0x0a, 0x14,
	0x05, 0xeb, 0xa8, 0xd9, 0x68, 0x5d, 0xaf, 0xa8, 0x15, 0xcc, 0x61, 0x9b, 0xe8, 0xb6, 0x5e, 0x61,
	0x9b, 0xe2, 0x6c, 0x6a, 0xfa, 0x8b, 0xee, 0xa8, 0xb3, 0x99, 0xeb, 0xae, 0xd8, 0xf3, 0x3c, 0x1f,
	0x60, 0x2f, 0x40, 0x77, 0xd5, 0xf3, 0x7c, 0x52, 0xd2, 0xc0, 0x5e, 0x00, 0xb7, 0x40, 0x96, 0xca,
	0x15, 0xcf, 0x79, 0xec, 0x5a, 0x24, 0x40, 0xdf, 0x48, 0xc1, 0x72, 0x1a, 0x78, 0x27, 0xc6, 0x2d,
	0xa2, 0x61, 0x6d, 0xde, 0x41, 0xf7, 0xf2, 0xac, 0xcd, 0x3b, 0xc2, 0x4b, 0x13, 0x79, 0x05, 0xbc,
	0x21, 0x61, 0x63, 0x2c, 0xb1, 0x96, 0xb6, 0x4d, 0xde, 0x41, 0xf7, 0xf3, 0xb4, 0x18, 0x17, 0x75,
	0xc8, 0xeb, 0x6c, 0xb8, 0x4c, 0xcb, 0x46, 0x4f, 0x54, 0x1d, 0x22, 0x30, 0x58, 0xa1, 0x65, 0x6b,
	0x58, 0xdb, 0x44, 0x5b, 0x1a, 0xd6, 0x36, 0x35, 0x6c, 0xcd, 0x46, 0x4f, 0x35, 0x6c, 0xcd, 0x96,
	0x67, 0x65, 0x9c, 0x15, 0xd6, 0x7f, 0xa6, 0x2a, 0x1e, 0x83, 0x85, 0xef, 0x35, 0xb4, 0x65, 0xa3,
	0xe7, 0x3a, 0xda, 0xd2, 0xe6, 0xb6, 0x4d, 0xb4, 0xad, 0xa3, 0x6d, 0x5d, 0x6e, 0xcb, 0x34, 0xd1,
	0x77, 0x1a, 0xda, 0xd2, 0x56, 0xf2, 0xc2, 0x34, 0x91, 0xa9, 0xa1, 0x5f, 0x68, 0xe9, 0xae, 0x77,
	0x81, 0xaa, 0x1a, 0xfa, 0xc8, 0xbb, 0x10, 0x7f, 0x3f, 0x49, 0x7a, 0x68, 0x0e, 0x4b, 0x92, 0x0b,
	0x62, 0x74, 0xe0, 0x8c, 0x47, 0x60, 0x79, 0x94, 0x12, 0x1b, 0xfd, 0x42, 0x3d, 0xb4, 0x86, 0x98,
	0x99, 0xe3, 0x6a, 0x22, 0xdd, 0xce, 0x04, 0x57, 0xcb, 0xe7, 0xdb, 0x17, 0x9c, 0x3d, 0xc1, 0xed,
	0x6b, 0xb8, 0x3d, 0xde, 0x41, 0xbb, 0x93, 0xdc, 0x1e, 0xef, 0xc0, 0xef, 0xc1, 0xed, 0xf4, 0x09,
	0x35, 0x5c, 0x35, 0xc1, 0xed, 0x28, 0x6c, 0x87, 0x27, 0x11, 0x46, 0xbf, 0x93, 0x9a, 0x35, 0x85,
	0x0c, 0x96, 0xff, 0x6e, 0x00, 0x88, 0x9e, 0xe5, 0xf4, 0x55, 0xf4, 0xbd, 0xea, 0xd9, 0x84, 0xac,
	0xaa, 0xa5, 0x2d, 0xf4, 0x7b, 0x2d, 0x6d, 0x69, 0x69, 0x1b, 0xfd, 0x41, 0x4b, 0xdb, 0xe2, 0x06,
	0xc9, 0x57, 0x62, 0xa2, 0x97, 0xea, 0x06, 0x99, 0x2c, 0xc5, 0xd4, 0xf2, 0x96, 0x89, 0x5e, 0x69,
	0x79, 0xcb, 0x14, 0x2f, 0x20, 0xfc, 0x82, 0x25, 0x18, 0x07, 0xd2, 0x16, 0x75, 0xc9, 0x81, 0x74,
	0x48, 0x18, 0xc2, 0x04, 0x2b, 0x19, 0x30, 0x52, 0xc1, 0x2e, 0x6a, 0xa8, 0x4b, 0x2f, 0x8d, 0x0d,
	0x4b, 0xd8, 0xd5, 0x2b, 0x5e, 0x58, 0xe8, 0x40, 0xaf, 0x78, 0x61, 0xe9, 0x15, 0xbb, 0x3b, 0xe8,
	0x8f, 0x7a, 0xc5, 0xee, 0x8e, 0x78, 0x70, 0x69, 0xaa, 0xb2, 0xf6, 0xd0, 0x0f, 0xea, 0xc1, 0x95,
	0x2b, 0xcb, 0xda, 0xd3, 0x6b, 0x2c, 0x7b, 0x17, 0xbd, 0xd6, 0x6b, 0x2c, 0x7b, 0x57, 0xaf, 0xb1,
	0xab, 0x16, 0x3a, 0xd4, 0x6b, 0xec, 0xaa, 0x25, 0x2e, 0x71, 0x4d, 0x6d, 0xa6, 0xb5, 0x83, 0x7e,
	0x54, 0x97, 0x78, 0xae, 0x38, 0xd3, 0x2a, 0x58, 0x91, 0xd8, 0x92, 0x37, 0xfa, 0x99, 0xc4, 0xde,
	0x6c, 0x81, 0xeb, 0x99, 0x66, 0x78, 0x5e, 0xdf, 0xaa, 0xcb, 0x2e, 0x0d, 0x8c, 0x5e, 0xe6, 0x13,
	0xac, 0x38, 0xb5, 0x47, 0xca, 0x76, 0x63, 0xb0, 0xa9, 0xa3, 0xe5, 0xd9, 0x7d, 0x97, 0xa7, 0x6b,
	0xda, 0xdc, 0xf2, 0x04, 0xbf, 0xcf, 0xd3, 0xfb, 0x7a, 0x5a, 0x9c, 0xe3, 0xa6, 0x86, 0x16, 0x47,
	0xf9, 0x1e, 0x98, 0xa7, 0x23, 0x06, 0xfd, 0x49, 0x19, 0x94, 0x8e, 0x19, 0x94, 0xea, 0x0c, 0xea,
	0x28, 0xf3, 0x50, 0xad, 0x41, 0xa9, 0xce, 0xa0, 0x2d, 0xbd, 0x42, 0x19, 0x94, 0xea, 0x0c, 0x7a,
	0xac, 0x57, 0x28, 0x83, 0x52, 0xad, 0x41, 0x3f, 0xa8, 0xed, 0xa4, 0x7a, 0x83, 0x52, 0xad, 0x41,
	0x3f, 0xea, 0x35, 0xa9, 0x41, 0xa9, 0xd6, 0xa0, 0x3f, 0xeb, 0x35, 0xa9, 0x41, 0xa9, 0xde, 0xa0,
	0xbf, 0x28, 0x83, 0xd2, 0x02, 0x83, 0x52, 0xad, 0x41, 0xff, 0xa4, 0x9f, 0x29, 0x35, 0x28, 0xcd,
	0x19, 0xf4, 0xcf, 0xca, 0xa0, 0x34, 0x6f, 0x50, 0x9a, 0x37, 0xe8, 0xaf, 0xca, 0x16, 0x54, 0x63,
	0x50, 0x9a, 0x37, 0xe8, 0x5f, 0xf2, 0x74, 0x4d, 0x9b, 0x5b, 0x1a, 0xf4, 0xaf, 0x79, 0x7a, 0x5f,
	0x4f, 0x0b, 0x83, 0xfe, 0x4d, 0x43, 0xef, 0xf1, 0x4e, 0xe5, 0x5f, 0x25, 0xcd, 0x8b, 0x4e, 0x3d,
	0x26, 0x04, 0xfb, 0x3c, 0x8c, 0xc9, 0x4f, 0xea, 0x2f, 0x1f, 0xd8, 0x02, 0x8b, 0xe1, 0xe8, 0x3b,
	0xa9, 0x7c, 0xe7, 0x9c, 0xb7, 0x9e, 0x17, 0x7c, 0x21, 0xd0, 0xbf, 0xc3, 0x3a, 0xe3, 0x39, 0x60,
	0x03, 0xcc, 0x45, 0xe9, 0xeb, 0x94, 0x7c, 0x27, 0x9d, 0xb7, 0x36, 0x2f, 0xc9, 0x37, 0xf6, 0xe6,
	0xe5, 0x0c, 0x94, 0x5b, 0xff, 0xb9, 0x06, 0x6e, 0x1c, 0x8c, 0xd1, 0x47, 0xac, 0x7d, 0xd8, 0x80,
	0xf7, 0xc0, 0xed, 0x33, 0x37, 0x17, 0x70, 0x0f, 0xc9, 0xb9, 0x17, 0x85, 0x81, 0x71, 0x05, 0x3e,
	0x01, 0xdf, 0xea, 0x80, 0xd1, 0xaf, 0x38, 0x9f, 0x7a, 0x98, 0x71, 0xa3, 0x04, 0x1f, 0x83, 0x07,
	0x5f, 0x42, 0x93, 0xa8, 0x6f, 0x5c, 0x85, 0xcf, 0xc1, 0x13, 0x1d, 0xf8, 0x83, 0xd7, 0xc5, 0xea,
	0xb3, 0xd8, 0x68, 0xde, 0x29, 0xf8, 0x14, 0x3c, 0xfe, 0x1a, 0x5c, 0xe4, 0x2e, 0x43, 0x13, 0x3c,
	0xbb, 0x1c, 0x4e, 0x3f, 0x73, 0x64, 0xe9, 0xa7, 0xe1, 0x0e, 0x30, 0xbf, 0x4a, 0x71, 0xc0, 0xb8,
	0x77, 0x12, 0x85, 0xac, 0x83, 0x03, 0x63, 0x06, 0xde, 0x07, 0x77, 0x75, 0xaa, 0x77, 0x71, 0x4a,
	0x1b, 0xb3, 0xb0, 0x02, 0xbe, 0xd1, 0x21, 0xc3, 0x4f, 0x21, 0xc6, 0x1c, 0xdc, 0x02, 0x8f, 0xb4,
	0x8c, 0xc7, 0xbd, 0xba, 0xfa, 0xa6, 0x19, 0xab, 0xfe, 0x19, 0xd7, 0x2e, 0x63, 0x15, 0x73, 0x1c,
	0xb7, 0x64, 0xc1, 0x06, 0xb8, 0x8c, 0x55, 0xcc, 0x20, 0xef, 0xfc, 0xd7, 0xe4, 0x55, 0xb5, 0x18,
	0x0b, 0xf0, 0x2e, 0x58, 0xd3, 0xb1, 0xd2, 0x6e, 0xc6, 0x22, 0xfc, 0x0e, 0x3c, 0xd5, 0x85, 0x95,
	0x5c, 0x6c, 0x53, 0xcb, 0xeb, 0x26, 0x11, 0xce, 0x9a, 0xbf, 0x54, 0x64, 0x85, 0xbc, 0x40, 0xec,
	0xee, 0x32, 0xb4, 0x41, 0xb5, 0x18, 0xcf, 0x96, 0xd4, 0xfa, 0x1c, 0x72, 0xbf, 0x83, 0x83, 0x26,
	0x0d, 0xbb, 0x1e, 0xed, 0x1b, 0x06, 0x7c, 0x00, 0xee, 0x69, 0x9d, 0x89, 0x23, 0xaf, 0xff, 0x1a,
	0x7b, 0x11, 0xef, 0x18, 0xd7, 0xe1, 0x23, 0x50, 0xd1, 0xe6, 0x56, 0xc7, 0x3c, 0x2b, 0x19, 0x16,
	0xed, 0x7c, 0xca, 0xbd, 0x7f, 0x63, 0xdc, 0x80, 0x9b, 0xe0, 0xe1, 0x25, 0x48, 0x18, 0x93, 0x7a,
	0x14, 0x33, 0x1c, 0x18, 0x2b, 0xf0, 0x21, 0xd8, 0xd0, 0xdb, 0x68, 0xc8, 0x1a, 0x37, 0x8b, 0xda,
	0x2a, 0xeb, 0x3f, 0x8e, 0xe5, 0x3f, 0xa3, 0x47, 0x66, 0xb5, 0xa8, 0xad, 0x79, 0x81, 0x68, 0xeb,
	0xad, 0xa2, 0x43, 0xde, 0xb4, 0x9a, 0x13, 0xa7, 0x05, 0x15, 0x65, 0x1e, 0xa2, 0xa3, 0xc7, 0x64,
	0xad, 0xa8, 0xa9, 0x02, 0x17, 0x96, 0x49, 0x7d, 0xb5, 0x0e, 0xbf, 0x05, 0xf7, 0x2f, 0xe3, 0x64,
	0xc5, 0xc6, 0xed, 0xa2, 0x8d, 0x6c, 0x5a, 0xcd, 0x57, 0x5e, 0x20, 0x77, 0xdf, 0xb8, 0xf3, 0x6a,
	0xea, 0xb7, 0xd2, 0x95, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x50, 0xd9, 0x24, 0x6c, 0x76, 0x18,
	0x00, 0x00,
}
