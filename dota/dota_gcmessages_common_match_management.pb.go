// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_gcmessages_common_match_management.proto

package dota

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ELaneSelection int32

const (
	ELaneSelection_k_ELaneSelection_SAFELANE     ELaneSelection = 0
	ELaneSelection_k_ELaneSelection_OFFLANE      ELaneSelection = 1
	ELaneSelection_k_ELaneSelection_MIDLANE      ELaneSelection = 2
	ELaneSelection_k_ELaneSelection_SUPPORT_SOFT ELaneSelection = 3
	ELaneSelection_k_ELaneSelection_SUPPORT_HARD ELaneSelection = 4
)

var ELaneSelection_name = map[int32]string{
	0: "k_ELaneSelection_SAFELANE",
	1: "k_ELaneSelection_OFFLANE",
	2: "k_ELaneSelection_MIDLANE",
	3: "k_ELaneSelection_SUPPORT_SOFT",
	4: "k_ELaneSelection_SUPPORT_HARD",
}

var ELaneSelection_value = map[string]int32{
	"k_ELaneSelection_SAFELANE":     0,
	"k_ELaneSelection_OFFLANE":      1,
	"k_ELaneSelection_MIDLANE":      2,
	"k_ELaneSelection_SUPPORT_SOFT": 3,
	"k_ELaneSelection_SUPPORT_HARD": 4,
}

func (x ELaneSelection) Enum() *ELaneSelection {
	p := new(ELaneSelection)
	*p = x
	return p
}

func (x ELaneSelection) String() string {
	return proto.EnumName(ELaneSelection_name, int32(x))
}

func (x *ELaneSelection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELaneSelection_value, data, "ELaneSelection")
	if err != nil {
		return err
	}
	*x = ELaneSelection(value)
	return nil
}

func (ELaneSelection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{0}
}

type ELaneSelectionFlags int32

const (
	ELaneSelectionFlags_k_ELaneSelectionFlags_None         ELaneSelectionFlags = 0
	ELaneSelectionFlags_k_ELaneSelectionFlags_SAFELANE     ELaneSelectionFlags = 1
	ELaneSelectionFlags_k_ELaneSelectionFlags_OFFLANE      ELaneSelectionFlags = 2
	ELaneSelectionFlags_k_ELaneSelectionFlags_MIDLANE      ELaneSelectionFlags = 4
	ELaneSelectionFlags_k_ELaneSelectionFlags_CORE         ELaneSelectionFlags = 7
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT_SOFT ELaneSelectionFlags = 8
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT_HARD ELaneSelectionFlags = 16
	ELaneSelectionFlags_k_ELaneSelectionFlags_SUPPORT      ELaneSelectionFlags = 24
	ELaneSelectionFlags_k_ELaneSelectionFlags_ALL          ELaneSelectionFlags = 31
)

var ELaneSelectionFlags_name = map[int32]string{
	0:  "k_ELaneSelectionFlags_None",
	1:  "k_ELaneSelectionFlags_SAFELANE",
	2:  "k_ELaneSelectionFlags_OFFLANE",
	4:  "k_ELaneSelectionFlags_MIDLANE",
	7:  "k_ELaneSelectionFlags_CORE",
	8:  "k_ELaneSelectionFlags_SUPPORT_SOFT",
	16: "k_ELaneSelectionFlags_SUPPORT_HARD",
	24: "k_ELaneSelectionFlags_SUPPORT",
	31: "k_ELaneSelectionFlags_ALL",
}

var ELaneSelectionFlags_value = map[string]int32{
	"k_ELaneSelectionFlags_None":         0,
	"k_ELaneSelectionFlags_SAFELANE":     1,
	"k_ELaneSelectionFlags_OFFLANE":      2,
	"k_ELaneSelectionFlags_MIDLANE":      4,
	"k_ELaneSelectionFlags_CORE":         7,
	"k_ELaneSelectionFlags_SUPPORT_SOFT": 8,
	"k_ELaneSelectionFlags_SUPPORT_HARD": 16,
	"k_ELaneSelectionFlags_SUPPORT":      24,
	"k_ELaneSelectionFlags_ALL":          31,
}

func (x ELaneSelectionFlags) Enum() *ELaneSelectionFlags {
	p := new(ELaneSelectionFlags)
	*p = x
	return p
}

func (x ELaneSelectionFlags) String() string {
	return proto.EnumName(ELaneSelectionFlags_name, int32(x))
}

func (x *ELaneSelectionFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ELaneSelectionFlags_value, data, "ELaneSelectionFlags")
	if err != nil {
		return err
	}
	*x = ELaneSelectionFlags(value)
	return nil
}

func (ELaneSelectionFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{1}
}

type EPartyMatchmakingFlags int32

const (
	EPartyMatchmakingFlags_k_EPartyMatchmakingFlags_None            EPartyMatchmakingFlags = 0
	EPartyMatchmakingFlags_k_EPartyMatchmakingFlags_LargeRankSpread EPartyMatchmakingFlags = 1
)

var EPartyMatchmakingFlags_name = map[int32]string{
	0: "k_EPartyMatchmakingFlags_None",
	1: "k_EPartyMatchmakingFlags_LargeRankSpread",
}

var EPartyMatchmakingFlags_value = map[string]int32{
	"k_EPartyMatchmakingFlags_None":            0,
	"k_EPartyMatchmakingFlags_LargeRankSpread": 1,
}

func (x EPartyMatchmakingFlags) Enum() *EPartyMatchmakingFlags {
	p := new(EPartyMatchmakingFlags)
	*p = x
	return p
}

func (x EPartyMatchmakingFlags) String() string {
	return proto.EnumName(EPartyMatchmakingFlags_name, int32(x))
}

func (x *EPartyMatchmakingFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EPartyMatchmakingFlags_value, data, "EPartyMatchmakingFlags")
	if err != nil {
		return err
	}
	*x = EPartyMatchmakingFlags(value)
	return nil
}

func (EPartyMatchmakingFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{2}
}

type EHighPriorityMMState int32

const (
	EHighPriorityMMState_k_EHighPriorityMM_Unknown          EHighPriorityMMState = 0
	EHighPriorityMMState_k_EHighPriorityMM_MissingMMData    EHighPriorityMMState = 1
	EHighPriorityMMState_k_EHighPriorityMM_ResourceMissing  EHighPriorityMMState = 2
	EHighPriorityMMState_k_EHighPriorityMM_ManuallyDisabled EHighPriorityMMState = 3
	EHighPriorityMMState_k_EHighPriorityMM_Min_Enabled      EHighPriorityMMState = 64
	EHighPriorityMMState_k_EHighPriorityMM_AllRolesSelected EHighPriorityMMState = 65
	EHighPriorityMMState_k_EHighPriorityMM_UsingResource    EHighPriorityMMState = 66
	EHighPriorityMMState_k_EHighPriorityMM_FiveStack        EHighPriorityMMState = 67
	EHighPriorityMMState_k_EHighPriorityMM_HighDemand       EHighPriorityMMState = 68
)

var EHighPriorityMMState_name = map[int32]string{
	0:  "k_EHighPriorityMM_Unknown",
	1:  "k_EHighPriorityMM_MissingMMData",
	2:  "k_EHighPriorityMM_ResourceMissing",
	3:  "k_EHighPriorityMM_ManuallyDisabled",
	64: "k_EHighPriorityMM_Min_Enabled",
	65: "k_EHighPriorityMM_AllRolesSelected",
	66: "k_EHighPriorityMM_UsingResource",
	67: "k_EHighPriorityMM_FiveStack",
	68: "k_EHighPriorityMM_HighDemand",
}

var EHighPriorityMMState_value = map[string]int32{
	"k_EHighPriorityMM_Unknown":          0,
	"k_EHighPriorityMM_MissingMMData":    1,
	"k_EHighPriorityMM_ResourceMissing":  2,
	"k_EHighPriorityMM_ManuallyDisabled": 3,
	"k_EHighPriorityMM_Min_Enabled":      64,
	"k_EHighPriorityMM_AllRolesSelected": 65,
	"k_EHighPriorityMM_UsingResource":    66,
	"k_EHighPriorityMM_FiveStack":        67,
	"k_EHighPriorityMM_HighDemand":       68,
}

func (x EHighPriorityMMState) Enum() *EHighPriorityMMState {
	p := new(EHighPriorityMMState)
	*p = x
	return p
}

func (x EHighPriorityMMState) String() string {
	return proto.EnumName(EHighPriorityMMState_name, int32(x))
}

func (x *EHighPriorityMMState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EHighPriorityMMState_value, data, "EHighPriorityMMState")
	if err != nil {
		return err
	}
	*x = EHighPriorityMMState(value)
	return nil
}

func (EHighPriorityMMState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{3}
}

type LobbyDotaTVDelay int32

const (
	LobbyDotaTVDelay_LobbyDotaTV_10  LobbyDotaTVDelay = 0
	LobbyDotaTVDelay_LobbyDotaTV_120 LobbyDotaTVDelay = 1
	LobbyDotaTVDelay_LobbyDotaTV_300 LobbyDotaTVDelay = 2
	LobbyDotaTVDelay_LobbyDotaTV_900 LobbyDotaTVDelay = 3
)

var LobbyDotaTVDelay_name = map[int32]string{
	0: "LobbyDotaTV_10",
	1: "LobbyDotaTV_120",
	2: "LobbyDotaTV_300",
	3: "LobbyDotaTV_900",
}

var LobbyDotaTVDelay_value = map[string]int32{
	"LobbyDotaTV_10":  0,
	"LobbyDotaTV_120": 1,
	"LobbyDotaTV_300": 2,
	"LobbyDotaTV_900": 3,
}

func (x LobbyDotaTVDelay) Enum() *LobbyDotaTVDelay {
	p := new(LobbyDotaTVDelay)
	*p = x
	return p
}

func (x LobbyDotaTVDelay) String() string {
	return proto.EnumName(LobbyDotaTVDelay_name, int32(x))
}

func (x *LobbyDotaTVDelay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaTVDelay_value, data, "LobbyDotaTVDelay")
	if err != nil {
		return err
	}
	*x = LobbyDotaTVDelay(value)
	return nil
}

func (LobbyDotaTVDelay) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{4}
}

type LobbyDotaPauseSetting int32

const (
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited LobbyDotaPauseSetting = 0
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Limited   LobbyDotaPauseSetting = 1
	LobbyDotaPauseSetting_LobbyDotaPauseSetting_Disabled  LobbyDotaPauseSetting = 2
)

var LobbyDotaPauseSetting_name = map[int32]string{
	0: "LobbyDotaPauseSetting_Unlimited",
	1: "LobbyDotaPauseSetting_Limited",
	2: "LobbyDotaPauseSetting_Disabled",
}

var LobbyDotaPauseSetting_value = map[string]int32{
	"LobbyDotaPauseSetting_Unlimited": 0,
	"LobbyDotaPauseSetting_Limited":   1,
	"LobbyDotaPauseSetting_Disabled":  2,
}

func (x LobbyDotaPauseSetting) Enum() *LobbyDotaPauseSetting {
	p := new(LobbyDotaPauseSetting)
	*p = x
	return p
}

func (x LobbyDotaPauseSetting) String() string {
	return proto.EnumName(LobbyDotaPauseSetting_name, int32(x))
}

func (x *LobbyDotaPauseSetting) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaPauseSetting_value, data, "LobbyDotaPauseSetting")
	if err != nil {
		return err
	}
	*x = LobbyDotaPauseSetting(value)
	return nil
}

func (LobbyDotaPauseSetting) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{5}
}

type EReadyCheckStatus int32

const (
	EReadyCheckStatus_k_EReadyCheckStatus_Unknown  EReadyCheckStatus = 0
	EReadyCheckStatus_k_EReadyCheckStatus_NotReady EReadyCheckStatus = 1
	EReadyCheckStatus_k_EReadyCheckStatus_Ready    EReadyCheckStatus = 2
)

var EReadyCheckStatus_name = map[int32]string{
	0: "k_EReadyCheckStatus_Unknown",
	1: "k_EReadyCheckStatus_NotReady",
	2: "k_EReadyCheckStatus_Ready",
}

var EReadyCheckStatus_value = map[string]int32{
	"k_EReadyCheckStatus_Unknown":  0,
	"k_EReadyCheckStatus_NotReady": 1,
	"k_EReadyCheckStatus_Ready":    2,
}

func (x EReadyCheckStatus) Enum() *EReadyCheckStatus {
	p := new(EReadyCheckStatus)
	*p = x
	return p
}

func (x EReadyCheckStatus) String() string {
	return proto.EnumName(EReadyCheckStatus_name, int32(x))
}

func (x *EReadyCheckStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EReadyCheckStatus_value, data, "EReadyCheckStatus")
	if err != nil {
		return err
	}
	*x = EReadyCheckStatus(value)
	return nil
}

func (EReadyCheckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{6}
}

type EReadyCheckRequestResult int32

const (
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_Success           EReadyCheckRequestResult = 0
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_AlreadyInProgress EReadyCheckRequestResult = 1
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_NotInParty        EReadyCheckRequestResult = 2
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_SendError         EReadyCheckRequestResult = 3
	EReadyCheckRequestResult_k_EReadyCheckRequestResult_UnknownError      EReadyCheckRequestResult = 4
)

var EReadyCheckRequestResult_name = map[int32]string{
	0: "k_EReadyCheckRequestResult_Success",
	1: "k_EReadyCheckRequestResult_AlreadyInProgress",
	2: "k_EReadyCheckRequestResult_NotInParty",
	3: "k_EReadyCheckRequestResult_SendError",
	4: "k_EReadyCheckRequestResult_UnknownError",
}

var EReadyCheckRequestResult_value = map[string]int32{
	"k_EReadyCheckRequestResult_Success":           0,
	"k_EReadyCheckRequestResult_AlreadyInProgress": 1,
	"k_EReadyCheckRequestResult_NotInParty":        2,
	"k_EReadyCheckRequestResult_SendError":         3,
	"k_EReadyCheckRequestResult_UnknownError":      4,
}

func (x EReadyCheckRequestResult) Enum() *EReadyCheckRequestResult {
	p := new(EReadyCheckRequestResult)
	*p = x
	return p
}

func (x EReadyCheckRequestResult) String() string {
	return proto.EnumName(EReadyCheckRequestResult_name, int32(x))
}

func (x *EReadyCheckRequestResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EReadyCheckRequestResult_value, data, "EReadyCheckRequestResult")
	if err != nil {
		return err
	}
	*x = EReadyCheckRequestResult(value)
	return nil
}

func (EReadyCheckRequestResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{7}
}

type EMatchBehaviorScoreVariance int32

const (
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Invalid EMatchBehaviorScoreVariance = 0
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Low     EMatchBehaviorScoreVariance = 1
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Medium  EMatchBehaviorScoreVariance = 2
	EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_High    EMatchBehaviorScoreVariance = 3
)

var EMatchBehaviorScoreVariance_name = map[int32]string{
	0: "k_EMatchBehaviorScoreVariance_Invalid",
	1: "k_EMatchBehaviorScoreVariance_Low",
	2: "k_EMatchBehaviorScoreVariance_Medium",
	3: "k_EMatchBehaviorScoreVariance_High",
}

var EMatchBehaviorScoreVariance_value = map[string]int32{
	"k_EMatchBehaviorScoreVariance_Invalid": 0,
	"k_EMatchBehaviorScoreVariance_Low":     1,
	"k_EMatchBehaviorScoreVariance_Medium":  2,
	"k_EMatchBehaviorScoreVariance_High":    3,
}

func (x EMatchBehaviorScoreVariance) Enum() *EMatchBehaviorScoreVariance {
	p := new(EMatchBehaviorScoreVariance)
	*p = x
	return p
}

func (x EMatchBehaviorScoreVariance) String() string {
	return proto.EnumName(EMatchBehaviorScoreVariance_name, int32(x))
}

func (x *EMatchBehaviorScoreVariance) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EMatchBehaviorScoreVariance_value, data, "EMatchBehaviorScoreVariance")
	if err != nil {
		return err
	}
	*x = EMatchBehaviorScoreVariance(value)
	return nil
}

func (EMatchBehaviorScoreVariance) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{8}
}

type CSODOTAParty_State int32

const (
	CSODOTAParty_UI            CSODOTAParty_State = 0
	CSODOTAParty_FINDING_MATCH CSODOTAParty_State = 1
	CSODOTAParty_IN_MATCH      CSODOTAParty_State = 2
)

var CSODOTAParty_State_name = map[int32]string{
	0: "UI",
	1: "FINDING_MATCH",
	2: "IN_MATCH",
}

var CSODOTAParty_State_value = map[string]int32{
	"UI":            0,
	"FINDING_MATCH": 1,
	"IN_MATCH":      2,
}

func (x CSODOTAParty_State) Enum() *CSODOTAParty_State {
	p := new(CSODOTAParty_State)
	*p = x
	return p
}

func (x CSODOTAParty_State) String() string {
	return proto.EnumName(CSODOTAParty_State_name, int32(x))
}

func (x *CSODOTAParty_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTAParty_State_value, data, "CSODOTAParty_State")
	if err != nil {
		return err
	}
	*x = CSODOTAParty_State(value)
	return nil
}

func (CSODOTAParty_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{1, 0}
}

type CSODOTALobby_State int32

const (
	CSODOTALobby_UI           CSODOTALobby_State = 0
	CSODOTALobby_READYUP      CSODOTALobby_State = 4
	CSODOTALobby_SERVERSETUP  CSODOTALobby_State = 1
	CSODOTALobby_RUN          CSODOTALobby_State = 2
	CSODOTALobby_POSTGAME     CSODOTALobby_State = 3
	CSODOTALobby_NOTREADY     CSODOTALobby_State = 5
	CSODOTALobby_SERVERASSIGN CSODOTALobby_State = 6
)

var CSODOTALobby_State_name = map[int32]string{
	0: "UI",
	4: "READYUP",
	1: "SERVERSETUP",
	2: "RUN",
	3: "POSTGAME",
	5: "NOTREADY",
	6: "SERVERASSIGN",
}

var CSODOTALobby_State_value = map[string]int32{
	"UI":           0,
	"READYUP":      4,
	"SERVERSETUP":  1,
	"RUN":          2,
	"POSTGAME":     3,
	"NOTREADY":     5,
	"SERVERASSIGN": 6,
}

func (x CSODOTALobby_State) Enum() *CSODOTALobby_State {
	p := new(CSODOTALobby_State)
	*p = x
	return p
}

func (x CSODOTALobby_State) String() string {
	return proto.EnumName(CSODOTALobby_State_name, int32(x))
}

func (x *CSODOTALobby_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_State_value, data, "CSODOTALobby_State")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_State(value)
	return nil
}

func (CSODOTALobby_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{11, 0}
}

type CSODOTALobby_LobbyType int32

const (
	CSODOTALobby_INVALID                 CSODOTALobby_LobbyType = -1
	CSODOTALobby_CASUAL_MATCH            CSODOTALobby_LobbyType = 0
	CSODOTALobby_PRACTICE                CSODOTALobby_LobbyType = 1
	CSODOTALobby_COOP_BOT_MATCH          CSODOTALobby_LobbyType = 4
	CSODOTALobby_LEGACY_TEAM_MATCH       CSODOTALobby_LobbyType = 5
	CSODOTALobby_LEGACY_SOLO_QUEUE_MATCH CSODOTALobby_LobbyType = 6
	CSODOTALobby_COMPETITIVE_MATCH       CSODOTALobby_LobbyType = 7
	CSODOTALobby_CASUAL_1V1_MATCH        CSODOTALobby_LobbyType = 8
	CSODOTALobby_WEEKEND_TOURNEY         CSODOTALobby_LobbyType = 9
	CSODOTALobby_LOCAL_BOT_MATCH         CSODOTALobby_LobbyType = 10
	CSODOTALobby_SPECTATOR               CSODOTALobby_LobbyType = 11
	CSODOTALobby_EVENT_MATCH             CSODOTALobby_LobbyType = 12
	CSODOTALobby_GAUNTLET                CSODOTALobby_LobbyType = 13
)

var CSODOTALobby_LobbyType_name = map[int32]string{
	-1: "INVALID",
	0:  "CASUAL_MATCH",
	1:  "PRACTICE",
	4:  "COOP_BOT_MATCH",
	5:  "LEGACY_TEAM_MATCH",
	6:  "LEGACY_SOLO_QUEUE_MATCH",
	7:  "COMPETITIVE_MATCH",
	8:  "CASUAL_1V1_MATCH",
	9:  "WEEKEND_TOURNEY",
	10: "LOCAL_BOT_MATCH",
	11: "SPECTATOR",
	12: "EVENT_MATCH",
	13: "GAUNTLET",
}

var CSODOTALobby_LobbyType_value = map[string]int32{
	"INVALID":                 -1,
	"CASUAL_MATCH":            0,
	"PRACTICE":                1,
	"COOP_BOT_MATCH":          4,
	"LEGACY_TEAM_MATCH":       5,
	"LEGACY_SOLO_QUEUE_MATCH": 6,
	"COMPETITIVE_MATCH":       7,
	"CASUAL_1V1_MATCH":        8,
	"WEEKEND_TOURNEY":         9,
	"LOCAL_BOT_MATCH":         10,
	"SPECTATOR":               11,
	"EVENT_MATCH":             12,
	"GAUNTLET":                13,
}

func (x CSODOTALobby_LobbyType) Enum() *CSODOTALobby_LobbyType {
	p := new(CSODOTALobby_LobbyType)
	*p = x
	return p
}

func (x CSODOTALobby_LobbyType) String() string {
	return proto.EnumName(CSODOTALobby_LobbyType_name, int32(x))
}

func (x *CSODOTALobby_LobbyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_LobbyType_value, data, "CSODOTALobby_LobbyType")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_LobbyType(value)
	return nil
}

func (CSODOTALobby_LobbyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{11, 1}
}

type CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType int32

const (
	CMvpData_MvpDatum_MvpAccolade_kills                                                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 1
	CMvpData_MvpDatum_MvpAccolade_deaths                                                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 2
	CMvpData_MvpDatum_MvpAccolade_assists                                                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 3
	CMvpData_MvpDatum_MvpAccolade_net_worth                                                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 5
	CMvpData_MvpDatum_MvpAccolade_item_value                                                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 6
	CMvpData_MvpDatum_MvpAccolade_support_gold_spent                                             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 7
	CMvpData_MvpDatum_MvpAccolade_wards_placed                                                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 8
	CMvpData_MvpDatum_MvpAccolade_dewards                                                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 9
	CMvpData_MvpDatum_MvpAccolade_camps_stacked                                                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 10
	CMvpData_MvpDatum_MvpAccolade_last_hits                                                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 11
	CMvpData_MvpDatum_MvpAccolade_denies                                                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 12
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Killing_Sprees                                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 13
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Godlike                                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 14
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Towers_Destroyed                               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 15
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_SunstrikeKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 16
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Axe_Culls                                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 17
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Axe_BattleHungerKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 18
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_LowHealthKills                             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 19
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_TornadoKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 20
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_DoubleStuns                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 21
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_WarcryAssists                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 22
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_CleaveDoubleKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 23
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_TeleportInterrupts                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 24
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Faceless_MultiChrono                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 25
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Faceless_ChronoKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 26
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Ursa_MultiShocks                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 27
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_RoshanKills                                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 28
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lion_FingerKills                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 29
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Riki_SmokedHeroKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 32
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_HeroesRevealedWithDust                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 33
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SkeletonKing_ReincarnationKills            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 34
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Skywrath_FlareKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 35
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Leshrac_SplitEarthStuns                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 36
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mirana_MaxStunArrows                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 37
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 38
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_PhantomAssassin_DaggerCrits                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 39
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Meepo_Earthbinds                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 40
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bloodseeker_RuptureKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 41
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Slark_LeashedEnemies                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 42
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Disruptor_FountainGlimpses                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 43
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Rubick_SpellsStolen                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 44
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Rubick_UltimatesStolen                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 45
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Doom_EnemiesDoomed                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 46
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Omniknight_Purifications                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 47
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Omniknight_AlliesRepelled                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 48
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Omniknight_EnemiesRepelled                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 49
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Warlock_FiveHeroFatalBonds                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 50
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_FrostbittenEnemies           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 51
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_CrystalNovas                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 52
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Kunkka_DoubleHeroTorrents                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 53
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Kunkka_TripleHeroGhostShips                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 54
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NagaSiren_EnemiesEnsnared                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 55
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NagaSiren_TripleHeroRipTides               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 56
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lycan_KillsDuringShapeshift                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 57
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pudge_DismemberKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 58
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pudge_EnemyHeroesHooked                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 59
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pudge_HookKills                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 60
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 61
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_EnemiesSilenced                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 62
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_MultiHeroSilences               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 63
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_SilencedKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 64
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_FrostArrowKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 65
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DragonKnight_KillsInDragonForm             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 66
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DragonKnight_BreatheFireKills              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 67
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DragonKnight_SplashKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 68
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_CaskStuns                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 69
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_MaledictKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 70
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_MultiHeroMaledicts             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 71
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_DeathWardKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 72
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Disruptor_ThunderStrikeKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 73
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Disruptor_HeroesGlimpsed                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 74
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_FreezingFieldKills           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 75
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Medusa_EnemiesPetrified                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 77
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Warlock_FatalBondsKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 78
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Warlock_GolemKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 79
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tusk_WalrusPunches                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 80
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tusk_SnowballStuns                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 81
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_FissureStuns                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 82
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_3HeroEchoslams                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 83
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SandKing_BurrowstrikeStuns                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 84
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SandKing_EpicenterKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 85
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SkywrathMage_AncientSealKills              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 86
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SkywrathMage_ConcussiveShotKills           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 87
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Luna_LucentBeamKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 88
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Luna_EclipseKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 89
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_KeeperOfTheLight_IlluminateKills           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 90
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 91
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 92
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_LegionCommander_DuelsWon                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 93
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Beastmaster_RoarKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 94
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Beastmaster_RoarMultiKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 95
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Windrunner_FocusFireBuildings              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 96
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Windrunner_PowershotKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 97
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_PhantomAssassin_DaggerLastHits             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 98
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_PhantomAssassin_PhantomStrikeKills         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 99
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_CryptSwarmKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 100
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_ExorcismBuildingKills         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 101
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 102
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_MultiHeroSilences             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 103
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Abaddon_MistCoilKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 104
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Abaddon_MistCoilHealed                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 105
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Abaddon_AphoticShieldKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 106
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lich_ChainFrostTripleKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 107
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lich_ChainFrostMultiKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 108
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lich_ChainFrostBounces                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 109
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Ursa_EnragedKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 110
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Ursa_EarthshockKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 111
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_LagunaBladeKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 112
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_DragonSlaveKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 113
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_LightStrikeArrayStuns                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 114
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Barracks_Destroyed                             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 115
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_TemplarAssassin_MeldKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 116
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_TemplarAssassin_HeroesSlowed                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 117
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Sniper_AssassinationKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 118
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Sniper_HeadshotStuns                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 119
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_EarthSpirit_SmashStuns                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 120
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_EarthSpirit_GripSilences                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 121
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowShaman_ShackleKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 122
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowShaman_HexKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 123
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Centaur_EnemiesStomped                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 124
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Centaur_DoubleEdgeKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 125
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Centaur_ReturnKills                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 126
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_EmberSpirit_EnemiesChained                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 127
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 128
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Puck_OrbKills                                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 129
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_VengefulSpirit_EnemiesStunned                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 130
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Lifestealer_RageKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 131
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Lifestealer_OpenWoundsKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 132
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Lifestealer_InfestKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 133
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ElderTitan_SpiritKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 134
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ElderTitan_GoodStomps                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 135
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Clockwerk_RocketKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 136
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Clockwerk_BlindRocketKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 137
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_StormSpirit_BallKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 138
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_StormSpirit_DoubleRemnantKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 139
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_StormSpirit_VortexKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 140
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Tinker_DoubleMissileKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 141
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Tinker_LaserKills                              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 142
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Techies_SuicideKills                           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 143
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Techies_LandMineKills                          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 144
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Techies_StatisTrapStuns                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 145
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Techies_RemoteMineKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 146
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_TripleRazeKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 147
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_RequiemMultiKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 148
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_QRazeKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 149
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_WRazeKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 150
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_ShadowFiend_ERazeKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 151
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Oracle_FatesEdictKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 152
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Oracle_FalsePromiseSaves                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 153
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEvent_Juggernaut_OmnislashKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 154
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SkeletonKing_SkeletonHeroKills             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 157
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DarkWillow_CursedCrownTripleStuns          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 158
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Dazzle_ShallowGraveSaves                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 159
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Dazzle_PoisonTouchKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 160
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ThreeManMeks                               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 161
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Viper_PoisonAttackKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 162
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Viper_CorrosiveSkinKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 163
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ThreeHeroVeils                             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 164
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Viper_KillsDuringViperStrike               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 165
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_SolarCrestKills                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 166
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tiny_TreeThrowKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 167
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Riki_BackstabKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 168
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 169
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Terrorblade_MetamorphosisKills             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 170
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lion_GreatFingerKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 171
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Antimage_SpellsBlockedWithAghanims         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 172
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Antimage_ThreeManManaVoids                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 173
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ArcWarden_TempestDoubleKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 174
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ArcWarden_SparkWraithKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 175
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bane_BrainSapKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 176
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bane_FiendsGripKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 177
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Batrider_TripleHeroFlamebreaks             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 178
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Batrider_DoubleHeroLassoes                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 179
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 180
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 181
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Bristleback_TripleHeroNasalGoo             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 182
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Broodmother_SpiderlingHeroKills            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 183
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Broodmother_KillsInsideWeb                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 184
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Centaur_ThreeHeroStampede                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 185
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ChaosKnight_RealityRiftKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 186
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Chen_KillsWithPenitence                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 187
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 188
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 189
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Dazzle_ShadowWaveKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 190
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_SiphonKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 191
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 192
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 193
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Doom_InfernalBladeBurnKills                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 194
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 195
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_EmberSpirit_RemnantKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 196
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_EmberSpirit_SleightOfFistKills             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 197
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 198
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Enigma_ThreeManBlackHoles                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 199
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 200
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 201
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Gyrocopter_HomingMissileKills              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 202
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Gyrocopter_RocketBarrageKills              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 203
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Huskar_KillsDuringLifeBreak                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 204
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Huskar_BurningSpearKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 205
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_MultiHeroIceWall                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 206
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_ThreeHeroEMP                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 207
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 208
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Invoker_MultiHeroChaosMeteor               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 209
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Jakiro_MultiHeroDualBreath                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 210
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Jakiro_IcePathMacropyreCombos              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 211
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Leshrac_PulseNovaKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 212
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Leshrac_ThreeHeroLightningStorm            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 213
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lion_ThreeHeroFingerOfDeath                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 214
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Meepo_PoofKills                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 215
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Meepo_MultiHeroEarthbinds                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 216
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NightStalker_NighttimeKills                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 217
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Morphling_KillsDuringReplicate             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 218
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_OgreMagi_FireblastKills                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 219
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_OgreMagi_IgniteKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 220
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DominatingKillStreaks                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 221
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_MegaKillStreaks                            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 222
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Alchemist_AghanimsGiven                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 223
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_VeilsLeadingToKills                        CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 224
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_DustLeadingToKills                         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 225
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 226
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Weaver_ShukuchiKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 227
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Windrunner_ShackleFocusFireKills           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 228
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 229
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tusk_WalrusPunchKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 230
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Tinker_TripleHeroLasers                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 231
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades         CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 232
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sven_KillsDuringGodsStrength               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 233
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Sniper_ThreeHeroShrapnels                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 234
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Slark_KillsDuringShadowDance               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 235
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks          CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 236
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ShadowShaman_SerpentWardShackleKills       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 237
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade             CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 238
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Razor_EyeOfTheStormKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 239
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pugna_LifeDrainKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 240
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 241
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Oracle_MultiHeroFortunesEnd                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 242
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Omniknight_PurificationKills               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 243
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 244
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Warlock_ThreeHeroFatalBonds                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 245
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Riki_TricksOfTheTradeKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 246
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_AftershockHits10               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 247
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_5HeroEchoslams                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 248
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_LagunaBladeHeroKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 249
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Lina_LightStrikeHeroStuns                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 250
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_FissureMultiStuns              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 251
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Earthshaker_TotemKills                     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 252
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pangolier_SwashbuckleKills                 CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 253
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Furion_EnemyHeroesTrapped                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 254
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Pangolier_HeartpiercerKills                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 255
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Medusa_MultiHeroStoneGaze                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 256
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Medusa_SplitShotKills                      CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 257
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mirana_MultiHeroStarstorm                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 258
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mirana_KillsFromMoonlightShadow            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 259
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Magnus_MultiHeroSkewers                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 260
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Magnus_MultiHeroReversePolarity            CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 261
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Magnus_HeroesSlowedWithShockwave           CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 262
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NagaSiren_MultiHeroSong                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 263
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_NagaSiren_AlliesHealedBySong               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 264
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_LoneDruid_MultiHeroRoar                    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 265
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_LoneDruid_BattleCryKills                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 266
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_WinterWyvern_ThreeHeroCurses               CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 267
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell     CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 268
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mars_EnemiesKilledInArena                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 269
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mars_MultiHeroGodsRebuke                   CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 270
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Mars_GodsRebukeKills                       CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 271
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Snapfire_LizardBlobsKills                  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 272
	CMvpData_MvpDatum_MvpAccolade_kKillEaterEventType_Snapfire_TwoHeroCookieStuns                CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 273
	CMvpData_MvpDatum_MvpAccolade_Custom_KillStreak                                              CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = 274
)

var CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_name = map[int32]string{
	1:   "kills",
	2:   "deaths",
	3:   "assists",
	5:   "net_worth",
	6:   "item_value",
	7:   "support_gold_spent",
	8:   "wards_placed",
	9:   "dewards",
	10:  "camps_stacked",
	11:  "last_hits",
	12:  "denies",
	13:  "kKillEaterEvent_Killing_Sprees",
	14:  "kKillEaterEvent_Godlike",
	15:  "kKillEaterEvent_Towers_Destroyed",
	16:  "kKillEaterEventType_Invoker_SunstrikeKills",
	17:  "kKillEaterEventType_Axe_Culls",
	18:  "kKillEaterEventType_Axe_BattleHungerKills",
	19:  "kKillEaterEventType_LowHealthKills",
	20:  "kKillEaterEventType_Invoker_TornadoKills",
	21:  "kKillEaterEventType_Sven_DoubleStuns",
	22:  "kKillEaterEventType_Sven_WarcryAssists",
	23:  "kKillEaterEventType_Sven_CleaveDoubleKills",
	24:  "kKillEaterEventType_Sven_TeleportInterrupts",
	25:  "kKillEaterEventType_Faceless_MultiChrono",
	26:  "kKillEaterEventType_Faceless_ChronoKills",
	27:  "kKillEaterEventType_Ursa_MultiShocks",
	28:  "kKillEaterEventType_RoshanKills",
	29:  "kKillEaterEventType_Lion_FingerKills",
	32:  "kKillEaterEventType_Riki_SmokedHeroKills",
	33:  "kKillEaterEventType_HeroesRevealedWithDust",
	34:  "kKillEaterEventType_SkeletonKing_ReincarnationKills",
	35:  "kKillEaterEventType_Skywrath_FlareKills",
	36:  "kKillEaterEventType_Leshrac_SplitEarthStuns",
	37:  "kKillEaterEventType_Mirana_MaxStunArrows",
	38:  "kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits",
	39:  "kKillEaterEventType_PhantomAssassin_DaggerCrits",
	40:  "kKillEaterEventType_Meepo_Earthbinds",
	41:  "kKillEaterEventType_Bloodseeker_RuptureKills",
	42:  "kKillEaterEventType_Slark_LeashedEnemies",
	43:  "kKillEaterEventType_Disruptor_FountainGlimpses",
	44:  "kKillEaterEventType_Rubick_SpellsStolen",
	45:  "kKillEaterEventType_Rubick_UltimatesStolen",
	46:  "kKillEaterEventType_Doom_EnemiesDoomed",
	47:  "kKillEaterEventType_Omniknight_Purifications",
	48:  "kKillEaterEventType_Omniknight_AlliesRepelled",
	49:  "kKillEaterEventType_Omniknight_EnemiesRepelled",
	50:  "kKillEaterEventType_Warlock_FiveHeroFatalBonds",
	51:  "kKillEaterEventType_CrystalMaiden_FrostbittenEnemies",
	52:  "kKillEaterEventType_CrystalMaiden_CrystalNovas",
	53:  "kKillEaterEventType_Kunkka_DoubleHeroTorrents",
	54:  "kKillEaterEventType_Kunkka_TripleHeroGhostShips",
	55:  "kKillEaterEventType_NagaSiren_EnemiesEnsnared",
	56:  "kKillEaterEventType_NagaSiren_TripleHeroRipTides",
	57:  "kKillEaterEventType_Lycan_KillsDuringShapeshift",
	58:  "kKillEaterEventType_Pudge_DismemberKills",
	59:  "kKillEaterEventType_Pudge_EnemyHeroesHooked",
	60:  "kKillEaterEventType_Pudge_HookKills",
	61:  "kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked",
	62:  "kKillEaterEventType_DrowRanger_EnemiesSilenced",
	63:  "kKillEaterEventType_DrowRanger_MultiHeroSilences",
	64:  "kKillEaterEventType_DrowRanger_SilencedKills",
	65:  "kKillEaterEventType_DrowRanger_FrostArrowKills",
	66:  "kKillEaterEventType_DragonKnight_KillsInDragonForm",
	67:  "kKillEaterEventType_DragonKnight_BreatheFireKills",
	68:  "kKillEaterEventType_DragonKnight_SplashKills",
	69:  "kKillEaterEventType_WitchDoctor_CaskStuns",
	70:  "kKillEaterEventType_WitchDoctor_MaledictKills",
	71:  "kKillEaterEventType_WitchDoctor_MultiHeroMaledicts",
	72:  "kKillEaterEventType_WitchDoctor_DeathWardKills",
	73:  "kKillEaterEventType_Disruptor_ThunderStrikeKills",
	74:  "kKillEaterEventType_Disruptor_HeroesGlimpsed",
	75:  "kKillEaterEventType_CrystalMaiden_FreezingFieldKills",
	77:  "kKillEaterEventType_Medusa_EnemiesPetrified",
	78:  "kKillEaterEventType_Warlock_FatalBondsKills",
	79:  "kKillEaterEventType_Warlock_GolemKills",
	80:  "kKillEaterEventType_Tusk_WalrusPunches",
	81:  "kKillEaterEventType_Tusk_SnowballStuns",
	82:  "kKillEaterEventType_Earthshaker_FissureStuns",
	83:  "kKillEaterEventType_Earthshaker_3HeroEchoslams",
	84:  "kKillEaterEventType_SandKing_BurrowstrikeStuns",
	85:  "kKillEaterEventType_SandKing_EpicenterKills",
	86:  "kKillEaterEventType_SkywrathMage_AncientSealKills",
	87:  "kKillEaterEventType_SkywrathMage_ConcussiveShotKills",
	88:  "kKillEaterEventType_Luna_LucentBeamKills",
	89:  "kKillEaterEventType_Luna_EclipseKills",
	90:  "kKillEaterEventType_KeeperOfTheLight_IlluminateKills",
	91:  "kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns",
	92:  "kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled",
	93:  "kKillEaterEventType_LegionCommander_DuelsWon",
	94:  "kKillEaterEventType_Beastmaster_RoarKills",
	95:  "kKillEaterEventType_Beastmaster_RoarMultiKills",
	96:  "kKillEaterEventType_Windrunner_FocusFireBuildings",
	97:  "kKillEaterEventType_Windrunner_PowershotKills",
	98:  "kKillEaterEventType_PhantomAssassin_DaggerLastHits",
	99:  "kKillEaterEventType_PhantomAssassin_PhantomStrikeKills",
	100: "kKillEaterEventType_DeathProphet_CryptSwarmKills",
	101: "kKillEaterEventType_DeathProphet_ExorcismBuildingKills",
	102: "kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned",
	103: "kKillEaterEventType_DeathProphet_MultiHeroSilences",
	104: "kKillEaterEventType_Abaddon_MistCoilKills",
	105: "kKillEaterEventType_Abaddon_MistCoilHealed",
	106: "kKillEaterEventType_Abaddon_AphoticShieldKills",
	107: "kKillEaterEventType_Lich_ChainFrostTripleKills",
	108: "kKillEaterEventType_Lich_ChainFrostMultiKills",
	109: "kKillEaterEventType_Lich_ChainFrostBounces",
	110: "kKillEaterEventType_Ursa_EnragedKills",
	111: "kKillEaterEventType_Ursa_EarthshockKills",
	112: "kKillEaterEventType_Lina_LagunaBladeKills",
	113: "kKillEaterEventType_Lina_DragonSlaveKills",
	114: "kKillEaterEventType_Lina_LightStrikeArrayStuns",
	115: "kKillEaterEvent_Barracks_Destroyed",
	116: "kKillEaterEvent_TemplarAssassin_MeldKills",
	117: "kKillEaterEvent_TemplarAssassin_HeroesSlowed",
	118: "kKillEaterEvent_Sniper_AssassinationKills",
	119: "kKillEaterEvent_Sniper_HeadshotStuns",
	120: "kKillEaterEvent_EarthSpirit_SmashStuns",
	121: "kKillEaterEvent_EarthSpirit_GripSilences",
	122: "kKillEaterEvent_ShadowShaman_ShackleKills",
	123: "kKillEaterEvent_ShadowShaman_HexKills",
	124: "kKillEaterEvent_Centaur_EnemiesStomped",
	125: "kKillEaterEvent_Centaur_DoubleEdgeKills",
	126: "kKillEaterEvent_Centaur_ReturnKills",
	127: "kKillEaterEvent_EmberSpirit_EnemiesChained",
	128: "kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills",
	129: "kKillEaterEvent_Puck_OrbKills",
	130: "kKillEaterEvent_VengefulSpirit_EnemiesStunned",
	131: "kKillEaterEvent_Lifestealer_RageKills",
	132: "kKillEaterEvent_Lifestealer_OpenWoundsKills",
	133: "kKillEaterEvent_Lifestealer_InfestKills",
	134: "kKillEaterEvent_ElderTitan_SpiritKills",
	135: "kKillEaterEvent_ElderTitan_GoodStomps",
	136: "kKillEaterEvent_Clockwerk_RocketKills",
	137: "kKillEaterEvent_Clockwerk_BlindRocketKills",
	138: "kKillEaterEvent_StormSpirit_BallKills",
	139: "kKillEaterEvent_StormSpirit_DoubleRemnantKills",
	140: "kKillEaterEvent_StormSpirit_VortexKills",
	141: "kKillEaterEvent_Tinker_DoubleMissileKills",
	142: "kKillEaterEvent_Tinker_LaserKills",
	143: "kKillEaterEvent_Techies_SuicideKills",
	144: "kKillEaterEvent_Techies_LandMineKills",
	145: "kKillEaterEvent_Techies_StatisTrapStuns",
	146: "kKillEaterEvent_Techies_RemoteMineKills",
	147: "kKillEaterEvent_ShadowFiend_TripleRazeKills",
	148: "kKillEaterEvent_ShadowFiend_RequiemMultiKills",
	149: "kKillEaterEvent_ShadowFiend_QRazeKills",
	150: "kKillEaterEvent_ShadowFiend_WRazeKills",
	151: "kKillEaterEvent_ShadowFiend_ERazeKills",
	152: "kKillEaterEvent_Oracle_FatesEdictKills",
	153: "kKillEaterEvent_Oracle_FalsePromiseSaves",
	154: "kKillEaterEvent_Juggernaut_OmnislashKills",
	157: "kKillEaterEventType_SkeletonKing_SkeletonHeroKills",
	158: "kKillEaterEventType_DarkWillow_CursedCrownTripleStuns",
	159: "kKillEaterEventType_Dazzle_ShallowGraveSaves",
	160: "kKillEaterEventType_Dazzle_PoisonTouchKills",
	161: "kKillEaterEventType_ThreeManMeks",
	162: "kKillEaterEventType_Viper_PoisonAttackKills",
	163: "kKillEaterEventType_Viper_CorrosiveSkinKills",
	164: "kKillEaterEventType_ThreeHeroVeils",
	165: "kKillEaterEventType_Viper_KillsDuringViperStrike",
	166: "kKillEaterEventType_SolarCrestKills",
	167: "kKillEaterEventType_Tiny_TreeThrowKills",
	168: "kKillEaterEventType_Riki_BackstabKills",
	169: "kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns",
	170: "kKillEaterEventType_Terrorblade_MetamorphosisKills",
	171: "kKillEaterEventType_Lion_GreatFingerKills",
	172: "kKillEaterEventType_Antimage_SpellsBlockedWithAghanims",
	173: "kKillEaterEventType_Antimage_ThreeManManaVoids",
	174: "kKillEaterEventType_ArcWarden_TempestDoubleKills",
	175: "kKillEaterEventType_ArcWarden_SparkWraithKills",
	176: "kKillEaterEventType_Bane_BrainSapKills",
	177: "kKillEaterEventType_Bane_FiendsGripKills",
	178: "kKillEaterEventType_Batrider_TripleHeroFlamebreaks",
	179: "kKillEaterEventType_Batrider_DoubleHeroLassoes",
	180: "kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit",
	181: "kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks",
	182: "kKillEaterEventType_Bristleback_TripleHeroNasalGoo",
	183: "kKillEaterEventType_Broodmother_SpiderlingHeroKills",
	184: "kKillEaterEventType_Broodmother_KillsInsideWeb",
	185: "kKillEaterEventType_Centaur_ThreeHeroStampede",
	186: "kKillEaterEventType_ChaosKnight_RealityRiftKills",
	187: "kKillEaterEventType_Chen_KillsWithPenitence",
	188: "kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas",
	189: "kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields",
	190: "kKillEaterEventType_Dazzle_ShadowWaveKills",
	191: "kKillEaterEventType_DeathProphet_SiphonKills",
	192: "kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls",
	193: "kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm",
	194: "kKillEaterEventType_Doom_InfernalBladeBurnKills",
	195: "kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills",
	196: "kKillEaterEventType_EmberSpirit_RemnantKills",
	197: "kKillEaterEventType_EmberSpirit_SleightOfFistKills",
	198: "kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos",
	199: "kKillEaterEventType_Enigma_ThreeManBlackHoles",
	200: "kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation",
	201: "kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon",
	202: "kKillEaterEventType_Gyrocopter_HomingMissileKills",
	203: "kKillEaterEventType_Gyrocopter_RocketBarrageKills",
	204: "kKillEaterEventType_Huskar_KillsDuringLifeBreak",
	205: "kKillEaterEventType_Huskar_BurningSpearKills",
	206: "kKillEaterEventType_Invoker_MultiHeroIceWall",
	207: "kKillEaterEventType_Invoker_ThreeHeroEMP",
	208: "kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast",
	209: "kKillEaterEventType_Invoker_MultiHeroChaosMeteor",
	210: "kKillEaterEventType_Jakiro_MultiHeroDualBreath",
	211: "kKillEaterEventType_Jakiro_IcePathMacropyreCombos",
	212: "kKillEaterEventType_Leshrac_PulseNovaKills",
	213: "kKillEaterEventType_Leshrac_ThreeHeroLightningStorm",
	214: "kKillEaterEventType_Lion_ThreeHeroFingerOfDeath",
	215: "kKillEaterEventType_Meepo_PoofKills",
	216: "kKillEaterEventType_Meepo_MultiHeroEarthbinds",
	217: "kKillEaterEventType_NightStalker_NighttimeKills",
	218: "kKillEaterEventType_Morphling_KillsDuringReplicate",
	219: "kKillEaterEventType_OgreMagi_FireblastKills",
	220: "kKillEaterEventType_OgreMagi_IgniteKills",
	221: "kKillEaterEventType_DominatingKillStreaks",
	222: "kKillEaterEventType_MegaKillStreaks",
	223: "kKillEaterEventType_Alchemist_AghanimsGiven",
	224: "kKillEaterEventType_VeilsLeadingToKills",
	225: "kKillEaterEventType_DustLeadingToKills",
	226: "kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns",
	227: "kKillEaterEventType_Weaver_ShukuchiKills",
	228: "kKillEaterEventType_Windrunner_ShackleFocusFireKills",
	229: "kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills",
	230: "kKillEaterEventType_Tusk_WalrusPunchKills",
	231: "kKillEaterEventType_Tinker_TripleHeroLasers",
	232: "kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades",
	233: "kKillEaterEventType_Sven_KillsDuringGodsStrength",
	234: "kKillEaterEventType_Sniper_ThreeHeroShrapnels",
	235: "kKillEaterEventType_Slark_KillsDuringShadowDance",
	236: "kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks",
	237: "kKillEaterEventType_ShadowShaman_SerpentWardShackleKills",
	238: "kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade",
	239: "kKillEaterEventType_Razor_EyeOfTheStormKills",
	240: "kKillEaterEventType_Pugna_LifeDrainKills",
	241: "kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills",
	242: "kKillEaterEventType_Oracle_MultiHeroFortunesEnd",
	243: "kKillEaterEventType_Omniknight_PurificationKills",
	244: "kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear",
	245: "kKillEaterEventType_Warlock_ThreeHeroFatalBonds",
	246: "kKillEaterEventType_Riki_TricksOfTheTradeKills",
	247: "kKillEaterEventType_Earthshaker_AftershockHits10",
	248: "kKillEaterEventType_Earthshaker_5HeroEchoslams",
	249: "kKillEaterEventType_Lina_LagunaBladeHeroKills",
	250: "kKillEaterEventType_Lina_LightStrikeHeroStuns",
	251: "kKillEaterEventType_Earthshaker_FissureMultiStuns",
	252: "kKillEaterEventType_Earthshaker_TotemKills",
	253: "kKillEaterEventType_Pangolier_SwashbuckleKills",
	254: "kKillEaterEventType_Furion_EnemyHeroesTrapped",
	255: "kKillEaterEventType_Pangolier_HeartpiercerKills",
	256: "kKillEaterEventType_Medusa_MultiHeroStoneGaze",
	257: "kKillEaterEventType_Medusa_SplitShotKills",
	258: "kKillEaterEventType_Mirana_MultiHeroStarstorm",
	259: "kKillEaterEventType_Mirana_KillsFromMoonlightShadow",
	260: "kKillEaterEventType_Magnus_MultiHeroSkewers",
	261: "kKillEaterEventType_Magnus_MultiHeroReversePolarity",
	262: "kKillEaterEventType_Magnus_HeroesSlowedWithShockwave",
	263: "kKillEaterEventType_NagaSiren_MultiHeroSong",
	264: "kKillEaterEventType_NagaSiren_AlliesHealedBySong",
	265: "kKillEaterEventType_LoneDruid_MultiHeroRoar",
	266: "kKillEaterEventType_LoneDruid_BattleCryKills",
	267: "kKillEaterEventType_WinterWyvern_ThreeHeroCurses",
	268: "kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell",
	269: "kKillEaterEventType_Mars_EnemiesKilledInArena",
	270: "kKillEaterEventType_Mars_MultiHeroGodsRebuke",
	271: "kKillEaterEventType_Mars_GodsRebukeKills",
	272: "kKillEaterEventType_Snapfire_LizardBlobsKills",
	273: "kKillEaterEventType_Snapfire_TwoHeroCookieStuns",
	274: "Custom_KillStreak",
}

var CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_value = map[string]int32{
	"kills":                            1,
	"deaths":                           2,
	"assists":                          3,
	"net_worth":                        5,
	"item_value":                       6,
	"support_gold_spent":               7,
	"wards_placed":                     8,
	"dewards":                          9,
	"camps_stacked":                    10,
	"last_hits":                        11,
	"denies":                           12,
	"kKillEaterEvent_Killing_Sprees":   13,
	"kKillEaterEvent_Godlike":          14,
	"kKillEaterEvent_Towers_Destroyed": 15,
	"kKillEaterEventType_Invoker_SunstrikeKills":                     16,
	"kKillEaterEventType_Axe_Culls":                                  17,
	"kKillEaterEventType_Axe_BattleHungerKills":                      18,
	"kKillEaterEventType_LowHealthKills":                             19,
	"kKillEaterEventType_Invoker_TornadoKills":                       20,
	"kKillEaterEventType_Sven_DoubleStuns":                           21,
	"kKillEaterEventType_Sven_WarcryAssists":                         22,
	"kKillEaterEventType_Sven_CleaveDoubleKills":                     23,
	"kKillEaterEventType_Sven_TeleportInterrupts":                    24,
	"kKillEaterEventType_Faceless_MultiChrono":                       25,
	"kKillEaterEventType_Faceless_ChronoKills":                       26,
	"kKillEaterEventType_Ursa_MultiShocks":                           27,
	"kKillEaterEventType_RoshanKills":                                28,
	"kKillEaterEventType_Lion_FingerKills":                           29,
	"kKillEaterEventType_Riki_SmokedHeroKills":                       32,
	"kKillEaterEventType_HeroesRevealedWithDust":                     33,
	"kKillEaterEventType_SkeletonKing_ReincarnationKills":            34,
	"kKillEaterEventType_Skywrath_FlareKills":                        35,
	"kKillEaterEventType_Leshrac_SplitEarthStuns":                    36,
	"kKillEaterEventType_Mirana_MaxStunArrows":                       37,
	"kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits":           38,
	"kKillEaterEventType_PhantomAssassin_DaggerCrits":                39,
	"kKillEaterEventType_Meepo_Earthbinds":                           40,
	"kKillEaterEventType_Bloodseeker_RuptureKills":                   41,
	"kKillEaterEventType_Slark_LeashedEnemies":                       42,
	"kKillEaterEventType_Disruptor_FountainGlimpses":                 43,
	"kKillEaterEventType_Rubick_SpellsStolen":                        44,
	"kKillEaterEventType_Rubick_UltimatesStolen":                     45,
	"kKillEaterEventType_Doom_EnemiesDoomed":                         46,
	"kKillEaterEventType_Omniknight_Purifications":                   47,
	"kKillEaterEventType_Omniknight_AlliesRepelled":                  48,
	"kKillEaterEventType_Omniknight_EnemiesRepelled":                 49,
	"kKillEaterEventType_Warlock_FiveHeroFatalBonds":                 50,
	"kKillEaterEventType_CrystalMaiden_FrostbittenEnemies":           51,
	"kKillEaterEventType_CrystalMaiden_CrystalNovas":                 52,
	"kKillEaterEventType_Kunkka_DoubleHeroTorrents":                  53,
	"kKillEaterEventType_Kunkka_TripleHeroGhostShips":                54,
	"kKillEaterEventType_NagaSiren_EnemiesEnsnared":                  55,
	"kKillEaterEventType_NagaSiren_TripleHeroRipTides":               56,
	"kKillEaterEventType_Lycan_KillsDuringShapeshift":                57,
	"kKillEaterEventType_Pudge_DismemberKills":                       58,
	"kKillEaterEventType_Pudge_EnemyHeroesHooked":                    59,
	"kKillEaterEventType_Pudge_HookKills":                            60,
	"kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked":              61,
	"kKillEaterEventType_DrowRanger_EnemiesSilenced":                 62,
	"kKillEaterEventType_DrowRanger_MultiHeroSilences":               63,
	"kKillEaterEventType_DrowRanger_SilencedKills":                   64,
	"kKillEaterEventType_DrowRanger_FrostArrowKills":                 65,
	"kKillEaterEventType_DragonKnight_KillsInDragonForm":             66,
	"kKillEaterEventType_DragonKnight_BreatheFireKills":              67,
	"kKillEaterEventType_DragonKnight_SplashKills":                   68,
	"kKillEaterEventType_WitchDoctor_CaskStuns":                      69,
	"kKillEaterEventType_WitchDoctor_MaledictKills":                  70,
	"kKillEaterEventType_WitchDoctor_MultiHeroMaledicts":             71,
	"kKillEaterEventType_WitchDoctor_DeathWardKills":                 72,
	"kKillEaterEventType_Disruptor_ThunderStrikeKills":               73,
	"kKillEaterEventType_Disruptor_HeroesGlimpsed":                   74,
	"kKillEaterEventType_CrystalMaiden_FreezingFieldKills":           75,
	"kKillEaterEventType_Medusa_EnemiesPetrified":                    77,
	"kKillEaterEventType_Warlock_FatalBondsKills":                    78,
	"kKillEaterEventType_Warlock_GolemKills":                         79,
	"kKillEaterEventType_Tusk_WalrusPunches":                         80,
	"kKillEaterEventType_Tusk_SnowballStuns":                         81,
	"kKillEaterEventType_Earthshaker_FissureStuns":                   82,
	"kKillEaterEventType_Earthshaker_3HeroEchoslams":                 83,
	"kKillEaterEventType_SandKing_BurrowstrikeStuns":                 84,
	"kKillEaterEventType_SandKing_EpicenterKills":                    85,
	"kKillEaterEventType_SkywrathMage_AncientSealKills":              86,
	"kKillEaterEventType_SkywrathMage_ConcussiveShotKills":           87,
	"kKillEaterEventType_Luna_LucentBeamKills":                       88,
	"kKillEaterEventType_Luna_EclipseKills":                          89,
	"kKillEaterEventType_KeeperOfTheLight_IlluminateKills":           90,
	"kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns":             91,
	"kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled":         92,
	"kKillEaterEventType_LegionCommander_DuelsWon":                   93,
	"kKillEaterEventType_Beastmaster_RoarKills":                      94,
	"kKillEaterEventType_Beastmaster_RoarMultiKills":                 95,
	"kKillEaterEventType_Windrunner_FocusFireBuildings":              96,
	"kKillEaterEventType_Windrunner_PowershotKills":                  97,
	"kKillEaterEventType_PhantomAssassin_DaggerLastHits":             98,
	"kKillEaterEventType_PhantomAssassin_PhantomStrikeKills":         99,
	"kKillEaterEventType_DeathProphet_CryptSwarmKills":               100,
	"kKillEaterEventType_DeathProphet_ExorcismBuildingKills":         101,
	"kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned":       102,
	"kKillEaterEventType_DeathProphet_MultiHeroSilences":             103,
	"kKillEaterEventType_Abaddon_MistCoilKills":                      104,
	"kKillEaterEventType_Abaddon_MistCoilHealed":                     105,
	"kKillEaterEventType_Abaddon_AphoticShieldKills":                 106,
	"kKillEaterEventType_Lich_ChainFrostTripleKills":                 107,
	"kKillEaterEventType_Lich_ChainFrostMultiKills":                  108,
	"kKillEaterEventType_Lich_ChainFrostBounces":                     109,
	"kKillEaterEventType_Ursa_EnragedKills":                          110,
	"kKillEaterEventType_Ursa_EarthshockKills":                       111,
	"kKillEaterEventType_Lina_LagunaBladeKills":                      112,
	"kKillEaterEventType_Lina_DragonSlaveKills":                      113,
	"kKillEaterEventType_Lina_LightStrikeArrayStuns":                 114,
	"kKillEaterEvent_Barracks_Destroyed":                             115,
	"kKillEaterEvent_TemplarAssassin_MeldKills":                      116,
	"kKillEaterEvent_TemplarAssassin_HeroesSlowed":                   117,
	"kKillEaterEvent_Sniper_AssassinationKills":                      118,
	"kKillEaterEvent_Sniper_HeadshotStuns":                           119,
	"kKillEaterEvent_EarthSpirit_SmashStuns":                         120,
	"kKillEaterEvent_EarthSpirit_GripSilences":                       121,
	"kKillEaterEvent_ShadowShaman_ShackleKills":                      122,
	"kKillEaterEvent_ShadowShaman_HexKills":                          123,
	"kKillEaterEvent_Centaur_EnemiesStomped":                         124,
	"kKillEaterEvent_Centaur_DoubleEdgeKills":                        125,
	"kKillEaterEvent_Centaur_ReturnKills":                            126,
	"kKillEaterEvent_EmberSpirit_EnemiesChained":                     127,
	"kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills":            128,
	"kKillEaterEvent_Puck_OrbKills":                                  129,
	"kKillEaterEvent_VengefulSpirit_EnemiesStunned":                  130,
	"kKillEaterEvent_Lifestealer_RageKills":                          131,
	"kKillEaterEvent_Lifestealer_OpenWoundsKills":                    132,
	"kKillEaterEvent_Lifestealer_InfestKills":                        133,
	"kKillEaterEvent_ElderTitan_SpiritKills":                         134,
	"kKillEaterEvent_ElderTitan_GoodStomps":                          135,
	"kKillEaterEvent_Clockwerk_RocketKills":                          136,
	"kKillEaterEvent_Clockwerk_BlindRocketKills":                     137,
	"kKillEaterEvent_StormSpirit_BallKills":                          138,
	"kKillEaterEvent_StormSpirit_DoubleRemnantKills":                 139,
	"kKillEaterEvent_StormSpirit_VortexKills":                        140,
	"kKillEaterEvent_Tinker_DoubleMissileKills":                      141,
	"kKillEaterEvent_Tinker_LaserKills":                              142,
	"kKillEaterEvent_Techies_SuicideKills":                           143,
	"kKillEaterEvent_Techies_LandMineKills":                          144,
	"kKillEaterEvent_Techies_StatisTrapStuns":                        145,
	"kKillEaterEvent_Techies_RemoteMineKills":                        146,
	"kKillEaterEvent_ShadowFiend_TripleRazeKills":                    147,
	"kKillEaterEvent_ShadowFiend_RequiemMultiKills":                  148,
	"kKillEaterEvent_ShadowFiend_QRazeKills":                         149,
	"kKillEaterEvent_ShadowFiend_WRazeKills":                         150,
	"kKillEaterEvent_ShadowFiend_ERazeKills":                         151,
	"kKillEaterEvent_Oracle_FatesEdictKills":                         152,
	"kKillEaterEvent_Oracle_FalsePromiseSaves":                       153,
	"kKillEaterEvent_Juggernaut_OmnislashKills":                      154,
	"kKillEaterEventType_SkeletonKing_SkeletonHeroKills":             157,
	"kKillEaterEventType_DarkWillow_CursedCrownTripleStuns":          158,
	"kKillEaterEventType_Dazzle_ShallowGraveSaves":                   159,
	"kKillEaterEventType_Dazzle_PoisonTouchKills":                    160,
	"kKillEaterEventType_ThreeManMeks":                               161,
	"kKillEaterEventType_Viper_PoisonAttackKills":                    162,
	"kKillEaterEventType_Viper_CorrosiveSkinKills":                   163,
	"kKillEaterEventType_ThreeHeroVeils":                             164,
	"kKillEaterEventType_Viper_KillsDuringViperStrike":               165,
	"kKillEaterEventType_SolarCrestKills":                            166,
	"kKillEaterEventType_Tiny_TreeThrowKills":                        167,
	"kKillEaterEventType_Riki_BackstabKills":                         168,
	"kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns":            169,
	"kKillEaterEventType_Terrorblade_MetamorphosisKills":             170,
	"kKillEaterEventType_Lion_GreatFingerKills":                      171,
	"kKillEaterEventType_Antimage_SpellsBlockedWithAghanims":         172,
	"kKillEaterEventType_Antimage_ThreeManManaVoids":                 173,
	"kKillEaterEventType_ArcWarden_TempestDoubleKills":               174,
	"kKillEaterEventType_ArcWarden_SparkWraithKills":                 175,
	"kKillEaterEventType_Bane_BrainSapKills":                         176,
	"kKillEaterEventType_Bane_FiendsGripKills":                       177,
	"kKillEaterEventType_Batrider_TripleHeroFlamebreaks":             178,
	"kKillEaterEventType_Batrider_DoubleHeroLassoes":                 179,
	"kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit":          180,
	"kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks":      181,
	"kKillEaterEventType_Bristleback_TripleHeroNasalGoo":             182,
	"kKillEaterEventType_Broodmother_SpiderlingHeroKills":            183,
	"kKillEaterEventType_Broodmother_KillsInsideWeb":                 184,
	"kKillEaterEventType_Centaur_ThreeHeroStampede":                  185,
	"kKillEaterEventType_ChaosKnight_RealityRiftKills":               186,
	"kKillEaterEventType_Chen_KillsWithPenitence":                    187,
	"kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas":          188,
	"kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields":      189,
	"kKillEaterEventType_Dazzle_ShadowWaveKills":                     190,
	"kKillEaterEventType_DeathProphet_SiphonKills":                   191,
	"kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls":       192,
	"kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm": 193,
	"kKillEaterEventType_Doom_InfernalBladeBurnKills":                194,
	"kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills":    195,
	"kKillEaterEventType_EmberSpirit_RemnantKills":                   196,
	"kKillEaterEventType_EmberSpirit_SleightOfFistKills":             197,
	"kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos":        198,
	"kKillEaterEventType_Enigma_ThreeManBlackHoles":                  199,
	"kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation":         200,
	"kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon":             201,
	"kKillEaterEventType_Gyrocopter_HomingMissileKills":              202,
	"kKillEaterEventType_Gyrocopter_RocketBarrageKills":              203,
	"kKillEaterEventType_Huskar_KillsDuringLifeBreak":                204,
	"kKillEaterEventType_Huskar_BurningSpearKills":                   205,
	"kKillEaterEventType_Invoker_MultiHeroIceWall":                   206,
	"kKillEaterEventType_Invoker_ThreeHeroEMP":                       207,
	"kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast":            208,
	"kKillEaterEventType_Invoker_MultiHeroChaosMeteor":               209,
	"kKillEaterEventType_Jakiro_MultiHeroDualBreath":                 210,
	"kKillEaterEventType_Jakiro_IcePathMacropyreCombos":              211,
	"kKillEaterEventType_Leshrac_PulseNovaKills":                     212,
	"kKillEaterEventType_Leshrac_ThreeHeroLightningStorm":            213,
	"kKillEaterEventType_Lion_ThreeHeroFingerOfDeath":                214,
	"kKillEaterEventType_Meepo_PoofKills":                            215,
	"kKillEaterEventType_Meepo_MultiHeroEarthbinds":                  216,
	"kKillEaterEventType_NightStalker_NighttimeKills":                217,
	"kKillEaterEventType_Morphling_KillsDuringReplicate":             218,
	"kKillEaterEventType_OgreMagi_FireblastKills":                    219,
	"kKillEaterEventType_OgreMagi_IgniteKills":                       220,
	"kKillEaterEventType_DominatingKillStreaks":                      221,
	"kKillEaterEventType_MegaKillStreaks":                            222,
	"kKillEaterEventType_Alchemist_AghanimsGiven":                    223,
	"kKillEaterEventType_VeilsLeadingToKills":                        224,
	"kKillEaterEventType_DustLeadingToKills":                         225,
	"kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns":             226,
	"kKillEaterEventType_Weaver_ShukuchiKills":                       227,
	"kKillEaterEventType_Windrunner_ShackleFocusFireKills":           228,
	"kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills":  229,
	"kKillEaterEventType_Tusk_WalrusPunchKills":                      230,
	"kKillEaterEventType_Tinker_TripleHeroLasers":                    231,
	"kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades":         232,
	"kKillEaterEventType_Sven_KillsDuringGodsStrength":               233,
	"kKillEaterEventType_Sniper_ThreeHeroShrapnels":                  234,
	"kKillEaterEventType_Slark_KillsDuringShadowDance":               235,
	"kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks":          236,
	"kKillEaterEventType_ShadowShaman_SerpentWardShackleKills":       237,
	"kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade":             238,
	"kKillEaterEventType_Razor_EyeOfTheStormKills":                   239,
	"kKillEaterEventType_Pugna_LifeDrainKills":                       240,
	"kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills":      241,
	"kKillEaterEventType_Oracle_MultiHeroFortunesEnd":                242,
	"kKillEaterEventType_Omniknight_PurificationKills":               243,
	"kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear": 244,
	"kKillEaterEventType_Warlock_ThreeHeroFatalBonds":                245,
	"kKillEaterEventType_Riki_TricksOfTheTradeKills":                 246,
	"kKillEaterEventType_Earthshaker_AftershockHits10":               247,
	"kKillEaterEventType_Earthshaker_5HeroEchoslams":                 248,
	"kKillEaterEventType_Lina_LagunaBladeHeroKills":                  249,
	"kKillEaterEventType_Lina_LightStrikeHeroStuns":                  250,
	"kKillEaterEventType_Earthshaker_FissureMultiStuns":              251,
	"kKillEaterEventType_Earthshaker_TotemKills":                     252,
	"kKillEaterEventType_Pangolier_SwashbuckleKills":                 253,
	"kKillEaterEventType_Furion_EnemyHeroesTrapped":                  254,
	"kKillEaterEventType_Pangolier_HeartpiercerKills":                255,
	"kKillEaterEventType_Medusa_MultiHeroStoneGaze":                  256,
	"kKillEaterEventType_Medusa_SplitShotKills":                      257,
	"kKillEaterEventType_Mirana_MultiHeroStarstorm":                  258,
	"kKillEaterEventType_Mirana_KillsFromMoonlightShadow":            259,
	"kKillEaterEventType_Magnus_MultiHeroSkewers":                    260,
	"kKillEaterEventType_Magnus_MultiHeroReversePolarity":            261,
	"kKillEaterEventType_Magnus_HeroesSlowedWithShockwave":           262,
	"kKillEaterEventType_NagaSiren_MultiHeroSong":                    263,
	"kKillEaterEventType_NagaSiren_AlliesHealedBySong":               264,
	"kKillEaterEventType_LoneDruid_MultiHeroRoar":                    265,
	"kKillEaterEventType_LoneDruid_BattleCryKills":                   266,
	"kKillEaterEventType_WinterWyvern_ThreeHeroCurses":               267,
	"kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell":     268,
	"kKillEaterEventType_Mars_EnemiesKilledInArena":                  269,
	"kKillEaterEventType_Mars_MultiHeroGodsRebuke":                   270,
	"kKillEaterEventType_Mars_GodsRebukeKills":                       271,
	"kKillEaterEventType_Snapfire_LizardBlobsKills":                  272,
	"kKillEaterEventType_Snapfire_TwoHeroCookieStuns":                273,
	"Custom_KillStreak":                                              274,
}

func (x CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) Enum() *CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType {
	p := new(CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType)
	*p = x
	return p
}

func (x CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) String() string {
	return proto.EnumName(CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_name, int32(x))
}

func (x *CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_value, data, "CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType")
	if err != nil {
		return err
	}
	*x = CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType(value)
	return nil
}

func (CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{19, 0, 0, 0}
}

type CSODOTAPartyMember struct {
	PartnerType             *PartnerAccountType `protobuf:"varint,1,opt,name=partner_type,json=partnerType,enum=dota.PartnerAccountType,def=0" json:"partner_type,omitempty"`
	IsCoach                 *bool               `protobuf:"varint,2,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
	RegionPingCodes         []uint32            `protobuf:"varint,4,rep,packed,name=region_ping_codes,json=regionPingCodes" json:"region_ping_codes,omitempty"`
	RegionPingTimes         []uint32            `protobuf:"varint,5,rep,packed,name=region_ping_times,json=regionPingTimes" json:"region_ping_times,omitempty"`
	RegionPingFailedBitmask *uint32             `protobuf:"varint,6,opt,name=region_ping_failed_bitmask,json=regionPingFailedBitmask" json:"region_ping_failed_bitmask,omitempty"`
	IsPlusSubscriber        *bool               `protobuf:"varint,10,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	TourneySkillLevel       *uint32             `protobuf:"varint,7,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBuyin            *uint32             `protobuf:"varint,8,opt,name=tourney_buyin,json=tourneyBuyin" json:"tourney_buyin,omitempty"`
	TourneyPreventUntil     *uint32             `protobuf:"varint,9,opt,name=tourney_prevent_until,json=tourneyPreventUntil" json:"tourney_prevent_until,omitempty"`
	MmDataValid             *bool               `protobuf:"varint,13,opt,name=mm_data_valid,json=mmDataValid" json:"mm_data_valid,omitempty"`
	LaneSelectionFlags      *uint32             `protobuf:"varint,11,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	HighPriorityDisabled    *bool               `protobuf:"varint,14,opt,name=high_priority_disabled,json=highPriorityDisabled" json:"high_priority_disabled,omitempty"`
	HasHpResource           *bool               `protobuf:"varint,15,opt,name=has_hp_resource,json=hasHpResource" json:"has_hp_resource,omitempty"`
	JoinedFromPartyfinder   *bool               `protobuf:"varint,12,opt,name=joined_from_partyfinder,json=joinedFromPartyfinder" json:"joined_from_partyfinder,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}            `json:"-"`
	XXX_unrecognized        []byte              `json:"-"`
	XXX_sizecache           int32               `json:"-"`
}

func (m *CSODOTAPartyMember) Reset()         { *m = CSODOTAPartyMember{} }
func (m *CSODOTAPartyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyMember) ProtoMessage()    {}
func (*CSODOTAPartyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{0}
}

func (m *CSODOTAPartyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAPartyMember.Unmarshal(m, b)
}
func (m *CSODOTAPartyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAPartyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTAPartyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAPartyMember.Merge(m, src)
}
func (m *CSODOTAPartyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTAPartyMember.Size(m)
}
func (m *CSODOTAPartyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAPartyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAPartyMember proto.InternalMessageInfo

const Default_CSODOTAPartyMember_PartnerType PartnerAccountType = PartnerAccountType_PARTNER_NONE

func (m *CSODOTAPartyMember) GetPartnerType() PartnerAccountType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return Default_CSODOTAPartyMember_PartnerType
}

func (m *CSODOTAPartyMember) GetIsCoach() bool {
	if m != nil && m.IsCoach != nil {
		return *m.IsCoach
	}
	return false
}

func (m *CSODOTAPartyMember) GetRegionPingCodes() []uint32 {
	if m != nil {
		return m.RegionPingCodes
	}
	return nil
}

func (m *CSODOTAPartyMember) GetRegionPingTimes() []uint32 {
	if m != nil {
		return m.RegionPingTimes
	}
	return nil
}

func (m *CSODOTAPartyMember) GetRegionPingFailedBitmask() uint32 {
	if m != nil && m.RegionPingFailedBitmask != nil {
		return *m.RegionPingFailedBitmask
	}
	return 0
}

func (m *CSODOTAPartyMember) GetIsPlusSubscriber() bool {
	if m != nil && m.IsPlusSubscriber != nil {
		return *m.IsPlusSubscriber
	}
	return false
}

func (m *CSODOTAPartyMember) GetTourneySkillLevel() uint32 {
	if m != nil && m.TourneySkillLevel != nil {
		return *m.TourneySkillLevel
	}
	return 0
}

func (m *CSODOTAPartyMember) GetTourneyBuyin() uint32 {
	if m != nil && m.TourneyBuyin != nil {
		return *m.TourneyBuyin
	}
	return 0
}

func (m *CSODOTAPartyMember) GetTourneyPreventUntil() uint32 {
	if m != nil && m.TourneyPreventUntil != nil {
		return *m.TourneyPreventUntil
	}
	return 0
}

func (m *CSODOTAPartyMember) GetMmDataValid() bool {
	if m != nil && m.MmDataValid != nil {
		return *m.MmDataValid
	}
	return false
}

func (m *CSODOTAPartyMember) GetLaneSelectionFlags() uint32 {
	if m != nil && m.LaneSelectionFlags != nil {
		return *m.LaneSelectionFlags
	}
	return 0
}

func (m *CSODOTAPartyMember) GetHighPriorityDisabled() bool {
	if m != nil && m.HighPriorityDisabled != nil {
		return *m.HighPriorityDisabled
	}
	return false
}

func (m *CSODOTAPartyMember) GetHasHpResource() bool {
	if m != nil && m.HasHpResource != nil {
		return *m.HasHpResource
	}
	return false
}

func (m *CSODOTAPartyMember) GetJoinedFromPartyfinder() bool {
	if m != nil && m.JoinedFromPartyfinder != nil {
		return *m.JoinedFromPartyfinder
	}
	return false
}

type CSODOTAParty struct {
	PartyId                         *uint64                     `protobuf:"varint,1,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	LeaderId                        *uint64                     `protobuf:"fixed64,2,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	MemberIds                       []uint64                    `protobuf:"fixed64,3,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	GameModes                       *uint32                     `protobuf:"varint,4,opt,name=game_modes,json=gameModes" json:"game_modes,omitempty"`
	State                           *CSODOTAParty_State         `protobuf:"varint,6,opt,name=state,enum=dota.CSODOTAParty_State,def=0" json:"state,omitempty"`
	EffectiveStartedMatchmakingTime *uint32                     `protobuf:"varint,7,opt,name=effective_started_matchmaking_time,json=effectiveStartedMatchmakingTime" json:"effective_started_matchmaking_time,omitempty"`
	RawStartedMatchmakingTime       *uint32                     `protobuf:"varint,32,opt,name=raw_started_matchmaking_time,json=rawStartedMatchmakingTime" json:"raw_started_matchmaking_time,omitempty"`
	AttemptStartTime                *uint32                     `protobuf:"varint,33,opt,name=attempt_start_time,json=attemptStartTime" json:"attempt_start_time,omitempty"`
	AttemptNum                      *uint32                     `protobuf:"varint,34,opt,name=attempt_num,json=attemptNum" json:"attempt_num,omitempty"`
	Matchgroups                     *uint32                     `protobuf:"varint,11,opt,name=matchgroups" json:"matchgroups,omitempty"`
	LowPriorityAccountId            *uint32                     `protobuf:"varint,19,opt,name=low_priority_account_id,json=lowPriorityAccountId" json:"low_priority_account_id,omitempty"`
	MatchType                       *MatchType                  `protobuf:"varint,21,opt,name=match_type,json=matchType,enum=dota.MatchType,def=0" json:"match_type,omitempty"`
	BotDifficulty                   *DOTABotDifficulty          `protobuf:"varint,22,opt,name=bot_difficulty,json=botDifficulty,enum=dota.DOTABotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	TeamId                          *uint32                     `protobuf:"varint,23,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName                        *string                     `protobuf:"bytes,51,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamUiLogo                      *uint64                     `protobuf:"varint,52,opt,name=team_ui_logo,json=teamUiLogo" json:"team_ui_logo,omitempty"`
	TeamBaseLogo                    *uint64                     `protobuf:"varint,53,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	MatchDisabledUntilDate          *uint32                     `protobuf:"varint,24,opt,name=match_disabled_until_date,json=matchDisabledUntilDate" json:"match_disabled_until_date,omitempty"`
	MatchDisabledAccountId          *uint32                     `protobuf:"varint,25,opt,name=match_disabled_account_id,json=matchDisabledAccountId" json:"match_disabled_account_id,omitempty"`
	MatchmakingMaxRangeMinutes      *uint32                     `protobuf:"varint,26,opt,name=matchmaking_max_range_minutes,json=matchmakingMaxRangeMinutes" json:"matchmaking_max_range_minutes,omitempty"`
	Matchlanguages                  *uint32                     `protobuf:"varint,27,opt,name=matchlanguages" json:"matchlanguages,omitempty"`
	Members                         []*CSODOTAPartyMember       `protobuf:"bytes,29,rep,name=members" json:"members,omitempty"`
	LowPriorityGamesRemaining       *uint32                     `protobuf:"varint,35,opt,name=low_priority_games_remaining,json=lowPriorityGamesRemaining" json:"low_priority_games_remaining,omitempty"`
	OpenForJoinRequests             *bool                       `protobuf:"varint,40,opt,name=open_for_join_requests,json=openForJoinRequests" json:"open_for_join_requests,omitempty"`
	SentInvites                     []*CSODOTAPartyInvite       `protobuf:"bytes,41,rep,name=sent_invites,json=sentInvites" json:"sent_invites,omitempty"`
	RecvInvites                     []*CSODOTAPartyInvite       `protobuf:"bytes,42,rep,name=recv_invites,json=recvInvites" json:"recv_invites,omitempty"`
	AccountFlags                    *uint32                     `protobuf:"varint,43,opt,name=account_flags,json=accountFlags" json:"account_flags,omitempty"`
	RegionSelectFlags               *uint32                     `protobuf:"varint,44,opt,name=region_select_flags,json=regionSelectFlags" json:"region_select_flags,omitempty"`
	ExclusiveTournamentId           *uint32                     `protobuf:"varint,45,opt,name=exclusive_tournament_id,json=exclusiveTournamentId" json:"exclusive_tournament_id,omitempty"`
	TourneyDivisionId               *uint32                     `protobuf:"varint,47,opt,name=tourney_division_id,json=tourneyDivisionId" json:"tourney_division_id,omitempty"`
	TourneyScheduleTime             *uint32                     `protobuf:"varint,48,opt,name=tourney_schedule_time,json=tourneyScheduleTime" json:"tourney_schedule_time,omitempty"`
	TourneySkillLevel               *uint32                     `protobuf:"varint,49,opt,name=tourney_skill_level,json=tourneySkillLevel" json:"tourney_skill_level,omitempty"`
	TourneyBracketRound             *uint32                     `protobuf:"varint,50,opt,name=tourney_bracket_round,json=tourneyBracketRound" json:"tourney_bracket_round,omitempty"`
	TourneyQueueDeadlineTime        *uint32                     `protobuf:"varint,54,opt,name=tourney_queue_deadline_time,json=tourneyQueueDeadlineTime" json:"tourney_queue_deadline_time,omitempty"`
	TourneyQueueDeadlineState       *ETourneyQueueDeadlineState `protobuf:"varint,55,opt,name=tourney_queue_deadline_state,json=tourneyQueueDeadlineState,enum=dota.ETourneyQueueDeadlineState,def=0" json:"tourney_queue_deadline_state,omitempty"`
	PartyBuilderSlotsToFill         *uint32                     `protobuf:"varint,56,opt,name=party_builder_slots_to_fill,json=partyBuilderSlotsToFill" json:"party_builder_slots_to_fill,omitempty"`
	PartyBuilderMatchGroups         *uint32                     `protobuf:"varint,57,opt,name=party_builder_match_groups,json=partyBuilderMatchGroups" json:"party_builder_match_groups,omitempty"`
	PartyBuilderStartTime           *uint32                     `protobuf:"varint,58,opt,name=party_builder_start_time,json=partyBuilderStartTime" json:"party_builder_start_time,omitempty"`
	SoloQueue                       *bool                       `protobuf:"varint,59,opt,name=solo_queue,json=soloQueue" json:"solo_queue,omitempty"`
	BotScriptIndex                  *uint32                     `protobuf:"varint,60,opt,name=bot_script_index,json=botScriptIndex" json:"bot_script_index,omitempty"`
	SteamClanAccountId              *uint32                     `protobuf:"varint,61,opt,name=steam_clan_account_id,json=steamClanAccountId" json:"steam_clan_account_id,omitempty"`
	ReadyCheck                      *CMsgReadyCheckStatus       `protobuf:"bytes,62,opt,name=ready_check,json=readyCheck" json:"ready_check,omitempty"`
	CustomGameDisabledUntilDate     *uint32                     `protobuf:"varint,63,opt,name=custom_game_disabled_until_date,json=customGameDisabledUntilDate" json:"custom_game_disabled_until_date,omitempty"`
	CustomGameDisabledAccountId     *uint32                     `protobuf:"varint,64,opt,name=custom_game_disabled_account_id,json=customGameDisabledAccountId" json:"custom_game_disabled_account_id,omitempty"`
	IsChallengeMatch                *bool                       `protobuf:"varint,65,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	PartySearchBeaconActive         *bool                       `protobuf:"varint,66,opt,name=party_search_beacon_active,json=partySearchBeaconActive" json:"party_search_beacon_active,omitempty"`
	MatchmakingFlags                *uint32                     `protobuf:"varint,67,opt,name=matchmaking_flags,json=matchmakingFlags" json:"matchmaking_flags,omitempty"`
	HighPriorityState               *EHighPriorityMMState       `protobuf:"varint,68,opt,name=high_priority_state,json=highPriorityState,enum=dota.EHighPriorityMMState,def=0" json:"high_priority_state,omitempty"`
	LaneSelectionsEnabled           *bool                       `protobuf:"varint,69,opt,name=lane_selections_enabled,json=laneSelectionsEnabled" json:"lane_selections_enabled,omitempty"`
	CustomGameDifficultyMask        *uint32                     `protobuf:"varint,70,opt,name=custom_game_difficulty_mask,json=customGameDifficultyMask" json:"custom_game_difficulty_mask,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}                    `json:"-"`
	XXX_unrecognized                []byte                      `json:"-"`
	XXX_sizecache                   int32                       `json:"-"`
}

func (m *CSODOTAParty) Reset()         { *m = CSODOTAParty{} }
func (m *CSODOTAParty) String() string { return proto.CompactTextString(m) }
func (*CSODOTAParty) ProtoMessage()    {}
func (*CSODOTAParty) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{1}
}

func (m *CSODOTAParty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAParty.Unmarshal(m, b)
}
func (m *CSODOTAParty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAParty.Marshal(b, m, deterministic)
}
func (m *CSODOTAParty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAParty.Merge(m, src)
}
func (m *CSODOTAParty) XXX_Size() int {
	return xxx_messageInfo_CSODOTAParty.Size(m)
}
func (m *CSODOTAParty) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAParty.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAParty proto.InternalMessageInfo

const Default_CSODOTAParty_State CSODOTAParty_State = CSODOTAParty_UI
const Default_CSODOTAParty_MatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CSODOTAParty_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
const Default_CSODOTAParty_TourneyQueueDeadlineState ETourneyQueueDeadlineState = ETourneyQueueDeadlineState_k_ETourneyQueueDeadlineState_Normal
const Default_CSODOTAParty_HighPriorityState EHighPriorityMMState = EHighPriorityMMState_k_EHighPriorityMM_Unknown

func (m *CSODOTAParty) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CSODOTAParty) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTAParty) GetMemberIds() []uint64 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

func (m *CSODOTAParty) GetGameModes() uint32 {
	if m != nil && m.GameModes != nil {
		return *m.GameModes
	}
	return 0
}

func (m *CSODOTAParty) GetState() CSODOTAParty_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTAParty_State
}

func (m *CSODOTAParty) GetEffectiveStartedMatchmakingTime() uint32 {
	if m != nil && m.EffectiveStartedMatchmakingTime != nil {
		return *m.EffectiveStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetRawStartedMatchmakingTime() uint32 {
	if m != nil && m.RawStartedMatchmakingTime != nil {
		return *m.RawStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptStartTime() uint32 {
	if m != nil && m.AttemptStartTime != nil {
		return *m.AttemptStartTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptNum() uint32 {
	if m != nil && m.AttemptNum != nil {
		return *m.AttemptNum
	}
	return 0
}

func (m *CSODOTAParty) GetMatchgroups() uint32 {
	if m != nil && m.Matchgroups != nil {
		return *m.Matchgroups
	}
	return 0
}

func (m *CSODOTAParty) GetLowPriorityAccountId() uint32 {
	if m != nil && m.LowPriorityAccountId != nil {
		return *m.LowPriorityAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return Default_CSODOTAParty_MatchType
}

func (m *CSODOTAParty) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CSODOTAParty_BotDifficulty
}

func (m *CSODOTAParty) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAParty) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CSODOTAParty) GetTeamUiLogo() uint64 {
	if m != nil && m.TeamUiLogo != nil {
		return *m.TeamUiLogo
	}
	return 0
}

func (m *CSODOTAParty) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledUntilDate() uint32 {
	if m != nil && m.MatchDisabledUntilDate != nil {
		return *m.MatchDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledAccountId() uint32 {
	if m != nil && m.MatchDisabledAccountId != nil {
		return *m.MatchDisabledAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchmakingMaxRangeMinutes() uint32 {
	if m != nil && m.MatchmakingMaxRangeMinutes != nil {
		return *m.MatchmakingMaxRangeMinutes
	}
	return 0
}

func (m *CSODOTAParty) GetMatchlanguages() uint32 {
	if m != nil && m.Matchlanguages != nil {
		return *m.Matchlanguages
	}
	return 0
}

func (m *CSODOTAParty) GetMembers() []*CSODOTAPartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAParty) GetLowPriorityGamesRemaining() uint32 {
	if m != nil && m.LowPriorityGamesRemaining != nil {
		return *m.LowPriorityGamesRemaining
	}
	return 0
}

func (m *CSODOTAParty) GetOpenForJoinRequests() bool {
	if m != nil && m.OpenForJoinRequests != nil {
		return *m.OpenForJoinRequests
	}
	return false
}

func (m *CSODOTAParty) GetSentInvites() []*CSODOTAPartyInvite {
	if m != nil {
		return m.SentInvites
	}
	return nil
}

func (m *CSODOTAParty) GetRecvInvites() []*CSODOTAPartyInvite {
	if m != nil {
		return m.RecvInvites
	}
	return nil
}

func (m *CSODOTAParty) GetAccountFlags() uint32 {
	if m != nil && m.AccountFlags != nil {
		return *m.AccountFlags
	}
	return 0
}

func (m *CSODOTAParty) GetRegionSelectFlags() uint32 {
	if m != nil && m.RegionSelectFlags != nil {
		return *m.RegionSelectFlags
	}
	return 0
}

func (m *CSODOTAParty) GetExclusiveTournamentId() uint32 {
	if m != nil && m.ExclusiveTournamentId != nil {
		return *m.ExclusiveTournamentId
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyDivisionId() uint32 {
	if m != nil && m.TourneyDivisionId != nil {
		return *m.TourneyDivisionId
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyScheduleTime() uint32 {
	if m != nil && m.TourneyScheduleTime != nil {
		return *m.TourneyScheduleTime
	}
	return 0
}

func (m *CSODOTAParty) GetTourneySkillLevel() uint32 {
	if m != nil && m.TourneySkillLevel != nil {
		return *m.TourneySkillLevel
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyBracketRound() uint32 {
	if m != nil && m.TourneyBracketRound != nil {
		return *m.TourneyBracketRound
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyQueueDeadlineTime() uint32 {
	if m != nil && m.TourneyQueueDeadlineTime != nil {
		return *m.TourneyQueueDeadlineTime
	}
	return 0
}

func (m *CSODOTAParty) GetTourneyQueueDeadlineState() ETourneyQueueDeadlineState {
	if m != nil && m.TourneyQueueDeadlineState != nil {
		return *m.TourneyQueueDeadlineState
	}
	return Default_CSODOTAParty_TourneyQueueDeadlineState
}

func (m *CSODOTAParty) GetPartyBuilderSlotsToFill() uint32 {
	if m != nil && m.PartyBuilderSlotsToFill != nil {
		return *m.PartyBuilderSlotsToFill
	}
	return 0
}

func (m *CSODOTAParty) GetPartyBuilderMatchGroups() uint32 {
	if m != nil && m.PartyBuilderMatchGroups != nil {
		return *m.PartyBuilderMatchGroups
	}
	return 0
}

func (m *CSODOTAParty) GetPartyBuilderStartTime() uint32 {
	if m != nil && m.PartyBuilderStartTime != nil {
		return *m.PartyBuilderStartTime
	}
	return 0
}

func (m *CSODOTAParty) GetSoloQueue() bool {
	if m != nil && m.SoloQueue != nil {
		return *m.SoloQueue
	}
	return false
}

func (m *CSODOTAParty) GetBotScriptIndex() uint32 {
	if m != nil && m.BotScriptIndex != nil {
		return *m.BotScriptIndex
	}
	return 0
}

func (m *CSODOTAParty) GetSteamClanAccountId() uint32 {
	if m != nil && m.SteamClanAccountId != nil {
		return *m.SteamClanAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetReadyCheck() *CMsgReadyCheckStatus {
	if m != nil {
		return m.ReadyCheck
	}
	return nil
}

func (m *CSODOTAParty) GetCustomGameDisabledUntilDate() uint32 {
	if m != nil && m.CustomGameDisabledUntilDate != nil {
		return *m.CustomGameDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAParty) GetCustomGameDisabledAccountId() uint32 {
	if m != nil && m.CustomGameDisabledAccountId != nil {
		return *m.CustomGameDisabledAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetIsChallengeMatch() bool {
	if m != nil && m.IsChallengeMatch != nil {
		return *m.IsChallengeMatch
	}
	return false
}

func (m *CSODOTAParty) GetPartySearchBeaconActive() bool {
	if m != nil && m.PartySearchBeaconActive != nil {
		return *m.PartySearchBeaconActive
	}
	return false
}

func (m *CSODOTAParty) GetMatchmakingFlags() uint32 {
	if m != nil && m.MatchmakingFlags != nil {
		return *m.MatchmakingFlags
	}
	return 0
}

func (m *CSODOTAParty) GetHighPriorityState() EHighPriorityMMState {
	if m != nil && m.HighPriorityState != nil {
		return *m.HighPriorityState
	}
	return Default_CSODOTAParty_HighPriorityState
}

func (m *CSODOTAParty) GetLaneSelectionsEnabled() bool {
	if m != nil && m.LaneSelectionsEnabled != nil {
		return *m.LaneSelectionsEnabled
	}
	return false
}

func (m *CSODOTAParty) GetCustomGameDifficultyMask() uint32 {
	if m != nil && m.CustomGameDifficultyMask != nil {
		return *m.CustomGameDifficultyMask
	}
	return 0
}

type CSODOTAPartyInvite struct {
	GroupId              *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId             *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName           *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members              []*CSODOTAPartyInvite_PartyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	TeamId               *uint32                           `protobuf:"varint,5,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	LowPriorityStatus    *bool                             `protobuf:"varint,6,opt,name=low_priority_status,json=lowPriorityStatus" json:"low_priority_status,omitempty"`
	AsCoach              *bool                             `protobuf:"varint,7,opt,name=as_coach,json=asCoach" json:"as_coach,omitempty"`
	InviteGid            *uint64                           `protobuf:"fixed64,8,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CSODOTAPartyInvite) Reset()         { *m = CSODOTAPartyInvite{} }
func (m *CSODOTAPartyInvite) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite) ProtoMessage()    {}
func (*CSODOTAPartyInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{2}
}

func (m *CSODOTAPartyInvite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAPartyInvite.Unmarshal(m, b)
}
func (m *CSODOTAPartyInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAPartyInvite.Marshal(b, m, deterministic)
}
func (m *CSODOTAPartyInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAPartyInvite.Merge(m, src)
}
func (m *CSODOTAPartyInvite) XXX_Size() int {
	return xxx_messageInfo_CSODOTAPartyInvite.Size(m)
}
func (m *CSODOTAPartyInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAPartyInvite.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAPartyInvite proto.InternalMessageInfo

func (m *CSODOTAPartyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTAPartyInvite) GetMembers() []*CSODOTAPartyInvite_PartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAPartyInvite) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetLowPriorityStatus() bool {
	if m != nil && m.LowPriorityStatus != nil {
		return *m.LowPriorityStatus
	}
	return false
}

func (m *CSODOTAPartyInvite) GetAsCoach() bool {
	if m != nil && m.AsCoach != nil {
		return *m.AsCoach
	}
	return false
}

func (m *CSODOTAPartyInvite) GetInviteGid() uint64 {
	if m != nil && m.InviteGid != nil {
		return *m.InviteGid
	}
	return 0
}

type CSODOTAPartyInvite_PartyMember struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId              *uint64  `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	IsCoach              *bool    `protobuf:"varint,4,opt,name=is_coach,json=isCoach" json:"is_coach,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTAPartyInvite_PartyMember) Reset()         { *m = CSODOTAPartyInvite_PartyMember{} }
func (m *CSODOTAPartyInvite_PartyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite_PartyMember) ProtoMessage()    {}
func (*CSODOTAPartyInvite_PartyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{2, 0}
}

func (m *CSODOTAPartyInvite_PartyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTAPartyInvite_PartyMember.Unmarshal(m, b)
}
func (m *CSODOTAPartyInvite_PartyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTAPartyInvite_PartyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTAPartyInvite_PartyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTAPartyInvite_PartyMember.Merge(m, src)
}
func (m *CSODOTAPartyInvite_PartyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTAPartyInvite_PartyMember.Size(m)
}
func (m *CSODOTAPartyInvite_PartyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTAPartyInvite_PartyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTAPartyInvite_PartyMember proto.InternalMessageInfo

func (m *CSODOTAPartyInvite_PartyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTAPartyInvite_PartyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CSODOTAPartyInvite_PartyMember) GetIsCoach() bool {
	if m != nil && m.IsCoach != nil {
		return *m.IsCoach
	}
	return false
}

type CSODOTALobbyInvite struct {
	GroupId              *uint64                           `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	SenderId             *uint64                           `protobuf:"fixed64,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderName           *string                           `protobuf:"bytes,3,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	Members              []*CSODOTALobbyInvite_LobbyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	CustomGameId         *uint64                           `protobuf:"varint,5,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	InviteGid            *uint64                           `protobuf:"fixed64,6,opt,name=invite_gid,json=inviteGid" json:"invite_gid,omitempty"`
	CustomGameCrc        *uint64                           `protobuf:"fixed64,7,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp  *uint32                           `protobuf:"fixed32,8,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CSODOTALobbyInvite) Reset()         { *m = CSODOTALobbyInvite{} }
func (m *CSODOTALobbyInvite) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite) ProtoMessage()    {}
func (*CSODOTALobbyInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{3}
}

func (m *CSODOTALobbyInvite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobbyInvite.Unmarshal(m, b)
}
func (m *CSODOTALobbyInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobbyInvite.Marshal(b, m, deterministic)
}
func (m *CSODOTALobbyInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobbyInvite.Merge(m, src)
}
func (m *CSODOTALobbyInvite) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobbyInvite.Size(m)
}
func (m *CSODOTALobbyInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobbyInvite.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobbyInvite proto.InternalMessageInfo

func (m *CSODOTALobbyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTALobbyInvite) GetMembers() []*CSODOTALobbyInvite_LobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobbyInvite) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetInviteGid() uint64 {
	if m != nil && m.InviteGid != nil {
		return *m.InviteGid
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobbyInvite) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

type CSODOTALobbyInvite_LobbyMember struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId              *uint64  `protobuf:"fixed64,2,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTALobbyInvite_LobbyMember) Reset()         { *m = CSODOTALobbyInvite_LobbyMember{} }
func (m *CSODOTALobbyInvite_LobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyInvite_LobbyMember) ProtoMessage()    {}
func (*CSODOTALobbyInvite_LobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{3, 0}
}

func (m *CSODOTALobbyInvite_LobbyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Unmarshal(m, b)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Merge(m, src)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.Size(m)
}
func (m *CSODOTALobbyInvite_LobbyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobbyInvite_LobbyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobbyInvite_LobbyMember proto.InternalMessageInfo

func (m *CSODOTALobbyInvite_LobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTALobbyInvite_LobbyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

type CMsgLeaverState struct {
	LobbyState           *uint32         `protobuf:"varint,1,opt,name=lobby_state,json=lobbyState" json:"lobby_state,omitempty"`
	GameState            *DOTA_GameState `protobuf:"varint,2,opt,name=game_state,json=gameState,enum=dota.DOTA_GameState,def=0" json:"game_state,omitempty"`
	LeaverDetected       *bool           `protobuf:"varint,3,opt,name=leaver_detected,json=leaverDetected" json:"leaver_detected,omitempty"`
	FirstBloodHappened   *bool           `protobuf:"varint,4,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	DiscardMatchResults  *bool           `protobuf:"varint,5,opt,name=discard_match_results,json=discardMatchResults" json:"discard_match_results,omitempty"`
	MassDisconnect       *bool           `protobuf:"varint,6,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CMsgLeaverState) Reset()         { *m = CMsgLeaverState{} }
func (m *CMsgLeaverState) String() string { return proto.CompactTextString(m) }
func (*CMsgLeaverState) ProtoMessage()    {}
func (*CMsgLeaverState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{4}
}

func (m *CMsgLeaverState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLeaverState.Unmarshal(m, b)
}
func (m *CMsgLeaverState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLeaverState.Marshal(b, m, deterministic)
}
func (m *CMsgLeaverState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLeaverState.Merge(m, src)
}
func (m *CMsgLeaverState) XXX_Size() int {
	return xxx_messageInfo_CMsgLeaverState.Size(m)
}
func (m *CMsgLeaverState) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLeaverState.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLeaverState proto.InternalMessageInfo

const Default_CMsgLeaverState_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT

func (m *CMsgLeaverState) GetLobbyState() uint32 {
	if m != nil && m.LobbyState != nil {
		return *m.LobbyState
	}
	return 0
}

func (m *CMsgLeaverState) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CMsgLeaverState_GameState
}

func (m *CMsgLeaverState) GetLeaverDetected() bool {
	if m != nil && m.LeaverDetected != nil {
		return *m.LeaverDetected
	}
	return false
}

func (m *CMsgLeaverState) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CMsgLeaverState) GetDiscardMatchResults() bool {
	if m != nil && m.DiscardMatchResults != nil {
		return *m.DiscardMatchResults
	}
	return false
}

func (m *CMsgLeaverState) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

type CSODOTALobbyMember struct {
	Id                     *uint64                  `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	HeroId                 *uint32                  `protobuf:"varint,2,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Team                   *DOTA_GC_TEAM            `protobuf:"varint,3,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name                   *string                  `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Slot                   *uint32                  `protobuf:"varint,7,opt,name=slot" json:"slot,omitempty"`
	PartyId                *uint64                  `protobuf:"varint,12,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	MetaLevel              *uint32                  `protobuf:"varint,13,opt,name=meta_level,json=metaLevel" json:"meta_level,omitempty"`
	MetaXp                 *uint32                  `protobuf:"varint,14,opt,name=meta_xp,json=metaXp" json:"meta_xp,omitempty"`
	MetaXpAwarded          *uint32                  `protobuf:"varint,15,opt,name=meta_xp_awarded,json=metaXpAwarded" json:"meta_xp_awarded,omitempty"`
	LeaverStatus           *DOTALeaverStatusT       `protobuf:"varint,16,opt,name=leaver_status,json=leaverStatus,enum=dota.DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverActions          *uint32                  `protobuf:"varint,28,opt,name=leaver_actions,json=leaverActions" json:"leaver_actions,omitempty"`
	Channel                *uint32                  `protobuf:"varint,17,opt,name=channel,def=6" json:"channel,omitempty"`
	DisabledHeroId         []uint32                 `protobuf:"varint,20,rep,name=disabled_hero_id,json=disabledHeroId" json:"disabled_hero_id,omitempty"`
	PartnerAccountType     *PartnerAccountType      `protobuf:"varint,21,opt,name=partner_account_type,json=partnerAccountType,enum=dota.PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	EnabledHeroId          []uint32                 `protobuf:"varint,22,rep,name=enabled_hero_id,json=enabledHeroId" json:"enabled_hero_id,omitempty"`
	CoachTeam              *DOTA_GC_TEAM            `protobuf:"varint,23,opt,name=coach_team,json=coachTeam,enum=dota.DOTA_GC_TEAM,def=5" json:"coach_team,omitempty"`
	CoachRating            *uint32                  `protobuf:"varint,42,opt,name=coach_rating,json=coachRating" json:"coach_rating,omitempty"`
	PwrdCyberCafeId        *uint32                  `protobuf:"varint,24,opt,name=pwrd_cyber_cafe_id,json=pwrdCyberCafeId" json:"pwrd_cyber_cafe_id,omitempty"`
	PwrdCyberCafeName      *string                  `protobuf:"bytes,25,opt,name=pwrd_cyber_cafe_name,json=pwrdCyberCafeName" json:"pwrd_cyber_cafe_name,omitempty"`
	DisabledRandomHeroBits []uint32                 `protobuf:"fixed32,41,rep,name=disabled_random_hero_bits,json=disabledRandomHeroBits" json:"disabled_random_hero_bits,omitempty"`
	RankChange             *int32                   `protobuf:"zigzag32,29,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	Cameraman              *bool                    `protobuf:"varint,30,opt,name=cameraman" json:"cameraman,omitempty"`
	CustomGameProductIds   []uint32                 `protobuf:"varint,31,rep,name=custom_game_product_ids,json=customGameProductIds" json:"custom_game_product_ids,omitempty"`
	SearchMatchType        *MatchType               `protobuf:"varint,33,opt,name=search_match_type,json=searchMatchType,enum=dota.MatchType,def=0" json:"search_match_type,omitempty"`
	FavoriteTeamPacked     *uint64                  `protobuf:"varint,35,opt,name=favorite_team_packed,json=favoriteTeamPacked" json:"favorite_team_packed,omitempty"`
	IsPlusSubscriber       *bool                    `protobuf:"varint,36,opt,name=is_plus_subscriber,json=isPlusSubscriber" json:"is_plus_subscriber,omitempty"`
	RankTierUpdated        *bool                    `protobuf:"varint,37,opt,name=rank_tier_updated,json=rankTierUpdated" json:"rank_tier_updated,omitempty"`
	LaneSelectionFlags     *uint32                  `protobuf:"varint,38,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	CanEarnRewards         *bool                    `protobuf:"varint,39,opt,name=can_earn_rewards,json=canEarnRewards" json:"can_earn_rewards,omitempty"`
	LiveSpectatorTeam      *DOTA_GC_TEAM            `protobuf:"varint,40,opt,name=live_spectator_team,json=liveSpectatorTeam,enum=dota.DOTA_GC_TEAM,def=5" json:"live_spectator_team,omitempty"`
	WasMvpLastGame         *bool                    `protobuf:"varint,43,opt,name=was_mvp_last_game,json=wasMvpLastGame" json:"was_mvp_last_game,omitempty"`
	PendingAwards          []*CMsgPendingEventAward `protobuf:"bytes,44,rep,name=pending_awards,json=pendingAwards" json:"pending_awards,omitempty"`
	PendingAwardsOnVictory []*CMsgPendingEventAward `protobuf:"bytes,45,rep,name=pending_awards_on_victory,json=pendingAwardsOnVictory" json:"pending_awards_on_victory,omitempty"`
	RankMmrBoostType       *EDOTAMMRBoostType       `protobuf:"varint,46,opt,name=rank_mmr_boost_type,json=rankMmrBoostType,enum=dota.EDOTAMMRBoostType,def=0" json:"rank_mmr_boost_type,omitempty"`
	QueuePointAdjustment   *int32                   `protobuf:"zigzag32,47,opt,name=queue_point_adjustment,json=queuePointAdjustment" json:"queue_point_adjustment,omitempty"`
	RankTier               *int32                   `protobuf:"varint,48,opt,name=rank_tier,json=rankTier" json:"rank_tier,omitempty"`
	Title                  *uint32                  `protobuf:"varint,50,opt,name=title" json:"title,omitempty"`
	GuildId                *uint32                  `protobuf:"varint,51,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	ReportsAvailable       *uint32                  `protobuf:"varint,52,opt,name=reports_available,json=reportsAvailable" json:"reports_available,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                 `json:"-"`
	XXX_unrecognized       []byte                   `json:"-"`
	XXX_sizecache          int32                    `json:"-"`
}

func (m *CSODOTALobbyMember) Reset()         { *m = CSODOTALobbyMember{} }
func (m *CSODOTALobbyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyMember) ProtoMessage()    {}
func (*CSODOTALobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{5}
}

func (m *CSODOTALobbyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobbyMember.Unmarshal(m, b)
}
func (m *CSODOTALobbyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobbyMember.Marshal(b, m, deterministic)
}
func (m *CSODOTALobbyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobbyMember.Merge(m, src)
}
func (m *CSODOTALobbyMember) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobbyMember.Size(m)
}
func (m *CSODOTALobbyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobbyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobbyMember proto.InternalMessageInfo

const Default_CSODOTALobbyMember_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
const Default_CSODOTALobbyMember_LeaverStatus DOTALeaverStatusT = DOTALeaverStatusT_DOTA_LEAVER_NONE
const Default_CSODOTALobbyMember_Channel uint32 = 6
const Default_CSODOTALobbyMember_PartnerAccountType PartnerAccountType = PartnerAccountType_PARTNER_NONE
const Default_CSODOTALobbyMember_CoachTeam DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
const Default_CSODOTALobbyMember_SearchMatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CSODOTALobbyMember_LiveSpectatorTeam DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM
const Default_CSODOTALobbyMember_RankMmrBoostType EDOTAMMRBoostType = EDOTAMMRBoostType_k_EDOTAMMRBoostType_None

func (m *CSODOTALobbyMember) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CSODOTALobbyMember) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CSODOTALobbyMember) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CSODOTALobbyMember_Team
}

func (m *CSODOTALobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTALobbyMember) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CSODOTALobbyMember) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CSODOTALobbyMember) GetMetaLevel() uint32 {
	if m != nil && m.MetaLevel != nil {
		return *m.MetaLevel
	}
	return 0
}

func (m *CSODOTALobbyMember) GetMetaXp() uint32 {
	if m != nil && m.MetaXp != nil {
		return *m.MetaXp
	}
	return 0
}

func (m *CSODOTALobbyMember) GetMetaXpAwarded() uint32 {
	if m != nil && m.MetaXpAwarded != nil {
		return *m.MetaXpAwarded
	}
	return 0
}

func (m *CSODOTALobbyMember) GetLeaverStatus() DOTALeaverStatusT {
	if m != nil && m.LeaverStatus != nil {
		return *m.LeaverStatus
	}
	return Default_CSODOTALobbyMember_LeaverStatus
}

func (m *CSODOTALobbyMember) GetLeaverActions() uint32 {
	if m != nil && m.LeaverActions != nil {
		return *m.LeaverActions
	}
	return 0
}

func (m *CSODOTALobbyMember) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return Default_CSODOTALobbyMember_Channel
}

func (m *CSODOTALobbyMember) GetDisabledHeroId() []uint32 {
	if m != nil {
		return m.DisabledHeroId
	}
	return nil
}

func (m *CSODOTALobbyMember) GetPartnerAccountType() PartnerAccountType {
	if m != nil && m.PartnerAccountType != nil {
		return *m.PartnerAccountType
	}
	return Default_CSODOTALobbyMember_PartnerAccountType
}

func (m *CSODOTALobbyMember) GetEnabledHeroId() []uint32 {
	if m != nil {
		return m.EnabledHeroId
	}
	return nil
}

func (m *CSODOTALobbyMember) GetCoachTeam() DOTA_GC_TEAM {
	if m != nil && m.CoachTeam != nil {
		return *m.CoachTeam
	}
	return Default_CSODOTALobbyMember_CoachTeam
}

func (m *CSODOTALobbyMember) GetCoachRating() uint32 {
	if m != nil && m.CoachRating != nil {
		return *m.CoachRating
	}
	return 0
}

func (m *CSODOTALobbyMember) GetPwrdCyberCafeId() uint32 {
	if m != nil && m.PwrdCyberCafeId != nil {
		return *m.PwrdCyberCafeId
	}
	return 0
}

func (m *CSODOTALobbyMember) GetPwrdCyberCafeName() string {
	if m != nil && m.PwrdCyberCafeName != nil {
		return *m.PwrdCyberCafeName
	}
	return ""
}

func (m *CSODOTALobbyMember) GetDisabledRandomHeroBits() []uint32 {
	if m != nil {
		return m.DisabledRandomHeroBits
	}
	return nil
}

func (m *CSODOTALobbyMember) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CSODOTALobbyMember) GetCameraman() bool {
	if m != nil && m.Cameraman != nil {
		return *m.Cameraman
	}
	return false
}

func (m *CSODOTALobbyMember) GetCustomGameProductIds() []uint32 {
	if m != nil {
		return m.CustomGameProductIds
	}
	return nil
}

func (m *CSODOTALobbyMember) GetSearchMatchType() MatchType {
	if m != nil && m.SearchMatchType != nil {
		return *m.SearchMatchType
	}
	return Default_CSODOTALobbyMember_SearchMatchType
}

func (m *CSODOTALobbyMember) GetFavoriteTeamPacked() uint64 {
	if m != nil && m.FavoriteTeamPacked != nil {
		return *m.FavoriteTeamPacked
	}
	return 0
}

func (m *CSODOTALobbyMember) GetIsPlusSubscriber() bool {
	if m != nil && m.IsPlusSubscriber != nil {
		return *m.IsPlusSubscriber
	}
	return false
}

func (m *CSODOTALobbyMember) GetRankTierUpdated() bool {
	if m != nil && m.RankTierUpdated != nil {
		return *m.RankTierUpdated
	}
	return false
}

func (m *CSODOTALobbyMember) GetLaneSelectionFlags() uint32 {
	if m != nil && m.LaneSelectionFlags != nil {
		return *m.LaneSelectionFlags
	}
	return 0
}

func (m *CSODOTALobbyMember) GetCanEarnRewards() bool {
	if m != nil && m.CanEarnRewards != nil {
		return *m.CanEarnRewards
	}
	return false
}

func (m *CSODOTALobbyMember) GetLiveSpectatorTeam() DOTA_GC_TEAM {
	if m != nil && m.LiveSpectatorTeam != nil {
		return *m.LiveSpectatorTeam
	}
	return Default_CSODOTALobbyMember_LiveSpectatorTeam
}

func (m *CSODOTALobbyMember) GetWasMvpLastGame() bool {
	if m != nil && m.WasMvpLastGame != nil {
		return *m.WasMvpLastGame
	}
	return false
}

func (m *CSODOTALobbyMember) GetPendingAwards() []*CMsgPendingEventAward {
	if m != nil {
		return m.PendingAwards
	}
	return nil
}

func (m *CSODOTALobbyMember) GetPendingAwardsOnVictory() []*CMsgPendingEventAward {
	if m != nil {
		return m.PendingAwardsOnVictory
	}
	return nil
}

func (m *CSODOTALobbyMember) GetRankMmrBoostType() EDOTAMMRBoostType {
	if m != nil && m.RankMmrBoostType != nil {
		return *m.RankMmrBoostType
	}
	return Default_CSODOTALobbyMember_RankMmrBoostType
}

func (m *CSODOTALobbyMember) GetQueuePointAdjustment() int32 {
	if m != nil && m.QueuePointAdjustment != nil {
		return *m.QueuePointAdjustment
	}
	return 0
}

func (m *CSODOTALobbyMember) GetRankTier() int32 {
	if m != nil && m.RankTier != nil {
		return *m.RankTier
	}
	return 0
}

func (m *CSODOTALobbyMember) GetTitle() uint32 {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return 0
}

func (m *CSODOTALobbyMember) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CSODOTALobbyMember) GetReportsAvailable() uint32 {
	if m != nil && m.ReportsAvailable != nil {
		return *m.ReportsAvailable
	}
	return 0
}

type CLobbyTeamDetails struct {
	TeamName                   *string  `protobuf:"bytes,1,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamTag                    *string  `protobuf:"bytes,3,opt,name=team_tag,json=teamTag" json:"team_tag,omitempty"`
	TeamId                     *uint32  `protobuf:"varint,4,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamLogo                   *uint64  `protobuf:"varint,5,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	TeamBaseLogo               *uint64  `protobuf:"varint,6,opt,name=team_base_logo,json=teamBaseLogo" json:"team_base_logo,omitempty"`
	TeamBannerLogo             *uint64  `protobuf:"varint,7,opt,name=team_banner_logo,json=teamBannerLogo" json:"team_banner_logo,omitempty"`
	TeamComplete               *bool    `protobuf:"varint,8,opt,name=team_complete,json=teamComplete" json:"team_complete,omitempty"`
	Rank                       *uint32  `protobuf:"varint,15,opt,name=rank" json:"rank,omitempty"`
	RankChange                 *int32   `protobuf:"zigzag32,16,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	IsHomeTeam                 *bool    `protobuf:"varint,17,opt,name=is_home_team,json=isHomeTeam" json:"is_home_team,omitempty"`
	IsChallengeMatch           *bool    `protobuf:"varint,18,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	ChallengeMatchTokenAccount *uint64  `protobuf:"varint,19,opt,name=challenge_match_token_account,json=challengeMatchTokenAccount" json:"challenge_match_token_account,omitempty"`
	TeamLogoUrl                *string  `protobuf:"bytes,20,opt,name=team_logo_url,json=teamLogoUrl" json:"team_logo_url,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *CLobbyTeamDetails) Reset()         { *m = CLobbyTeamDetails{} }
func (m *CLobbyTeamDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyTeamDetails) ProtoMessage()    {}
func (*CLobbyTeamDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{6}
}

func (m *CLobbyTeamDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyTeamDetails.Unmarshal(m, b)
}
func (m *CLobbyTeamDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyTeamDetails.Marshal(b, m, deterministic)
}
func (m *CLobbyTeamDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyTeamDetails.Merge(m, src)
}
func (m *CLobbyTeamDetails) XXX_Size() int {
	return xxx_messageInfo_CLobbyTeamDetails.Size(m)
}
func (m *CLobbyTeamDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyTeamDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyTeamDetails proto.InternalMessageInfo

func (m *CLobbyTeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBannerLogo() uint64 {
	if m != nil && m.TeamBannerLogo != nil {
		return *m.TeamBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamComplete() bool {
	if m != nil && m.TeamComplete != nil {
		return *m.TeamComplete
	}
	return false
}

func (m *CLobbyTeamDetails) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

func (m *CLobbyTeamDetails) GetIsHomeTeam() bool {
	if m != nil && m.IsHomeTeam != nil {
		return *m.IsHomeTeam
	}
	return false
}

func (m *CLobbyTeamDetails) GetIsChallengeMatch() bool {
	if m != nil && m.IsChallengeMatch != nil {
		return *m.IsChallengeMatch
	}
	return false
}

func (m *CLobbyTeamDetails) GetChallengeMatchTokenAccount() uint64 {
	if m != nil && m.ChallengeMatchTokenAccount != nil {
		return *m.ChallengeMatchTokenAccount
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamLogoUrl() string {
	if m != nil && m.TeamLogoUrl != nil {
		return *m.TeamLogoUrl
	}
	return ""
}

type CLobbyGuildDetails struct {
	GuildId               *uint32       `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	GuildPrimaryColor     *uint32       `protobuf:"varint,2,opt,name=guild_primary_color,json=guildPrimaryColor" json:"guild_primary_color,omitempty"`
	GuildSecondaryColor   *uint32       `protobuf:"varint,3,opt,name=guild_secondary_color,json=guildSecondaryColor" json:"guild_secondary_color,omitempty"`
	GuildPattern          *uint32       `protobuf:"varint,4,opt,name=guild_pattern,json=guildPattern" json:"guild_pattern,omitempty"`
	GuildLogo             *uint64       `protobuf:"varint,5,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	GuildPoints           *uint32       `protobuf:"varint,6,opt,name=guild_points,json=guildPoints" json:"guild_points,omitempty"`
	GuildEvent            *uint32       `protobuf:"varint,7,opt,name=guild_event,json=guildEvent" json:"guild_event,omitempty"`
	GuildFlags            *uint32       `protobuf:"varint,8,opt,name=guild_flags,json=guildFlags" json:"guild_flags,omitempty"`
	TeamForGuild          *DOTA_GC_TEAM `protobuf:"varint,9,opt,name=team_for_guild,json=teamForGuild,enum=dota.DOTA_GC_TEAM,def=0" json:"team_for_guild,omitempty"`
	GuildTag              *string       `protobuf:"bytes,10,opt,name=guild_tag,json=guildTag" json:"guild_tag,omitempty"`
	GuildWeeklyPercentile *uint32       `protobuf:"varint,11,opt,name=guild_weekly_percentile,json=guildWeeklyPercentile" json:"guild_weekly_percentile,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}      `json:"-"`
	XXX_unrecognized      []byte        `json:"-"`
	XXX_sizecache         int32         `json:"-"`
}

func (m *CLobbyGuildDetails) Reset()         { *m = CLobbyGuildDetails{} }
func (m *CLobbyGuildDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyGuildDetails) ProtoMessage()    {}
func (*CLobbyGuildDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{7}
}

func (m *CLobbyGuildDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyGuildDetails.Unmarshal(m, b)
}
func (m *CLobbyGuildDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyGuildDetails.Marshal(b, m, deterministic)
}
func (m *CLobbyGuildDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyGuildDetails.Merge(m, src)
}
func (m *CLobbyGuildDetails) XXX_Size() int {
	return xxx_messageInfo_CLobbyGuildDetails.Size(m)
}
func (m *CLobbyGuildDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyGuildDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyGuildDetails proto.InternalMessageInfo

const Default_CLobbyGuildDetails_TeamForGuild DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CLobbyGuildDetails) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildPrimaryColor() uint32 {
	if m != nil && m.GuildPrimaryColor != nil {
		return *m.GuildPrimaryColor
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildSecondaryColor() uint32 {
	if m != nil && m.GuildSecondaryColor != nil {
		return *m.GuildSecondaryColor
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildPattern() uint32 {
	if m != nil && m.GuildPattern != nil {
		return *m.GuildPattern
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildLogo() uint64 {
	if m != nil && m.GuildLogo != nil {
		return *m.GuildLogo
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildPoints() uint32 {
	if m != nil && m.GuildPoints != nil {
		return *m.GuildPoints
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildEvent() uint32 {
	if m != nil && m.GuildEvent != nil {
		return *m.GuildEvent
	}
	return 0
}

func (m *CLobbyGuildDetails) GetGuildFlags() uint32 {
	if m != nil && m.GuildFlags != nil {
		return *m.GuildFlags
	}
	return 0
}

func (m *CLobbyGuildDetails) GetTeamForGuild() DOTA_GC_TEAM {
	if m != nil && m.TeamForGuild != nil {
		return *m.TeamForGuild
	}
	return Default_CLobbyGuildDetails_TeamForGuild
}

func (m *CLobbyGuildDetails) GetGuildTag() string {
	if m != nil && m.GuildTag != nil {
		return *m.GuildTag
	}
	return ""
}

func (m *CLobbyGuildDetails) GetGuildWeeklyPercentile() uint32 {
	if m != nil && m.GuildWeeklyPercentile != nil {
		return *m.GuildWeeklyPercentile
	}
	return 0
}

type CLobbyTimedRewardDetails struct {
	ItemDefIndex         *uint32  `protobuf:"varint,2,opt,name=item_def_index,json=itemDefIndex" json:"item_def_index,omitempty"`
	IsSupplyCrate        *bool    `protobuf:"varint,3,opt,name=is_supply_crate,json=isSupplyCrate" json:"is_supply_crate,omitempty"`
	IsTimedDrop          *bool    `protobuf:"varint,4,opt,name=is_timed_drop,json=isTimedDrop" json:"is_timed_drop,omitempty"`
	AccountId            *uint32  `protobuf:"varint,5,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Origin               *uint32  `protobuf:"varint,6,opt,name=origin" json:"origin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLobbyTimedRewardDetails) Reset()         { *m = CLobbyTimedRewardDetails{} }
func (m *CLobbyTimedRewardDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyTimedRewardDetails) ProtoMessage()    {}
func (*CLobbyTimedRewardDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{8}
}

func (m *CLobbyTimedRewardDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyTimedRewardDetails.Unmarshal(m, b)
}
func (m *CLobbyTimedRewardDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyTimedRewardDetails.Marshal(b, m, deterministic)
}
func (m *CLobbyTimedRewardDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyTimedRewardDetails.Merge(m, src)
}
func (m *CLobbyTimedRewardDetails) XXX_Size() int {
	return xxx_messageInfo_CLobbyTimedRewardDetails.Size(m)
}
func (m *CLobbyTimedRewardDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyTimedRewardDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyTimedRewardDetails proto.InternalMessageInfo

func (m *CLobbyTimedRewardDetails) GetItemDefIndex() uint32 {
	if m != nil && m.ItemDefIndex != nil {
		return *m.ItemDefIndex
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetIsSupplyCrate() bool {
	if m != nil && m.IsSupplyCrate != nil {
		return *m.IsSupplyCrate
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetIsTimedDrop() bool {
	if m != nil && m.IsTimedDrop != nil {
		return *m.IsTimedDrop
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetOrigin() uint32 {
	if m != nil && m.Origin != nil {
		return *m.Origin
	}
	return 0
}

type CLobbyBroadcastChannelInfo struct {
	ChannelId            *uint32  `protobuf:"varint,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	CountryCode          *string  `protobuf:"bytes,2,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description          *string  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	LanguageCode         *string  `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLobbyBroadcastChannelInfo) Reset()         { *m = CLobbyBroadcastChannelInfo{} }
func (m *CLobbyBroadcastChannelInfo) String() string { return proto.CompactTextString(m) }
func (*CLobbyBroadcastChannelInfo) ProtoMessage()    {}
func (*CLobbyBroadcastChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{9}
}

func (m *CLobbyBroadcastChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyBroadcastChannelInfo.Unmarshal(m, b)
}
func (m *CLobbyBroadcastChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyBroadcastChannelInfo.Marshal(b, m, deterministic)
}
func (m *CLobbyBroadcastChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyBroadcastChannelInfo.Merge(m, src)
}
func (m *CLobbyBroadcastChannelInfo) XXX_Size() int {
	return xxx_messageInfo_CLobbyBroadcastChannelInfo.Size(m)
}
func (m *CLobbyBroadcastChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyBroadcastChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyBroadcastChannelInfo proto.InternalMessageInfo

func (m *CLobbyBroadcastChannelInfo) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *CLobbyBroadcastChannelInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetLanguageCode() string {
	if m != nil && m.LanguageCode != nil {
		return *m.LanguageCode
	}
	return ""
}

type CLobbyGuildChallenge struct {
	GuildId                  *uint32  `protobuf:"varint,1,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	EventId                  *EEvent  `protobuf:"varint,2,opt,name=event_id,json=eventId,enum=dota.EEvent,def=0" json:"event_id,omitempty"`
	ChallengeInstanceId      *uint32  `protobuf:"varint,3,opt,name=challenge_instance_id,json=challengeInstanceId" json:"challenge_instance_id,omitempty"`
	ChallengeParameter       *uint32  `protobuf:"varint,4,opt,name=challenge_parameter,json=challengeParameter" json:"challenge_parameter,omitempty"`
	ChallengeTimestamp       *uint32  `protobuf:"varint,5,opt,name=challenge_timestamp,json=challengeTimestamp" json:"challenge_timestamp,omitempty"`
	ChallengePeriodSerial    *uint32  `protobuf:"varint,6,opt,name=challenge_period_serial,json=challengePeriodSerial" json:"challenge_period_serial,omitempty"`
	ChallengeProgressAtStart *uint32  `protobuf:"varint,7,opt,name=challenge_progress_at_start,json=challengeProgressAtStart" json:"challenge_progress_at_start,omitempty"`
	EligibleAccountIds       []uint32 `protobuf:"varint,8,rep,name=eligible_account_ids,json=eligibleAccountIds" json:"eligible_account_ids,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *CLobbyGuildChallenge) Reset()         { *m = CLobbyGuildChallenge{} }
func (m *CLobbyGuildChallenge) String() string { return proto.CompactTextString(m) }
func (*CLobbyGuildChallenge) ProtoMessage()    {}
func (*CLobbyGuildChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{10}
}

func (m *CLobbyGuildChallenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLobbyGuildChallenge.Unmarshal(m, b)
}
func (m *CLobbyGuildChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLobbyGuildChallenge.Marshal(b, m, deterministic)
}
func (m *CLobbyGuildChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLobbyGuildChallenge.Merge(m, src)
}
func (m *CLobbyGuildChallenge) XXX_Size() int {
	return xxx_messageInfo_CLobbyGuildChallenge.Size(m)
}
func (m *CLobbyGuildChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_CLobbyGuildChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_CLobbyGuildChallenge proto.InternalMessageInfo

const Default_CLobbyGuildChallenge_EventId EEvent = EEvent_EVENT_ID_NONE

func (m *CLobbyGuildChallenge) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetEventId() EEvent {
	if m != nil && m.EventId != nil {
		return *m.EventId
	}
	return Default_CLobbyGuildChallenge_EventId
}

func (m *CLobbyGuildChallenge) GetChallengeInstanceId() uint32 {
	if m != nil && m.ChallengeInstanceId != nil {
		return *m.ChallengeInstanceId
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetChallengeParameter() uint32 {
	if m != nil && m.ChallengeParameter != nil {
		return *m.ChallengeParameter
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetChallengeTimestamp() uint32 {
	if m != nil && m.ChallengeTimestamp != nil {
		return *m.ChallengeTimestamp
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetChallengePeriodSerial() uint32 {
	if m != nil && m.ChallengePeriodSerial != nil {
		return *m.ChallengePeriodSerial
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetChallengeProgressAtStart() uint32 {
	if m != nil && m.ChallengeProgressAtStart != nil {
		return *m.ChallengeProgressAtStart
	}
	return 0
}

func (m *CLobbyGuildChallenge) GetEligibleAccountIds() []uint32 {
	if m != nil {
		return m.EligibleAccountIds
	}
	return nil
}

type CSODOTALobby struct {
	LobbyId                                    *uint64                       `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	V2Members                                  []*CSODOTALobbyMember         `protobuf:"bytes,2,rep,name=v2_members,json=v2Members" json:"v2_members,omitempty"`
	V2LeftMembers                              []*CSODOTALobbyMember         `protobuf:"bytes,7,rep,name=v2_left_members,json=v2LeftMembers" json:"v2_left_members,omitempty"`
	AllMembers                                 []*CSODOTALobbyMember         `protobuf:"bytes,120,rep,name=all_members,json=allMembers" json:"all_members,omitempty"`
	MemberIndices                              []uint32                      `protobuf:"varint,121,rep,name=member_indices,json=memberIndices" json:"member_indices,omitempty"`
	LeftMemberIndices                          []uint32                      `protobuf:"varint,122,rep,name=left_member_indices,json=leftMemberIndices" json:"left_member_indices,omitempty"`
	FreeMemberIndices                          []uint32                      `protobuf:"varint,123,rep,name=free_member_indices,json=freeMemberIndices" json:"free_member_indices,omitempty"`
	LeaderId                                   *uint64                       `protobuf:"fixed64,11,opt,name=leader_id,json=leaderId" json:"leader_id,omitempty"`
	ServerId                                   *uint64                       `protobuf:"fixed64,6,opt,name=server_id,json=serverId,def=0" json:"server_id,omitempty"`
	GameMode                                   *uint32                       `protobuf:"varint,3,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	PendingInvites                             []uint64                      `protobuf:"fixed64,10,rep,name=pending_invites,json=pendingInvites" json:"pending_invites,omitempty"`
	State                                      *CSODOTALobby_State           `protobuf:"varint,4,opt,name=state,enum=dota.CSODOTALobby_State,def=0" json:"state,omitempty"`
	Connect                                    *string                       `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	LobbyType                                  *CSODOTALobby_LobbyType       `protobuf:"varint,12,opt,name=lobby_type,json=lobbyType,enum=dota.CSODOTALobby_LobbyType,def=-1" json:"lobby_type,omitempty"`
	AllowCheats                                *bool                         `protobuf:"varint,13,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	FillWithBots                               *bool                         `protobuf:"varint,14,opt,name=fill_with_bots,json=fillWithBots" json:"fill_with_bots,omitempty"`
	IntroMode                                  *bool                         `protobuf:"varint,15,opt,name=intro_mode,json=introMode" json:"intro_mode,omitempty"`
	GameName                                   *string                       `protobuf:"bytes,16,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	TeamDetails                                []*CLobbyTeamDetails          `protobuf:"bytes,17,rep,name=team_details,json=teamDetails" json:"team_details,omitempty"`
	TutorialLesson                             *uint32                       `protobuf:"varint,18,opt,name=tutorial_lesson,json=tutorialLesson" json:"tutorial_lesson,omitempty"`
	TournamentId                               *uint32                       `protobuf:"varint,19,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentGameId                           *uint32                       `protobuf:"varint,20,opt,name=tournament_game_id,json=tournamentGameId" json:"tournament_game_id,omitempty"`
	ServerRegion                               *uint32                       `protobuf:"varint,21,opt,name=server_region,json=serverRegion,def=0" json:"server_region,omitempty"`
	GameState                                  *DOTA_GameState               `protobuf:"varint,22,opt,name=game_state,json=gameState,enum=dota.DOTA_GameState,def=0" json:"game_state,omitempty"`
	NumSpectators                              *uint32                       `protobuf:"varint,23,opt,name=num_spectators,json=numSpectators" json:"num_spectators,omitempty"`
	Matchgroup                                 *uint32                       `protobuf:"varint,25,opt,name=matchgroup" json:"matchgroup,omitempty"`
	CmPick                                     *DOTA_CM_PICK                 `protobuf:"varint,28,opt,name=cm_pick,json=cmPick,enum=dota.DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	MatchId                                    *uint64                       `protobuf:"varint,30,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	AllowSpectating                            *bool                         `protobuf:"varint,31,opt,name=allow_spectating,json=allowSpectating,def=1" json:"allow_spectating,omitempty"`
	BotDifficultyRadiant                       *DOTABotDifficulty            `protobuf:"varint,36,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=dota.DOTABotDifficulty,def=3" json:"bot_difficulty_radiant,omitempty"`
	GameVersion                                *DOTAGameVersion              `protobuf:"varint,37,opt,name=game_version,json=gameVersion,enum=dota.DOTAGameVersion,def=0" json:"game_version,omitempty"`
	TimedRewardDetails                         []*CLobbyTimedRewardDetails   `protobuf:"bytes,38,rep,name=timed_reward_details,json=timedRewardDetails" json:"timed_reward_details,omitempty"`
	PassKey                                    *string                       `protobuf:"bytes,39,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Leagueid                                   *uint32                       `protobuf:"varint,42,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant                        *uint32                       `protobuf:"varint,43,opt,name=penalty_level_radiant,json=penaltyLevelRadiant,def=0" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire                           *uint32                       `protobuf:"varint,44,opt,name=penalty_level_dire,json=penaltyLevelDire,def=0" json:"penalty_level_dire,omitempty"`
	LoadGameId                                 *uint32                       `protobuf:"varint,45,opt,name=load_game_id,json=loadGameId" json:"load_game_id,omitempty"`
	SeriesType                                 *uint32                       `protobuf:"varint,46,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	RadiantSeriesWins                          *uint32                       `protobuf:"varint,47,opt,name=radiant_series_wins,json=radiantSeriesWins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins                             *uint32                       `protobuf:"varint,48,opt,name=dire_series_wins,json=direSeriesWins" json:"dire_series_wins,omitempty"`
	LootGenerated                              *uint32                       `protobuf:"varint,49,opt,name=loot_generated,json=lootGenerated" json:"loot_generated,omitempty"`
	LootAwarded                                *uint32                       `protobuf:"varint,50,opt,name=loot_awarded,json=lootAwarded" json:"loot_awarded,omitempty"`
	Allchat                                    *bool                         `protobuf:"varint,51,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay                                *LobbyDotaTVDelay             `protobuf:"varint,53,opt,name=dota_tv_delay,json=dotaTvDelay,enum=dota.LobbyDotaTVDelay,def=0" json:"dota_tv_delay,omitempty"`
	CustomGameMode                             *string                       `protobuf:"bytes,54,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	CustomMapName                              *string                       `protobuf:"bytes,55,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	CustomDifficulty                           *uint32                       `protobuf:"varint,56,opt,name=custom_difficulty,json=customDifficulty" json:"custom_difficulty,omitempty"`
	Lan                                        *bool                         `protobuf:"varint,57,opt,name=lan" json:"lan,omitempty"`
	BroadcastChannelInfo                       []*CLobbyBroadcastChannelInfo `protobuf:"bytes,58,rep,name=broadcast_channel_info,json=broadcastChannelInfo" json:"broadcast_channel_info,omitempty"`
	FirstLeaverAccountid                       *uint32                       `protobuf:"varint,59,opt,name=first_leaver_accountid,json=firstLeaverAccountid" json:"first_leaver_accountid,omitempty"`
	SeriesId                                   *uint32                       `protobuf:"varint,60,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	LowPriority                                *bool                         `protobuf:"varint,61,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	ExtraMessages                              []*CSODOTALobby_CExtraMsg     `protobuf:"bytes,62,rep,name=extra_messages,json=extraMessages" json:"extra_messages,omitempty"`
	SaveGame                                   *CDOTASaveGame                `protobuf:"bytes,63,opt,name=save_game,json=saveGame" json:"save_game,omitempty"`
	FirstBloodHappened                         *bool                         `protobuf:"varint,65,opt,name=first_blood_happened,json=firstBloodHappened" json:"first_blood_happened,omitempty"`
	MatchOutcome                               *EMatchOutcome                `protobuf:"varint,70,opt,name=match_outcome,json=matchOutcome,enum=dota.EMatchOutcome,def=0" json:"match_outcome,omitempty"`
	MassDisconnect                             *bool                         `protobuf:"varint,67,opt,name=mass_disconnect,json=massDisconnect" json:"mass_disconnect,omitempty"`
	CustomGameId                               *uint64                       `protobuf:"varint,68,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	CustomMinPlayers                           *uint32                       `protobuf:"varint,71,opt,name=custom_min_players,json=customMinPlayers" json:"custom_min_players,omitempty"`
	CustomMaxPlayers                           *uint32                       `protobuf:"varint,72,opt,name=custom_max_players,json=customMaxPlayers" json:"custom_max_players,omitempty"`
	PartnerType                                *PartnerAccountType           `protobuf:"varint,73,opt,name=partner_type,json=partnerType,enum=dota.PartnerAccountType,def=0" json:"partner_type,omitempty"`
	Visibility                                 *DOTALobbyVisibility          `protobuf:"varint,75,opt,name=visibility,enum=dota.DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc                              *uint64                       `protobuf:"fixed64,76,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameAutoCreatedLobby                 *bool                         `protobuf:"varint,77,opt,name=custom_game_auto_created_lobby,json=customGameAutoCreatedLobby" json:"custom_game_auto_created_lobby,omitempty"`
	CustomGameTimestamp                        *uint32                       `protobuf:"fixed32,80,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	PreviousSeriesMatches                      []uint64                      `protobuf:"varint,81,rep,name=previous_series_matches,json=previousSeriesMatches" json:"previous_series_matches,omitempty"`
	PreviousMatchOverride                      *uint64                       `protobuf:"varint,82,opt,name=previous_match_override,json=previousMatchOverride" json:"previous_match_override,omitempty"`
	CustomGameUsesAccountRecords               *bool                         `protobuf:"varint,83,opt,name=custom_game_uses_account_records,json=customGameUsesAccountRecords" json:"custom_game_uses_account_records,omitempty"`
	GameStartTime                              *uint32                       `protobuf:"varint,87,opt,name=game_start_time,json=gameStartTime" json:"game_start_time,omitempty"`
	PauseSetting                               *LobbyDotaPauseSetting        `protobuf:"varint,88,opt,name=pause_setting,json=pauseSetting,enum=dota.LobbyDotaPauseSetting,def=0" json:"pause_setting,omitempty"`
	LobbyMvpAccountId                          *uint32                       `protobuf:"varint,89,opt,name=lobby_mvp_account_id,json=lobbyMvpAccountId" json:"lobby_mvp_account_id,omitempty"`
	WeekendTourneyDivisionId                   *uint32                       `protobuf:"varint,90,opt,name=weekend_tourney_division_id,json=weekendTourneyDivisionId" json:"weekend_tourney_division_id,omitempty"`
	WeekendTourneySkillLevel                   *uint32                       `protobuf:"varint,91,opt,name=weekend_tourney_skill_level,json=weekendTourneySkillLevel" json:"weekend_tourney_skill_level,omitempty"`
	WeekendTourneyBracketRound                 *uint32                       `protobuf:"varint,92,opt,name=weekend_tourney_bracket_round,json=weekendTourneyBracketRound" json:"weekend_tourney_bracket_round,omitempty"`
	BotDifficultyDire                          *DOTABotDifficulty            `protobuf:"varint,93,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=dota.DOTABotDifficulty,def=3" json:"bot_difficulty_dire,omitempty"`
	BotRadiant                                 *uint64                       `protobuf:"varint,94,opt,name=bot_radiant,json=botRadiant" json:"bot_radiant,omitempty"`
	BotDire                                    *uint64                       `protobuf:"varint,95,opt,name=bot_dire,json=botDire" json:"bot_dire,omitempty"`
	EventProgressionEnabled                    []EEvent                      `protobuf:"varint,96,rep,name=event_progression_enabled,json=eventProgressionEnabled,enum=dota.EEvent" json:"event_progression_enabled,omitempty"`
	SelectionPriorityRules                     *DOTASelectionPriorityRules   `protobuf:"varint,97,opt,name=selection_priority_rules,json=selectionPriorityRules,enum=dota.DOTASelectionPriorityRules,def=0" json:"selection_priority_rules,omitempty"`
	SeriesPreviousSelectionPriorityTeamId      *uint32                       `protobuf:"varint,98,opt,name=series_previous_selection_priority_team_id,json=seriesPreviousSelectionPriorityTeamId" json:"series_previous_selection_priority_team_id,omitempty"`
	SeriesCurrentSelectionPriorityTeamId       *uint32                       `protobuf:"varint,99,opt,name=series_current_selection_priority_team_id,json=seriesCurrentSelectionPriorityTeamId" json:"series_current_selection_priority_team_id,omitempty"`
	SeriesCurrentPriorityTeamChoice            *DOTASelectionPriorityChoice  `protobuf:"varint,100,opt,name=series_current_priority_team_choice,json=seriesCurrentPriorityTeamChoice,enum=dota.DOTASelectionPriorityChoice,def=0" json:"series_current_priority_team_choice,omitempty"`
	SeriesCurrentNonPriorityTeamChoice         *DOTASelectionPriorityChoice  `protobuf:"varint,101,opt,name=series_current_non_priority_team_choice,json=seriesCurrentNonPriorityTeamChoice,enum=dota.DOTASelectionPriorityChoice,def=0" json:"series_current_non_priority_team_choice,omitempty"`
	SeriesCurrentSelectionPriorityUsedCoinToss *bool                         `protobuf:"varint,102,opt,name=series_current_selection_priority_used_coin_toss,json=seriesCurrentSelectionPriorityUsedCoinToss" json:"series_current_selection_priority_used_coin_toss,omitempty"`
	CurrentPrimaryEvent                        *EEvent                       `protobuf:"varint,103,opt,name=current_primary_event,json=currentPrimaryEvent,enum=dota.EEvent,def=0" json:"current_primary_event,omitempty"`
	EmergencyDisabledHeroIds                   []uint32                      `protobuf:"varint,105,rep,name=emergency_disabled_hero_ids,json=emergencyDisabledHeroIds" json:"emergency_disabled_hero_ids,omitempty"`
	CustomGamePrivateKey                       *uint64                       `protobuf:"fixed64,106,opt,name=custom_game_private_key,json=customGamePrivateKey" json:"custom_game_private_key,omitempty"`
	CustomGamePenalties                        *bool                         `protobuf:"varint,107,opt,name=custom_game_penalties,json=customGamePenalties" json:"custom_game_penalties,omitempty"`
	LanHostPingLocation                        *string                       `protobuf:"bytes,109,opt,name=lan_host_ping_location,json=lanHostPingLocation" json:"lan_host_ping_location,omitempty"`
	LeagueNodeId                               *uint32                       `protobuf:"varint,110,opt,name=league_node_id,json=leagueNodeId" json:"league_node_id,omitempty"`
	MatchDuration                              *uint32                       `protobuf:"varint,111,opt,name=match_duration,json=matchDuration" json:"match_duration,omitempty"`
	CustomGameBrowseable                       *bool                         `protobuf:"varint,112,opt,name=custom_game_browseable,json=customGameBrowseable" json:"custom_game_browseable,omitempty"`
	LeaguePhase                                *uint32                       `protobuf:"varint,113,opt,name=league_phase,json=leaguePhase" json:"league_phase,omitempty"`
	RecordDetailedStats                        *bool                         `protobuf:"varint,114,opt,name=record_detailed_stats,json=recordDetailedStats" json:"record_detailed_stats,omitempty"`
	ExperimentalGameplayEnabled                *bool                         `protobuf:"varint,116,opt,name=experimental_gameplay_enabled,json=experimentalGameplayEnabled" json:"experimental_gameplay_enabled,omitempty"`
	GuildChallenges                            []*CLobbyGuildChallenge       `protobuf:"bytes,117,rep,name=guild_challenges,json=guildChallenges" json:"guild_challenges,omitempty"`
	GuildDetails                               []*CLobbyGuildDetails         `protobuf:"bytes,118,rep,name=guild_details,json=guildDetails" json:"guild_details,omitempty"`
	LobbyEventPoints                           []*CMsgLobbyEventPoints       `protobuf:"bytes,119,rep,name=lobby_event_points,json=lobbyEventPoints" json:"lobby_event_points,omitempty"`
	RequestedHeroIds                           []uint32                      `protobuf:"varint,124,rep,name=requested_hero_ids,json=requestedHeroIds" json:"requested_hero_ids,omitempty"`
	XXX_NoUnkeyedLiteral                       struct{}                      `json:"-"`
	XXX_unrecognized                           []byte                        `json:"-"`
	XXX_sizecache                              int32                         `json:"-"`
}

func (m *CSODOTALobby) Reset()         { *m = CSODOTALobby{} }
func (m *CSODOTALobby) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobby) ProtoMessage()    {}
func (*CSODOTALobby) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{11}
}

func (m *CSODOTALobby) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobby.Unmarshal(m, b)
}
func (m *CSODOTALobby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobby.Marshal(b, m, deterministic)
}
func (m *CSODOTALobby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobby.Merge(m, src)
}
func (m *CSODOTALobby) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobby.Size(m)
}
func (m *CSODOTALobby) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobby.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobby proto.InternalMessageInfo

const Default_CSODOTALobby_ServerId uint64 = 0
const Default_CSODOTALobby_State CSODOTALobby_State = CSODOTALobby_UI
const Default_CSODOTALobby_LobbyType CSODOTALobby_LobbyType = CSODOTALobby_INVALID
const Default_CSODOTALobby_ServerRegion uint32 = 0
const Default_CSODOTALobby_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
const Default_CSODOTALobby_CmPick DOTA_CM_PICK = DOTA_CM_PICK_DOTA_CM_RANDOM
const Default_CSODOTALobby_AllowSpectating bool = true
const Default_CSODOTALobby_BotDifficultyRadiant DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_GameVersion DOTAGameVersion = DOTAGameVersion_GAME_VERSION_CURRENT
const Default_CSODOTALobby_PenaltyLevelRadiant uint32 = 0
const Default_CSODOTALobby_PenaltyLevelDire uint32 = 0
const Default_CSODOTALobby_Allchat bool = false
const Default_CSODOTALobby_DotaTvDelay LobbyDotaTVDelay = LobbyDotaTVDelay_LobbyDotaTV_10
const Default_CSODOTALobby_MatchOutcome EMatchOutcome = EMatchOutcome_k_EMatchOutcome_Unknown
const Default_CSODOTALobby_PartnerType PartnerAccountType = PartnerAccountType_PARTNER_NONE
const Default_CSODOTALobby_Visibility DOTALobbyVisibility = DOTALobbyVisibility_DOTALobbyVisibility_Public
const Default_CSODOTALobby_PauseSetting LobbyDotaPauseSetting = LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited
const Default_CSODOTALobby_BotDifficultyDire DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_SelectionPriorityRules DOTASelectionPriorityRules = DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual
const Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice DOTASelectionPriorityChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
const Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice DOTASelectionPriorityChoice = DOTASelectionPriorityChoice_k_DOTASelectionPriorityChoice_Invalid
const Default_CSODOTALobby_CurrentPrimaryEvent EEvent = EEvent_EVENT_ID_NONE

func (m *CSODOTALobby) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CSODOTALobby) GetV2Members() []*CSODOTALobbyMember {
	if m != nil {
		return m.V2Members
	}
	return nil
}

func (m *CSODOTALobby) GetV2LeftMembers() []*CSODOTALobbyMember {
	if m != nil {
		return m.V2LeftMembers
	}
	return nil
}

func (m *CSODOTALobby) GetAllMembers() []*CSODOTALobbyMember {
	if m != nil {
		return m.AllMembers
	}
	return nil
}

func (m *CSODOTALobby) GetMemberIndices() []uint32 {
	if m != nil {
		return m.MemberIndices
	}
	return nil
}

func (m *CSODOTALobby) GetLeftMemberIndices() []uint32 {
	if m != nil {
		return m.LeftMemberIndices
	}
	return nil
}

func (m *CSODOTALobby) GetFreeMemberIndices() []uint32 {
	if m != nil {
		return m.FreeMemberIndices
	}
	return nil
}

func (m *CSODOTALobby) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTALobby) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return Default_CSODOTALobby_ServerId
}

func (m *CSODOTALobby) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CSODOTALobby) GetPendingInvites() []uint64 {
	if m != nil {
		return m.PendingInvites
	}
	return nil
}

func (m *CSODOTALobby) GetState() CSODOTALobby_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTALobby_State
}

func (m *CSODOTALobby) GetConnect() string {
	if m != nil && m.Connect != nil {
		return *m.Connect
	}
	return ""
}

func (m *CSODOTALobby) GetLobbyType() CSODOTALobby_LobbyType {
	if m != nil && m.LobbyType != nil {
		return *m.LobbyType
	}
	return Default_CSODOTALobby_LobbyType
}

func (m *CSODOTALobby) GetAllowCheats() bool {
	if m != nil && m.AllowCheats != nil {
		return *m.AllowCheats
	}
	return false
}

func (m *CSODOTALobby) GetFillWithBots() bool {
	if m != nil && m.FillWithBots != nil {
		return *m.FillWithBots
	}
	return false
}

func (m *CSODOTALobby) GetIntroMode() bool {
	if m != nil && m.IntroMode != nil {
		return *m.IntroMode
	}
	return false
}

func (m *CSODOTALobby) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CSODOTALobby) GetTeamDetails() []*CLobbyTeamDetails {
	if m != nil {
		return m.TeamDetails
	}
	return nil
}

func (m *CSODOTALobby) GetTutorialLesson() uint32 {
	if m != nil && m.TutorialLesson != nil {
		return *m.TutorialLesson
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentGameId() uint32 {
	if m != nil && m.TournamentGameId != nil {
		return *m.TournamentGameId
	}
	return 0
}

func (m *CSODOTALobby) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return Default_CSODOTALobby_ServerRegion
}

func (m *CSODOTALobby) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CSODOTALobby_GameState
}

func (m *CSODOTALobby) GetNumSpectators() uint32 {
	if m != nil && m.NumSpectators != nil {
		return *m.NumSpectators
	}
	return 0
}

func (m *CSODOTALobby) GetMatchgroup() uint32 {
	if m != nil && m.Matchgroup != nil {
		return *m.Matchgroup
	}
	return 0
}

func (m *CSODOTALobby) GetCmPick() DOTA_CM_PICK {
	if m != nil && m.CmPick != nil {
		return *m.CmPick
	}
	return Default_CSODOTALobby_CmPick
}

func (m *CSODOTALobby) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CSODOTALobby) GetAllowSpectating() bool {
	if m != nil && m.AllowSpectating != nil {
		return *m.AllowSpectating
	}
	return Default_CSODOTALobby_AllowSpectating
}

func (m *CSODOTALobby) GetBotDifficultyRadiant() DOTABotDifficulty {
	if m != nil && m.BotDifficultyRadiant != nil {
		return *m.BotDifficultyRadiant
	}
	return Default_CSODOTALobby_BotDifficultyRadiant
}

func (m *CSODOTALobby) GetGameVersion() DOTAGameVersion {
	if m != nil && m.GameVersion != nil {
		return *m.GameVersion
	}
	return Default_CSODOTALobby_GameVersion
}

func (m *CSODOTALobby) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if m != nil {
		return m.TimedRewardDetails
	}
	return nil
}

func (m *CSODOTALobby) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CSODOTALobby) GetLeagueid() uint32 {
	if m != nil && m.Leagueid != nil {
		return *m.Leagueid
	}
	return 0
}

func (m *CSODOTALobby) GetPenaltyLevelRadiant() uint32 {
	if m != nil && m.PenaltyLevelRadiant != nil {
		return *m.PenaltyLevelRadiant
	}
	return Default_CSODOTALobby_PenaltyLevelRadiant
}

func (m *CSODOTALobby) GetPenaltyLevelDire() uint32 {
	if m != nil && m.PenaltyLevelDire != nil {
		return *m.PenaltyLevelDire
	}
	return Default_CSODOTALobby_PenaltyLevelDire
}

func (m *CSODOTALobby) GetLoadGameId() uint32 {
	if m != nil && m.LoadGameId != nil {
		return *m.LoadGameId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CSODOTALobby) GetRadiantSeriesWins() uint32 {
	if m != nil && m.RadiantSeriesWins != nil {
		return *m.RadiantSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetDireSeriesWins() uint32 {
	if m != nil && m.DireSeriesWins != nil {
		return *m.DireSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetLootGenerated() uint32 {
	if m != nil && m.LootGenerated != nil {
		return *m.LootGenerated
	}
	return 0
}

func (m *CSODOTALobby) GetLootAwarded() uint32 {
	if m != nil && m.LootAwarded != nil {
		return *m.LootAwarded
	}
	return 0
}

func (m *CSODOTALobby) GetAllchat() bool {
	if m != nil && m.Allchat != nil {
		return *m.Allchat
	}
	return Default_CSODOTALobby_Allchat
}

func (m *CSODOTALobby) GetDotaTvDelay() LobbyDotaTVDelay {
	if m != nil && m.DotaTvDelay != nil {
		return *m.DotaTvDelay
	}
	return Default_CSODOTALobby_DotaTvDelay
}

func (m *CSODOTALobby) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CSODOTALobby) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CSODOTALobby) GetCustomDifficulty() uint32 {
	if m != nil && m.CustomDifficulty != nil {
		return *m.CustomDifficulty
	}
	return 0
}

func (m *CSODOTALobby) GetLan() bool {
	if m != nil && m.Lan != nil {
		return *m.Lan
	}
	return false
}

func (m *CSODOTALobby) GetBroadcastChannelInfo() []*CLobbyBroadcastChannelInfo {
	if m != nil {
		return m.BroadcastChannelInfo
	}
	return nil
}

func (m *CSODOTALobby) GetFirstLeaverAccountid() uint32 {
	if m != nil && m.FirstLeaverAccountid != nil {
		return *m.FirstLeaverAccountid
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CSODOTALobby) GetLowPriority() bool {
	if m != nil && m.LowPriority != nil {
		return *m.LowPriority
	}
	return false
}

func (m *CSODOTALobby) GetExtraMessages() []*CSODOTALobby_CExtraMsg {
	if m != nil {
		return m.ExtraMessages
	}
	return nil
}

func (m *CSODOTALobby) GetSaveGame() *CDOTASaveGame {
	if m != nil {
		return m.SaveGame
	}
	return nil
}

func (m *CSODOTALobby) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CSODOTALobby) GetMatchOutcome() EMatchOutcome {
	if m != nil && m.MatchOutcome != nil {
		return *m.MatchOutcome
	}
	return Default_CSODOTALobby_MatchOutcome
}

func (m *CSODOTALobby) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

func (m *CSODOTALobby) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CSODOTALobby) GetCustomMinPlayers() uint32 {
	if m != nil && m.CustomMinPlayers != nil {
		return *m.CustomMinPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetCustomMaxPlayers() uint32 {
	if m != nil && m.CustomMaxPlayers != nil {
		return *m.CustomMaxPlayers
	}
	return 0
}

func (m *CSODOTALobby) GetPartnerType() PartnerAccountType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return Default_CSODOTALobby_PartnerType
}

func (m *CSODOTALobby) GetVisibility() DOTALobbyVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return Default_CSODOTALobby_Visibility
}

func (m *CSODOTALobby) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameAutoCreatedLobby() bool {
	if m != nil && m.CustomGameAutoCreatedLobby != nil {
		return *m.CustomGameAutoCreatedLobby
	}
	return false
}

func (m *CSODOTALobby) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

func (m *CSODOTALobby) GetPreviousSeriesMatches() []uint64 {
	if m != nil {
		return m.PreviousSeriesMatches
	}
	return nil
}

func (m *CSODOTALobby) GetPreviousMatchOverride() uint64 {
	if m != nil && m.PreviousMatchOverride != nil {
		return *m.PreviousMatchOverride
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameUsesAccountRecords() bool {
	if m != nil && m.CustomGameUsesAccountRecords != nil {
		return *m.CustomGameUsesAccountRecords
	}
	return false
}

func (m *CSODOTALobby) GetGameStartTime() uint32 {
	if m != nil && m.GameStartTime != nil {
		return *m.GameStartTime
	}
	return 0
}

func (m *CSODOTALobby) GetPauseSetting() LobbyDotaPauseSetting {
	if m != nil && m.PauseSetting != nil {
		return *m.PauseSetting
	}
	return Default_CSODOTALobby_PauseSetting
}

func (m *CSODOTALobby) GetLobbyMvpAccountId() uint32 {
	if m != nil && m.LobbyMvpAccountId != nil {
		return *m.LobbyMvpAccountId
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneyDivisionId() uint32 {
	if m != nil && m.WeekendTourneyDivisionId != nil {
		return *m.WeekendTourneyDivisionId
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneySkillLevel() uint32 {
	if m != nil && m.WeekendTourneySkillLevel != nil {
		return *m.WeekendTourneySkillLevel
	}
	return 0
}

func (m *CSODOTALobby) GetWeekendTourneyBracketRound() uint32 {
	if m != nil && m.WeekendTourneyBracketRound != nil {
		return *m.WeekendTourneyBracketRound
	}
	return 0
}

func (m *CSODOTALobby) GetBotDifficultyDire() DOTABotDifficulty {
	if m != nil && m.BotDifficultyDire != nil {
		return *m.BotDifficultyDire
	}
	return Default_CSODOTALobby_BotDifficultyDire
}

func (m *CSODOTALobby) GetBotRadiant() uint64 {
	if m != nil && m.BotRadiant != nil {
		return *m.BotRadiant
	}
	return 0
}

func (m *CSODOTALobby) GetBotDire() uint64 {
	if m != nil && m.BotDire != nil {
		return *m.BotDire
	}
	return 0
}

func (m *CSODOTALobby) GetEventProgressionEnabled() []EEvent {
	if m != nil {
		return m.EventProgressionEnabled
	}
	return nil
}

func (m *CSODOTALobby) GetSelectionPriorityRules() DOTASelectionPriorityRules {
	if m != nil && m.SelectionPriorityRules != nil {
		return *m.SelectionPriorityRules
	}
	return Default_CSODOTALobby_SelectionPriorityRules
}

func (m *CSODOTALobby) GetSeriesPreviousSelectionPriorityTeamId() uint32 {
	if m != nil && m.SeriesPreviousSelectionPriorityTeamId != nil {
		return *m.SeriesPreviousSelectionPriorityTeamId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesCurrentSelectionPriorityTeamId() uint32 {
	if m != nil && m.SeriesCurrentSelectionPriorityTeamId != nil {
		return *m.SeriesCurrentSelectionPriorityTeamId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesCurrentPriorityTeamChoice() DOTASelectionPriorityChoice {
	if m != nil && m.SeriesCurrentPriorityTeamChoice != nil {
		return *m.SeriesCurrentPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentPriorityTeamChoice
}

func (m *CSODOTALobby) GetSeriesCurrentNonPriorityTeamChoice() DOTASelectionPriorityChoice {
	if m != nil && m.SeriesCurrentNonPriorityTeamChoice != nil {
		return *m.SeriesCurrentNonPriorityTeamChoice
	}
	return Default_CSODOTALobby_SeriesCurrentNonPriorityTeamChoice
}

func (m *CSODOTALobby) GetSeriesCurrentSelectionPriorityUsedCoinToss() bool {
	if m != nil && m.SeriesCurrentSelectionPriorityUsedCoinToss != nil {
		return *m.SeriesCurrentSelectionPriorityUsedCoinToss
	}
	return false
}

func (m *CSODOTALobby) GetCurrentPrimaryEvent() EEvent {
	if m != nil && m.CurrentPrimaryEvent != nil {
		return *m.CurrentPrimaryEvent
	}
	return Default_CSODOTALobby_CurrentPrimaryEvent
}

func (m *CSODOTALobby) GetEmergencyDisabledHeroIds() []uint32 {
	if m != nil {
		return m.EmergencyDisabledHeroIds
	}
	return nil
}

func (m *CSODOTALobby) GetCustomGamePrivateKey() uint64 {
	if m != nil && m.CustomGamePrivateKey != nil {
		return *m.CustomGamePrivateKey
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGamePenalties() bool {
	if m != nil && m.CustomGamePenalties != nil {
		return *m.CustomGamePenalties
	}
	return false
}

func (m *CSODOTALobby) GetLanHostPingLocation() string {
	if m != nil && m.LanHostPingLocation != nil {
		return *m.LanHostPingLocation
	}
	return ""
}

func (m *CSODOTALobby) GetLeagueNodeId() uint32 {
	if m != nil && m.LeagueNodeId != nil {
		return *m.LeagueNodeId
	}
	return 0
}

func (m *CSODOTALobby) GetMatchDuration() uint32 {
	if m != nil && m.MatchDuration != nil {
		return *m.MatchDuration
	}
	return 0
}

func (m *CSODOTALobby) GetCustomGameBrowseable() bool {
	if m != nil && m.CustomGameBrowseable != nil {
		return *m.CustomGameBrowseable
	}
	return false
}

func (m *CSODOTALobby) GetLeaguePhase() uint32 {
	if m != nil && m.LeaguePhase != nil {
		return *m.LeaguePhase
	}
	return 0
}

func (m *CSODOTALobby) GetRecordDetailedStats() bool {
	if m != nil && m.RecordDetailedStats != nil {
		return *m.RecordDetailedStats
	}
	return false
}

func (m *CSODOTALobby) GetExperimentalGameplayEnabled() bool {
	if m != nil && m.ExperimentalGameplayEnabled != nil {
		return *m.ExperimentalGameplayEnabled
	}
	return false
}

func (m *CSODOTALobby) GetGuildChallenges() []*CLobbyGuildChallenge {
	if m != nil {
		return m.GuildChallenges
	}
	return nil
}

func (m *CSODOTALobby) GetGuildDetails() []*CLobbyGuildDetails {
	if m != nil {
		return m.GuildDetails
	}
	return nil
}

func (m *CSODOTALobby) GetLobbyEventPoints() []*CMsgLobbyEventPoints {
	if m != nil {
		return m.LobbyEventPoints
	}
	return nil
}

func (m *CSODOTALobby) GetRequestedHeroIds() []uint32 {
	if m != nil {
		return m.RequestedHeroIds
	}
	return nil
}

type CSODOTALobby_CExtraMsg struct {
	Id                   *uint32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents             []byte   `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSODOTALobby_CExtraMsg) Reset()         { *m = CSODOTALobby_CExtraMsg{} }
func (m *CSODOTALobby_CExtraMsg) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobby_CExtraMsg) ProtoMessage()    {}
func (*CSODOTALobby_CExtraMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{11, 0}
}

func (m *CSODOTALobby_CExtraMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CSODOTALobby_CExtraMsg.Unmarshal(m, b)
}
func (m *CSODOTALobby_CExtraMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CSODOTALobby_CExtraMsg.Marshal(b, m, deterministic)
}
func (m *CSODOTALobby_CExtraMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSODOTALobby_CExtraMsg.Merge(m, src)
}
func (m *CSODOTALobby_CExtraMsg) XXX_Size() int {
	return xxx_messageInfo_CSODOTALobby_CExtraMsg.Size(m)
}
func (m *CSODOTALobby_CExtraMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CSODOTALobby_CExtraMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CSODOTALobby_CExtraMsg proto.InternalMessageInfo

func (m *CSODOTALobby_CExtraMsg) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CSODOTALobby_CExtraMsg) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type CMsgLobbyPlaytestDetails struct {
	Json                 *string  `protobuf:"bytes,1,opt,name=json" json:"json,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyPlaytestDetails) Reset()         { *m = CMsgLobbyPlaytestDetails{} }
func (m *CMsgLobbyPlaytestDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyPlaytestDetails) ProtoMessage()    {}
func (*CMsgLobbyPlaytestDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{12}
}

func (m *CMsgLobbyPlaytestDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyPlaytestDetails.Unmarshal(m, b)
}
func (m *CMsgLobbyPlaytestDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyPlaytestDetails.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyPlaytestDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyPlaytestDetails.Merge(m, src)
}
func (m *CMsgLobbyPlaytestDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyPlaytestDetails.Size(m)
}
func (m *CMsgLobbyPlaytestDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyPlaytestDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyPlaytestDetails proto.InternalMessageInfo

func (m *CMsgLobbyPlaytestDetails) GetJson() string {
	if m != nil && m.Json != nil {
		return *m.Json
	}
	return ""
}

type CMsgReadyCheckStatus struct {
	StartTimestamp       *uint32                             `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	FinishTimestamp      *uint32                             `protobuf:"varint,2,opt,name=finish_timestamp,json=finishTimestamp" json:"finish_timestamp,omitempty"`
	InitiatorAccountId   *uint32                             `protobuf:"varint,3,opt,name=initiator_account_id,json=initiatorAccountId" json:"initiator_account_id,omitempty"`
	ReadyMembers         []*CMsgReadyCheckStatus_ReadyMember `protobuf:"bytes,4,rep,name=ready_members,json=readyMembers" json:"ready_members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CMsgReadyCheckStatus) Reset()         { *m = CMsgReadyCheckStatus{} }
func (m *CMsgReadyCheckStatus) String() string { return proto.CompactTextString(m) }
func (*CMsgReadyCheckStatus) ProtoMessage()    {}
func (*CMsgReadyCheckStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{13}
}

func (m *CMsgReadyCheckStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgReadyCheckStatus.Unmarshal(m, b)
}
func (m *CMsgReadyCheckStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgReadyCheckStatus.Marshal(b, m, deterministic)
}
func (m *CMsgReadyCheckStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgReadyCheckStatus.Merge(m, src)
}
func (m *CMsgReadyCheckStatus) XXX_Size() int {
	return xxx_messageInfo_CMsgReadyCheckStatus.Size(m)
}
func (m *CMsgReadyCheckStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgReadyCheckStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgReadyCheckStatus proto.InternalMessageInfo

func (m *CMsgReadyCheckStatus) GetStartTimestamp() uint32 {
	if m != nil && m.StartTimestamp != nil {
		return *m.StartTimestamp
	}
	return 0
}

func (m *CMsgReadyCheckStatus) GetFinishTimestamp() uint32 {
	if m != nil && m.FinishTimestamp != nil {
		return *m.FinishTimestamp
	}
	return 0
}

func (m *CMsgReadyCheckStatus) GetInitiatorAccountId() uint32 {
	if m != nil && m.InitiatorAccountId != nil {
		return *m.InitiatorAccountId
	}
	return 0
}

func (m *CMsgReadyCheckStatus) GetReadyMembers() []*CMsgReadyCheckStatus_ReadyMember {
	if m != nil {
		return m.ReadyMembers
	}
	return nil
}

type CMsgReadyCheckStatus_ReadyMember struct {
	AccountId            *uint32            `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	ReadyStatus          *EReadyCheckStatus `protobuf:"varint,2,opt,name=ready_status,json=readyStatus,enum=dota.EReadyCheckStatus,def=0" json:"ready_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CMsgReadyCheckStatus_ReadyMember) Reset()         { *m = CMsgReadyCheckStatus_ReadyMember{} }
func (m *CMsgReadyCheckStatus_ReadyMember) String() string { return proto.CompactTextString(m) }
func (*CMsgReadyCheckStatus_ReadyMember) ProtoMessage()    {}
func (*CMsgReadyCheckStatus_ReadyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{13, 0}
}

func (m *CMsgReadyCheckStatus_ReadyMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.Unmarshal(m, b)
}
func (m *CMsgReadyCheckStatus_ReadyMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.Marshal(b, m, deterministic)
}
func (m *CMsgReadyCheckStatus_ReadyMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.Merge(m, src)
}
func (m *CMsgReadyCheckStatus_ReadyMember) XXX_Size() int {
	return xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.Size(m)
}
func (m *CMsgReadyCheckStatus_ReadyMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgReadyCheckStatus_ReadyMember proto.InternalMessageInfo

const Default_CMsgReadyCheckStatus_ReadyMember_ReadyStatus EReadyCheckStatus = EReadyCheckStatus_k_EReadyCheckStatus_Unknown

func (m *CMsgReadyCheckStatus_ReadyMember) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgReadyCheckStatus_ReadyMember) GetReadyStatus() EReadyCheckStatus {
	if m != nil && m.ReadyStatus != nil {
		return *m.ReadyStatus
	}
	return Default_CMsgReadyCheckStatus_ReadyMember_ReadyStatus
}

type CMsgPartyReadyCheckRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgPartyReadyCheckRequest) Reset()         { *m = CMsgPartyReadyCheckRequest{} }
func (m *CMsgPartyReadyCheckRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgPartyReadyCheckRequest) ProtoMessage()    {}
func (*CMsgPartyReadyCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{14}
}

func (m *CMsgPartyReadyCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgPartyReadyCheckRequest.Unmarshal(m, b)
}
func (m *CMsgPartyReadyCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgPartyReadyCheckRequest.Marshal(b, m, deterministic)
}
func (m *CMsgPartyReadyCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgPartyReadyCheckRequest.Merge(m, src)
}
func (m *CMsgPartyReadyCheckRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgPartyReadyCheckRequest.Size(m)
}
func (m *CMsgPartyReadyCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgPartyReadyCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgPartyReadyCheckRequest proto.InternalMessageInfo

type CMsgPartyReadyCheckResponse struct {
	Result               *EReadyCheckRequestResult `protobuf:"varint,1,opt,name=result,enum=dota.EReadyCheckRequestResult,def=0" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CMsgPartyReadyCheckResponse) Reset()         { *m = CMsgPartyReadyCheckResponse{} }
func (m *CMsgPartyReadyCheckResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgPartyReadyCheckResponse) ProtoMessage()    {}
func (*CMsgPartyReadyCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{15}
}

func (m *CMsgPartyReadyCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgPartyReadyCheckResponse.Unmarshal(m, b)
}
func (m *CMsgPartyReadyCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgPartyReadyCheckResponse.Marshal(b, m, deterministic)
}
func (m *CMsgPartyReadyCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgPartyReadyCheckResponse.Merge(m, src)
}
func (m *CMsgPartyReadyCheckResponse) XXX_Size() int {
	return xxx_messageInfo_CMsgPartyReadyCheckResponse.Size(m)
}
func (m *CMsgPartyReadyCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgPartyReadyCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgPartyReadyCheckResponse proto.InternalMessageInfo

const Default_CMsgPartyReadyCheckResponse_Result EReadyCheckRequestResult = EReadyCheckRequestResult_k_EReadyCheckRequestResult_Success

func (m *CMsgPartyReadyCheckResponse) GetResult() EReadyCheckRequestResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgPartyReadyCheckResponse_Result
}

type CMsgPartyReadyCheckAcknowledge struct {
	ReadyStatus          *EReadyCheckStatus `protobuf:"varint,1,opt,name=ready_status,json=readyStatus,enum=dota.EReadyCheckStatus,def=0" json:"ready_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CMsgPartyReadyCheckAcknowledge) Reset()         { *m = CMsgPartyReadyCheckAcknowledge{} }
func (m *CMsgPartyReadyCheckAcknowledge) String() string { return proto.CompactTextString(m) }
func (*CMsgPartyReadyCheckAcknowledge) ProtoMessage()    {}
func (*CMsgPartyReadyCheckAcknowledge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{16}
}

func (m *CMsgPartyReadyCheckAcknowledge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.Unmarshal(m, b)
}
func (m *CMsgPartyReadyCheckAcknowledge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.Marshal(b, m, deterministic)
}
func (m *CMsgPartyReadyCheckAcknowledge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.Merge(m, src)
}
func (m *CMsgPartyReadyCheckAcknowledge) XXX_Size() int {
	return xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.Size(m)
}
func (m *CMsgPartyReadyCheckAcknowledge) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgPartyReadyCheckAcknowledge.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgPartyReadyCheckAcknowledge proto.InternalMessageInfo

const Default_CMsgPartyReadyCheckAcknowledge_ReadyStatus EReadyCheckStatus = EReadyCheckStatus_k_EReadyCheckStatus_Unknown

func (m *CMsgPartyReadyCheckAcknowledge) GetReadyStatus() EReadyCheckStatus {
	if m != nil && m.ReadyStatus != nil {
		return *m.ReadyStatus
	}
	return Default_CMsgPartyReadyCheckAcknowledge_ReadyStatus
}

type CMsgLobbyEventGameDetails struct {
	KvData               []byte   `protobuf:"bytes,1,opt,name=kv_data,json=kvData" json:"kv_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgLobbyEventGameDetails) Reset()         { *m = CMsgLobbyEventGameDetails{} }
func (m *CMsgLobbyEventGameDetails) String() string { return proto.CompactTextString(m) }
func (*CMsgLobbyEventGameDetails) ProtoMessage()    {}
func (*CMsgLobbyEventGameDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{17}
}

func (m *CMsgLobbyEventGameDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgLobbyEventGameDetails.Unmarshal(m, b)
}
func (m *CMsgLobbyEventGameDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgLobbyEventGameDetails.Marshal(b, m, deterministic)
}
func (m *CMsgLobbyEventGameDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgLobbyEventGameDetails.Merge(m, src)
}
func (m *CMsgLobbyEventGameDetails) XXX_Size() int {
	return xxx_messageInfo_CMsgLobbyEventGameDetails.Size(m)
}
func (m *CMsgLobbyEventGameDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgLobbyEventGameDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgLobbyEventGameDetails proto.InternalMessageInfo

func (m *CMsgLobbyEventGameDetails) GetKvData() []byte {
	if m != nil {
		return m.KvData
	}
	return nil
}

type CMsgMatchMatchmakingStats struct {
	AverageQueueTime      *uint32                      `protobuf:"varint,1,opt,name=average_queue_time,json=averageQueueTime" json:"average_queue_time,omitempty"`
	MaximumQueueTime      *uint32                      `protobuf:"varint,2,opt,name=maximum_queue_time,json=maximumQueueTime" json:"maximum_queue_time,omitempty"`
	BehaviorScoreVariance *EMatchBehaviorScoreVariance `protobuf:"varint,3,opt,name=behavior_score_variance,json=behaviorScoreVariance,enum=dota.EMatchBehaviorScoreVariance,def=0" json:"behavior_score_variance,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-"`
	XXX_unrecognized      []byte                       `json:"-"`
	XXX_sizecache         int32                        `json:"-"`
}

func (m *CMsgMatchMatchmakingStats) Reset()         { *m = CMsgMatchMatchmakingStats{} }
func (m *CMsgMatchMatchmakingStats) String() string { return proto.CompactTextString(m) }
func (*CMsgMatchMatchmakingStats) ProtoMessage()    {}
func (*CMsgMatchMatchmakingStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{18}
}

func (m *CMsgMatchMatchmakingStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgMatchMatchmakingStats.Unmarshal(m, b)
}
func (m *CMsgMatchMatchmakingStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgMatchMatchmakingStats.Marshal(b, m, deterministic)
}
func (m *CMsgMatchMatchmakingStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgMatchMatchmakingStats.Merge(m, src)
}
func (m *CMsgMatchMatchmakingStats) XXX_Size() int {
	return xxx_messageInfo_CMsgMatchMatchmakingStats.Size(m)
}
func (m *CMsgMatchMatchmakingStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgMatchMatchmakingStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgMatchMatchmakingStats proto.InternalMessageInfo

const Default_CMsgMatchMatchmakingStats_BehaviorScoreVariance EMatchBehaviorScoreVariance = EMatchBehaviorScoreVariance_k_EMatchBehaviorScoreVariance_Invalid

func (m *CMsgMatchMatchmakingStats) GetAverageQueueTime() uint32 {
	if m != nil && m.AverageQueueTime != nil {
		return *m.AverageQueueTime
	}
	return 0
}

func (m *CMsgMatchMatchmakingStats) GetMaximumQueueTime() uint32 {
	if m != nil && m.MaximumQueueTime != nil {
		return *m.MaximumQueueTime
	}
	return 0
}

func (m *CMsgMatchMatchmakingStats) GetBehaviorScoreVariance() EMatchBehaviorScoreVariance {
	if m != nil && m.BehaviorScoreVariance != nil {
		return *m.BehaviorScoreVariance
	}
	return Default_CMsgMatchMatchmakingStats_BehaviorScoreVariance
}

type CMvpData struct {
	Mvps                 []*CMvpData_MvpDatum `protobuf:"bytes,1,rep,name=mvps" json:"mvps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CMvpData) Reset()         { *m = CMvpData{} }
func (m *CMvpData) String() string { return proto.CompactTextString(m) }
func (*CMvpData) ProtoMessage()    {}
func (*CMvpData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{19}
}

func (m *CMvpData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMvpData.Unmarshal(m, b)
}
func (m *CMvpData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMvpData.Marshal(b, m, deterministic)
}
func (m *CMvpData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMvpData.Merge(m, src)
}
func (m *CMvpData) XXX_Size() int {
	return xxx_messageInfo_CMvpData.Size(m)
}
func (m *CMvpData) XXX_DiscardUnknown() {
	xxx_messageInfo_CMvpData.DiscardUnknown(m)
}

var xxx_messageInfo_CMvpData proto.InternalMessageInfo

func (m *CMvpData) GetMvps() []*CMvpData_MvpDatum {
	if m != nil {
		return m.Mvps
	}
	return nil
}

type CMvpData_MvpDatum struct {
	Slot                 *uint32                          `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
	Accolades            []*CMvpData_MvpDatum_MvpAccolade `protobuf:"bytes,2,rep,name=accolades" json:"accolades,omitempty"`
	AccountId            *uint32                          `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CMvpData_MvpDatum) Reset()         { *m = CMvpData_MvpDatum{} }
func (m *CMvpData_MvpDatum) String() string { return proto.CompactTextString(m) }
func (*CMvpData_MvpDatum) ProtoMessage()    {}
func (*CMvpData_MvpDatum) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{19, 0}
}

func (m *CMvpData_MvpDatum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMvpData_MvpDatum.Unmarshal(m, b)
}
func (m *CMvpData_MvpDatum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMvpData_MvpDatum.Marshal(b, m, deterministic)
}
func (m *CMvpData_MvpDatum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMvpData_MvpDatum.Merge(m, src)
}
func (m *CMvpData_MvpDatum) XXX_Size() int {
	return xxx_messageInfo_CMvpData_MvpDatum.Size(m)
}
func (m *CMvpData_MvpDatum) XXX_DiscardUnknown() {
	xxx_messageInfo_CMvpData_MvpDatum.DiscardUnknown(m)
}

var xxx_messageInfo_CMvpData_MvpDatum proto.InternalMessageInfo

func (m *CMvpData_MvpDatum) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CMvpData_MvpDatum) GetAccolades() []*CMvpData_MvpDatum_MvpAccolade {
	if m != nil {
		return m.Accolades
	}
	return nil
}

func (m *CMvpData_MvpDatum) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CMvpData_MvpDatum_MvpAccolade struct {
	Type                 *CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType `protobuf:"varint,1,opt,name=type,enum=dota.CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType,def=1" json:"type,omitempty"`
	DetailValue          *float32                                       `protobuf:"fixed32,2,opt,name=detail_value,json=detailValue" json:"detail_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *CMvpData_MvpDatum_MvpAccolade) Reset()         { *m = CMvpData_MvpDatum_MvpAccolade{} }
func (m *CMvpData_MvpDatum_MvpAccolade) String() string { return proto.CompactTextString(m) }
func (*CMvpData_MvpDatum_MvpAccolade) ProtoMessage()    {}
func (*CMvpData_MvpDatum_MvpAccolade) Descriptor() ([]byte, []int) {
	return fileDescriptor_3efdba6b0593baab, []int{19, 0, 0}
}

func (m *CMvpData_MvpDatum_MvpAccolade) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMvpData_MvpDatum_MvpAccolade.Unmarshal(m, b)
}
func (m *CMvpData_MvpDatum_MvpAccolade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMvpData_MvpDatum_MvpAccolade.Marshal(b, m, deterministic)
}
func (m *CMvpData_MvpDatum_MvpAccolade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMvpData_MvpDatum_MvpAccolade.Merge(m, src)
}
func (m *CMvpData_MvpDatum_MvpAccolade) XXX_Size() int {
	return xxx_messageInfo_CMvpData_MvpDatum_MvpAccolade.Size(m)
}
func (m *CMvpData_MvpDatum_MvpAccolade) XXX_DiscardUnknown() {
	xxx_messageInfo_CMvpData_MvpDatum_MvpAccolade.DiscardUnknown(m)
}

var xxx_messageInfo_CMvpData_MvpDatum_MvpAccolade proto.InternalMessageInfo

const Default_CMvpData_MvpDatum_MvpAccolade_Type CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType = CMvpData_MvpDatum_MvpAccolade_kills

func (m *CMvpData_MvpDatum_MvpAccolade) GetType() CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_CMvpData_MvpDatum_MvpAccolade_Type
}

func (m *CMvpData_MvpDatum_MvpAccolade) GetDetailValue() float32 {
	if m != nil && m.DetailValue != nil {
		return *m.DetailValue
	}
	return 0
}

func init() {
	proto.RegisterEnum("dota.ELaneSelection", ELaneSelection_name, ELaneSelection_value)
	proto.RegisterEnum("dota.ELaneSelectionFlags", ELaneSelectionFlags_name, ELaneSelectionFlags_value)
	proto.RegisterEnum("dota.EPartyMatchmakingFlags", EPartyMatchmakingFlags_name, EPartyMatchmakingFlags_value)
	proto.RegisterEnum("dota.EHighPriorityMMState", EHighPriorityMMState_name, EHighPriorityMMState_value)
	proto.RegisterEnum("dota.LobbyDotaTVDelay", LobbyDotaTVDelay_name, LobbyDotaTVDelay_value)
	proto.RegisterEnum("dota.LobbyDotaPauseSetting", LobbyDotaPauseSetting_name, LobbyDotaPauseSetting_value)
	proto.RegisterEnum("dota.EReadyCheckStatus", EReadyCheckStatus_name, EReadyCheckStatus_value)
	proto.RegisterEnum("dota.EReadyCheckRequestResult", EReadyCheckRequestResult_name, EReadyCheckRequestResult_value)
	proto.RegisterEnum("dota.EMatchBehaviorScoreVariance", EMatchBehaviorScoreVariance_name, EMatchBehaviorScoreVariance_value)
	proto.RegisterEnum("dota.CSODOTAParty_State", CSODOTAParty_State_name, CSODOTAParty_State_value)
	proto.RegisterEnum("dota.CSODOTALobby_State", CSODOTALobby_State_name, CSODOTALobby_State_value)
	proto.RegisterEnum("dota.CSODOTALobby_LobbyType", CSODOTALobby_LobbyType_name, CSODOTALobby_LobbyType_value)
	proto.RegisterEnum("dota.CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType", CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_name, CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_value)
	proto.RegisterType((*CSODOTAPartyMember)(nil), "dota.CSODOTAPartyMember")
	proto.RegisterType((*CSODOTAParty)(nil), "dota.CSODOTAParty")
	proto.RegisterType((*CSODOTAPartyInvite)(nil), "dota.CSODOTAPartyInvite")
	proto.RegisterType((*CSODOTAPartyInvite_PartyMember)(nil), "dota.CSODOTAPartyInvite.PartyMember")
	proto.RegisterType((*CSODOTALobbyInvite)(nil), "dota.CSODOTALobbyInvite")
	proto.RegisterType((*CSODOTALobbyInvite_LobbyMember)(nil), "dota.CSODOTALobbyInvite.LobbyMember")
	proto.RegisterType((*CMsgLeaverState)(nil), "dota.CMsgLeaverState")
	proto.RegisterType((*CSODOTALobbyMember)(nil), "dota.CSODOTALobbyMember")
	proto.RegisterType((*CLobbyTeamDetails)(nil), "dota.CLobbyTeamDetails")
	proto.RegisterType((*CLobbyGuildDetails)(nil), "dota.CLobbyGuildDetails")
	proto.RegisterType((*CLobbyTimedRewardDetails)(nil), "dota.CLobbyTimedRewardDetails")
	proto.RegisterType((*CLobbyBroadcastChannelInfo)(nil), "dota.CLobbyBroadcastChannelInfo")
	proto.RegisterType((*CLobbyGuildChallenge)(nil), "dota.CLobbyGuildChallenge")
	proto.RegisterType((*CSODOTALobby)(nil), "dota.CSODOTALobby")
	proto.RegisterType((*CSODOTALobby_CExtraMsg)(nil), "dota.CSODOTALobby.CExtraMsg")
	proto.RegisterType((*CMsgLobbyPlaytestDetails)(nil), "dota.CMsgLobbyPlaytestDetails")
	proto.RegisterType((*CMsgReadyCheckStatus)(nil), "dota.CMsgReadyCheckStatus")
	proto.RegisterType((*CMsgReadyCheckStatus_ReadyMember)(nil), "dota.CMsgReadyCheckStatus.ReadyMember")
	proto.RegisterType((*CMsgPartyReadyCheckRequest)(nil), "dota.CMsgPartyReadyCheckRequest")
	proto.RegisterType((*CMsgPartyReadyCheckResponse)(nil), "dota.CMsgPartyReadyCheckResponse")
	proto.RegisterType((*CMsgPartyReadyCheckAcknowledge)(nil), "dota.CMsgPartyReadyCheckAcknowledge")
	proto.RegisterType((*CMsgLobbyEventGameDetails)(nil), "dota.CMsgLobbyEventGameDetails")
	proto.RegisterType((*CMsgMatchMatchmakingStats)(nil), "dota.CMsgMatchMatchmakingStats")
	proto.RegisterType((*CMvpData)(nil), "dota.CMvpData")
	proto.RegisterType((*CMvpData_MvpDatum)(nil), "dota.CMvpData.MvpDatum")
	proto.RegisterType((*CMvpData_MvpDatum_MvpAccolade)(nil), "dota.CMvpData.MvpDatum.MvpAccolade")
}

func init() {
	proto.RegisterFile("dota_gcmessages_common_match_management.proto", fileDescriptor_3efdba6b0593baab)
}

var fileDescriptor_3efdba6b0593baab = []byte{
	// 10958 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0xbd, 0x79, 0x7c, 0x1c, 0x47,
	0x76, 0x1f, 0xae, 0x01, 0x0f, 0x00, 0x85, 0x83, 0x8d, 0x26, 0x45, 0x0e, 0x49, 0x49, 0xa4, 0x20,
	0x51, 0xa2, 0x28, 0x89, 0xa2, 0xa8, 0x6b, 0x05, 0xad, 0xb4, 0x3b, 0x98, 0x19, 0x00, 0xb3, 0xc4,
	0x00, 0xa3, 0x9e, 0x01, 0xb1, 0xf2, 0xd5, 0x2e, 0x74, 0x17, 0x66, 0x6a, 0xa7, 0xbb, 0xaa, 0xb7,
	0xaa, 0x7b, 0x40, 0xc8, 0xfe, 0xfd, 0xbc, 0xbe, 0xed, 0xf8, 0x76, 0x12, 0xe7, 0xf8, 0x7c, 0x9c,
	0xdb, 0x8e, 0xe3, 0xc4, 0x89, 0xed, 0xdc, 0xce, 0xe9, 0x38, 0x77, 0x9c, 0xc4, 0xce, 0x7d, 0x38,
	0x97, 0x9d, 0xd3, 0x39, 0x9d, 0xc3, 0x49, 0x9c, 0xc3, 0xf9, 0xd4, 0xab, 0xea, 0x9e, 0x9e, 0x41,
	0x37, 0xa9, 0x75, 0xfc, 0x47, 0xf4, 0x8f, 0xd0, 0xef, 0x7d, 0x5f, 0x55, 0x75, 0xd5, 0xab, 0x57,
	0xef, 0xa8, 0x1e, 0xa2, 0x97, 0x7d, 0x1e, 0x63, 0xb7, 0xef, 0x85, 0x44, 0x4a, 0xdc, 0x27, 0xd2,
	0xf5, 0x78, 0x18, 0x72, 0xe6, 0x86, 0x38, 0xf6, 0x06, 0x6e, 0x88, 0x19, 0xee, 0x93, 0x90, 0xb0,
	0xf8, 0x76, 0x24, 0x78, 0xcc, 0xed, 0xd3, 0x0a, 0x7e, 0xe5, 0xbc, 0x8c, 0x09, 0x0e, 0x53, 0x11,
	0xcd, 0xba, 0x72, 0xb1, 0xef, 0x49, 0x7f, 0x98, 0x6b, 0xca, 0xd0, 0x2f, 0x41, 0x0f, 0x72, 0x80,
	0x05, 0xf1, 0x5d, 0xc2, 0x92, 0x30, 0x65, 0x3c, 0x51, 0xdc, 0xb5, 0xe6, 0xae, 0xfe, 0xc8, 0x19,
	0x64, 0xd7, 0xbb, 0xbb, 0x8d, 0xdd, 0x5e, 0xad, 0x83, 0x45, 0x7c, 0xdc, 0x26, 0xe1, 0x01, 0x11,
	0x76, 0x0b, 0x2d, 0x46, 0x58, 0xc4, 0x8c, 0x08, 0x37, 0x3e, 0x8e, 0x48, 0xb5, 0x72, 0xbd, 0x72,
	0x73, 0xf9, 0x6e, 0xf5, 0xb6, 0x6a, 0xeb, 0x76, 0x47, 0x73, 0x6a, 0x9e, 0xc7, 0x13, 0x16, 0xf7,
	0x8e, 0x23, 0xb2, 0xb6, 0xd8, 0xa9, 0x39, 0xbd, 0x9d, 0xa6, 0xe3, 0xee, 0xec, 0xee, 0x34, 0x9d,
	0x05, 0x23, 0xab, 0x58, 0xf6, 0x65, 0x34, 0x47, 0x55, 0xa7, 0xd8, 0x1b, 0x54, 0x67, 0xae, 0x57,
	0x6e, 0xce, 0x39, 0xb3, 0x54, 0xd6, 0xd5, 0xa3, 0x7d, 0x1b, 0xad, 0x08, 0xd2, 0xa7, 0x9c, 0xb9,
	0x11, 0x65, 0x7d, 0xd7, 0xe3, 0x3e, 0x91, 0xd5, 0xd3, 0xd7, 0x4f, 0xdd, 0x5c, 0x5a, 0x9f, 0xb1,
	0x2a, 0xce, 0x39, 0xcd, 0xec, 0x50, 0xd6, 0xaf, 0x2b, 0xd6, 0x34, 0x3e, 0xa6, 0x21, 0x91, 0xd5,
	0x33, 0x45, 0xf8, 0x9e, 0x62, 0xd9, 0xef, 0xa0, 0x2b, 0x79, 0xfc, 0x21, 0xa6, 0x01, 0xf1, 0xdd,
	0x03, 0x1a, 0x87, 0x58, 0x0e, 0xab, 0x67, 0xaf, 0x57, 0x6e, 0x2e, 0x39, 0x97, 0xc6, 0x42, 0x1b,
	0xc0, 0x5f, 0xd7, 0x6c, 0xfb, 0x25, 0x64, 0x53, 0xe9, 0x46, 0x41, 0x22, 0x5d, 0x99, 0x1c, 0x48,
	0x4f, 0xd0, 0x03, 0x22, 0xaa, 0x08, 0xde, 0xc0, 0xa2, 0xb2, 0x13, 0x24, 0xb2, 0x9b, 0xd1, 0xed,
	0xdb, 0xe8, 0x7c, 0xcc, 0x13, 0xc1, 0xc8, 0xb1, 0x2b, 0x87, 0x34, 0x08, 0xdc, 0x80, 0x8c, 0x48,
	0x50, 0x9d, 0x85, 0x3e, 0x56, 0x0c, 0xab, 0xab, 0x38, 0xdb, 0x8a, 0x61, 0x3f, 0x83, 0x96, 0x52,
	0xfc, 0x41, 0x72, 0x4c, 0x59, 0x75, 0x0e, 0x90, 0x8b, 0x86, 0xb8, 0xae, 0x68, 0xf6, 0x5d, 0xf4,
	0x78, 0x0a, 0x8a, 0x04, 0x19, 0x11, 0x16, 0xbb, 0x09, 0x8b, 0x69, 0x50, 0x9d, 0x07, 0x70, 0xda,
	0x63, 0x47, 0xf3, 0xf6, 0x14, 0xcb, 0x5e, 0x45, 0x4b, 0x61, 0xe8, 0xfa, 0x38, 0xc6, 0xee, 0x08,
	0x07, 0xd4, 0xaf, 0x2e, 0xc1, 0x88, 0x17, 0xc2, 0xb0, 0x81, 0x63, 0x7c, 0x5f, 0x91, 0xec, 0x3b,
	0xe8, 0x42, 0x80, 0x19, 0x71, 0x25, 0x09, 0x88, 0x17, 0xab, 0xf9, 0x39, 0x0c, 0x70, 0x5f, 0x56,
	0x17, 0xa0, 0x59, 0x5b, 0xf1, 0xba, 0x29, 0x6b, 0x43, 0x71, 0xec, 0xd7, 0xd1, 0xc5, 0x01, 0xed,
	0x0f, 0xdc, 0x48, 0x50, 0x2e, 0x68, 0x7c, 0xec, 0xfa, 0x54, 0xe2, 0x83, 0x80, 0xf8, 0xd5, 0x65,
	0x68, 0xfe, 0x82, 0xe2, 0x76, 0x0c, 0xb3, 0x61, 0x78, 0xf6, 0x73, 0xe8, 0xdc, 0x00, 0x4b, 0x77,
	0x10, 0xb9, 0x82, 0x48, 0x9e, 0x08, 0x8f, 0x54, 0xcf, 0x01, 0x7c, 0x69, 0x80, 0xe5, 0x56, 0xe4,
	0x18, 0xa2, 0xfd, 0x26, 0xba, 0xf4, 0x19, 0x4e, 0x19, 0xf1, 0xdd, 0x43, 0xc1, 0x43, 0x57, 0x69,
	0xcf, 0xf1, 0x21, 0x65, 0x3e, 0x11, 0xd5, 0x45, 0xc0, 0x3f, 0xae, 0xd9, 0x1b, 0x82, 0x87, 0x9d,
	0x31, 0x73, 0xf5, 0x27, 0x1e, 0x47, 0x8b, 0x79, 0xe5, 0xb5, 0xaf, 0xa1, 0x39, 0x10, 0x76, 0xa9,
	0x0f, 0x2a, 0x7b, 0x7a, 0xfd, 0xf4, 0xe7, 0xbe, 0xf7, 0xc9, 0x8a, 0x33, 0x0b, 0xd4, 0x96, 0x6f,
	0x5f, 0x45, 0xf3, 0x01, 0xc1, 0x3e, 0x11, 0x0a, 0xa1, 0xb4, 0xf1, 0xac, 0x33, 0xa7, 0x09, 0x2d,
	0xdf, 0x7e, 0x12, 0xa1, 0x10, 0xd4, 0xdf, 0xa5, 0xbe, 0xac, 0x9e, 0xba, 0x7e, 0xea, 0xe6, 0x59,
	0x67, 0x5e, 0x53, 0x5a, 0xbe, 0x54, 0xec, 0x3e, 0x0e, 0x89, 0x1b, 0x1a, 0x35, 0x55, 0x73, 0x35,
	0xaf, 0x28, 0x6d, 0x50, 0xce, 0xbb, 0xe8, 0x8c, 0x8c, 0x71, 0x4c, 0x40, 0xaf, 0xb2, 0xbd, 0x92,
	0x1f, 0xde, 0xed, 0xae, 0xe2, 0xaf, 0xcd, 0xec, 0xb5, 0x1c, 0x0d, 0xb5, 0xef, 0xa1, 0x55, 0x72,
	0x78, 0xa8, 0x26, 0x7a, 0x44, 0x5c, 0x19, 0x63, 0x11, 0x13, 0x5f, 0xdb, 0x84, 0x10, 0x0f, 0x53,
	0x15, 0x37, 0x4a, 0x74, 0x2d, 0x43, 0x76, 0x35, 0xb0, 0x3d, 0xc6, 0x29, 0x75, 0xb7, 0x3f, 0x81,
	0x9e, 0x10, 0xf8, 0xa8, 0xbc, 0x99, 0xeb, 0xd0, 0xcc, 0x65, 0x81, 0x8f, 0x4a, 0x1a, 0x78, 0x09,
	0xd9, 0x38, 0x8e, 0x49, 0x18, 0xc5, 0xba, 0x11, 0x2d, 0xf6, 0x34, 0x88, 0x59, 0x86, 0x03, 0xa2,
	0x80, 0xbe, 0x86, 0x16, 0x52, 0x34, 0x4b, 0xc2, 0xea, 0x2a, 0xc0, 0x90, 0x21, 0xed, 0x24, 0xa1,
	0x7d, 0x1d, 0x2d, 0xc0, 0x18, 0xfa, 0x82, 0x27, 0x51, 0xaa, 0x5c, 0x79, 0x92, 0xfd, 0x06, 0xba,
	0x14, 0xf0, 0xa3, 0xb1, 0x52, 0x61, 0x6d, 0x51, 0xd4, 0xda, 0x9c, 0x07, 0xf4, 0x85, 0x80, 0x1f,
	0xa5, 0x5a, 0x65, 0xcc, 0x4d, 0xcb, 0xb7, 0x6b, 0x08, 0x69, 0xbb, 0x09, 0xa6, 0xe9, 0x71, 0x98,
	0xee, 0x73, 0x7a, 0xba, 0xe1, 0x95, 0xc0, 0x22, 0xad, 0xb4, 0x6b, 0xbd, 0xfa, 0x96, 0xdb, 0xfb,
	0xa0, 0xd3, 0x74, 0xeb, 0xb5, 0xee, 0x5e, 0x6d, 0xdb, 0x99, 0x0f, 0x53, 0xae, 0x7d, 0x1f, 0x2d,
	0x1f, 0xf0, 0xd8, 0xf5, 0xe9, 0xe1, 0x21, 0xf5, 0x92, 0x20, 0x3e, 0xae, 0x5e, 0x84, 0x66, 0x2e,
	0xe9, 0x66, 0xd4, 0x92, 0xad, 0xf3, 0xb8, 0x91, 0xb1, 0xd7, 0x2e, 0xae, 0xef, 0xf6, 0xdc, 0x46,
	0x6b, 0x63, 0xa3, 0x55, 0xdf, 0xdb, 0xee, 0x7d, 0xe0, 0x76, 0x6a, 0xdd, 0x6e, 0xeb, 0x7e, 0xd3,
	0x59, 0x3a, 0xc8, 0xc3, 0xec, 0x4b, 0x68, 0x56, 0xd9, 0x6c, 0xf5, 0x06, 0x97, 0xe0, 0x0d, 0xce,
	0xaa, 0x47, 0xad, 0x78, 0xc0, 0x60, 0x38, 0x24, 0xd5, 0xd7, 0xae, 0x57, 0x6e, 0xce, 0x3b, 0x73,
	0x8a, 0xb0, 0x83, 0x43, 0x62, 0x5f, 0x47, 0x8b, 0xc0, 0x4c, 0xa8, 0x1b, 0xf0, 0x3e, 0xaf, 0xbe,
	0xae, 0x54, 0xd7, 0x41, 0x8a, 0xb6, 0x47, 0xb7, 0x79, 0x9f, 0xdb, 0xcf, 0xa2, 0x65, 0x40, 0x1c,
	0x60, 0x49, 0x34, 0xe6, 0x0d, 0xc0, 0x80, 0xdc, 0x3a, 0x96, 0x04, 0x50, 0x6f, 0xa3, 0xcb, 0x7a,
	0x62, 0xd2, 0xdd, 0xa9, 0xcd, 0x85, 0xb2, 0x06, 0xa4, 0x5a, 0x85, 0xf1, 0x5c, 0x04, 0x40, 0xba,
	0x43, 0xc1, 0x64, 0x34, 0x94, 0x26, 0x9e, 0x14, 0xcd, 0x2d, 0xc6, 0xe5, 0x02, 0xd1, 0xfc, 0x72,
	0x3c, 0x99, 0xd7, 0xb5, 0x10, 0x3f, 0x70, 0x05, 0x66, 0x7d, 0xe2, 0x86, 0x94, 0x25, 0x31, 0x91,
	0xd5, 0x2b, 0x20, 0x7e, 0x25, 0x07, 0x6a, 0xe3, 0x07, 0x8e, 0x82, 0xb4, 0x35, 0xc2, 0x7e, 0x0e,
	0x2d, 0x03, 0x37, 0xc0, 0xac, 0x9f, 0xa8, 0x43, 0xaa, 0x7a, 0x15, 0x64, 0xa6, 0xa8, 0xf6, 0x5d,
	0x34, 0xab, 0xf7, 0xa3, 0xac, 0x3e, 0x79, 0xfd, 0xd4, 0xcd, 0x85, 0xa2, 0x5d, 0xa6, 0x4f, 0x30,
	0x27, 0x05, 0xaa, 0x6d, 0x31, 0xa1, 0x64, 0x6a, 0xc7, 0x4a, 0x57, 0x90, 0x10, 0x53, 0x46, 0x59,
	0xbf, 0xfa, 0x8c, 0xde, 0x16, 0x39, 0x4d, 0xdb, 0x54, 0x08, 0x27, 0x05, 0xd8, 0xaf, 0xa1, 0x8b,
	0x3c, 0x22, 0xcc, 0x3d, 0xe4, 0xc2, 0x55, 0x76, 0xc8, 0x15, 0xe4, 0xb3, 0x09, 0x91, 0xb1, 0xac,
	0xde, 0x04, 0xe3, 0x74, 0x5e, 0x71, 0x37, 0xb8, 0xf8, 0x14, 0xa7, 0xcc, 0x31, 0x2c, 0xfb, 0x1d,
	0xb4, 0x28, 0x95, 0xbd, 0xa6, 0x6c, 0x44, 0xd5, 0x1c, 0xbc, 0x50, 0x36, 0xdc, 0x16, 0x00, 0x9c,
	0x05, 0x85, 0xd6, 0x7f, 0x83, 0xb0, 0x20, 0xde, 0x28, 0x13, 0xbe, 0xf5, 0x28, 0x61, 0x85, 0x4e,
	0x85, 0x9f, 0x41, 0x4b, 0xe9, 0xd2, 0x69, 0xab, 0xfe, 0xa2, 0x3e, 0x59, 0x0c, 0x51, 0xdb, 0xf3,
	0xdb, 0xe8, 0xbc, 0x39, 0x19, 0xf5, 0x19, 0x60, 0xa0, 0x2f, 0xe9, 0xe3, 0x4a, 0xb3, 0xf4, 0x11,
	0xa0, 0xf1, 0x6f, 0xa2, 0x4b, 0xe4, 0x81, 0x17, 0x24, 0x52, 0x19, 0x2a, 0x38, 0x76, 0x70, 0x48,
	0xb4, 0x72, 0xbc, 0x0c, 0x32, 0x8f, 0x67, 0xec, 0x5e, 0xc6, 0x6d, 0xf9, 0xf9, 0x63, 0xd1, 0xa7,
	0x23, 0x2a, 0x55, 0x8f, 0xd4, 0xaf, 0xbe, 0x32, 0x71, 0x2c, 0x36, 0x0c, 0xa7, 0xe5, 0xe7, 0x4f,
	0x3c, 0xe9, 0x0d, 0x88, 0x9f, 0x04, 0x44, 0x5b, 0xa1, 0x3b, 0x13, 0x27, 0x5e, 0xd7, 0xf0, 0xc0,
	0x10, 0x95, 0x1c, 0xbd, 0xaf, 0x96, 0x1d, 0xbd, 0xb9, 0x3e, 0x0e, 0x04, 0xf6, 0x86, 0x24, 0x76,
	0x05, 0x4f, 0x98, 0x5f, 0xbd, 0x3b, 0xd1, 0xc7, 0xba, 0xe6, 0x39, 0x8a, 0x65, 0xbf, 0x8b, 0xae,
	0xa6, 0x32, 0x9f, 0x4d, 0x48, 0x42, 0x5c, 0x9f, 0x60, 0x3f, 0xa0, 0xcc, 0x8c, 0xee, 0x4d, 0x90,
	0xac, 0x1a, 0xc8, 0xfb, 0x0a, 0xd1, 0x30, 0x00, 0x18, 0xe2, 0xd7, 0x55, 0xd0, 0x13, 0x25, 0xf2,
	0xfa, 0xcc, 0x78, 0x0b, 0xac, 0xcf, 0x75, 0xbd, 0xc2, 0xcd, 0x5e, 0x41, 0x3b, 0xfa, 0xec, 0x78,
	0x66, 0xe8, 0x96, 0x73, 0xdd, 0x1d, 0x2e, 0x42, 0x1c, 0x38, 0x97, 0xe3, 0x32, 0x84, 0xfd, 0x71,
	0x74, 0x55, 0x1f, 0x90, 0x07, 0x09, 0x0d, 0xd4, 0x31, 0x28, 0x03, 0x1e, 0x4b, 0x37, 0xe6, 0xee,
	0x21, 0x0d, 0x82, 0xea, 0xc7, 0xb4, 0x4b, 0x04, 0x90, 0x75, 0x8d, 0xe8, 0x2a, 0x40, 0x8f, 0x6f,
	0xd0, 0x20, 0x50, 0xfe, 0xd4, 0xa4, 0xb4, 0x36, 0x19, 0xc6, 0xc0, 0xbf, 0x7d, 0x52, 0x18, 0xcc,
	0xf1, 0xa6, 0x36, 0xf6, 0x6f, 0xa1, 0xea, 0x54, 0xd7, 0xe3, 0x33, 0x66, 0x4d, 0xeb, 0xd0, 0x44,
	0xbf, 0xd9, 0x41, 0xf3, 0x24, 0x42, 0x92, 0x07, 0x5c, 0x4f, 0x5c, 0xf5, 0x1d, 0xd8, 0x73, 0xf3,
	0x8a, 0x02, 0xef, 0x67, 0xdf, 0x44, 0x96, 0x32, 0xe5, 0xca, 0x11, 0x8b, 0xd4, 0x7e, 0xf3, 0xc9,
	0x83, 0xea, 0xc7, 0xb5, 0xf5, 0x38, 0xe0, 0x71, 0x17, 0xc8, 0x2d, 0x45, 0xb5, 0x5f, 0x45, 0x8f,
	0x83, 0x47, 0xed, 0x7a, 0x01, 0x66, 0x79, 0xfb, 0xf6, 0xae, 0xf6, 0x7b, 0x80, 0x59, 0x0f, 0x30,
	0x1b, 0xdb, 0xb6, 0x77, 0xd0, 0x82, 0x20, 0xd8, 0x3f, 0x76, 0xbd, 0x01, 0xf1, 0x86, 0xd5, 0xf7,
	0xae, 0x57, 0x6e, 0x2e, 0xdc, 0xbd, 0x62, 0x36, 0x62, 0x5b, 0xf6, 0x1d, 0xc5, 0xac, 0x2b, 0x9e,
	0x9a, 0xdf, 0x44, 0x3a, 0x48, 0x64, 0x14, 0xbb, 0x81, 0xae, 0x79, 0x89, 0x8c, 0x79, 0x08, 0x36,
	0xa7, 0xd0, 0x28, 0x7f, 0x02, 0x7a, 0xbe, 0xaa, 0x61, 0xca, 0xee, 0x9c, 0xb4, 0xcc, 0x65, 0xad,
	0xe4, 0xc6, 0xff, 0xc9, 0xb2, 0x56, 0xc6, 0x2f, 0xa2, 0xbd, 0x59, 0x6f, 0x80, 0x83, 0x80, 0x80,
	0x6d, 0x56, 0x2b, 0x53, 0xad, 0xa5, 0xde, 0x6c, 0x3d, 0x65, 0xc0, 0x8a, 0x8d, 0x17, 0x5a, 0x12,
	0x2c, 0xbc, 0x81, 0x7b, 0x40, 0xb0, 0xc7, 0xd5, 0x94, 0x29, 0xf7, 0xa3, 0xba, 0x0e, 0x52, 0x7a,
	0xa1, 0xbb, 0x00, 0x58, 0x07, 0x7e, 0x0d, 0xd8, 0xf6, 0x8b, 0x68, 0x25, 0x7f, 0x1e, 0x68, 0xcb,
	0x52, 0xd7, 0x5e, 0x44, 0x8e, 0xa1, 0x0d, 0x0b, 0x41, 0xe7, 0x27, 0x1d, 0x4b, 0xbd, 0x1f, 0x1a,
	0xb0, 0x1f, 0xcc, 0x44, 0x37, 0xb7, 0x72, 0xce, 0x65, 0xbb, 0xad, 0x77, 0xc2, 0xe5, 0xa1, 0x3b,
	0x45, 0x77, 0xf7, 0xd8, 0x90, 0xf1, 0x23, 0xe6, 0xac, 0xe4, 0x9d, 0x51, 0xad, 0xf7, 0x6f, 0xa2,
	0x4b, 0x93, 0x1e, 0xaf, 0x74, 0x09, 0xd3, 0x0e, 0x6c, 0x53, 0x7b, 0x98, 0x13, 0x4e, 0xaf, 0x6c,
	0x6a, 0xa6, 0xda, 0xf7, 0x93, 0x93, 0x9f, 0x9e, 0xf4, 0x2e, 0x84, 0x10, 0x1b, 0x7a, 0xdf, 0xe7,
	0x27, 0x3e, 0x05, 0xb4, 0xb1, 0x1c, 0xae, 0xde, 0x41, 0x67, 0x74, 0xff, 0x67, 0xd1, 0xcc, 0x5e,
	0xcb, 0x7a, 0xcc, 0x5e, 0x41, 0x4b, 0x1b, 0xad, 0x9d, 0x46, 0x6b, 0x67, 0xd3, 0x05, 0xff, 0xc4,
	0xaa, 0xd8, 0x8b, 0x68, 0xae, 0xb5, 0x63, 0x9e, 0x66, 0x56, 0xbf, 0xed, 0xd4, 0x64, 0x3c, 0xa6,
	0xad, 0xba, 0x72, 0x6c, 0x61, 0x97, 0x9d, 0x70, 0x6c, 0x81, 0xaa, 0xfd, 0x0b, 0x49, 0xd8, 0xa4,
	0x63, 0xab, 0x09, 0x2d, 0x5f, 0xb9, 0x6a, 0x86, 0x09, 0xee, 0xc7, 0x29, 0x70, 0x3f, 0x90, 0x26,
	0x81, 0x03, 0xf2, 0xde, 0xf8, 0x5c, 0x3d, 0x0d, 0x67, 0xcd, 0xb3, 0x65, 0x67, 0xcd, 0xed, 0xc2,
	0x33, 0x36, 0xe7, 0xf6, 0x9c, 0x99, 0x70, 0x7b, 0x6e, 0xa3, 0xf3, 0x13, 0x87, 0xaf, 0x84, 0x5d,
	0x02, 0x2e, 0xf2, 0x9c, 0xb3, 0x92, 0x3b, 0x73, 0xf5, 0xf6, 0x51, 0xc1, 0x22, 0x4e, 0x83, 0xc5,
	0x59, 0x1d, 0x2c, 0x62, 0x13, 0x2c, 0x3e, 0x89, 0x90, 0x3e, 0x0f, 0xdd, 0x3e, 0xf5, 0x21, 0x5c,
	0x3a, 0xeb, 0xcc, 0x6b, 0xca, 0x26, 0xf5, 0xaf, 0xec, 0xa3, 0x85, 0x7c, 0x00, 0x6b, 0xa3, 0xd3,
	0xf0, 0xae, 0x15, 0x78, 0x57, 0xf8, 0x5b, 0x35, 0x2e, 0xd3, 0x61, 0xea, 0x29, 0x9a, 0x95, 0x66,
	0x9c, 0xf9, 0x20, 0xf5, 0xf4, 0x44, 0x90, 0xba, 0xfa, 0x9d, 0xe3, 0x15, 0xd9, 0xe6, 0x07, 0x07,
	0xff, 0x6f, 0xac, 0x48, 0x6e, 0x24, 0xb7, 0xe1, 0xef, 0xe9, 0x15, 0x79, 0x16, 0x2d, 0xe7, 0x15,
	0xd7, 0x2c, 0xcc, 0x69, 0x67, 0x71, 0xac, 0xab, 0x3a, 0xe2, 0xc9, 0xcd, 0xe9, 0xd9, 0xa9, 0x39,
	0x55, 0xf1, 0x5b, 0xbe, 0x11, 0x4f, 0x78, 0xb0, 0x28, 0x67, 0x9d, 0xa5, 0x71, 0x2b, 0x75, 0xe1,
	0xa9, 0x13, 0x35, 0x8f, 0x83, 0xb8, 0x3c, 0xc6, 0x61, 0x04, 0xab, 0x34, 0xeb, 0x9c, 0x1f, 0xa3,
	0x7b, 0x29, 0xeb, 0xca, 0xc7, 0xd1, 0x42, 0x6e, 0xe0, 0x9f, 0xe7, 0x7a, 0xad, 0xfe, 0xc8, 0x0c,
	0x3a, 0xa7, 0xec, 0xef, 0x36, 0xc1, 0x23, 0x38, 0x2b, 0x60, 0x45, 0x16, 0x02, 0xd5, 0xa2, 0x31,
	0x21, 0x15, 0x1d, 0x90, 0x00, 0x49, 0x03, 0x76, 0x4c, 0x00, 0xa7, 0xf9, 0x33, 0x60, 0x62, 0x2e,
	0x8c, 0x1d, 0x7e, 0x57, 0x0d, 0xd0, 0x18, 0x17, 0xfd, 0x5c, 0x6b, 0x37, 0x9d, 0xbd, 0xed, 0x66,
	0xd7, 0xed, 0xf6, 0x6a, 0xbd, 0xa6, 0xdb, 0xda, 0x69, 0xf5, 0x74, 0xc4, 0xa7, 0xdb, 0x7b, 0x1e,
	0x9d, 0x0b, 0xa0, 0x7f, 0xd7, 0x27, 0x31, 0xf1, 0x62, 0xe2, 0xc3, 0x42, 0xce, 0x39, 0xcb, 0x9a,
	0xdc, 0x30, 0x54, 0x15, 0x6f, 0x1f, 0x52, 0x21, 0x63, 0xf7, 0x20, 0xe0, 0xdc, 0x77, 0x07, 0x38,
	0x8a, 0x08, 0x23, 0xbe, 0xd1, 0x34, 0x1b, 0x78, 0xeb, 0x8a, 0xb5, 0x65, 0x38, 0x6a, 0x46, 0x7d,
	0x2a, 0x3d, 0x2c, 0x4c, 0x1c, 0xa7, 0x02, 0xe8, 0x24, 0x88, 0x25, 0xac, 0xe2, 0x9c, 0x73, 0xde,
	0x30, 0xc1, 0x5a, 0x3b, 0x9a, 0xa5, 0x86, 0x13, 0x62, 0x29, 0xd5, 0x09, 0xe1, 0x71, 0xc6, 0x88,
	0x17, 0x9b, 0x7d, 0xb6, 0xac, 0xc8, 0x8d, 0x8c, 0xba, 0xfa, 0xe3, 0xcb, 0x93, 0x1a, 0x6d, 0x96,
	0xe0, 0x02, 0x9a, 0x31, 0xba, 0x7c, 0xd6, 0xe8, 0xf2, 0x0c, 0xf5, 0xd5, 0xd6, 0x1e, 0x10, 0xc1,
	0xd3, 0x35, 0x58, 0x72, 0xce, 0xaa, 0xc7, 0x96, 0x6f, 0xbf, 0x87, 0x4e, 0xab, 0xc5, 0x80, 0x57,
	0x5e, 0xbe, 0x6b, 0xe7, 0xe7, 0xb1, 0xee, 0xf6, 0x9a, 0xb5, 0xf6, 0xda, 0xc5, 0xfc, 0x93, 0xbb,
	0xb9, 0xbb, 0xdb, 0x70, 0x37, 0xf7, 0x3e, 0xe8, 0x3a, 0x20, 0x97, 0xad, 0xf8, 0xd9, 0xdc, 0x8a,
	0xdb, 0xe8, 0xb4, 0x72, 0x48, 0x4c, 0xc4, 0x0b, 0x7f, 0x2b, 0x2d, 0xc8, 0x62, 0xfa, 0x45, 0xd0,
	0xe1, 0x2c, 0x9a, 0x87, 0x80, 0x3d, 0xc6, 0xc6, 0xe1, 0x5b, 0xd2, 0x11, 0xb9, 0xa2, 0x68, 0x47,
	0xef, 0x92, 0xda, 0x43, 0x31, 0x76, 0x1f, 0x44, 0x90, 0xa5, 0x58, 0x72, 0xce, 0xaa, 0xc7, 0x4f,
	0x47, 0x4a, 0xaf, 0x0d, 0xc3, 0xc5, 0x47, 0x58, 0xf8, 0xc4, 0x87, 0xbc, 0xc4, 0x92, 0xb3, 0xa4,
	0x01, 0x35, 0x4d, 0xb4, 0x77, 0xd1, 0x92, 0x59, 0x60, 0x63, 0xb7, 0xac, 0x7c, 0x68, 0x0f, 0xf3,
	0x97, 0xe9, 0x5f, 0x22, 0xdd, 0x78, 0xcd, 0x82, 0x37, 0xde, 0x6e, 0xd6, 0xee, 0xa7, 0xa9, 0xb0,
	0xc5, 0x20, 0x87, 0xb0, 0x6f, 0x20, 0xa3, 0x1a, 0x70, 0x94, 0x72, 0x26, 0xab, 0x4f, 0xe8, 0x7e,
	0x35, 0xb5, 0xa6, 0x89, 0xf6, 0x55, 0x34, 0xeb, 0x0d, 0x30, 0x63, 0x24, 0xa8, 0xae, 0x28, 0xfe,
	0x5a, 0xe5, 0x4d, 0x27, 0xa5, 0x28, 0x7f, 0x27, 0xf3, 0x01, 0xd2, 0x95, 0xb9, 0x70, 0xfd, 0x94,
	0xf2, 0x77, 0x52, 0xfa, 0x96, 0x5e, 0xa1, 0x4f, 0xa3, 0x0b, 0x69, 0x12, 0x2f, 0x75, 0x16, 0x72,
	0x11, 0xf3, 0x47, 0x4d, 0xe6, 0xd9, 0xd1, 0x09, 0x84, 0x9a, 0x40, 0x73, 0x7c, 0x66, 0x43, 0xb8,
	0x08, 0x43, 0x58, 0x32, 0x64, 0x33, 0x82, 0x0d, 0x84, 0xc0, 0xa6, 0xba, 0xa0, 0x29, 0x97, 0x4a,
	0x35, 0xe5, 0xfc, 0x84, 0xa6, 0xec, 0xec, 0xaa, 0xff, 0x39, 0xf3, 0x20, 0xda, 0x53, 0xba, 0xf2,
	0x34, 0x5a, 0xd4, 0xed, 0x08, 0x1c, 0xab, 0x98, 0xed, 0x96, 0xce, 0x25, 0x00, 0xcd, 0x01, 0x92,
	0xfd, 0x22, 0xb2, 0xa3, 0x23, 0xe1, 0xbb, 0xde, 0xf1, 0x01, 0x11, 0xae, 0x87, 0x0f, 0xc1, 0xe8,
	0xe9, 0xa0, 0xf7, 0x9c, 0xe2, 0xd4, 0x15, 0xa3, 0x8e, 0x0f, 0x95, 0xdd, 0x7b, 0x05, 0x5d, 0x98,
	0x06, 0x83, 0x2e, 0x5e, 0x06, 0x5d, 0x5c, 0x99, 0x80, 0x83, 0x39, 0x7e, 0x1b, 0x5d, 0xce, 0x26,
	0x5d, 0x60, 0xe6, 0xf3, 0x50, 0xbf, 0xf8, 0x01, 0x8d, 0x75, 0x6c, 0x37, 0xeb, 0x5c, 0x4c, 0x01,
	0x0e, 0xf0, 0xd5, 0x0c, 0xac, 0xd3, 0x58, 0x2a, 0xb3, 0x24, 0x30, 0x1b, 0x2a, 0xdf, 0x8b, 0xf5,
	0x49, 0xf5, 0xc9, 0xeb, 0x95, 0x9b, 0x2b, 0x0e, 0x52, 0xa4, 0x3a, 0x50, 0xec, 0x27, 0xd0, 0xbc,
	0x87, 0x43, 0x22, 0x70, 0x88, 0x59, 0xf5, 0x29, 0xed, 0xde, 0x66, 0x04, 0xfb, 0x0d, 0x74, 0x29,
	0x6f, 0x5b, 0x23, 0xc1, 0xfd, 0xc4, 0x8b, 0x21, 0x43, 0x75, 0x0d, 0xa6, 0xfc, 0xc2, 0xd8, 0xba,
	0x76, 0x34, 0xb3, 0xe5, 0x4b, 0x7b, 0x07, 0xad, 0x18, 0xdf, 0x2d, 0x97, 0x2a, 0x79, 0xfa, 0x23,
	0xa7, 0x4a, 0xce, 0x69, 0xe1, 0x0c, 0x03, 0x26, 0x0c, 0x8f, 0xd4, 0x51, 0x4d, 0x60, 0x31, 0xdd,
	0x48, 0x45, 0x47, 0x3e, 0x44, 0xcf, 0xa7, 0x1d, 0x3b, 0xe5, 0xa9, 0xd5, 0xea, 0x00, 0xa7, 0x24,
	0x7f, 0xfa, 0x6c, 0x49, 0xfe, 0xf4, 0x16, 0x5a, 0x81, 0x59, 0x8a, 0x29, 0x11, 0x6e, 0x12, 0x29,
	0xe7, 0xd8, 0xaf, 0xde, 0x00, 0xf0, 0x39, 0xc5, 0xe8, 0x51, 0x22, 0xf6, 0x34, 0xb9, 0x34, 0x7d,
	0xf9, 0x5c, 0x69, 0xfa, 0xf2, 0x26, 0xb2, 0x3c, 0xcc, 0x5c, 0x82, 0x85, 0x8a, 0xde, 0xd5, 0xee,
	0x96, 0xd5, 0xe7, 0xb5, 0x6d, 0xf4, 0x30, 0x6b, 0x62, 0xc1, 0x1c, 0x4d, 0xb5, 0xf7, 0xd1, 0xf9,
	0x00, 0x92, 0x71, 0x11, 0xf1, 0x62, 0x1c, 0x73, 0xa1, 0x55, 0xf7, 0xe6, 0xe7, 0xa7, 0xba, 0x2b,
	0xaa, 0x8d, 0x6e, 0xda, 0x04, 0xa8, 0xf0, 0x0b, 0x68, 0xe5, 0x08, 0x4b, 0x37, 0x1c, 0x45, 0x6e,
	0x80, 0x65, 0x0c, 0xab, 0x09, 0xa1, 0xf9, 0x9c, 0xb3, 0x7c, 0x84, 0x65, 0x7b, 0x14, 0x6d, 0x63,
	0x19, 0xab, 0x55, 0xb4, 0xd7, 0xd1, 0x72, 0x44, 0x98, 0xaf, 0x9c, 0x67, 0xac, 0xc7, 0xfa, 0x12,
	0xb8, 0x00, 0x57, 0xc7, 0x71, 0x47, 0x47, 0xf3, 0x9b, 0x23, 0xc2, 0x62, 0xb0, 0x56, 0xce, 0x92,
	0x11, 0xa9, 0xe9, 0xf7, 0xb8, 0x8f, 0x2e, 0x4f, 0xb6, 0xe1, 0x72, 0xe6, 0x8e, 0xa8, 0x17, 0x73,
	0x71, 0x5c, 0x7d, 0xf9, 0xd1, 0xcd, 0x5d, 0x9c, 0x68, 0x6e, 0x97, 0xdd, 0xd7, 0xa2, 0xf6, 0x97,
	0xa2, 0xf3, 0xb0, 0x4e, 0x61, 0x28, 0xdc, 0x03, 0xce, 0xa5, 0x31, 0x29, 0xb7, 0xf3, 0xd9, 0xb3,
	0xa6, 0x9a, 0x92, 0x76, 0xdb, 0x59, 0x57, 0x7c, 0xd0, 0xb0, 0xea, 0xd0, 0x3d, 0x41, 0x74, 0x77,
	0x38, 0x23, 0x8e, 0xa5, 0x5a, 0x6b, 0x87, 0x22, 0x23, 0xdb, 0xaf, 0xa3, 0x8b, 0x3a, 0x44, 0x8e,
	0x38, 0x65, 0xb1, 0x8b, 0xfd, 0xcf, 0x24, 0x32, 0x0e, 0x09, 0x8b, 0x21, 0x6b, 0xb0, 0xe2, 0x5c,
	0x00, 0x6e, 0x47, 0x31, 0x6b, 0x19, 0x4f, 0x79, 0x5b, 0x99, 0xfe, 0x40, 0xb2, 0xe0, 0x8c, 0x33,
	0x97, 0xea, 0x8d, 0x7d, 0x01, 0x9d, 0x89, 0x69, 0x1c, 0x10, 0x13, 0xe1, 0xeb, 0x07, 0x75, 0xb0,
	0xf4, 0x55, 0xac, 0xa9, 0xec, 0xc4, 0x6b, 0xc0, 0x98, 0x85, 0xe7, 0x96, 0xaf, 0x42, 0x18, 0x41,
	0x22, 0x2e, 0x62, 0xe9, 0xe2, 0x11, 0xa6, 0x81, 0xda, 0xd7, 0x90, 0x95, 0x5b, 0x72, 0x2c, 0xc3,
	0xa8, 0xa5, 0xf4, 0xd5, 0x9f, 0x3e, 0x85, 0x56, 0xea, 0x70, 0x90, 0xaa, 0x85, 0x6e, 0x90, 0x18,
	0xd3, 0x40, 0x4e, 0x26, 0xfc, 0x2a, 0x53, 0x09, 0xbf, 0xcb, 0x08, 0xfe, 0x76, 0x63, 0xdc, 0x37,
	0xbe, 0x1f, 0xf8, 0xcf, 0x3d, 0xdc, 0xcf, 0xbb, 0xd2, 0xa7, 0x0b, 0x33, 0x88, 0x90, 0xfd, 0xd3,
	0xce, 0x1c, 0x34, 0x52, 0x92, 0x1f, 0x3c, 0x5b, 0x90, 0x1f, 0xbc, 0x89, 0x2c, 0x83, 0x62, 0xea,
	0x50, 0x00, 0xdc, 0x2c, 0xe0, 0x96, 0x35, 0x4e, 0x91, 0x01, 0xf9, 0x0c, 0x5a, 0xd2, 0x91, 0x32,
	0x0f, 0xa3, 0x80, 0xc4, 0x04, 0x3c, 0xb9, 0x39, 0xdd, 0x5c, 0xdd, 0xd0, 0xd4, 0x69, 0xad, 0xa6,
	0xd8, 0x9c, 0x9d, 0xf0, 0xf7, 0xb4, 0xb5, 0xb3, 0x4e, 0x58, 0xbb, 0xeb, 0x68, 0x91, 0x4a, 0x77,
	0xc0, 0x43, 0x6d, 0x47, 0xe0, 0x80, 0x9b, 0x73, 0x10, 0x95, 0x5b, 0x3c, 0x04, 0xf3, 0x51, 0x12,
	0xaa, 0xda, 0x25, 0xa1, 0x6a, 0x0d, 0x3d, 0x39, 0x05, 0x75, 0x63, 0x3e, 0x24, 0x59, 0x7c, 0x0f,
	0x99, 0xe4, 0xd3, 0xce, 0x15, 0x6f, 0x42, 0xac, 0xa7, 0x20, 0xe6, 0x44, 0xb3, 0x57, 0xcd, 0xcb,
	0xaa, 0xf9, 0x70, 0x13, 0x11, 0x54, 0x2f, 0xc0, 0x92, 0x2c, 0xa4, 0xb3, 0xbb, 0x27, 0x82, 0xd5,
	0x9f, 0x51, 0x51, 0x00, 0x2c, 0xf2, 0xa6, 0xd2, 0x91, 0x74, 0x95, 0xf3, 0x3a, 0x54, 0x99, 0xd4,
	0xa1, 0xdb, 0xe8, 0xbc, 0x66, 0x45, 0x82, 0x86, 0x58, 0x1c, 0xbb, 0x1e, 0x0f, 0xb8, 0x30, 0x4e,
	0xd4, 0x0a, 0xb0, 0x3a, 0x9a, 0x53, 0x57, 0x0c, 0xe5, 0xf2, 0x69, 0xbc, 0x24, 0x1e, 0x67, 0xfe,
	0x58, 0xe2, 0x94, 0x4e, 0x4b, 0x01, 0xb3, 0x9b, 0xf2, 0xb4, 0xcc, 0x33, 0x68, 0xc9, 0xf4, 0x81,
	0xe3, 0x98, 0x08, 0x66, 0x54, 0x66, 0x51, 0xb7, 0xae, 0x69, 0x50, 0xb7, 0x00, 0x50, 0x4e, 0x73,
	0xe6, 0x81, 0x02, 0x4b, 0xfd, 0x34, 0x5a, 0x34, 0x6d, 0xa8, 0x2d, 0x25, 0x4d, 0x59, 0x6c, 0x41,
	0x37, 0x01, 0x24, 0xb5, 0xa8, 0x1a, 0x02, 0x75, 0x26, 0xe3, 0x9d, 0xe9, 0x46, 0xc1, 0x64, 0x8c,
	0x01, 0xda, 0x10, 0xcf, 0xe5, 0x00, 0xda, 0x00, 0x77, 0x8c, 0x7e, 0x1e, 0x72, 0xe1, 0x02, 0x19,
	0x4a, 0x58, 0x9f, 0x9f, 0xdb, 0x08, 0xca, 0xb7, 0xc1, 0x05, 0x2c, 0x80, 0xda, 0x0e, 0xba, 0x4b,
	0xb5, 0x87, 0x90, 0xde, 0x5f, 0x40, 0x50, 0x9b, 0xe8, 0x4d, 0x74, 0x49, 0x33, 0x8f, 0x08, 0x19,
	0x06, 0xc7, 0x6e, 0x44, 0x84, 0x47, 0x58, 0x4c, 0x03, 0x62, 0xca, 0x10, 0x7a, 0xaa, 0xf7, 0x81,
	0xdb, 0xc9, 0x98, 0xab, 0x3f, 0x56, 0x41, 0x55, 0xb3, 0x95, 0x69, 0x48, 0x7c, 0x7d, 0x28, 0xa4,
	0x6b, 0xfd, 0x2c, 0x5a, 0xa6, 0x31, 0x09, 0x5d, 0x9f, 0x1c, 0x9a, 0x34, 0x93, 0x5e, 0xcb, 0x45,
	0x45, 0x6d, 0x90, 0x43, 0x9d, 0x64, 0x7a, 0x0e, 0x9d, 0xa3, 0xea, 0xc4, 0x8b, 0xa2, 0xe0, 0xd8,
	0xf5, 0x84, 0x8a, 0x34, 0x74, 0x50, 0xb0, 0x44, 0x65, 0x17, 0xa8, 0x75, 0x45, 0x54, 0x4a, 0x47,
	0x25, 0x84, 0x4a, 0xbe, 0xeb, 0x0b, 0x1e, 0x99, 0x60, 0x60, 0x81, 0x4a, 0xe8, 0xba, 0x21, 0x78,
	0xa4, 0x56, 0x2e, 0x97, 0xe5, 0xd1, 0x91, 0xf5, 0x3c, 0xce, 0x72, 0x3a, 0x17, 0xd1, 0x59, 0x2e,
	0x68, 0x9f, 0x32, 0xb3, 0x66, 0xe6, 0x69, 0xf5, 0x7b, 0x2a, 0xe8, 0x8a, 0x7e, 0x8b, 0x75, 0xc1,
	0xb1, 0xef, 0x61, 0x19, 0xd7, 0xb5, 0xf3, 0xd8, 0x62, 0x87, 0x5c, 0xb5, 0x6a, 0x7c, 0xc9, 0xb1,
	0xd6, 0xce, 0x1b, 0x4a, 0xcb, 0xd7, 0xbe, 0x56, 0xc2, 0x62, 0xd0, 0x3f, 0x5f, 0xc7, 0x49, 0xf3,
	0xca, 0xd7, 0x02, 0x5a, 0x9d, 0xfb, 0x6a, 0x0f, 0x2f, 0xf8, 0x44, 0x27, 0xdc, 0x28, 0x67, 0xc6,
	0x82, 0xe5, 0x49, 0x4a, 0x31, 0xd3, 0xac, 0xbd, 0x6e, 0xe5, 0x34, 0x60, 0x16, 0x53, 0xa2, 0x6a,
	0x66, 0xf5, 0xfb, 0x4e, 0xa1, 0x0b, 0xb9, 0x3d, 0x95, 0x6d, 0xec, 0x87, 0xed, 0xaa, 0x37, 0xd1,
	0x9c, 0x2e, 0x84, 0x9a, 0x78, 0x64, 0xf9, 0xee, 0xa2, 0x39, 0x74, 0x40, 0x13, 0xd7, 0x96, 0x9a,
	0xf7, 0x9b, 0x3b, 0x3d, 0xb7, 0xd5, 0xd0, 0xce, 0xeb, 0x2c, 0x80, 0x75, 0x62, 0x79, 0x6c, 0x26,
	0x28, 0x93, 0x31, 0x66, 0x1e, 0x78, 0x88, 0x66, 0x77, 0x65, 0xcc, 0x96, 0xe1, 0x81, 0x97, 0x38,
	0x26, 0xbb, 0x11, 0x16, 0x38, 0x24, 0x31, 0x11, 0x66, 0x8f, 0xd9, 0x19, 0xab, 0x93, 0x72, 0x26,
	0x05, 0xc6, 0x51, 0xf0, 0x99, 0x29, 0x81, 0x2c, 0x08, 0x56, 0x7a, 0x9a, 0xeb, 0x81, 0x08, 0xca,
	0xd5, 0xf6, 0x17, 0x14, 0x07, 0x66, 0x49, 0xc7, 0x83, 0xee, 0x00, 0xb7, 0x0b, 0x4c, 0x48, 0x4b,
	0x8d, 0xe5, 0x04, 0xef, 0x0b, 0x22, 0xa5, 0x8b, 0x4d, 0xdd, 0xce, 0x6c, 0xd0, 0xea, 0x58, 0xd6,
	0x20, 0x6a, 0xba, 0x7c, 0xa7, 0x1c, 0x28, 0x12, 0xd0, 0x3e, 0x3d, 0x08, 0x48, 0x2e, 0x8d, 0xa8,
	0xf6, 0xad, 0x72, 0x28, 0xed, 0x94, 0x97, 0x65, 0x0f, 0xe5, 0xea, 0x0f, 0xdf, 0xce, 0x2a, 0xad,
	0xb0, 0x60, 0xf6, 0x35, 0x34, 0xa7, 0x83, 0xed, 0xe9, 0xf4, 0x07, 0x50, 0x5b, 0xbe, 0xfd, 0x16,
	0x42, 0xa3, 0xbb, 0x6e, 0x9a, 0xc3, 0x98, 0x29, 0xa8, 0x60, 0xe4, 0xf3, 0x16, 0xf3, 0xa3, 0xbb,
	0x6d, 0x93, 0xb9, 0xf8, 0x24, 0x3a, 0x37, 0xba, 0xeb, 0x06, 0xe4, 0x30, 0xce, 0xa4, 0x67, 0x1f,
	0x21, 0xbd, 0x34, 0xba, 0xbb, 0x4d, 0x0e, 0xe3, 0xb4, 0x85, 0xb7, 0xd1, 0x02, 0x0e, 0x82, 0x4c,
	0xfa, 0xc1, 0x23, 0xa4, 0x11, 0x0e, 0x82, 0x54, 0xf4, 0x06, 0x5a, 0x4e, 0x4b, 0xc0, 0xcc, 0xa7,
	0x1e, 0x91, 0xd5, 0x63, 0x1d, 0xd7, 0x98, 0x32, 0xb0, 0x26, 0x42, 0x5a, 0x6b, 0x3c, 0xc0, 0x0c,
	0xfb, 0x21, 0x60, 0x57, 0x82, 0x6c, 0x2c, 0x39, 0xfc, 0xa1, 0x20, 0x64, 0x1a, 0xff, 0x65, 0x1a,
	0xaf, 0x58, 0x93, 0xf8, 0x89, 0x32, 0xf5, 0xc2, 0x54, 0x99, 0xfa, 0x29, 0x34, 0x2f, 0x89, 0x18,
	0x69, 0x26, 0xe4, 0x6c, 0xd6, 0x2a, 0x77, 0x9c, 0x39, 0x4d, 0xd3, 0x8e, 0x42, 0x56, 0xa7, 0x36,
	0xea, 0x3d, 0x97, 0x96, 0xa9, 0xed, 0xe7, 0xd1, 0xb9, 0xd4, 0x2f, 0x4c, 0xab, 0x4b, 0x08, 0x0a,
	0xdd, 0xa9, 0xcb, 0x99, 0x96, 0x91, 0xb2, 0x72, 0xf6, 0xe9, 0x82, 0x72, 0x36, 0x4c, 0xdf, 0xc9,
	0x72, 0x76, 0x15, 0xcd, 0xa6, 0x99, 0x87, 0x33, 0xda, 0xab, 0x31, 0x8f, 0x76, 0x03, 0xe9, 0x44,
	0x8c, 0xf6, 0x16, 0x17, 0xa1, 0xc9, 0x27, 0x0a, 0x9a, 0xd4, 0xb6, 0x57, 0xb9, 0x8c, 0xb3, 0xad,
	0x9d, 0xfb, 0xb5, 0xed, 0x56, 0xc3, 0x99, 0x0f, 0x52, 0x9a, 0x32, 0x4d, 0x38, 0x08, 0xf8, 0x91,
	0xeb, 0x0d, 0x08, 0x8e, 0x65, 0x7a, 0xb5, 0x01, 0x68, 0x75, 0x20, 0x29, 0x23, 0x7d, 0x48, 0x83,
	0xc0, 0x3d, 0xa2, 0xf1, 0xc0, 0x3d, 0xe0, 0xb1, 0x34, 0x17, 0x14, 0x16, 0x15, 0x75, 0x9f, 0xc6,
	0x83, 0x75, 0x1e, 0x4b, 0x9d, 0xf7, 0x8a, 0x05, 0xd7, 0x73, 0xa4, 0xef, 0x24, 0xcc, 0x03, 0x05,
	0x26, 0x29, 0x9d, 0x41, 0xf0, 0xdd, 0x2c, 0x73, 0xb6, 0xe0, 0x50, 0x87, 0x82, 0x6b, 0xa6, 0x58,
	0xeb, 0xeb, 0x63, 0xa1, 0xba, 0x02, 0xea, 0x65, 0x5c, 0xdf, 0x13, 0x7e, 0xa0, 0xf6, 0x22, 0xd2,
	0x23, 0xe4, 0x79, 0x74, 0x2e, 0x4e, 0x62, 0xae, 0xf6, 0xb0, 0x1b, 0x10, 0x29, 0x39, 0x03, 0xbf,
	0x66, 0xc9, 0x59, 0x4e, 0xc9, 0xdb, 0x40, 0xcd, 0xae, 0x87, 0x64, 0x55, 0xb6, 0xf3, 0xb9, 0xeb,
	0x21, 0x69, 0x71, 0xed, 0x25, 0x64, 0xe7, 0x40, 0x69, 0x9e, 0xef, 0x82, 0x76, 0x53, 0xc7, 0x1c,
	0x93, 0xeb, 0x7b, 0x0e, 0x2d, 0x19, 0xb5, 0xd1, 0xe5, 0x3d, 0x48, 0x03, 0x2c, 0x29, 0xd5, 0x59,
	0xd4, 0x74, 0x07, 0xc8, 0x53, 0x59, 0xb2, 0x8b, 0xff, 0xd7, 0x59, 0xb2, 0x1b, 0x68, 0x99, 0x25,
	0xe1, 0x38, 0xa0, 0x92, 0xa6, 0x32, 0xbe, 0xc4, 0x92, 0x30, 0x0b, 0x91, 0xa4, 0xfd, 0x94, 0x29,
	0xea, 0x43, 0xfa, 0xd4, 0x54, 0x9c, 0x73, 0x14, 0xfb, 0x1d, 0x34, 0xeb, 0x85, 0x6e, 0x44, 0xbd,
	0x21, 0xe4, 0x4c, 0x26, 0x5d, 0x87, 0x7a, 0xdb, 0xed, 0xb4, 0xea, 0xf7, 0xd6, 0x96, 0xd3, 0x27,
	0xa7, 0xb6, 0xd3, 0xd8, 0x6d, 0x3b, 0x67, 0xbd, 0xb0, 0x43, 0xbd, 0xa1, 0x3a, 0x50, 0xb4, 0x6b,
	0x48, 0x7d, 0x88, 0xb0, 0x4f, 0x3b, 0xb3, 0xf0, 0x0c, 0x46, 0xde, 0xd2, 0x3a, 0x65, 0x06, 0x48,
	0x59, 0xbf, 0x7a, 0x4d, 0x29, 0xc4, 0xda, 0xe9, 0x58, 0x24, 0xc4, 0x39, 0x07, 0xdc, 0x6e, 0xc6,
	0xb4, 0x0f, 0xd0, 0xc5, 0xc9, 0xab, 0x03, 0xae, 0xc0, 0x3e, 0xc5, 0x2c, 0x86, 0xd8, 0xf6, 0x21,
	0x57, 0x08, 0xce, 0x4f, 0x5d, 0x21, 0xd8, 0xaa, 0x39, 0x0d, 0xe7, 0xc2, 0xc4, 0xfd, 0x01, 0x47,
	0xb7, 0x64, 0xef, 0xa0, 0x45, 0x58, 0x83, 0x11, 0x11, 0x52, 0x2d, 0xd5, 0x0d, 0x68, 0xf9, 0xf1,
	0x71, 0xcb, 0x6a, 0x11, 0xee, 0x6b, 0xe6, 0xda, 0x05, 0xb5, 0x02, 0xee, 0xfd, 0xa6, 0xd3, 0x6d,
	0xed, 0xee, 0xb8, 0xf5, 0x3d, 0xc7, 0x69, 0xee, 0xf4, 0x9c, 0x85, 0xfe, 0x18, 0x62, 0x77, 0xd0,
	0x05, 0xed, 0x69, 0xe8, 0xe0, 0x37, 0xd3, 0xdd, 0xe7, 0x40, 0x77, 0x9f, 0x9a, 0xd0, 0xdd, 0x13,
	0x8e, 0x8f, 0x63, 0xc7, 0x27, 0x9d, 0x21, 0xc8, 0xca, 0x49, 0xe9, 0x0e, 0xc9, 0x31, 0x44, 0xd2,
	0xf3, 0xce, 0xac, 0x7a, 0xbe, 0x47, 0x8e, 0xed, 0x2b, 0x48, 0xd9, 0xaa, 0x7e, 0x42, 0xa8, 0x6f,
	0x12, 0x35, 0xd9, 0xb3, 0xfd, 0x06, 0x7a, 0x3c, 0x22, 0x0c, 0xab, 0x59, 0x83, 0xa4, 0x5d, 0x36,
	0x77, 0x2f, 0xa6, 0xca, 0x78, 0xde, 0xf0, 0x21, 0x85, 0x97, 0xce, 0xc7, 0x2b, 0xc8, 0x9e, 0x14,
	0xf3, 0xa9, 0x20, 0xba, 0x5a, 0xad, 0x64, 0xac, 0xbc, 0x4c, 0x83, 0x0a, 0x88, 0x32, 0x02, 0x8e,
	0xfd, 0x6c, 0x53, 0xbc, 0x9c, 0x26, 0x83, 0xb1, 0x6f, 0xb6, 0x03, 0x64, 0xe0, 0x05, 0x25, 0x72,
	0x1c, 0xc0, 0x2e, 0x39, 0x48, 0x93, 0xc0, 0xd8, 0xdc, 0x56, 0x91, 0x2e, 0x74, 0xef, 0x1a, 0xe0,
	0x11, 0x65, 0x32, 0x2d, 0x5d, 0x1b, 0x56, 0x17, 0x38, 0xfb, 0x94, 0x49, 0x9d, 0x97, 0x13, 0x64,
	0x02, 0xac, 0xab, 0xd6, 0xcb, 0x8a, 0x9e, 0x43, 0xde, 0x40, 0xcb, 0x01, 0xe7, 0xb1, 0xdb, 0x27,
	0x8c, 0x08, 0x48, 0x74, 0xbc, 0x6a, 0xb2, 0x80, 0x9c, 0xc7, 0x9b, 0x29, 0x51, 0x59, 0x3b, 0x80,
	0xa5, 0x29, 0x4a, 0x1d, 0xbc, 0x2e, 0x28, 0x5a, 0x9a, 0xa0, 0xbc, 0x86, 0x66, 0x71, 0x10, 0x78,
	0x03, 0x1c, 0x43, 0x04, 0x3b, 0xb7, 0x76, 0xe6, 0x10, 0x07, 0x92, 0x38, 0x29, 0xd5, 0xfe, 0x14,
	0x5a, 0x82, 0xeb, 0x7f, 0xf1, 0xc8, 0xf5, 0x49, 0x80, 0x8f, 0xe1, 0xda, 0xc8, 0xf2, 0xdd, 0x8b,
	0x7a, 0xc5, 0x61, 0xc1, 0x1b, 0x3c, 0xc6, 0xbd, 0xfb, 0x0d, 0xc5, 0x5d, 0x5b, 0xce, 0x51, 0xdc,
	0x57, 0xef, 0x38, 0x0b, 0x0a, 0xd6, 0x1b, 0x01, 0x13, 0x92, 0x28, 0xb9, 0x4c, 0x14, 0x98, 0xce,
	0x37, 0x61, 0xe9, 0x97, 0xc7, 0x29, 0x28, 0xb0, 0x9f, 0xe3, 0xba, 0x41, 0x88, 0x23, 0x6d, 0x45,
	0xdf, 0x02, 0xa0, 0xa9, 0x1b, 0xb4, 0x71, 0x04, 0xa6, 0xf4, 0x45, 0xb4, 0x62, 0x70, 0xb9, 0x8b,
	0x38, 0xba, 0x06, 0x6d, 0xba, 0xca, 0x5d, 0xad, 0xb1, 0xd0, 0xa9, 0x00, 0x33, 0xa8, 0x32, 0xcf,
	0x39, 0xea, 0x4f, 0xfb, 0x3e, 0xba, 0x78, 0x90, 0x3a, 0xb8, 0x6e, 0xe6, 0xd2, 0xb2, 0x43, 0x5e,
	0x5d, 0x03, 0xbd, 0xbe, 0x9e, 0xd7, 0xeb, 0x22, 0x57, 0xd8, 0xb9, 0x70, 0x50, 0xe4, 0x20, 0xbf,
	0x8e, 0x2e, 0xea, 0x74, 0x7d, 0x96, 0xab, 0x05, 0x3f, 0x88, 0xfa, 0x50, 0x7c, 0x5e, 0x72, 0x74,
	0x32, 0x7f, 0xdb, 0xa4, 0x6c, 0x0d, 0x4f, 0xd7, 0x7b, 0x60, 0xe9, 0xa9, 0x6f, 0x0a, 0xd0, 0x73,
	0x9a, 0xd0, 0x32, 0x6b, 0x39, 0xae, 0x83, 0x41, 0xc5, 0x79, 0x4e, 0xad, 0x65, 0x56, 0x00, 0xb3,
	0xeb, 0x68, 0x99, 0x3c, 0x88, 0x05, 0x76, 0xd3, 0x8b, 0x9a, 0xd5, 0xf7, 0xe0, 0x2d, 0x8a, 0x8e,
	0xc9, 0x7a, 0x53, 0x21, 0xdb, 0xb2, 0xef, 0x2c, 0x81, 0x4c, 0xdb, 0x88, 0xd8, 0x77, 0xd0, 0xbc,
	0xc4, 0x23, 0xa2, 0xb3, 0x4b, 0x9f, 0x80, 0x6a, 0xf5, 0x79, 0x23, 0xaf, 0xa4, 0xbb, 0x78, 0x44,
	0xd4, 0x2a, 0x39, 0x73, 0xd2, 0xfc, 0x55, 0x5a, 0x9b, 0xa8, 0x95, 0xd6, 0x26, 0xde, 0x47, 0x4b,
	0xda, 0x98, 0xf2, 0x24, 0xf6, 0x78, 0x48, 0xa0, 0x0a, 0xba, 0x9c, 0xf6, 0xd3, 0x84, 0xf8, 0x7a,
	0x57, 0xb3, 0xd6, 0x2e, 0x0d, 0xdd, 0x09, 0x42, 0x56, 0xa3, 0x5d, 0x0c, 0x73, 0xd4, 0xa2, 0xd2,
	0x45, 0xbd, 0xa8, 0x74, 0x51, 0x50, 0xd6, 0x6a, 0x14, 0x94, 0xb5, 0x5e, 0x42, 0x76, 0xaa, 0x7f,
	0x94, 0xb9, 0x51, 0x80, 0x8f, 0x95, 0x1f, 0xb8, 0x99, 0x57, 0xac, 0x36, 0x65, 0x1d, 0x4d, 0xcf,
	0xa3, 0xf1, 0x83, 0x0c, 0xbd, 0x35, 0x81, 0xc6, 0x0f, 0x52, 0xf4, 0xf4, 0xcd, 0xd8, 0xd6, 0x2f,
	0xfd, 0x66, 0xec, 0x1e, 0x42, 0x23, 0x2a, 0xe9, 0x01, 0x0d, 0x94, 0x4a, 0xdc, 0x83, 0x86, 0x2e,
	0xe7, 0x6a, 0x0b, 0x6a, 0xa9, 0xef, 0x67, 0x80, 0xb5, 0x2b, 0x05, 0x44, 0xb7, 0x93, 0x1c, 0x04,
	0xd4, 0x73, 0x72, 0x0d, 0x15, 0x55, 0xed, 0xb6, 0x8b, 0xaa, 0x76, 0xeb, 0xe8, 0xa9, 0x3c, 0x0e,
	0x27, 0x31, 0x77, 0x3d, 0x41, 0x94, 0xed, 0x71, 0xc1, 0xe7, 0xaa, 0xb6, 0x61, 0x0d, 0xae, 0x8c,
	0xc5, 0x6a, 0x49, 0xcc, 0xeb, 0x1a, 0xa2, 0xc3, 0x80, 0xd2, 0xca, 0x5f, 0xa7, 0xb4, 0xf2, 0xa7,
	0x82, 0x9e, 0x48, 0x90, 0x11, 0xe5, 0x89, 0x4c, 0x8d, 0x25, 0x28, 0x03, 0x91, 0xd5, 0xf7, 0xaf,
	0x9f, 0xba, 0x79, 0xda, 0x79, 0x3c, 0x65, 0x6b, 0x9b, 0xd9, 0xd6, 0xcc, 0x09, 0x39, 0xa3, 0x80,
	0x23, 0x22, 0x04, 0xf5, 0x49, 0xd5, 0x01, 0x25, 0xc8, 0xe4, 0xb4, 0xc6, 0x19, 0xa6, 0xbd, 0x81,
	0xae, 0xe7, 0xc7, 0x98, 0x48, 0x22, 0xb3, 0xa8, 0x47, 0x10, 0x8f, 0x0b, 0x5f, 0x56, 0xbb, 0xf0,
	0xa6, 0x4f, 0x8c, 0x87, 0xbb, 0x27, 0x89, 0x34, 0xcb, 0xe8, 0x68, 0x8c, 0x9a, 0xd7, 0xd4, 0x31,
	0x4a, 0xef, 0xad, 0xec, 0x6b, 0xbb, 0x6d, 0x9c, 0x1d, 0x73, 0x5f, 0x05, 0xa3, 0xa5, 0x08, 0x27,
	0x52, 0x9d, 0x04, 0x31, 0xb8, 0x13, 0x9f, 0x86, 0x95, 0xbd, 0x3a, 0x65, 0x73, 0x3b, 0x0a, 0xd3,
	0xd5, 0x90, 0xb5, 0x6b, 0x85, 0x64, 0x77, 0x8f, 0x05, 0x34, 0xa4, 0x31, 0xf1, 0x9d, 0xc5, 0x28,
	0x47, 0xb7, 0x5f, 0x41, 0x17, 0xb4, 0x3b, 0x1d, 0x8e, 0xa2, 0xfc, 0x45, 0x90, 0x0f, 0xf4, 0xe1,
	0x04, 0xbc, 0xf6, 0x28, 0x1a, 0x5f, 0xff, 0x78, 0x17, 0x5d, 0x3d, 0x22, 0x64, 0x48, 0x98, 0xef,
	0x16, 0xdd, 0xc7, 0xfa, 0x02, 0x1d, 0x30, 0x1a, 0x48, 0xef, 0xc4, 0xb5, 0xac, 0x02, 0xf1, 0xfc,
	0x55, 0xab, 0x2f, 0x2c, 0x12, 0xcf, 0xdd, 0xb8, 0xaa, 0xa1, 0x27, 0xa7, 0xc5, 0x27, 0x6f, 0x5e,
	0x7d, 0x91, 0xbe, 0x21, 0x38, 0xd9, 0xc0, 0xc4, 0x05, 0xac, 0x2f, 0x42, 0xe7, 0xa7, 0xbc, 0x2e,
	0x70, 0x01, 0xbe, 0xf8, 0x97, 0xe0, 0x72, 0xad, 0x4c, 0xb8, 0x5c, 0xe0, 0x2e, 0x5c, 0x43, 0x0b,
	0xaa, 0xf5, 0xd4, 0x19, 0xf9, 0x12, 0x7d, 0xff, 0xf2, 0x80, 0xc7, 0xa9, 0x03, 0x72, 0x19, 0xcd,
	0xe9, 0xee, 0x05, 0xa9, 0xba, 0xda, 0x81, 0x84, 0x56, 0x04, 0xb1, 0xb7, 0xd0, 0x65, 0x9d, 0x91,
	0x48, 0xe3, 0x70, 0x35, 0xa7, 0xe9, 0xe5, 0x92, 0x2f, 0xbd, 0x7e, 0x6a, 0x3a, 0x45, 0xe1, 0x5c,
	0x02, 0x78, 0x67, 0x8c, 0x4e, 0x2f, 0x9b, 0x7c, 0x05, 0xaa, 0x8e, 0x4b, 0x1a, 0xd9, 0x95, 0x09,
	0x91, 0x04, 0x44, 0x56, 0x71, 0xfe, 0x82, 0x18, 0x98, 0xf2, 0x14, 0x99, 0x1e, 0x20, 0x8e, 0xc2,
	0xad, 0x3d, 0x33, 0x74, 0xcb, 0xb9, 0x6e, 0x1b, 0xb3, 0x04, 0x07, 0xce, 0x45, 0x59, 0xc8, 0xb6,
	0x3f, 0x40, 0xb7, 0xcc, 0x86, 0xcc, 0x6d, 0xd0, 0x13, 0x03, 0x4a, 0xd3, 0xd3, 0x07, 0xb0, 0x68,
	0x37, 0xb4, 0x44, 0x27, 0xdb, 0xb2, 0x53, 0x2d, 0xf7, 0x74, 0xf6, 0x7a, 0x1f, 0xbd, 0x60, 0x9a,
	0xf6, 0x12, 0x21, 0x08, 0x38, 0x55, 0xa5, 0x2d, 0x7b, 0xd0, 0xf2, 0xb3, 0x5a, 0xa0, 0xae, 0xf1,
	0x65, 0x0d, 0x7f, 0x57, 0x05, 0x3d, 0x33, 0xd5, 0xf2, 0x64, 0x7b, 0xde, 0x80, 0x53, 0x8f, 0x54,
	0x7d, 0x98, 0xc0, 0xa7, 0x1f, 0x32, 0x81, 0x75, 0x00, 0xae, 0xdd, 0x28, 0x99, 0x41, 0xcd, 0x76,
	0x5b, 0x0c, 0xae, 0xd5, 0x3b, 0xd7, 0x26, 0x46, 0x97, 0x1f, 0x94, 0x06, 0xda, 0xdf, 0x5d, 0x41,
	0xcf, 0x4f, 0x0d, 0x8c, 0x9d, 0x78, 0x59, 0x33, 0x38, 0xf2, 0xcb, 0x3c, 0xb8, 0xd5, 0x89, 0xc1,
	0xed, 0x4c, 0x4e, 0x9a, 0x19, 0x9f, 0x8f, 0xee, 0x3c, 0x7a, 0x45, 0x12, 0x49, 0x7c, 0xd7, 0xe3,
	0x94, 0xb9, 0x31, 0x97, 0xb2, 0x7a, 0x08, 0x66, 0xf2, 0xd6, 0xc3, 0x17, 0x66, 0x4f, 0x12, 0xbf,
	0xce, 0x29, 0xeb, 0x71, 0x29, 0xed, 0x5d, 0x75, 0x40, 0x64, 0xcb, 0x02, 0x79, 0x70, 0x9d, 0x44,
	0xee, 0x3f, 0x3a, 0x79, 0x77, 0xde, 0xcb, 0x26, 0x57, 0x09, 0xea, 0x54, 0xf3, 0xbb, 0xe8, 0x2a,
	0x09, 0x89, 0xe8, 0x13, 0xe6, 0x8d, 0xbf, 0x42, 0x48, 0xab, 0xd0, 0xb2, 0x4a, 0x21, 0xa5, 0x52,
	0xcd, 0x20, 0x8d, 0x89, 0x92, 0xb8, 0x3c, 0x59, 0x4e, 0xa5, 0x23, 0x1c, 0x13, 0x08, 0x63, 0x3e,
	0x03, 0x87, 0xe4, 0x44, 0x39, 0x15, 0x98, 0x2a, 0xa6, 0x99, 0x3a, 0xe7, 0x74, 0xbc, 0x41, 0x89,
	0xac, 0x0e, 0xf5, 0x7d, 0x8c, 0x9c, 0x50, 0xca, 0xb2, 0x5f, 0x43, 0x17, 0x03, 0xcc, 0xdc, 0x01,
	0x97, 0xb1, 0xfe, 0xfe, 0x24, 0xe0, 0x1e, 0x86, 0x84, 0x69, 0x08, 0xce, 0xf0, 0xf9, 0x00, 0xb3,
	0x2d, 0x2e, 0xe3, 0x0e, 0x65, 0xfd, 0x6d, 0xc3, 0x52, 0x0e, 0x8e, 0x0e, 0x96, 0x5c, 0xc6, 0x7d,
	0x70, 0x70, 0x98, 0x8e, 0xfc, 0x35, 0x75, 0x87, 0xfb, 0xca, 0xc1, 0xb9, 0x61, 0xee, 0x4b, 0xbb,
	0x7e, 0x22, 0x74, 0x93, 0xdc, 0xdc, 0x5f, 0x80, 0x2b, 0xda, 0x86, 0xa8, 0x1c, 0xd9, 0xfc, 0xa8,
	0x0f, 0x04, 0x3f, 0x92, 0x04, 0x6a, 0x59, 0x91, 0xfe, 0x6a, 0x63, 0x3c, 0xec, 0xf5, 0x8c, 0x07,
	0xbe, 0xaa, 0x1e, 0x42, 0x34, 0xc0, 0x92, 0x54, 0x3f, 0x6b, 0xe2, 0x0e, 0xa0, 0x75, 0x14, 0x49,
	0x4d, 0x87, 0x3e, 0x39, 0x4d, 0x24, 0x49, 0x7c, 0x48, 0x17, 0xc8, 0xaa, 0xd0, 0xd3, 0xa1, 0x99,
	0x0d, 0xc3, 0xeb, 0x2a, 0x96, 0xbd, 0x8e, 0x9e, 0x24, 0x0f, 0x22, 0x22, 0x68, 0x48, 0x58, 0x8c,
	0x03, 0x18, 0x92, 0x72, 0xb6, 0x32, 0x5b, 0x19, 0x83, 0xec, 0xd5, 0x3c, 0x68, 0xd3, 0x60, 0x52,
	0x0b, 0xd9, 0x44, 0x96, 0x4e, 0x0c, 0x67, 0xa9, 0x4d, 0x59, 0x4d, 0xc0, 0x4b, 0xbe, 0x92, 0xf7,
	0xf5, 0x27, 0xd3, 0xc9, 0xce, 0xb9, 0xfe, 0xc4, 0xb3, 0xb4, 0xdf, 0x4d, 0xcb, 0x26, 0x69, 0x1c,
	0x3c, 0x9a, 0x48, 0x11, 0x9e, 0x28, 0xf3, 0x98, 0x82, 0x4a, 0x1a, 0xfb, 0x6e, 0x21, 0x5b, 0x9f,
	0xbe, 0xc6, 0xee, 0xeb, 0xba, 0xc9, 0xd1, 0xc4, 0x38, 0xda, 0xb2, 0x0f, 0xcd, 0x80, 0xd2, 0xea,
	0x32, 0x8a, 0x63, 0x05, 0x53, 0x14, 0xe5, 0x7a, 0x9a, 0xcb, 0xe4, 0x79, 0x1d, 0xfe, 0x72, 0xd0,
	0x61, 0x2b, 0xe3, 0x18, 0xdd, 0xbd, 0xf2, 0x16, 0x9a, 0xcf, 0x1c, 0x7f, 0x7b, 0x39, 0xbb, 0xad,
	0xb3, 0x04, 0xf7, 0x74, 0xae, 0xa0, 0x39, 0x8f, 0xb3, 0x98, 0xa8, 0xa1, 0xcc, 0x5c, 0xaf, 0xdc,
	0x5c, 0x74, 0xb2, 0xe7, 0x55, 0x7f, 0xfa, 0x1a, 0xe2, 0x02, 0x9a, 0x75, 0x9a, 0xb5, 0xc6, 0x07,
	0x7b, 0x1d, 0xeb, 0xb4, 0x7d, 0x0e, 0x2d, 0x74, 0x9b, 0xce, 0xfd, 0xa6, 0xd3, 0x6d, 0xf6, 0xf6,
	0x3a, 0x56, 0xc5, 0x9e, 0x45, 0xa7, 0x9c, 0xbd, 0x1d, 0x6b, 0xc6, 0x5e, 0x44, 0x73, 0x9d, 0xdd,
	0x6e, 0x6f, 0xb3, 0xd6, 0x6e, 0x5a, 0xa7, 0xd4, 0xd3, 0xce, 0x6e, 0x0f, 0xe4, 0xac, 0x33, 0xb6,
	0x85, 0x16, 0xb5, 0x54, 0xad, 0xdb, 0x6d, 0x6d, 0xee, 0x58, 0x67, 0x57, 0xbf, 0x75, 0x06, 0xcd,
	0x67, 0xf9, 0x3b, 0xfb, 0x02, 0x4a, 0x33, 0x78, 0xd6, 0x2f, 0xa6, 0xff, 0x55, 0x94, 0x94, 0xbe,
	0x61, 0x60, 0x2e, 0x3c, 0x3e, 0x06, 0x7d, 0x38, 0xb5, 0x7a, 0xaf, 0x55, 0x6f, 0x5a, 0x15, 0xdb,
	0x46, 0xcb, 0xf5, 0xdd, 0xdd, 0x8e, 0xab, 0xce, 0x6d, 0x8d, 0x38, 0x6d, 0x3f, 0x8e, 0x56, 0xb6,
	0x9b, 0x9b, 0xb5, 0xfa, 0x07, 0xba, 0x20, 0xa4, 0xc9, 0x67, 0xec, 0xab, 0xe8, 0x92, 0x21, 0x77,
	0x77, 0xb7, 0x77, 0xdd, 0xf7, 0xf7, 0x9a, 0x7b, 0x4d, 0xc3, 0x3c, 0xab, 0x64, 0xea, 0xbb, 0xed,
	0x4e, 0xb3, 0xd7, 0xea, 0xb5, 0xee, 0xa7, 0xe4, 0x59, 0xfb, 0x02, 0xb2, 0x4c, 0xf7, 0xaf, 0xde,
	0x7f, 0xd5, 0x50, 0xe7, 0xec, 0xf3, 0xe8, 0xdc, 0x7e, 0xb3, 0x79, 0xaf, 0xb9, 0xd3, 0x70, 0x7b,
	0xbb, 0x7b, 0xce, 0x4e, 0xf3, 0x03, 0x6b, 0x5e, 0x11, 0xb7, 0x77, 0xeb, 0xb5, 0xed, 0xdc, 0x50,
	0x90, 0xbd, 0x84, 0xe6, 0xbb, 0x9d, 0x66, 0xbd, 0x57, 0xeb, 0xed, 0x3a, 0xd6, 0x82, 0x9a, 0x39,
	0x6d, 0xb1, 0x34, 0x7f, 0x51, 0xbd, 0xcc, 0x66, 0x6d, 0x6f, 0xa7, 0xb7, 0xdd, 0xec, 0x59, 0x4b,
	0xab, 0xb7, 0x51, 0x35, 0xd3, 0x03, 0x15, 0x3e, 0xc4, 0x44, 0xc6, 0xa9, 0x0e, 0xd9, 0xe8, 0xf4,
	0x67, 0x24, 0x67, 0xe9, 0x7d, 0x37, 0xf5, 0xf7, 0xea, 0xcf, 0xcd, 0xa0, 0x0b, 0x45, 0x97, 0x8a,
	0x55, 0x78, 0x34, 0x76, 0x3a, 0xb5, 0x7f, 0xad, 0x17, 0x7e, 0x59, 0xa6, 0x5e, 0xa7, 0x76, 0xad,
	0x5f, 0x40, 0xd6, 0x21, 0x65, 0x54, 0x0e, 0x72, 0x48, 0x5d, 0xa4, 0x3a, 0xa7, 0xe9, 0x63, 0xe8,
	0x1d, 0x74, 0x81, 0x32, 0x1a, 0x53, 0xb8, 0xe3, 0x90, 0x73, 0x21, 0x75, 0xc2, 0xd8, 0xce, 0x78,
	0x63, 0x1f, 0xf2, 0x1e, 0x5a, 0xd2, 0x77, 0xa1, 0x27, 0x2f, 0x26, 0x3e, 0x57, 0x7e, 0x1b, 0xfa,
	0x36, 0x10, 0x4c, 0x9a, 0x7d, 0x51, 0x8c, 0x1f, 0xe4, 0x95, 0xaf, 0xad, 0xa0, 0x85, 0x1c, 0x77,
	0xaa, 0xd4, 0x55, 0x99, 0x2e, 0x75, 0xed, 0x23, 0x2d, 0x9e, 0x5e, 0xc4, 0x9a, 0x99, 0xb8, 0x6f,
	0x30, 0xdd, 0xef, 0xda, 0xd5, 0xa1, 0x7b, 0x82, 0x98, 0x85, 0x9e, 0xfa, 0x46, 0xb7, 0x26, 0xae,
	0x3e, 0x81, 0xae, 0xc0, 0x05, 0x08, 0x2c, 0xe2, 0xe3, 0xb1, 0x84, 0xf9, 0x8c, 0x63, 0xf5, 0x18,
	0x5d, 0x2d, 0xe4, 0xca, 0x88, 0x33, 0x49, 0xec, 0x2f, 0x40, 0x67, 0xf5, 0xbd, 0x3c, 0xf3, 0x7d,
	0xe4, 0x53, 0x27, 0xc6, 0x63, 0x1a, 0xd2, 0x57, 0xf4, 0xd6, 0x56, 0x27, 0x86, 0x35, 0xc1, 0x73,
	0xbb, 0x89, 0xe7, 0x11, 0x29, 0x1d, 0xd3, 0xe2, 0xea, 0x31, 0x7a, 0xaa, 0xa0, 0xeb, 0x9a, 0xa7,
	0xde, 0x21, 0x20, 0x7e, 0x9f, 0x9c, 0x98, 0x93, 0xca, 0x2f, 0xd7, 0x9c, 0xbc, 0x8e, 0x2e, 0x4f,
	0xda, 0x2f, 0xb8, 0xd9, 0x6c, 0x14, 0xf7, 0x12, 0x9a, 0x1d, 0x8e, 0xe0, 0xfb, 0x42, 0xe8, 0x70,
	0xd1, 0x39, 0x3b, 0x1c, 0x35, 0x70, 0x8c, 0x57, 0x7f, 0xa1, 0xa2, 0xc5, 0x20, 0xf8, 0xca, 0x7d,
	0x5a, 0xa6, 0xad, 0xff, 0x4b, 0xc8, 0xc6, 0x23, 0x22, 0x70, 0x9f, 0x98, 0x0f, 0x20, 0x20, 0x7e,
	0xaa, 0x98, 0x6f, 0xcb, 0x34, 0x07, 0xee, 0xf3, 0xa7, 0x5f, 0xa2, 0x85, 0xf8, 0x01, 0x0d, 0x93,
	0x30, 0x8f, 0x9e, 0x49, 0xef, 0x90, 0x03, 0x67, 0x8c, 0xfe, 0x5c, 0x05, 0x5d, 0x3a, 0x20, 0x03,
	0x3c, 0xa2, 0x5c, 0xb8, 0xd2, 0xe3, 0x82, 0xb8, 0x23, 0x2c, 0x28, 0x66, 0x1e, 0x31, 0xb7, 0x13,
	0x9f, 0xce, 0xe7, 0x26, 0xd6, 0x0d, 0xb4, 0xab, 0x90, 0xf7, 0x0d, 0x50, 0x79, 0x56, 0x0f, 0x61,
	0x67, 0x9e, 0xd5, 0xe3, 0x07, 0x45, 0xec, 0xd5, 0x9f, 0xa5, 0x68, 0xae, 0xde, 0x1e, 0x45, 0x6a,
	0x26, 0xec, 0x17, 0xd1, 0xe9, 0x70, 0x14, 0xa9, 0x05, 0xc9, 0x57, 0x06, 0x0c, 0xf7, 0xb6, 0xfe,
	0x7f, 0x12, 0x3a, 0x00, 0xba, 0xf2, 0x83, 0x14, 0xcd, 0xa5, 0xa4, 0xec, 0xfe, 0x63, 0x25, 0x77,
	0xff, 0xb1, 0x86, 0x60, 0x1f, 0x04, 0xd8, 0x27, 0x69, 0x1d, 0xed, 0x99, 0x92, 0x26, 0x6f, 0x9b,
	0x98, 0x4f, 0x61, 0x9d, 0xb1, 0xd4, 0xd4, 0xe6, 0x3a, 0x35, 0xb5, 0xb9, 0xae, 0xfc, 0xc0, 0x00,
	0x2d, 0xe4, 0x24, 0xed, 0x1d, 0x74, 0x3a, 0xf7, 0xd1, 0xef, 0x6b, 0x1f, 0xa1, 0xb3, 0xfc, 0xdf,
	0x90, 0xf5, 0x38, 0xa3, 0x82, 0x3f, 0xe9, 0x40, 0x3b, 0xca, 0xa1, 0xd0, 0x07, 0xad, 0x3b, 0xc2,
	0x41, 0xa2, 0xd7, 0x71, 0xc6, 0x59, 0xd0, 0xb4, 0xfb, 0x8a, 0xb4, 0xfa, 0xfd, 0x7d, 0x74, 0x6e,
	0xaa, 0x0d, 0x7b, 0x1e, 0xe9, 0x56, 0xac, 0x8a, 0x8d, 0xd0, 0x59, 0x9f, 0xe0, 0x78, 0x20, 0xad,
	0x19, 0x75, 0x76, 0x61, 0x29, 0xa9, 0x8c, 0xa5, 0x75, 0x4a, 0x19, 0x64, 0x46, 0x62, 0xf7, 0x88,
	0x8b, 0x78, 0x60, 0x9d, 0xb1, 0x97, 0x11, 0x82, 0x12, 0x3d, 0xf4, 0x63, 0x9d, 0xb5, 0x2f, 0x22,
	0x5b, 0x26, 0x51, 0xc4, 0x45, 0xec, 0xf6, 0x79, 0xe0, 0xbb, 0x32, 0x22, 0x2c, 0xb6, 0x66, 0xd5,
	0x31, 0xa4, 0x2f, 0x45, 0x45, 0x01, 0xf6, 0x88, 0x6f, 0xcd, 0xa9, 0x56, 0x7d, 0x7d, 0x05, 0xcc,
	0x9a, 0xb7, 0x57, 0xd0, 0x92, 0x87, 0xc3, 0x48, 0xaa, 0x9d, 0xe5, 0x0d, 0x89, 0xaf, 0x2d, 0x3f,
	0x5c, 0xdb, 0x1a, 0xd0, 0x58, 0x5a, 0x0b, 0x7a, 0x40, 0x8c, 0x12, 0x69, 0x2d, 0xda, 0xab, 0xe8,
	0xa9, 0xe1, 0x3d, 0x1a, 0x04, 0x4d, 0x1c, 0x13, 0x01, 0xfb, 0xc5, 0x55, 0x8f, 0xca, 0xe3, 0xeb,
	0x46, 0x82, 0x10, 0x69, 0x2d, 0xa9, 0xc3, 0x6a, 0x1a, 0xb3, 0xc9, 0xfd, 0x80, 0x0e, 0x89, 0xb5,
	0x6c, 0x3f, 0x8b, 0xae, 0x4f, 0x33, 0x7b, 0xfc, 0x88, 0x08, 0xe9, 0x36, 0x88, 0x8c, 0x05, 0x3f,
	0x26, 0xbe, 0x75, 0xce, 0xbe, 0x8d, 0x6e, 0x4d, 0xa1, 0xe0, 0x16, 0x55, 0x8b, 0x8d, 0xf8, 0x90,
	0x08, 0xb7, 0x9b, 0x30, 0x19, 0x0b, 0x3a, 0x24, 0xf7, 0x60, 0xce, 0x2c, 0xfb, 0x69, 0xf4, 0x64,
	0x11, 0xbe, 0xf6, 0x80, 0xb8, 0xf5, 0x44, 0x41, 0x56, 0xec, 0x97, 0xd1, 0x0b, 0x65, 0x90, 0x75,
	0x1c, 0xc7, 0x01, 0xd9, 0x4a, 0x58, 0x9f, 0x08, 0xdd, 0xa2, 0x6d, 0x3f, 0x87, 0x56, 0x8b, 0xe0,
	0xdb, 0xfc, 0x68, 0x8b, 0xe0, 0x20, 0x1e, 0x68, 0xdc, 0x79, 0xfb, 0x25, 0x74, 0xf3, 0x61, 0x23,
	0xed, 0x71, 0xc1, 0xb0, 0xcf, 0x35, 0xfa, 0x82, 0x7d, 0x13, 0x3d, 0x5b, 0x84, 0xee, 0x8e, 0x08,
	0x73, 0x1b, 0x3c, 0x39, 0x08, 0x48, 0x37, 0x4e, 0x98, 0xb4, 0x1e, 0xb7, 0x6f, 0xa1, 0xe7, 0x4a,
	0x91, 0xfb, 0x58, 0x78, 0xe2, 0xb8, 0x66, 0x14, 0xe3, 0x62, 0xd9, 0x6c, 0x01, 0xb6, 0x0e, 0x79,
	0x5d, 0xdd, 0xb6, 0x1e, 0xc5, 0x25, 0xfb, 0x15, 0xf4, 0x62, 0x29, 0xbe, 0x47, 0x02, 0xb8, 0xf3,
	0xd5, 0x62, 0x31, 0x11, 0x22, 0x89, 0x62, 0x69, 0x55, 0xcb, 0x5e, 0x72, 0x03, 0x7b, 0x24, 0x20,
	0x52, 0xba, 0xed, 0x24, 0x88, 0x69, 0x7d, 0x20, 0x38, 0xe3, 0xd6, 0xe5, 0x47, 0xa2, 0x35, 0x50,
	0x0f, 0xe6, 0x4a, 0xd9, 0x94, 0xec, 0x09, 0x89, 0x75, 0xbb, 0xdd, 0x01, 0xf7, 0x86, 0xd2, 0xba,
	0x6a, 0x3f, 0x83, 0xae, 0x15, 0x21, 0x1d, 0x2e, 0x07, 0x98, 0xe9, 0xe6, 0x9e, 0x28, 0x6b, 0x6e,
	0x5b, 0x45, 0x7a, 0x1b, 0x74, 0xbc, 0xc2, 0x4f, 0x96, 0x0d, 0xd3, 0xa1, 0x43, 0xea, 0x76, 0x43,
	0x3e, 0xd4, 0xbe, 0xa8, 0x46, 0x5f, 0x2f, 0x9b, 0x63, 0x05, 0x21, 0xd2, 0x21, 0x23, 0x82, 0x03,
	0xe2, 0xef, 0xd3, 0x78, 0xd0, 0x48, 0x64, 0x6c, 0x3d, 0x6d, 0xbf, 0x85, 0x5e, 0x2b, 0x9c, 0xe3,
	0x21, 0x09, 0x48, 0xcc, 0xd9, 0x3d, 0xb5, 0x63, 0x1c, 0x42, 0x99, 0x87, 0x05, 0x83, 0x00, 0x46,
	0x77, 0xb4, 0x6a, 0xbf, 0x88, 0x9e, 0x2f, 0x16, 0x3c, 0x3e, 0x12, 0x38, 0x1e, 0xb8, 0x1b, 0x01,
	0x16, 0x66, 0x25, 0x9f, 0x29, 0x5b, 0xc9, 0x6d, 0x22, 0x07, 0x02, 0x7b, 0x6e, 0x37, 0x0a, 0x68,
	0xdc, 0xc4, 0x22, 0x1e, 0x68, 0xb5, 0x7a, 0xb6, 0xec, 0xa5, 0xdb, 0x54, 0x60, 0x86, 0xdd, 0x36,
	0x7e, 0xa0, 0x80, 0x35, 0xa1, 0x02, 0x24, 0xeb, 0x86, 0xfd, 0x31, 0xf4, 0x7a, 0x11, 0xba, 0x33,
	0xc0, 0x2c, 0xe6, 0x61, 0x4d, 0x4a, 0x65, 0x9c, 0x98, 0x5b, 0xe7, 0x49, 0xe4, 0x93, 0x4d, 0x81,
	0x3d, 0x52, 0x17, 0xca, 0x66, 0x3c, 0x67, 0xbf, 0x86, 0x5e, 0xf9, 0x28, 0x92, 0x0d, 0xdc, 0xef,
	0x13, 0xa1, 0x85, 0x9e, 0x2f, 0x5b, 0xbb, 0x36, 0x21, 0x11, 0x77, 0xe1, 0x35, 0x0e, 0x28, 0xf3,
	0xa5, 0x75, 0xd3, 0xbe, 0x83, 0x5e, 0x2a, 0x42, 0x42, 0xee, 0x5e, 0x12, 0xa2, 0x76, 0x9e, 0x93,
	0x44, 0x71, 0x92, 0xce, 0xd4, 0x0b, 0x65, 0x2f, 0xde, 0x0d, 0xb0, 0x18, 0xba, 0xdb, 0x04, 0xcb,
	0x01, 0xf1, 0x9b, 0x8c, 0x84, 0xca, 0xcc, 0xdd, 0xb2, 0xef, 0xa2, 0xdb, 0x45, 0xe8, 0x06, 0x95,
	0x6a, 0x4b, 0x70, 0xe1, 0x6e, 0xa8, 0xe3, 0x04, 0x53, 0xb6, 0x19, 0xd0, 0x30, 0x92, 0x44, 0x5a,
	0x2f, 0x96, 0x2d, 0x9c, 0x93, 0x1c, 0x50, 0x6f, 0xe8, 0x76, 0x23, 0x12, 0x04, 0xb2, 0x1b, 0xf3,
	0x80, 0x30, 0xeb, 0xa5, 0x32, 0x75, 0x32, 0xe0, 0xbd, 0x20, 0xa6, 0x21, 0x8e, 0x49, 0x8a, 0x7f,
	0xb9, 0xcc, 0x1c, 0x34, 0x38, 0x0f, 0x5d, 0x33, 0x6c, 0xf5, 0x37, 0xf1, 0xad, 0xdb, 0x65, 0x93,
	0xb3, 0x1b, 0x32, 0x3a, 0x64, 0xb4, 0x3f, 0x88, 0xdd, 0x4e, 0x22, 0xe8, 0x21, 0xd5, 0x51, 0xb8,
	0xb4, 0x5e, 0xb1, 0x5f, 0x45, 0x2f, 0x3f, 0x42, 0xa2, 0x16, 0x04, 0x54, 0xe9, 0xb9, 0x7a, 0x0b,
	0xe2, 0x5b, 0x77, 0xca, 0x66, 0x28, 0x27, 0x62, 0x86, 0x95, 0xc9, 0xbc, 0x5a, 0x26, 0xb3, 0x8f,
	0x45, 0xc0, 0xbd, 0xa1, 0xbb, 0x41, 0x47, 0x44, 0xed, 0xa7, 0x0d, 0x1c, 0xe3, 0x60, 0x9d, 0xab,
	0x95, 0xbe, 0x5b, 0xa6, 0x82, 0x75, 0x71, 0x2c, 0x63, 0x1c, 0xb4, 0x31, 0xf5, 0x09, 0x73, 0x37,
	0x04, 0x97, 0xf1, 0x01, 0x8d, 0x63, 0xc2, 0xd2, 0x35, 0x7c, 0xad, 0xac, 0xb7, 0x49, 0x49, 0xf3,
	0xb4, 0xc3, 0x47, 0x58, 0x5a, 0xaf, 0x97, 0x4d, 0xc4, 0xbd, 0x84, 0x0d, 0x87, 0xd8, 0x58, 0x68,
	0x35, 0xc4, 0x1e, 0x87, 0x64, 0x8d, 0xb4, 0xde, 0x28, 0xd3, 0x74, 0x23, 0xd2, 0x13, 0x34, 0xd2,
	0x22, 0x9b, 0x03, 0x2e, 0xe3, 0xee, 0x80, 0x46, 0xd2, 0x7a, 0xb3, 0xac, 0x9f, 0x1d, 0xdc, 0xc7,
	0x5d, 0x2a, 0x08, 0x4b, 0x27, 0xaf, 0xc9, 0x24, 0xc3, 0x82, 0xf8, 0xd6, 0x5b, 0xf6, 0xeb, 0xe8,
	0xce, 0xc3, 0x45, 0xc6, 0x5d, 0x39, 0x34, 0xea, 0x51, 0x9f, 0x48, 0xeb, 0x63, 0x65, 0xa3, 0xdb,
	0x3e, 0xf6, 0x30, 0x83, 0x93, 0x5b, 0x36, 0x12, 0xa1, 0x1c, 0xd7, 0x01, 0x8e, 0x88, 0x1c, 0xd0,
	0xc3, 0xd8, 0x7a, 0xbb, 0x6c, 0xaf, 0x74, 0x12, 0xbf, 0x0f, 0x7b, 0x40, 0xc7, 0x44, 0x7a, 0x67,
	0xad, 0x95, 0xd9, 0x20, 0x8d, 0x56, 0xef, 0x71, 0xac, 0x8d, 0xe4, 0x16, 0x57, 0x36, 0xd5, 0x7a,
	0xc7, 0x7e, 0x1e, 0x3d, 0x53, 0x2e, 0xa0, 0x50, 0xba, 0xe5, 0x8f, 0xdb, 0x6f, 0xa0, 0x57, 0xcb,
	0x81, 0x7b, 0x4c, 0x12, 0xbd, 0xdc, 0x93, 0xed, 0xbf, 0x5b, 0xba, 0x79, 0x05, 0x3f, 0x82, 0x0f,
	0xf1, 0x45, 0x3a, 0xbb, 0x5d, 0x1a, 0x10, 0xa6, 0x5c, 0xa2, 0xf7, 0xca, 0x66, 0x37, 0x27, 0x03,
	0x67, 0x91, 0xea, 0xc9, 0x48, 0x49, 0xeb, 0x13, 0x65, 0x3b, 0x2d, 0x27, 0x95, 0x76, 0xa1, 0x5f,
	0xe9, 0x93, 0x1f, 0x61, 0x6c, 0xa0, 0xcb, 0x60, 0x81, 0xb5, 0x4c, 0xcd, 0x7e, 0x13, 0xdd, 0x2d,
	0x96, 0xc1, 0x7d, 0xce, 0xee, 0xe9, 0xcd, 0x06, 0xd8, 0x16, 0xd3, 0xb4, 0x0d, 0x2e, 0x42, 0x6b,
	0xbd, 0x6c, 0xfa, 0x26, 0xe4, 0xd6, 0x85, 0x72, 0x35, 0xc9, 0x06, 0x4d, 0x2d, 0x65, 0xbd, 0xfc,
	0xa5, 0x72, 0x62, 0xdd, 0x28, 0xc0, 0xd2, 0xf8, 0x40, 0x8d, 0x32, 0xd7, 0x6a, 0x9f, 0xc6, 0xde,
	0xa0, 0xc1, 0x3d, 0x65, 0x2f, 0xeb, 0x58, 0x0e, 0xf5, 0x19, 0xd4, 0x2c, 0x53, 0xfe, 0x3c, 0xbc,
	0xad, 0x4e, 0x53, 0xea, 0xc5, 0xba, 0x87, 0x8d, 0xb2, 0x29, 0x98, 0x10, 0x49, 0xd7, 0x27, 0x95,
	0x95, 0xd6, 0x66, 0xa9, 0xc5, 0xc9, 0xc9, 0x35, 0xd4, 0x04, 0xec, 0x63, 0x61, 0x96, 0x68, 0xab,
	0x54, 0x15, 0x32, 0xdb, 0xdf, 0x1b, 0x24, 0x0c, 0x3e, 0xda, 0x1e, 0x7b, 0xa0, 0xad, 0xd2, 0x59,
	0xcb, 0xa4, 0xb4, 0x92, 0x9a, 0xf3, 0xc2, 0xb7, 0x3e, 0xf5, 0x51, 0x2d, 0x1b, 0x21, 0x1f, 0x52,
	0xd6, 0xdf, 0xa0, 0x24, 0x30, 0x23, 0xbc, 0x57, 0xb6, 0xe3, 0xda, 0xc4, 0x4f, 0x24, 0x4e, 0x95,
	0xbb, 0x43, 0x62, 0x65, 0xe4, 0x89, 0x6f, 0xb5, 0xcb, 0x04, 0x32, 0xc3, 0x9b, 0x19, 0x5c, 0xdd,
	0xc3, 0x4e, 0xd9, 0x71, 0x93, 0x0a, 0x6c, 0xf2, 0x80, 0x84, 0x1a, 0xbb, 0x5b, 0x86, 0xed, 0x25,
	0x72, 0xe8, 0xee, 0xe3, 0x40, 0x24, 0xb2, 0x93, 0x30, 0x6f, 0x40, 0xa4, 0xd5, 0x79, 0x28, 0xb6,
	0xcb, 0xf8, 0xd1, 0x01, 0x0e, 0x02, 0xad, 0x26, 0xef, 0x97, 0xcd, 0x28, 0xf8, 0x01, 0x72, 0x80,
	0xd5, 0x19, 0xbf, 0x41, 0xa5, 0x4c, 0x84, 0xf1, 0x99, 0x9d, 0xb2, 0xd5, 0xce, 0x4b, 0xbc, 0xa6,
	0x96, 0xa1, 0xe9, 0x0d, 0xb8, 0x0c, 0x70, 0x28, 0xad, 0x6e, 0x99, 0x4c, 0x17, 0x33, 0x1f, 0x7c,
	0xb4, 0xf5, 0x04, 0x9c, 0x21, 0x58, 0x6b, 0xdd, 0x4f, 0xaf, 0xd4, 0x7f, 0x4e, 0x65, 0x9a, 0x11,
	0xf5, 0x88, 0xf2, 0x9f, 0xf5, 0x14, 0xed, 0x95, 0xed, 0xc4, 0xd4, 0xa7, 0x6b, 0xe3, 0x3e, 0x71,
	0x6b, 0xcc, 0xa3, 0x50, 0x61, 0xc0, 0x81, 0x16, 0xbb, 0x5f, 0xa6, 0x21, 0x13, 0x62, 0x75, 0xce,
	0xbc, 0x44, 0x4a, 0x3a, 0x22, 0xdd, 0x01, 0x37, 0xfb, 0x65, 0xbf, 0xcc, 0x82, 0x6f, 0x27, 0x0c,
	0xbb, 0xdb, 0x89, 0x1a, 0xdc, 0x3a, 0xc1, 0x66, 0x05, 0x3f, 0x6d, 0xbf, 0x80, 0x6e, 0x94, 0xa2,
	0x9b, 0x5e, 0x40, 0x23, 0x69, 0xd4, 0xfc, 0x83, 0xb2, 0x21, 0xdd, 0x23, 0x24, 0x22, 0x62, 0xf7,
	0xb0, 0x37, 0x20, 0xdb, 0x60, 0x20, 0x5a, 0x41, 0x90, 0x84, 0x94, 0xe1, 0xd8, 0x48, 0x7e, 0x41,
	0xd9, 0x16, 0x3e, 0x21, 0xd9, 0xc6, 0x0c, 0x6f, 0x13, 0x6c, 0xac, 0xc5, 0x17, 0xda, 0x6b, 0xe8,
	0xcd, 0x8f, 0x24, 0xd7, 0x23, 0x38, 0x04, 0x9f, 0xc9, 0x21, 0x1e, 0x06, 0x87, 0xe3, 0x8b, 0xca,
	0x54, 0x68, 0x1b, 0x2e, 0xff, 0xd5, 0x79, 0x18, 0x62, 0xf8, 0x2c, 0xb9, 0x91, 0x90, 0x40, 0xee,
	0x73, 0x66, 0x7d, 0x71, 0x99, 0x29, 0x5b, 0x27, 0x58, 0xc6, 0x21, 0x96, 0xb1, 0x72, 0x2c, 0x39,
	0x36, 0x0b, 0xfb, 0x25, 0x65, 0xda, 0x33, 0x0d, 0x07, 0xdb, 0xa4, 0x65, 0xdc, 0x32, 0x65, 0xd8,
	0xa7, 0xcc, 0x17, 0x09, 0x7c, 0xab, 0xb2, 0xc1, 0xbd, 0x44, 0x2a, 0x93, 0x0c, 0x3f, 0x0f, 0x41,
	0x59, 0x5f, 0x5a, 0x5f, 0x5a, 0x6e, 0x35, 0x33, 0xb1, 0x0e, 0xc4, 0xd1, 0x99, 0x16, 0xe0, 0xb2,
	0x29, 0x2f, 0x76, 0xc2, 0xb7, 0xb1, 0x8c, 0xb7, 0x94, 0x1f, 0x7e, 0x50, 0x36, 0xe5, 0xd3, 0x72,
	0xe6, 0x39, 0x6f, 0x07, 0xbd, 0x52, 0xeb, 0xa9, 0xac, 0x6c, 0x47, 0xf0, 0x68, 0x40, 0x62, 0x65,
	0xe2, 0xa2, 0xb8, 0x7b, 0x84, 0x85, 0xd1, 0x40, 0xbf, 0xac, 0xc7, 0x09, 0xa9, 0xe6, 0x03, 0x2e,
	0x3c, 0x2a, 0xc3, 0x74, 0x52, 0xb4, 0x2c, 0xb1, 0x3f, 0x8e, 0x3e, 0xf6, 0x91, 0x65, 0xbb, 0x11,
	0x55, 0xb1, 0x46, 0x37, 0x09, 0x43, 0xce, 0x88, 0x6f, 0x1d, 0x96, 0x1e, 0xae, 0x79, 0xe9, 0x93,
	0x47, 0x7f, 0xbf, 0x34, 0x9d, 0x70, 0x80, 0x7d, 0x9f, 0x33, 0xb7, 0x4d, 0x65, 0x5c, 0xe7, 0xd4,
	0x6c, 0xe5, 0x41, 0x99, 0xbf, 0x3f, 0x0d, 0xdf, 0x82, 0x30, 0xd2, 0xa2, 0x65, 0x8a, 0x95, 0xe2,
	0x6b, 0xd1, 0x80, 0xc7, 0xd4, 0xeb, 0x0e, 0xc6, 0xc7, 0xc2, 0x67, 0xca, 0x64, 0xb6, 0xa9, 0x37,
	0x70, 0xeb, 0x03, 0x4c, 0x19, 0xb8, 0x16, 0xda, 0x4d, 0xd4, 0x32, 0xc3, 0x32, 0xad, 0x9a, 0x92,
	0xc9, 0xe9, 0x6f, 0x50, 0xf6, 0x2a, 0x53, 0x22, 0xeb, 0x3c, 0x81, 0x99, 0x0a, 0xcb, 0xac, 0x0b,
	0x04, 0xf8, 0x4d, 0x26, 0x70, 0x3f, 0xf5, 0x8e, 0x58, 0x99, 0xd9, 0xd2, 0x50, 0x6d, 0xc5, 0xb9,
	0x67, 0xdc, 0x43, 0x5e, 0xb6, 0x04, 0xdb, 0x54, 0x19, 0x39, 0xdc, 0x4f, 0x18, 0x5e, 0x0f, 0xb0,
	0x6f, 0x5e, 0x35, 0x7a, 0x28, 0x5c, 0x3b, 0x37, 0xdd, 0x00, 0x8f, 0x0c, 0xfc, 0xb3, 0xe5, 0xb3,
	0xa9, 0x5a, 0x57, 0x16, 0x47, 0xeb, 0x7d, 0x4d, 0x08, 0x7c, 0xac, 0x6d, 0x95, 0x28, 0x48, 0x1a,
	0xb9, 0xeb, 0x58, 0x08, 0xec, 0x0d, 0xf3, 0xe9, 0x2d, 0x59, 0x30, 0x14, 0xb7, 0x47, 0xc2, 0x28,
	0xc0, 0x22, 0xdb, 0x5c, 0xed, 0x6c, 0x61, 0xe3, 0x02, 0x33, 0x76, 0x02, 0xae, 0xbd, 0x8b, 0x6e,
	0xc0, 0x8f, 0x88, 0x6f, 0x25, 0x45, 0x1d, 0x74, 0x19, 0x8d, 0x88, 0x70, 0x53, 0x89, 0x5c, 0xce,
	0x61, 0x54, 0x10, 0x78, 0xa7, 0xf0, 0x2d, 0x82, 0x7d, 0x65, 0x52, 0xf4, 0x1b, 0x1e, 0x15, 0x1c,
	0xe0, 0x7a, 0x61, 0xf4, 0xc6, 0x72, 0xbb, 0x21, 0x96, 0x26, 0xd7, 0xf0, 0xa0, 0x60, 0x35, 0x27,
	0xb0, 0x9b, 0x82, 0x46, 0xd9, 0x86, 0x3a, 0x2e, 0x1c, 0xf2, 0x00, 0xfb, 0xfc, 0xa8, 0x3b, 0xc0,
	0x21, 0x66, 0xea, 0xc1, 0x1b, 0xa6, 0x8a, 0xfb, 0x61, 0x81, 0x56, 0x4d, 0xc2, 0xb7, 0xc8, 0x03,
	0x0d, 0xfd, 0xb2, 0xa2, 0x31, 0xd7, 0x09, 0x8b, 0x71, 0x32, 0x0e, 0x04, 0x62, 0x1e, 0x46, 0xc4,
	0xb7, 0xbe, 0xbc, 0x20, 0x88, 0xcf, 0xb0, 0x3a, 0xfa, 0x6b, 0xfa, 0x7d, 0x33, 0x86, 0xff, 0xaf,
	0x20, 0x90, 0xc9, 0xc0, 0x0e, 0x89, 0x13, 0x61, 0xe6, 0xf7, 0xff, 0x2f, 0xd8, 0x32, 0x6e, 0x53,
	0x85, 0x50, 0x66, 0x26, 0xcc, 0x28, 0x60, 0xf3, 0x10, 0xdf, 0xfa, 0x0a, 0xfb, 0x63, 0x27, 0x92,
	0x47, 0x13, 0xf8, 0x6e, 0x40, 0x94, 0x02, 0xee, 0x1e, 0x6e, 0xd0, 0x89, 0xbd, 0xf9, 0xb9, 0x8a,
	0xbd, 0x7a, 0x22, 0x11, 0xea, 0x76, 0x12, 0x6f, 0xe8, 0xee, 0x8a, 0x03, 0x8d, 0xf9, 0xca, 0x8a,
	0x7d, 0xf7, 0xc4, 0x9e, 0x77, 0xef, 0x13, 0xd6, 0x27, 0x87, 0x49, 0x30, 0x39, 0x20, 0xb5, 0x90,
	0x6a, 0x40, 0x5f, 0x55, 0xb1, 0x6f, 0x9d, 0x9c, 0xee, 0x6d, 0x7a, 0x48, 0x64, 0xac, 0x0c, 0x96,
	0x70, 0x1d, 0x9c, 0xce, 0xca, 0x57, 0x57, 0xec, 0x3b, 0x27, 0xdc, 0xa3, 0x09, 0xec, 0x6e, 0x44,
	0xd8, 0x3e, 0x4f, 0x32, 0x6f, 0xf3, 0x6b, 0x2a, 0xf6, 0x4b, 0x27, 0x67, 0x3d, 0x2f, 0xd1, 0x62,
	0xea, 0x6f, 0x8d, 0xfe, 0xda, 0x8a, 0xfd, 0x62, 0x81, 0x0e, 0x06, 0x3e, 0x11, 0x3d, 0x1a, 0x2b,
	0x3d, 0x81, 0x57, 0xd0, 0xe0, 0xaf, 0x2b, 0x1c, 0x78, 0x0e, 0xbc, 0xc9, 0xb9, 0x0f, 0x8b, 0x2f,
	0xad, 0xaf, 0x2f, 0xc4, 0xd6, 0x95, 0xbf, 0x7b, 0x44, 0xc4, 0xd0, 0x75, 0xb8, 0x37, 0x24, 0xa6,
	0xdd, 0x6f, 0xa8, 0xd8, 0xaf, 0x9c, 0x5c, 0xd2, 0x31, 0x76, 0x3d, 0xa0, 0xcc, 0xcf, 0x0b, 0x7c,
	0x63, 0x61, 0xe3, 0xdd, 0x98, 0x0b, 0x73, 0x24, 0xb9, 0xeb, 0x38, 0x30, 0x87, 0xc5, 0xaf, 0xa8,
	0xd8, 0xaf, 0x9d, 0xb0, 0x3d, 0x13, 0x58, 0xad, 0x89, 0x0e, 0x09, 0x19, 0x66, 0xa6, 0x83, 0x6f,
	0x2a, 0x9c, 0xc4, 0xbc, 0xd0, 0x7d, 0x2e, 0xe2, 0x74, 0x4f, 0x7c, 0x73, 0xc5, 0xbe, 0x5d, 0x60,
	0x82, 0x28, 0x53, 0x2e, 0xb2, 0x6e, 0xbd, 0x4d, 0xa5, 0xa4, 0xe9, 0x76, 0xfb, 0x96, 0x8a, 0xfd,
	0x1c, 0x7a, 0xba, 0x04, 0xbf, 0x8d, 0x65, 0xea, 0xe9, 0x7e, 0x6b, 0xc5, 0x7e, 0xe1, 0xa4, 0x29,
	0xe9, 0x11, 0x6f, 0x40, 0x89, 0x74, 0xbb, 0x09, 0xf5, 0x68, 0x6a, 0x8f, 0xbf, 0xad, 0x70, 0x46,
	0x52, 0xe8, 0x36, 0x66, 0x7e, 0x9b, 0x32, 0x83, 0xfd, 0xf6, 0xc2, 0x97, 0xcb, 0x9a, 0x8d, 0x71,
	0x4c, 0x65, 0x4f, 0xe0, 0x48, 0x1b, 0x9e, 0xef, 0x78, 0x28, 0xda, 0x21, 0x21, 0x8f, 0xc9, 0xb8,
	0xed, 0xef, 0x2c, 0xd4, 0x57, 0x6d, 0x4a, 0x36, 0x28, 0x61, 0xbe, 0xc9, 0xab, 0x38, 0xf8, 0x43,
	0x23, 0xf1, 0x2b, 0x0b, 0x77, 0x50, 0x5e, 0xc2, 0x21, 0x9f, 0x4d, 0x28, 0x09, 0x73, 0x3b, 0xf3,
	0x57, 0x15, 0x6a, 0x6d, 0x5e, 0xe6, 0xfd, 0x71, 0x07, 0xbf, 0xfa, 0x91, 0xe0, 0xfd, 0x31, 0xf8,
	0xbb, 0x1e, 0x09, 0x6e, 0x8e, 0xc1, 0xbf, 0xa6, 0x10, 0xbc, 0x2b, 0xb0, 0x17, 0x10, 0x15, 0x05,
	0x12, 0xd9, 0x1c, 0x47, 0xdd, 0xbf, 0xb6, 0x62, 0xbf, 0x7c, 0xd2, 0x82, 0x67, 0xe0, 0x40, 0x92,
	0x8e, 0xe0, 0x21, 0x95, 0xa4, 0x8b, 0x47, 0x44, 0x5a, 0xbf, 0xae, 0x50, 0xa7, 0x3e, 0x95, 0x28,
	0xdf, 0x92, 0xe1, 0x24, 0x86, 0xd4, 0xa0, 0x1c, 0xa7, 0x0d, 0x7e, 0x7d, 0xc5, 0x7e, 0xab, 0xd8,
	0xf7, 0x9a, 0xc8, 0x91, 0xa7, 0x0f, 0xe3, 0x5c, 0xfc, 0x77, 0x57, 0xec, 0x35, 0xf4, 0x46, 0xa1,
	0xd3, 0x86, 0xc5, 0x70, 0x9f, 0xc2, 0x07, 0x2e, 0xf5, 0x44, 0x48, 0xe2, 0xd7, 0x05, 0x3f, 0x62,
	0x7a, 0xfd, 0xb4, 0x6e, 0xfc, 0x86, 0x8a, 0xfd, 0x6a, 0x49, 0xa0, 0x8e, 0x3f, 0xfc, 0x30, 0x20,
	0x6a, 0xe2, 0x94, 0xfc, 0xa6, 0xc0, 0x23, 0xf3, 0x5e, 0xbf, 0xb1, 0x48, 0x41, 0xf2, 0x22, 0x1d,
	0x4e, 0x25, 0x67, 0x3d, 0x9e, 0x78, 0xe6, 0xcd, 0x7e, 0x53, 0xc5, 0xbe, 0x71, 0xa2, 0xca, 0xa5,
	0xe3, 0xdc, 0x81, 0x20, 0xa4, 0x8d, 0x59, 0x9b, 0x0c, 0xa5, 0xf5, 0x9b, 0x4b, 0x1b, 0xbe, 0x0f,
	0x47, 0xaf, 0x6e, 0xb7, 0x16, 0xc7, 0x38, 0x75, 0x79, 0x7e, 0x4b, 0xe9, 0xe8, 0xb5, 0x44, 0x9d,
	0x0b, 0xc1, 0x21, 0x14, 0x1c, 0x52, 0x73, 0xf6, 0xfc, 0xd6, 0x8a, 0xfd, 0x7c, 0x71, 0x25, 0x0b,
	0xc6, 0xa2, 0x66, 0xf5, 0x3e, 0xa1, 0x81, 0xb4, 0x7e, 0x5b, 0xc5, 0x7e, 0xa3, 0xd8, 0x75, 0xd7,
	0x6d, 0xe7, 0x72, 0x85, 0x40, 0xd0, 0xde, 0x8f, 0xf5, 0x3d, 0x15, 0xfb, 0x66, 0x71, 0x3a, 0xaf,
	0xcb, 0x03, 0x2c, 0xea, 0x22, 0x33, 0xdc, 0xdf, 0x5b, 0xb4, 0x2d, 0xf5, 0x48, 0x28, 0x3b, 0x76,
	0x7b, 0x82, 0x90, 0xde, 0x20, 0xcb, 0x7a, 0xfd, 0xf6, 0x22, 0x4d, 0x1d, 0xd7, 0x67, 0xd6, 0x95,
	0x4b, 0x15, 0x63, 0x73, 0xa6, 0x7d, 0x5f, 0xa5, 0xe0, 0xc4, 0x34, 0x21, 0x0b, 0x27, 0x8c, 0x3e,
	0x18, 0xbf, 0x6c, 0x37, 0x89, 0x88, 0x60, 0x7c, 0x84, 0xb5, 0x3e, 0xfc, 0x8e, 0x52, 0x25, 0xec,
	0x11, 0x21, 0xb8, 0x38, 0x50, 0x0e, 0xa4, 0xdb, 0x26, 0x31, 0x0e, 0xb9, 0x88, 0x06, 0x5c, 0x52,
	0x73, 0x68, 0x7d, 0x7f, 0x91, 0xb6, 0x8f, 0x2b, 0x4d, 0x9b, 0x82, 0xe0, 0x38, 0x5f, 0x6e, 0xfa,
	0x9d, 0x15, 0xfb, 0x9d, 0xe2, 0x18, 0xa7, 0xc6, 0x62, 0x1a, 0xaa, 0x48, 0x5e, 0x57, 0x08, 0xd6,
	0xd5, 0x21, 0xa2, 0x2b, 0x49, 0xb5, 0xfe, 0x00, 0x33, 0x1a, 0x4a, 0xeb, 0x77, 0x15, 0x9d, 0x08,
	0x93, 0xc2, 0x99, 0x66, 0x61, 0x86, 0xef, 0x73, 0xea, 0x4b, 0xeb, 0x07, 0x4a, 0x17, 0xb4, 0x26,
	0xbc, 0x7d, 0x2c, 0x7c, 0x28, 0xf6, 0x85, 0x11, 0x91, 0x71, 0xbe, 0x3a, 0xf8, 0xbb, 0xcb, 0xfb,
	0xca, 0xc4, 0xba, 0x91, 0xda, 0x68, 0x02, 0xd3, 0xb4, 0x0c, 0xfa, 0x7b, 0x4a, 0x57, 0x6b, 0x1d,
	0x33, 0xe2, 0xae, 0x0b, 0x4c, 0x59, 0x17, 0x47, 0x1a, 0xfc, 0x83, 0x45, 0x76, 0x65, 0x0c, 0x06,
	0xa3, 0x25, 0x95, 0x73, 0xa8, 0xe1, 0x3f, 0x54, 0xba, 0x44, 0xeb, 0x38, 0x16, 0x54, 0xc5, 0xef,
	0xe3, 0xcc, 0xf7, 0x46, 0x80, 0x43, 0x72, 0x20, 0x08, 0x1e, 0x4a, 0xeb, 0x87, 0x4b, 0xdf, 0x24,
	0x13, 0x1c, 0x27, 0xf4, 0xb7, 0xb1, 0x94, 0x9c, 0x48, 0xeb, 0xf7, 0x96, 0x1a, 0x97, 0x75, 0x41,
	0x8e, 0x4c, 0x48, 0x9f, 0xdb, 0x0b, 0x70, 0x5d, 0x33, 0x80, 0x3a, 0x9b, 0xf5, 0xfb, 0x2a, 0xf6,
	0x7b, 0xe8, 0xed, 0x62, 0x59, 0x2a, 0xe3, 0x80, 0x1c, 0x60, 0x6f, 0xa8, 0x85, 0xf7, 0x98, 0x4f,
	0xc4, 0x06, 0x4f, 0xc4, 0xfb, 0x09, 0x0d, 0x82, 0xae, 0xda, 0xe2, 0xd2, 0xfa, 0xfd, 0xe5, 0x6f,
	0x9a, 0x93, 0x1f, 0xbf, 0xec, 0x0e, 0x96, 0x38, 0xd8, 0xe4, 0xdc, 0xfa, 0x03, 0xa5, 0xfa, 0xbf,
	0x2e, 0x38, 0xf7, 0x43, 0x1e, 0x0f, 0x88, 0x50, 0x8e, 0x91, 0x4f, 0x44, 0x40, 0x59, 0x7f, 0x6c,
	0x4b, 0xff, 0x60, 0xf9, 0x1c, 0xe5, 0x24, 0x4d, 0x72, 0x59, 0x52, 0x9f, 0xec, 0x93, 0x03, 0xeb,
	0x0f, 0x15, 0x1d, 0x80, 0x3a, 0x77, 0x69, 0xbc, 0xdf, 0xf1, 0x76, 0x8b, 0xb1, 0x72, 0xac, 0x89,
	0xf5, 0x87, 0x4b, 0xb5, 0xb1, 0x3e, 0xc0, 0x5c, 0x9a, 0xb4, 0xb2, 0x43, 0x70, 0x40, 0xe3, 0x63,
	0x87, 0x1e, 0x1a, 0xa3, 0xf1, 0x23, 0xa5, 0x36, 0xb2, 0x3e, 0x20, 0xa6, 0x80, 0xa1, 0xb6, 0x4a,
	0x87, 0x30, 0x1a, 0xab, 0x48, 0xc2, 0xfa, 0x23, 0xa5, 0x0b, 0x38, 0x99, 0x58, 0xed, 0x1d, 0x71,
	0x35, 0xc0, 0x89, 0xfa, 0xcf, 0x1f, 0x2d, 0x5d, 0xc0, 0x29, 0xd9, 0xf4, 0xf5, 0x26, 0xb2, 0xb3,
	0xd2, 0xfa, 0x63, 0x45, 0x6e, 0xe1, 0xd4, 0xe9, 0xe2, 0xf3, 0xa3, 0xfd, 0x2c, 0xca, 0xfc, 0xe3,
	0xe5, 0xc7, 0x51, 0x3e, 0xff, 0xd0, 0xa5, 0xd1, 0x20, 0x0d, 0xd6, 0xfe, 0x44, 0xc5, 0x7e, 0xf7,
	0xf3, 0x48, 0x78, 0xe4, 0x54, 0xb5, 0x99, 0x04, 0xd2, 0xfa, 0x93, 0x15, 0xbb, 0x8e, 0xde, 0x7b,
	0x54, 0x7e, 0xdb, 0xbc, 0xde, 0x3d, 0xca, 0x48, 0x4c, 0x3d, 0x78, 0x3b, 0xf0, 0xb2, 0x3c, 0x70,
	0x28, 0xad, 0x1f, 0xad, 0xd8, 0xaf, 0x17, 0xd7, 0x95, 0xa0, 0x1e, 0xa9, 0xdc, 0x75, 0xc1, 0x70,
	0x00, 0xd1, 0xf7, 0x7a, 0x16, 0x06, 0xfd, 0xa9, 0x8a, 0xfd, 0x49, 0xf4, 0xce, 0x23, 0xaa, 0x1f,
	0x1d, 0x41, 0x3c, 0xf8, 0x10, 0xa3, 0x96, 0x08, 0x5c, 0x17, 0x84, 0x44, 0x70, 0x3b, 0x44, 0xb7,
	0xf0, 0x63, 0xa5, 0xd3, 0x95, 0x8f, 0x8e, 0x26, 0xfc, 0xe2, 0x3f, 0x5d, 0xba, 0xa7, 0x4a, 0x03,
	0x2a, 0x2d, 0xf8, 0x67, 0x2a, 0xf6, 0xc7, 0xd1, 0x5b, 0x85, 0x82, 0x8c, 0xf6, 0x43, 0xec, 0xb6,
	0xa9, 0x0f, 0x4a, 0xdb, 0x49, 0x02, 0x49, 0xd6, 0x03, 0xec, 0x0d, 0xb7, 0x78, 0x40, 0xea, 0x3c,
	0x3c, 0xe0, 0xd2, 0xfa, 0xb3, 0xa5, 0x5b, 0xc4, 0x48, 0xa7, 0xf6, 0x3a, 0x13, 0x94, 0xd6, 0x9f,
	0x2b, 0x3d, 0x22, 0xd2, 0x9b, 0x13, 0xca, 0xb0, 0x8f, 0x93, 0x51, 0x3d, 0x1a, 0x92, 0x06, 0x0d,
	0x20, 0x90, 0xb7, 0xfe, 0x7c, 0xe9, 0x7b, 0x6e, 0x1e, 0x0b, 0xee, 0xf1, 0x48, 0xd9, 0xad, 0xb1,
	0xde, 0x06, 0x78, 0x58, 0xc7, 0x8c, 0x71, 0x66, 0xfd, 0x85, 0x8a, 0xfd, 0x66, 0x71, 0x42, 0x32,
	0x27, 0xb8, 0xc5, 0x43, 0xca, 0xfa, 0x13, 0x21, 0xc1, 0x5f, 0xfc, 0x28, 0x72, 0x3a, 0x04, 0x82,
	0x14, 0x48, 0x1a, 0x1f, 0xfe, 0xa5, 0x52, 0xdd, 0xd9, 0x4a, 0xe4, 0x10, 0x4f, 0x18, 0x57, 0x15,
	0x03, 0xae, 0x2b, 0x63, 0x6e, 0xfd, 0x78, 0xe9, 0xca, 0x1b, 0x29, 0xa5, 0x66, 0x94, 0xf5, 0xbb,
	0x11, 0x49, 0x93, 0xb3, 0x7f, 0xb9, 0x54, 0x24, 0xbd, 0x9b, 0x93, 0xcd, 0x64, 0xcb, 0x23, 0xfb,
	0x38, 0x08, 0xac, 0xbf, 0x52, 0x7a, 0x32, 0x65, 0xd7, 0x79, 0xd2, 0x19, 0x6c, 0xb6, 0x3b, 0xd6,
	0x5f, 0x2d, 0x35, 0xbb, 0x27, 0xe0, 0x0d, 0x82, 0x0f, 0x89, 0x1a, 0xe0, 0x7a, 0x80, 0x65, 0x6c,
	0xfd, 0x44, 0xa9, 0x35, 0x3c, 0x31, 0x36, 0x30, 0x8f, 0x6d, 0x12, 0x13, 0x2e, 0xac, 0x9f, 0x2c,
	0xb5, 0xd6, 0x9f, 0xc2, 0x43, 0x2a, 0xf8, 0x58, 0xaa, 0x91, 0xe0, 0x40, 0x97, 0xf6, 0xac, 0xbf,
	0x56, 0xba, 0x50, 0x46, 0xa8, 0xe5, 0x91, 0x0e, 0x54, 0x13, 0x3c, 0xc1, 0xa3, 0x63, 0x91, 0xaa,
	0xf0, 0x5f, 0x2f, 0x35, 0x66, 0xe9, 0xed, 0x12, 0xd0, 0x7c, 0x65, 0x39, 0xf5, 0x84, 0xff, 0x8d,
	0xd2, 0xe9, 0x48, 0x05, 0xb2, 0xe9, 0x80, 0xfc, 0x19, 0xac, 0x17, 0xd8, 0x93, 0xbf, 0x59, 0xaa,
	0x13, 0xe0, 0x4c, 0x8d, 0xd5, 0x16, 0x1c, 0xaa, 0xdd, 0x43, 0xb0, 0x74, 0xd6, 0xdf, 0x2a, 0x75,
	0x3d, 0xf5, 0x85, 0x91, 0x0e, 0xe7, 0x87, 0x7a, 0x64, 0x7f, 0xbb, 0x74, 0x37, 0x6a, 0x64, 0x36,
	0x6d, 0xb9, 0x3b, 0x26, 0x7f, 0xa7, 0x74, 0x4c, 0x3b, 0x3a, 0xf9, 0x87, 0x03, 0xb5, 0x4e, 0xf0,
	0x10, 0xd3, 0xd0, 0x68, 0xf7, 0xdf, 0x2d, 0xdd, 0x86, 0x6d, 0xe5, 0x3f, 0xc2, 0x3d, 0xb9, 0x9c,
	0x82, 0x3b, 0x24, 0x0a, 0xa8, 0x87, 0x63, 0x62, 0xfd, 0xbd, 0xd2, 0x83, 0x6e, 0xb7, 0x2f, 0x48,
	0x1b, 0xf7, 0xa9, 0xbb, 0x41, 0x05, 0x39, 0x50, 0xea, 0xa3, 0xbb, 0xfa, 0xfb, 0xa5, 0xca, 0x9a,
	0x49, 0xb4, 0xfa, 0xea, 0x54, 0xd4, 0xf0, 0x9f, 0x2a, 0x75, 0x58, 0x1b, 0x1c, 0x0a, 0x35, 0x26,
	0xa3, 0xde, 0x8d, 0xb5, 0xf7, 0xf4, 0x0f, 0x1e, 0x32, 0xbb, 0x7d, 0x9c, 0x47, 0xfe, 0xc3, 0xd2,
	0xa1, 0xd7, 0x02, 0x6f, 0x40, 0x42, 0x2a, 0x63, 0x37, 0x75, 0x65, 0x37, 0xe9, 0x88, 0x30, 0xeb,
	0x1f, 0x95, 0x86, 0x02, 0x10, 0x8b, 0x6c, 0x13, 0xec, 0x53, 0xd6, 0xef, 0x19, 0x1f, 0xe5, 0x1f,
	0x97, 0x3a, 0x97, 0x8d, 0x04, 0xbe, 0x4c, 0xce, 0x83, 0xff, 0x49, 0xe9, 0x02, 0x14, 0xd6, 0x8a,
	0xc7, 0x65, 0xe9, 0x9f, 0x2e, 0x9d, 0xce, 0x7d, 0xfd, 0x61, 0x74, 0x77, 0x90, 0x0c, 0x13, 0x6f,
	0x60, 0x02, 0xfa, 0x9f, 0xa9, 0xd8, 0x6f, 0x17, 0x97, 0xc2, 0x72, 0x05, 0x19, 0x93, 0xb2, 0xcc,
	0xca, 0x39, 0x5a, 0xf4, 0x9f, 0x56, 0xec, 0x75, 0xf4, 0x6e, 0xf1, 0xdb, 0x4f, 0x64, 0xe1, 0xe0,
	0x11, 0x33, 0x8f, 0xa8, 0xb3, 0xb0, 0x15, 0x04, 0x89, 0xcc, 0x52, 0xb6, 0xff, 0xac, 0x74, 0x35,
	0xa7, 0xcb, 0xae, 0x1a, 0xff, 0xcf, 0x4b, 0xd7, 0xc8, 0x24, 0x71, 0xc6, 0x5e, 0x25, 0xa4, 0x73,
	0xa4, 0xf5, 0x2f, 0x4a, 0x4f, 0xa3, 0x13, 0x99, 0xea, 0x74, 0x32, 0x3b, 0x92, 0xc2, 0x91, 0x2f,
	0xad, 0x7f, 0x59, 0x6a, 0xdf, 0xe0, 0x8e, 0x61, 0x6e, 0x07, 0x6c, 0x72, 0x5f, 0x2a, 0x45, 0x62,
	0xfd, 0x78, 0x60, 0xfd, 0xab, 0xd2, 0x7d, 0x6a, 0xb2, 0xd1, 0x63, 0xbf, 0x72, 0x20, 0x70, 0xc4,
	0x48, 0x20, 0xad, 0x9f, 0x2d, 0xef, 0x0a, 0xae, 0x76, 0x4d, 0xde, 0x71, 0xf1, 0xf9, 0x51, 0x43,
	0xcd, 0xa8, 0xf5, 0xaf, 0x4b, 0xdd, 0xc4, 0x89, 0x2c, 0xf2, 0xd8, 0x32, 0x28, 0x47, 0xd8, 0xdc,
	0x44, 0xfc, 0x37, 0xa5, 0x2e, 0xd8, 0x64, 0xc2, 0x9a, 0x88, 0x88, 0xb0, 0x58, 0xc5, 0x4c, 0x13,
	0xb9, 0xeb, 0x7f, 0x5b, 0xaa, 0xa2, 0x10, 0xda, 0x66, 0xef, 0xd8, 0x13, 0xd4, 0x1b, 0x4a, 0xa8,
	0x70, 0xf6, 0x04, 0xf6, 0x89, 0xf5, 0xef, 0x4a, 0x4f, 0x34, 0x07, 0x7f, 0xc8, 0x85, 0xdb, 0x3c,
	0x26, 0x80, 0x06, 0xa3, 0xaa, 0xfb, 0xfa, 0xf7, 0xa5, 0x5a, 0xdd, 0x49, 0xfa, 0x50, 0xc8, 0x38,
	0x24, 0x0d, 0x15, 0x9d, 0x69, 0xf8, 0x7f, 0x28, 0x75, 0x80, 0x77, 0x0f, 0x24, 0xf5, 0x29, 0x66,
	0x69, 0x15, 0x43, 0xb8, 0x5d, 0xcc, 0x68, 0x7c, 0x2c, 0x27, 0xea, 0xc3, 0x3f, 0x57, 0x6a, 0x34,
	0x4d, 0xda, 0x28, 0x9b, 0xcf, 0x0d, 0x2e, 0xe2, 0x84, 0x11, 0xd9, 0x64, 0xbe, 0xf5, 0x1f, 0x4b,
	0x97, 0xb0, 0xe4, 0xca, 0x9a, 0xee, 0xec, 0x3f, 0x95, 0xba, 0xb2, 0x13, 0x16, 0x1a, 0x6e, 0x08,
	0x29, 0xd7, 0x85, 0xe8, 0xa8, 0xab, 0x2e, 0x68, 0x14, 0x29, 0x43, 0xbc, 0x41, 0xb0, 0xb0, 0xfe,
	0x73, 0xe9, 0x88, 0xd3, 0xbb, 0x0e, 0xe3, 0xd3, 0x67, 0x7c, 0x2d, 0xed, 0xbf, 0x94, 0x1e, 0xc4,
	0x7a, 0x09, 0xa7, 0x56, 0x4e, 0x8f, 0xf7, 0xe7, 0x4b, 0x5f, 0x33, 0x7f, 0x41, 0xa1, 0x76, 0x18,
	0x43, 0x11, 0xd7, 0x1b, 0x6e, 0xd1, 0x58, 0xbe, 0x7a, 0xc7, 0xfa, 0xaf, 0xa5, 0x7d, 0xe5, 0xc5,
	0xde, 0x98, 0xbc, 0xd7, 0xf0, 0xdf, 0x4a, 0x77, 0xd2, 0x74, 0x75, 0x6c, 0x1c, 0x0b, 0xfe, 0xf7,
	0x47, 0xc8, 0x8c, 0x6b, 0x5e, 0x3a, 0xb2, 0x53, 0x56, 0xf3, 0x17, 0x4a, 0x9d, 0x8b, 0x82, 0x6b,
	0x1a, 0xfa, 0x36, 0x2f, 0xc8, 0xfd, 0x8f, 0x52, 0xe7, 0x22, 0x2f, 0xd7, 0xe3, 0x71, 0x7a, 0xcd,
	0xe4, 0x7f, 0x96, 0xce, 0x42, 0x07, 0xb3, 0x3e, 0x0f, 0xa8, 0xd2, 0xc8, 0x23, 0x2c, 0x07, 0x07,
	0xc9, 0x78, 0xa7, 0xfd, 0xaf, 0xd2, 0x37, 0xda, 0x48, 0x84, 0xf2, 0x2c, 0x72, 0xb7, 0xc7, 0x7a,
	0x02, 0x47, 0x11, 0xf1, 0xad, 0xff, 0x5d, 0xaa, 0x10, 0xe3, 0x8e, 0xb6, 0x08, 0x16, 0x71, 0x44,
	0x89, 0xf0, 0xd2, 0xc8, 0xe4, 0x17, 0x1f, 0xe2, 0x61, 0xc0, 0xa5, 0x9c, 0x71, 0x09, 0x39, 0xe6,
	0x8c, 0x6c, 0xe2, 0x0f, 0x89, 0xf5, 0xb9, 0x99, 0x32, 0x1b, 0x6e, 0x64, 0x20, 0xab, 0x30, 0xbe,
	0xd5, 0xf1, 0x95, 0x33, 0xa5, 0x7d, 0x98, 0xdb, 0xbb, 0xe3, 0x3e, 0xb0, 0x90, 0xe0, 0x59, 0x7d,
	0xd5, 0x4c, 0x99, 0x4f, 0x66, 0x64, 0xa0, 0xe9, 0x0d, 0xc1, 0xc3, 0x36, 0xe7, 0x2c, 0x80, 0x25,
	0x06, 0x1b, 0x66, 0x7d, 0xf5, 0x4c, 0xd9, 0x89, 0xd1, 0xc6, 0x7d, 0x96, 0xc8, 0x5c, 0x6f, 0x43,
	0x72, 0xa4, 0x4e, 0x8c, 0xaf, 0x29, 0xef, 0x6b, 0x4a, 0xc2, 0x21, 0x23, 0x22, 0x24, 0xe9, 0xf0,
	0x00, 0x0b, 0x1a, 0x1f, 0x5b, 0x5f, 0x3b, 0x53, 0x76, 0x98, 0x1a, 0xc9, 0x7c, 0x75, 0x53, 0x85,
	0xfb, 0x60, 0x88, 0x8f, 0xf0, 0x88, 0x58, 0x5f, 0x57, 0x3a, 0xcc, 0xf1, 0xc5, 0xc8, 0xf1, 0x48,
	0x39, 0xeb, 0x5b, 0x5f, 0x3f, 0x53, 0xb6, 0x0d, 0xc7, 0x12, 0xfa, 0xb6, 0xab, 0x2e, 0xc6, 0xaf,
	0x1f, 0x83, 0xd8, 0x37, 0x94, 0x76, 0xb4, 0xcd, 0x19, 0x69, 0x88, 0x24, 0x1f, 0x9a, 0x39, 0x1c,
	0x0b, 0xeb, 0x1b, 0x67, 0xca, 0xcc, 0xf5, 0x58, 0x42, 0x7f, 0x79, 0x50, 0x17, 0xc7, 0xa6, 0xf4,
	0x53, 0x3a, 0xb6, 0x7d, 0xca, 0x62, 0x22, 0xf6, 0x8f, 0x47, 0x44, 0xe4, 0x1c, 0x62, 0xc8, 0x72,
	0x4b, 0xeb, 0x9b, 0x66, 0xec, 0x4f, 0xa0, 0xb5, 0xcf, 0x2f, 0xb9, 0x58, 0xe7, 0x89, 0x6a, 0x51,
	0x2a, 0xba, 0xf5, 0xcd, 0xe5, 0xaa, 0x85, 0x85, 0x4c, 0xcb, 0x81, 0x8a, 0x4d, 0xfc, 0x16, 0xab,
	0x09, 0xc2, 0xb0, 0xf5, 0x2d, 0xa5, 0xaf, 0x07, 0x32, 0xd9, 0x5c, 0xa8, 0x13, 0xde, 0x21, 0x07,
	0xc9, 0x90, 0x58, 0xdf, 0x3a, 0x53, 0x76, 0x1a, 0x81, 0xc8, 0x18, 0x69, 0x4a, 0x44, 0x33, 0xe5,
	0xee, 0x00, 0x8e, 0x0e, 0xa9, 0x50, 0x96, 0xe9, 0x43, 0x2c, 0xfc, 0xf5, 0x80, 0x1f, 0x98, 0xbc,
	0xec, 0xb7, 0xcf, 0x94, 0x6d, 0xdf, 0x4c, 0x26, 0xcd, 0xfc, 0x70, 0x3e, 0xa4, 0xa6, 0x2c, 0xf0,
	0x1d, 0x33, 0xf6, 0x45, 0xb4, 0x52, 0xd7, 0x9f, 0x0f, 0x8f, 0x7d, 0x5b, 0xeb, 0x3b, 0x67, 0x6e,
	0xfd, 0x50, 0x05, 0x2d, 0x37, 0xb7, 0xf3, 0xbf, 0xb2, 0x6c, 0x3f, 0x89, 0x2e, 0x0f, 0xdd, 0x49,
	0x9a, 0xdb, 0xad, 0x6d, 0x34, 0xb7, 0x6b, 0x3b, 0x4d, 0xeb, 0x31, 0xfb, 0x09, 0x54, 0x3d, 0xc1,
	0xde, 0xdd, 0xd8, 0x00, 0x6e, 0xa5, 0x90, 0xdb, 0x6e, 0x35, 0x80, 0x3b, 0x03, 0xdf, 0xb1, 0x9c,
	0x68, 0x7a, 0xaf, 0xd3, 0xd9, 0x75, 0x7a, 0x6e, 0x77, 0x77, 0xa3, 0x67, 0x9d, 0x7a, 0x28, 0x64,
	0xab, 0xe6, 0x34, 0xac, 0xd3, 0xb7, 0x7e, 0x72, 0x06, 0x9d, 0x9f, 0x44, 0xe8, 0x1f, 0x26, 0x7d,
	0x0a, 0x5d, 0x99, 0x16, 0x05, 0x06, 0xfc, 0x3a, 0xb1, 0xf5, 0x18, 0x7c, 0xdc, 0x53, 0xc8, 0xcf,
	0xde, 0xae, 0x52, 0xd4, 0xbd, 0xc6, 0xa4, 0xaf, 0x38, 0x53, 0x0e, 0x49, 0xdf, 0xf3, 0x74, 0xf9,
	0x48, 0xea, 0xbb, 0x4e, 0xd3, 0x9a, 0x85, 0x8b, 0x14, 0xc5, 0x23, 0xc9, 0x4f, 0xc6, 0xdc, 0xa3,
	0x71, 0x30, 0x23, 0x56, 0xf9, 0x90, 0x0c, 0xce, 0xaa, 0x16, 0xad, 0xaa, 0x86, 0xd4, 0xb6, 0xb7,
	0xad, 0x6b, 0xb7, 0x28, 0xba, 0xd8, 0xd4, 0xff, 0xe6, 0xc6, 0xf4, 0xbf, 0xea, 0xa2, 0xdb, 0x2e,
	0xe4, 0xa5, 0x13, 0xfb, 0x12, 0xba, 0x59, 0x0a, 0xd9, 0xc6, 0xa2, 0x4f, 0x1c, 0xcc, 0x86, 0xdd,
	0x48, 0x10, 0xec, 0x5b, 0x95, 0x5b, 0x3f, 0x35, 0x83, 0x2e, 0x14, 0xfd, 0x33, 0x30, 0x66, 0x88,
	0xc5, 0xff, 0x10, 0x8c, 0xf5, 0x18, 0x7c, 0x1f, 0x73, 0x82, 0x0d, 0x49, 0x1b, 0xd6, 0x6f, 0xb7,
	0x1b, 0x38, 0xc6, 0x56, 0xc5, 0xbe, 0x81, 0x9e, 0x3e, 0x09, 0x4a, 0xff, 0x71, 0x42, 0x03, 0xb6,
	0x66, 0xcc, 0xc4, 0x4e, 0xb7, 0x05, 0xbf, 0xa8, 0x11, 0x64, 0xbf, 0x33, 0x90, 0x69, 0xe3, 0x89,
	0x3e, 0xd5, 0xd1, 0xaa, 0x21, 0x9f, 0x2c, 0x6e, 0xaa, 0x16, 0x04, 0x0e, 0x0f, 0x88, 0xf9, 0x09,
	0x0d, 0xe2, 0x5b, 0xb5, 0xe2, 0xe1, 0xef, 0x49, 0x08, 0x93, 0xf5, 0xf0, 0xac, 0x75, 0xfb, 0x1a,
	0xba, 0x7a, 0x12, 0xb4, 0xa1, 0xff, 0x9d, 0x40, 0x6f, 0x68, 0xd5, 0xed, 0xeb, 0xe8, 0x89, 0x93,
	0x00, 0xf5, 0xd8, 0x20, 0x21, 0x66, 0xbe, 0xd5, 0xb8, 0x45, 0x90, 0x35, 0xfd, 0x5b, 0x60, 0xb6,
	0x8d, 0xa6, 0x7e, 0x0d, 0xcc, 0x7a, 0x0c, 0x3e, 0x8a, 0xce, 0xd3, 0xee, 0xde, 0xb1, 0x2a, 0xd3,
	0xc4, 0xd7, 0xee, 0xdc, 0xb1, 0x66, 0xa6, 0x89, 0x6f, 0xdf, 0xb9, 0x63, 0x9d, 0xba, 0xf5, 0xd5,
	0x15, 0xf4, 0x78, 0xe1, 0x0f, 0xdd, 0xa8, 0x17, 0x7d, 0xc4, 0x2f, 0xe0, 0x58, 0x8f, 0xa9, 0x89,
	0x2d, 0x06, 0x6d, 0x1b, 0x48, 0x45, 0x6d, 0xd7, 0x62, 0x48, 0xb6, 0x3e, 0x33, 0xb7, 0x12, 0xb4,
	0x72, 0xe2, 0x43, 0x58, 0x33, 0x89, 0x65, 0xdf, 0xc7, 0x5a, 0x8f, 0x99, 0x49, 0x3c, 0x01, 0xd8,
	0xe1, 0x31, 0xd0, 0xac, 0x8a, 0x51, 0xc5, 0x13, 0x08, 0xcd, 0x9e, 0xb9, 0xf5, 0xf3, 0x15, 0x54,
	0x2d, 0xfb, 0xfa, 0xd7, 0x28, 0xc4, 0x23, 0xbe, 0x0d, 0xb6, 0x1e, 0x83, 0x6b, 0x4f, 0xe5, 0xb8,
	0x5a, 0x00, 0x9f, 0xf1, 0xb6, 0x58, 0xfa, 0xe3, 0x32, 0x56, 0x05, 0x2e, 0x05, 0x95, 0x4b, 0xec,
	0xf0, 0xb8, 0xc5, 0x60, 0x13, 0x5a, 0x33, 0x70, 0xe5, 0xe9, 0x21, 0x83, 0x20, 0xcc, 0x6f, 0x0a,
	0xc1, 0x85, 0x75, 0x0a, 0xae, 0x04, 0x95, 0x23, 0xcd, 0xa4, 0x69, 0xf0, 0xe9, 0x5b, 0x3f, 0x5a,
	0x41, 0x57, 0x1f, 0xf2, 0x69, 0xad, 0x19, 0xe1, 0xa3, 0xbf, 0xbd, 0xb5, 0x1e, 0x33, 0x3b, 0xf5,
	0x21, 0xd0, 0x6d, 0x7e, 0x64, 0x55, 0xcc, 0x8b, 0x3c, 0x04, 0xd6, 0x26, 0x3e, 0x4d, 0xc2, 0x6c,
	0x4f, 0x3f, 0x04, 0xa9, 0xb6, 0x89, 0x75, 0x6a, 0xfd, 0xcc, 0x56, 0xe5, 0x73, 0x95, 0xc7, 0xfe,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xf9, 0x97, 0xb8, 0xc7, 0x77, 0x00, 0x00,
}
