// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steamnetworkingsockets_messages.proto

package dota

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ESteamNetworkingSocketsCipher int32

const (
	ESteamNetworkingSocketsCipher_k_ESteamNetworkingSocketsCipher_INVALID     ESteamNetworkingSocketsCipher = 0
	ESteamNetworkingSocketsCipher_k_ESteamNetworkingSocketsCipher_NULL        ESteamNetworkingSocketsCipher = 1
	ESteamNetworkingSocketsCipher_k_ESteamNetworkingSocketsCipher_AES_256_GCM ESteamNetworkingSocketsCipher = 2
)

var ESteamNetworkingSocketsCipher_name = map[int32]string{
	0: "k_ESteamNetworkingSocketsCipher_INVALID",
	1: "k_ESteamNetworkingSocketsCipher_NULL",
	2: "k_ESteamNetworkingSocketsCipher_AES_256_GCM",
}

var ESteamNetworkingSocketsCipher_value = map[string]int32{
	"k_ESteamNetworkingSocketsCipher_INVALID":     0,
	"k_ESteamNetworkingSocketsCipher_NULL":        1,
	"k_ESteamNetworkingSocketsCipher_AES_256_GCM": 2,
}

func (x ESteamNetworkingSocketsCipher) Enum() *ESteamNetworkingSocketsCipher {
	p := new(ESteamNetworkingSocketsCipher)
	*p = x
	return p
}

func (x ESteamNetworkingSocketsCipher) String() string {
	return proto.EnumName(ESteamNetworkingSocketsCipher_name, int32(x))
}

func (x *ESteamNetworkingSocketsCipher) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ESteamNetworkingSocketsCipher_value, data, "ESteamNetworkingSocketsCipher")
	if err != nil {
		return err
	}
	*x = ESteamNetworkingSocketsCipher(value)
	return nil
}

func (ESteamNetworkingSocketsCipher) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{0}
}

type CMsgSteamDatagramSessionCryptInfo_EKeyType int32

const (
	CMsgSteamDatagramSessionCryptInfo_INVALID    CMsgSteamDatagramSessionCryptInfo_EKeyType = 0
	CMsgSteamDatagramSessionCryptInfo_CURVE25519 CMsgSteamDatagramSessionCryptInfo_EKeyType = 1
)

var CMsgSteamDatagramSessionCryptInfo_EKeyType_name = map[int32]string{
	0: "INVALID",
	1: "CURVE25519",
}

var CMsgSteamDatagramSessionCryptInfo_EKeyType_value = map[string]int32{
	"INVALID":    0,
	"CURVE25519": 1,
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) Enum() *CMsgSteamDatagramSessionCryptInfo_EKeyType {
	p := new(CMsgSteamDatagramSessionCryptInfo_EKeyType)
	*p = x
	return p
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) String() string {
	return proto.EnumName(CMsgSteamDatagramSessionCryptInfo_EKeyType_name, int32(x))
}

func (x *CMsgSteamDatagramSessionCryptInfo_EKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgSteamDatagramSessionCryptInfo_EKeyType_value, data, "CMsgSteamDatagramSessionCryptInfo_EKeyType")
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramSessionCryptInfo_EKeyType(value)
	return nil
}

func (CMsgSteamDatagramSessionCryptInfo_EKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{0, 0}
}

type CMsgSteamDatagramSessionCryptInfo struct {
	KeyType              *CMsgSteamDatagramSessionCryptInfo_EKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=dota.CMsgSteamDatagramSessionCryptInfo_EKeyType,def=0" json:"key_type,omitempty"`
	KeyData              []byte                                      `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	Nonce                *uint64                                     `protobuf:"fixed64,3,opt,name=nonce" json:"nonce,omitempty"`
	ProtocolVersion      *uint32                                     `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Ciphers              []ESteamNetworkingSocketsCipher             `protobuf:"varint,5,rep,name=ciphers,enum=dota.ESteamNetworkingSocketsCipher" json:"ciphers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *CMsgSteamDatagramSessionCryptInfo) Reset()         { *m = CMsgSteamDatagramSessionCryptInfo{} }
func (m *CMsgSteamDatagramSessionCryptInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramSessionCryptInfo) ProtoMessage()    {}
func (*CMsgSteamDatagramSessionCryptInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{0}
}

func (m *CMsgSteamDatagramSessionCryptInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramSessionCryptInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.Marshal(b, m, deterministic)
}
func (m *CMsgSteamDatagramSessionCryptInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.Merge(m, src)
}
func (m *CMsgSteamDatagramSessionCryptInfo) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.Size(m)
}
func (m *CMsgSteamDatagramSessionCryptInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramSessionCryptInfo proto.InternalMessageInfo

const Default_CMsgSteamDatagramSessionCryptInfo_KeyType CMsgSteamDatagramSessionCryptInfo_EKeyType = CMsgSteamDatagramSessionCryptInfo_INVALID

func (m *CMsgSteamDatagramSessionCryptInfo) GetKeyType() CMsgSteamDatagramSessionCryptInfo_EKeyType {
	if m != nil && m.KeyType != nil {
		return *m.KeyType
	}
	return Default_CMsgSteamDatagramSessionCryptInfo_KeyType
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetNonce() uint64 {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return 0
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetProtocolVersion() uint32 {
	if m != nil && m.ProtocolVersion != nil {
		return *m.ProtocolVersion
	}
	return 0
}

func (m *CMsgSteamDatagramSessionCryptInfo) GetCiphers() []ESteamNetworkingSocketsCipher {
	if m != nil {
		return m.Ciphers
	}
	return nil
}

type CMsgSteamDatagramSessionCryptInfoSigned struct {
	Info                 []byte   `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgSteamDatagramSessionCryptInfoSigned) Reset() {
	*m = CMsgSteamDatagramSessionCryptInfoSigned{}
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramSessionCryptInfoSigned) ProtoMessage()    {}
func (*CMsgSteamDatagramSessionCryptInfoSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{1}
}

func (m *CMsgSteamDatagramSessionCryptInfoSigned) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.Marshal(b, m, deterministic)
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.Merge(m, src)
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.Size(m)
}
func (m *CMsgSteamDatagramSessionCryptInfoSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramSessionCryptInfoSigned proto.InternalMessageInfo

func (m *CMsgSteamDatagramSessionCryptInfoSigned) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CMsgSteamDatagramSessionCryptInfoSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type CMsgSteamDatagramDiagnostic struct {
	Severity             *uint32  `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	Text                 *string  `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgSteamDatagramDiagnostic) Reset()         { *m = CMsgSteamDatagramDiagnostic{} }
func (m *CMsgSteamDatagramDiagnostic) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramDiagnostic) ProtoMessage()    {}
func (*CMsgSteamDatagramDiagnostic) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{2}
}

func (m *CMsgSteamDatagramDiagnostic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramDiagnostic.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramDiagnostic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramDiagnostic.Marshal(b, m, deterministic)
}
func (m *CMsgSteamDatagramDiagnostic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramDiagnostic.Merge(m, src)
}
func (m *CMsgSteamDatagramDiagnostic) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramDiagnostic.Size(m)
}
func (m *CMsgSteamDatagramDiagnostic) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramDiagnostic.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramDiagnostic proto.InternalMessageInfo

func (m *CMsgSteamDatagramDiagnostic) GetSeverity() uint32 {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return 0
}

func (m *CMsgSteamDatagramDiagnostic) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type CMsgSteamDatagramLinkInstantaneousStats struct {
	OutPacketsPerSecX10     *uint32  `protobuf:"varint,1,opt,name=out_packets_per_sec_x10,json=outPacketsPerSecX10" json:"out_packets_per_sec_x10,omitempty"`
	OutBytesPerSec          *uint32  `protobuf:"varint,2,opt,name=out_bytes_per_sec,json=outBytesPerSec" json:"out_bytes_per_sec,omitempty"`
	InPacketsPerSecX10      *uint32  `protobuf:"varint,3,opt,name=in_packets_per_sec_x10,json=inPacketsPerSecX10" json:"in_packets_per_sec_x10,omitempty"`
	InBytesPerSec           *uint32  `protobuf:"varint,4,opt,name=in_bytes_per_sec,json=inBytesPerSec" json:"in_bytes_per_sec,omitempty"`
	PingMs                  *uint32  `protobuf:"varint,5,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	PacketsDroppedPct       *uint32  `protobuf:"varint,6,opt,name=packets_dropped_pct,json=packetsDroppedPct" json:"packets_dropped_pct,omitempty"`
	PacketsWeirdSequencePct *uint32  `protobuf:"varint,7,opt,name=packets_weird_sequence_pct,json=packetsWeirdSequencePct" json:"packets_weird_sequence_pct,omitempty"`
	PeakJitterUsec          *uint32  `protobuf:"varint,8,opt,name=peak_jitter_usec,json=peakJitterUsec" json:"peak_jitter_usec,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) Reset() {
	*m = CMsgSteamDatagramLinkInstantaneousStats{}
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramLinkInstantaneousStats) ProtoMessage()    {}
func (*CMsgSteamDatagramLinkInstantaneousStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{3}
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.Marshal(b, m, deterministic)
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.Merge(m, src)
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.Size(m)
}
func (m *CMsgSteamDatagramLinkInstantaneousStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramLinkInstantaneousStats proto.InternalMessageInfo

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetOutPacketsPerSecX10() uint32 {
	if m != nil && m.OutPacketsPerSecX10 != nil {
		return *m.OutPacketsPerSecX10
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetOutBytesPerSec() uint32 {
	if m != nil && m.OutBytesPerSec != nil {
		return *m.OutBytesPerSec
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetInPacketsPerSecX10() uint32 {
	if m != nil && m.InPacketsPerSecX10 != nil {
		return *m.InPacketsPerSecX10
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetInBytesPerSec() uint32 {
	if m != nil && m.InBytesPerSec != nil {
		return *m.InBytesPerSec
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPingMs() uint32 {
	if m != nil && m.PingMs != nil {
		return *m.PingMs
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsDroppedPct() uint32 {
	if m != nil && m.PacketsDroppedPct != nil {
		return *m.PacketsDroppedPct
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsWeirdSequencePct() uint32 {
	if m != nil && m.PacketsWeirdSequencePct != nil {
		return *m.PacketsWeirdSequencePct
	}
	return 0
}

func (m *CMsgSteamDatagramLinkInstantaneousStats) GetPeakJitterUsec() uint32 {
	if m != nil && m.PeakJitterUsec != nil {
		return *m.PeakJitterUsec
	}
	return 0
}

type CMsgSteamDatagramLinkLifetimeStats struct {
	ConnectedSeconds              *uint32  `protobuf:"varint,2,opt,name=connected_seconds,json=connectedSeconds" json:"connected_seconds,omitempty"`
	PacketsSent                   *uint64  `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
	KbSent                        *uint64  `protobuf:"varint,4,opt,name=kb_sent,json=kbSent" json:"kb_sent,omitempty"`
	PacketsRecv                   *uint64  `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv" json:"packets_recv,omitempty"`
	KbRecv                        *uint64  `protobuf:"varint,6,opt,name=kb_recv,json=kbRecv" json:"kb_recv,omitempty"`
	PacketsRecvSequenced          *uint64  `protobuf:"varint,7,opt,name=packets_recv_sequenced,json=packetsRecvSequenced" json:"packets_recv_sequenced,omitempty"`
	PacketsRecvDropped            *uint64  `protobuf:"varint,8,opt,name=packets_recv_dropped,json=packetsRecvDropped" json:"packets_recv_dropped,omitempty"`
	PacketsRecvOutOfOrder         *uint64  `protobuf:"varint,9,opt,name=packets_recv_out_of_order,json=packetsRecvOutOfOrder" json:"packets_recv_out_of_order,omitempty"`
	PacketsRecvDuplicate          *uint64  `protobuf:"varint,10,opt,name=packets_recv_duplicate,json=packetsRecvDuplicate" json:"packets_recv_duplicate,omitempty"`
	PacketsRecvLurch              *uint64  `protobuf:"varint,11,opt,name=packets_recv_lurch,json=packetsRecvLurch" json:"packets_recv_lurch,omitempty"`
	MultipathPacketsRecvSequenced []uint64 `protobuf:"varint,12,rep,name=multipath_packets_recv_sequenced,json=multipathPacketsRecvSequenced" json:"multipath_packets_recv_sequenced,omitempty"`
	MultipathPacketsRecvLater     []uint64 `protobuf:"varint,13,rep,name=multipath_packets_recv_later,json=multipathPacketsRecvLater" json:"multipath_packets_recv_later,omitempty"`
	MultipathSendEnabled          *uint32  `protobuf:"varint,14,opt,name=multipath_send_enabled,json=multipathSendEnabled" json:"multipath_send_enabled,omitempty"`
	QualityHistogram_100          *uint32  `protobuf:"varint,21,opt,name=quality_histogram_100,json=qualityHistogram100" json:"quality_histogram_100,omitempty"`
	QualityHistogram_99           *uint32  `protobuf:"varint,22,opt,name=quality_histogram_99,json=qualityHistogram99" json:"quality_histogram_99,omitempty"`
	QualityHistogram_97           *uint32  `protobuf:"varint,23,opt,name=quality_histogram_97,json=qualityHistogram97" json:"quality_histogram_97,omitempty"`
	QualityHistogram_95           *uint32  `protobuf:"varint,24,opt,name=quality_histogram_95,json=qualityHistogram95" json:"quality_histogram_95,omitempty"`
	QualityHistogram_90           *uint32  `protobuf:"varint,25,opt,name=quality_histogram_90,json=qualityHistogram90" json:"quality_histogram_90,omitempty"`
	QualityHistogram_75           *uint32  `protobuf:"varint,26,opt,name=quality_histogram_75,json=qualityHistogram75" json:"quality_histogram_75,omitempty"`
	QualityHistogram_50           *uint32  `protobuf:"varint,27,opt,name=quality_histogram_50,json=qualityHistogram50" json:"quality_histogram_50,omitempty"`
	QualityHistogram_1            *uint32  `protobuf:"varint,28,opt,name=quality_histogram_1,json=qualityHistogram1" json:"quality_histogram_1,omitempty"`
	QualityHistogramDead          *uint32  `protobuf:"varint,29,opt,name=quality_histogram_dead,json=qualityHistogramDead" json:"quality_histogram_dead,omitempty"`
	QualityNtile_2Nd              *uint32  `protobuf:"varint,30,opt,name=quality_ntile_2nd,json=qualityNtile2nd" json:"quality_ntile_2nd,omitempty"`
	QualityNtile_5Th              *uint32  `protobuf:"varint,31,opt,name=quality_ntile_5th,json=qualityNtile5th" json:"quality_ntile_5th,omitempty"`
	QualityNtile_25Th             *uint32  `protobuf:"varint,32,opt,name=quality_ntile_25th,json=qualityNtile25th" json:"quality_ntile_25th,omitempty"`
	QualityNtile_50Th             *uint32  `protobuf:"varint,33,opt,name=quality_ntile_50th,json=qualityNtile50th" json:"quality_ntile_50th,omitempty"`
	PingHistogram_25              *uint32  `protobuf:"varint,41,opt,name=ping_histogram_25,json=pingHistogram25" json:"ping_histogram_25,omitempty"`
	PingHistogram_50              *uint32  `protobuf:"varint,42,opt,name=ping_histogram_50,json=pingHistogram50" json:"ping_histogram_50,omitempty"`
	PingHistogram_75              *uint32  `protobuf:"varint,43,opt,name=ping_histogram_75,json=pingHistogram75" json:"ping_histogram_75,omitempty"`
	PingHistogram_100             *uint32  `protobuf:"varint,44,opt,name=ping_histogram_100,json=pingHistogram100" json:"ping_histogram_100,omitempty"`
	PingHistogram_125             *uint32  `protobuf:"varint,45,opt,name=ping_histogram_125,json=pingHistogram125" json:"ping_histogram_125,omitempty"`
	PingHistogram_150             *uint32  `protobuf:"varint,46,opt,name=ping_histogram_150,json=pingHistogram150" json:"ping_histogram_150,omitempty"`
	PingHistogram_200             *uint32  `protobuf:"varint,47,opt,name=ping_histogram_200,json=pingHistogram200" json:"ping_histogram_200,omitempty"`
	PingHistogram_300             *uint32  `protobuf:"varint,48,opt,name=ping_histogram_300,json=pingHistogram300" json:"ping_histogram_300,omitempty"`
	PingHistogramMax              *uint32  `protobuf:"varint,49,opt,name=ping_histogram_max,json=pingHistogramMax" json:"ping_histogram_max,omitempty"`
	PingNtile_5Th                 *uint32  `protobuf:"varint,50,opt,name=ping_ntile_5th,json=pingNtile5th" json:"ping_ntile_5th,omitempty"`
	PingNtile_50Th                *uint32  `protobuf:"varint,51,opt,name=ping_ntile_50th,json=pingNtile50th" json:"ping_ntile_50th,omitempty"`
	PingNtile_75Th                *uint32  `protobuf:"varint,52,opt,name=ping_ntile_75th,json=pingNtile75th" json:"ping_ntile_75th,omitempty"`
	PingNtile_95Th                *uint32  `protobuf:"varint,53,opt,name=ping_ntile_95th,json=pingNtile95th" json:"ping_ntile_95th,omitempty"`
	PingNtile_98Th                *uint32  `protobuf:"varint,54,opt,name=ping_ntile_98th,json=pingNtile98th" json:"ping_ntile_98th,omitempty"`
	JitterHistogramNegligible     *uint32  `protobuf:"varint,61,opt,name=jitter_histogram_negligible,json=jitterHistogramNegligible" json:"jitter_histogram_negligible,omitempty"`
	JitterHistogram_1             *uint32  `protobuf:"varint,62,opt,name=jitter_histogram_1,json=jitterHistogram1" json:"jitter_histogram_1,omitempty"`
	JitterHistogram_2             *uint32  `protobuf:"varint,63,opt,name=jitter_histogram_2,json=jitterHistogram2" json:"jitter_histogram_2,omitempty"`
	JitterHistogram_5             *uint32  `protobuf:"varint,64,opt,name=jitter_histogram_5,json=jitterHistogram5" json:"jitter_histogram_5,omitempty"`
	JitterHistogram_10            *uint32  `protobuf:"varint,65,opt,name=jitter_histogram_10,json=jitterHistogram10" json:"jitter_histogram_10,omitempty"`
	JitterHistogram_20            *uint32  `protobuf:"varint,66,opt,name=jitter_histogram_20,json=jitterHistogram20" json:"jitter_histogram_20,omitempty"`
	TxspeedMax                    *uint32  `protobuf:"varint,67,opt,name=txspeed_max,json=txspeedMax" json:"txspeed_max,omitempty"`
	TxspeedHistogram_16           *uint32  `protobuf:"varint,68,opt,name=txspeed_histogram_16,json=txspeedHistogram16" json:"txspeed_histogram_16,omitempty"`
	TxspeedHistogram_32           *uint32  `protobuf:"varint,69,opt,name=txspeed_histogram_32,json=txspeedHistogram32" json:"txspeed_histogram_32,omitempty"`
	TxspeedHistogram_64           *uint32  `protobuf:"varint,70,opt,name=txspeed_histogram_64,json=txspeedHistogram64" json:"txspeed_histogram_64,omitempty"`
	TxspeedHistogram_128          *uint32  `protobuf:"varint,71,opt,name=txspeed_histogram_128,json=txspeedHistogram128" json:"txspeed_histogram_128,omitempty"`
	TxspeedHistogram_256          *uint32  `protobuf:"varint,72,opt,name=txspeed_histogram_256,json=txspeedHistogram256" json:"txspeed_histogram_256,omitempty"`
	TxspeedHistogram_512          *uint32  `protobuf:"varint,73,opt,name=txspeed_histogram_512,json=txspeedHistogram512" json:"txspeed_histogram_512,omitempty"`
	TxspeedHistogram_1024         *uint32  `protobuf:"varint,74,opt,name=txspeed_histogram_1024,json=txspeedHistogram1024" json:"txspeed_histogram_1024,omitempty"`
	TxspeedHistogramMax           *uint32  `protobuf:"varint,75,opt,name=txspeed_histogram_max,json=txspeedHistogramMax" json:"txspeed_histogram_max,omitempty"`
	TxspeedNtile_5Th              *uint32  `protobuf:"varint,76,opt,name=txspeed_ntile_5th,json=txspeedNtile5th" json:"txspeed_ntile_5th,omitempty"`
	TxspeedNtile_50Th             *uint32  `protobuf:"varint,77,opt,name=txspeed_ntile_50th,json=txspeedNtile50th" json:"txspeed_ntile_50th,omitempty"`
	TxspeedNtile_75Th             *uint32  `protobuf:"varint,78,opt,name=txspeed_ntile_75th,json=txspeedNtile75th" json:"txspeed_ntile_75th,omitempty"`
	TxspeedNtile_95Th             *uint32  `protobuf:"varint,79,opt,name=txspeed_ntile_95th,json=txspeedNtile95th" json:"txspeed_ntile_95th,omitempty"`
	TxspeedNtile_98Th             *uint32  `protobuf:"varint,80,opt,name=txspeed_ntile_98th,json=txspeedNtile98th" json:"txspeed_ntile_98th,omitempty"`
	RxspeedMax                    *uint32  `protobuf:"varint,81,opt,name=rxspeed_max,json=rxspeedMax" json:"rxspeed_max,omitempty"`
	RxspeedHistogram_16           *uint32  `protobuf:"varint,82,opt,name=rxspeed_histogram_16,json=rxspeedHistogram16" json:"rxspeed_histogram_16,omitempty"`
	RxspeedHistogram_32           *uint32  `protobuf:"varint,83,opt,name=rxspeed_histogram_32,json=rxspeedHistogram32" json:"rxspeed_histogram_32,omitempty"`
	RxspeedHistogram_64           *uint32  `protobuf:"varint,84,opt,name=rxspeed_histogram_64,json=rxspeedHistogram64" json:"rxspeed_histogram_64,omitempty"`
	RxspeedHistogram_128          *uint32  `protobuf:"varint,85,opt,name=rxspeed_histogram_128,json=rxspeedHistogram128" json:"rxspeed_histogram_128,omitempty"`
	RxspeedHistogram_256          *uint32  `protobuf:"varint,86,opt,name=rxspeed_histogram_256,json=rxspeedHistogram256" json:"rxspeed_histogram_256,omitempty"`
	RxspeedHistogram_512          *uint32  `protobuf:"varint,87,opt,name=rxspeed_histogram_512,json=rxspeedHistogram512" json:"rxspeed_histogram_512,omitempty"`
	RxspeedHistogram_1024         *uint32  `protobuf:"varint,88,opt,name=rxspeed_histogram_1024,json=rxspeedHistogram1024" json:"rxspeed_histogram_1024,omitempty"`
	RxspeedHistogramMax           *uint32  `protobuf:"varint,89,opt,name=rxspeed_histogram_max,json=rxspeedHistogramMax" json:"rxspeed_histogram_max,omitempty"`
	RxspeedNtile_5Th              *uint32  `protobuf:"varint,90,opt,name=rxspeed_ntile_5th,json=rxspeedNtile5th" json:"rxspeed_ntile_5th,omitempty"`
	RxspeedNtile_50Th             *uint32  `protobuf:"varint,91,opt,name=rxspeed_ntile_50th,json=rxspeedNtile50th" json:"rxspeed_ntile_50th,omitempty"`
	RxspeedNtile_75Th             *uint32  `protobuf:"varint,92,opt,name=rxspeed_ntile_75th,json=rxspeedNtile75th" json:"rxspeed_ntile_75th,omitempty"`
	RxspeedNtile_95Th             *uint32  `protobuf:"varint,93,opt,name=rxspeed_ntile_95th,json=rxspeedNtile95th" json:"rxspeed_ntile_95th,omitempty"`
	RxspeedNtile_98Th             *uint32  `protobuf:"varint,94,opt,name=rxspeed_ntile_98th,json=rxspeedNtile98th" json:"rxspeed_ntile_98th,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *CMsgSteamDatagramLinkLifetimeStats) Reset()         { *m = CMsgSteamDatagramLinkLifetimeStats{} }
func (m *CMsgSteamDatagramLinkLifetimeStats) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramLinkLifetimeStats) ProtoMessage()    {}
func (*CMsgSteamDatagramLinkLifetimeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{4}
}

func (m *CMsgSteamDatagramLinkLifetimeStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramLinkLifetimeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.Marshal(b, m, deterministic)
}
func (m *CMsgSteamDatagramLinkLifetimeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.Merge(m, src)
}
func (m *CMsgSteamDatagramLinkLifetimeStats) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.Size(m)
}
func (m *CMsgSteamDatagramLinkLifetimeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramLinkLifetimeStats proto.InternalMessageInfo

func (m *CMsgSteamDatagramLinkLifetimeStats) GetConnectedSeconds() uint32 {
	if m != nil && m.ConnectedSeconds != nil {
		return *m.ConnectedSeconds
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsSent() uint64 {
	if m != nil && m.PacketsSent != nil {
		return *m.PacketsSent
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetKbSent() uint64 {
	if m != nil && m.KbSent != nil {
		return *m.KbSent
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecv() uint64 {
	if m != nil && m.PacketsRecv != nil {
		return *m.PacketsRecv
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetKbRecv() uint64 {
	if m != nil && m.KbRecv != nil {
		return *m.KbRecv
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvSequenced() uint64 {
	if m != nil && m.PacketsRecvSequenced != nil {
		return *m.PacketsRecvSequenced
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDropped() uint64 {
	if m != nil && m.PacketsRecvDropped != nil {
		return *m.PacketsRecvDropped
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvOutOfOrder() uint64 {
	if m != nil && m.PacketsRecvOutOfOrder != nil {
		return *m.PacketsRecvOutOfOrder
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDuplicate() uint64 {
	if m != nil && m.PacketsRecvDuplicate != nil {
		return *m.PacketsRecvDuplicate
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvLurch() uint64 {
	if m != nil && m.PacketsRecvLurch != nil {
		return *m.PacketsRecvLurch
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetMultipathPacketsRecvSequenced() []uint64 {
	if m != nil {
		return m.MultipathPacketsRecvSequenced
	}
	return nil
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetMultipathPacketsRecvLater() []uint64 {
	if m != nil {
		return m.MultipathPacketsRecvLater
	}
	return nil
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetMultipathSendEnabled() uint32 {
	if m != nil && m.MultipathSendEnabled != nil {
		return *m.MultipathSendEnabled
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_100() uint32 {
	if m != nil && m.QualityHistogram_100 != nil {
		return *m.QualityHistogram_100
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_99() uint32 {
	if m != nil && m.QualityHistogram_99 != nil {
		return *m.QualityHistogram_99
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_97() uint32 {
	if m != nil && m.QualityHistogram_97 != nil {
		return *m.QualityHistogram_97
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_95() uint32 {
	if m != nil && m.QualityHistogram_95 != nil {
		return *m.QualityHistogram_95
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_90() uint32 {
	if m != nil && m.QualityHistogram_90 != nil {
		return *m.QualityHistogram_90
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_75() uint32 {
	if m != nil && m.QualityHistogram_75 != nil {
		return *m.QualityHistogram_75
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_50() uint32 {
	if m != nil && m.QualityHistogram_50 != nil {
		return *m.QualityHistogram_50
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_1() uint32 {
	if m != nil && m.QualityHistogram_1 != nil {
		return *m.QualityHistogram_1
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogramDead() uint32 {
	if m != nil && m.QualityHistogramDead != nil {
		return *m.QualityHistogramDead
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_2Nd() uint32 {
	if m != nil && m.QualityNtile_2Nd != nil {
		return *m.QualityNtile_2Nd
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_5Th() uint32 {
	if m != nil && m.QualityNtile_5Th != nil {
		return *m.QualityNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_25Th() uint32 {
	if m != nil && m.QualityNtile_25Th != nil {
		return *m.QualityNtile_25Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_50Th() uint32 {
	if m != nil && m.QualityNtile_50Th != nil {
		return *m.QualityNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_25() uint32 {
	if m != nil && m.PingHistogram_25 != nil {
		return *m.PingHistogram_25
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_50() uint32 {
	if m != nil && m.PingHistogram_50 != nil {
		return *m.PingHistogram_50
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_75() uint32 {
	if m != nil && m.PingHistogram_75 != nil {
		return *m.PingHistogram_75
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_100() uint32 {
	if m != nil && m.PingHistogram_100 != nil {
		return *m.PingHistogram_100
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_125() uint32 {
	if m != nil && m.PingHistogram_125 != nil {
		return *m.PingHistogram_125
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_150() uint32 {
	if m != nil && m.PingHistogram_150 != nil {
		return *m.PingHistogram_150
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_200() uint32 {
	if m != nil && m.PingHistogram_200 != nil {
		return *m.PingHistogram_200
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_300() uint32 {
	if m != nil && m.PingHistogram_300 != nil {
		return *m.PingHistogram_300
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogramMax() uint32 {
	if m != nil && m.PingHistogramMax != nil {
		return *m.PingHistogramMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_5Th() uint32 {
	if m != nil && m.PingNtile_5Th != nil {
		return *m.PingNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_50Th() uint32 {
	if m != nil && m.PingNtile_50Th != nil {
		return *m.PingNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_75Th() uint32 {
	if m != nil && m.PingNtile_75Th != nil {
		return *m.PingNtile_75Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_95Th() uint32 {
	if m != nil && m.PingNtile_95Th != nil {
		return *m.PingNtile_95Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_98Th() uint32 {
	if m != nil && m.PingNtile_98Th != nil {
		return *m.PingNtile_98Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogramNegligible() uint32 {
	if m != nil && m.JitterHistogramNegligible != nil {
		return *m.JitterHistogramNegligible
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_1() uint32 {
	if m != nil && m.JitterHistogram_1 != nil {
		return *m.JitterHistogram_1
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_2() uint32 {
	if m != nil && m.JitterHistogram_2 != nil {
		return *m.JitterHistogram_2
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_5() uint32 {
	if m != nil && m.JitterHistogram_5 != nil {
		return *m.JitterHistogram_5
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_10() uint32 {
	if m != nil && m.JitterHistogram_10 != nil {
		return *m.JitterHistogram_10
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_20() uint32 {
	if m != nil && m.JitterHistogram_20 != nil {
		return *m.JitterHistogram_20
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedMax() uint32 {
	if m != nil && m.TxspeedMax != nil {
		return *m.TxspeedMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_16() uint32 {
	if m != nil && m.TxspeedHistogram_16 != nil {
		return *m.TxspeedHistogram_16
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_32() uint32 {
	if m != nil && m.TxspeedHistogram_32 != nil {
		return *m.TxspeedHistogram_32
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_64() uint32 {
	if m != nil && m.TxspeedHistogram_64 != nil {
		return *m.TxspeedHistogram_64
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_128() uint32 {
	if m != nil && m.TxspeedHistogram_128 != nil {
		return *m.TxspeedHistogram_128
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_256() uint32 {
	if m != nil && m.TxspeedHistogram_256 != nil {
		return *m.TxspeedHistogram_256
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_512() uint32 {
	if m != nil && m.TxspeedHistogram_512 != nil {
		return *m.TxspeedHistogram_512
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogram_1024() uint32 {
	if m != nil && m.TxspeedHistogram_1024 != nil {
		return *m.TxspeedHistogram_1024
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedHistogramMax() uint32 {
	if m != nil && m.TxspeedHistogramMax != nil {
		return *m.TxspeedHistogramMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_5Th() uint32 {
	if m != nil && m.TxspeedNtile_5Th != nil {
		return *m.TxspeedNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_50Th() uint32 {
	if m != nil && m.TxspeedNtile_50Th != nil {
		return *m.TxspeedNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_75Th() uint32 {
	if m != nil && m.TxspeedNtile_75Th != nil {
		return *m.TxspeedNtile_75Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_95Th() uint32 {
	if m != nil && m.TxspeedNtile_95Th != nil {
		return *m.TxspeedNtile_95Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetTxspeedNtile_98Th() uint32 {
	if m != nil && m.TxspeedNtile_98Th != nil {
		return *m.TxspeedNtile_98Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedMax() uint32 {
	if m != nil && m.RxspeedMax != nil {
		return *m.RxspeedMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_16() uint32 {
	if m != nil && m.RxspeedHistogram_16 != nil {
		return *m.RxspeedHistogram_16
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_32() uint32 {
	if m != nil && m.RxspeedHistogram_32 != nil {
		return *m.RxspeedHistogram_32
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_64() uint32 {
	if m != nil && m.RxspeedHistogram_64 != nil {
		return *m.RxspeedHistogram_64
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_128() uint32 {
	if m != nil && m.RxspeedHistogram_128 != nil {
		return *m.RxspeedHistogram_128
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_256() uint32 {
	if m != nil && m.RxspeedHistogram_256 != nil {
		return *m.RxspeedHistogram_256
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_512() uint32 {
	if m != nil && m.RxspeedHistogram_512 != nil {
		return *m.RxspeedHistogram_512
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogram_1024() uint32 {
	if m != nil && m.RxspeedHistogram_1024 != nil {
		return *m.RxspeedHistogram_1024
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedHistogramMax() uint32 {
	if m != nil && m.RxspeedHistogramMax != nil {
		return *m.RxspeedHistogramMax
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_5Th() uint32 {
	if m != nil && m.RxspeedNtile_5Th != nil {
		return *m.RxspeedNtile_5Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_50Th() uint32 {
	if m != nil && m.RxspeedNtile_50Th != nil {
		return *m.RxspeedNtile_50Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_75Th() uint32 {
	if m != nil && m.RxspeedNtile_75Th != nil {
		return *m.RxspeedNtile_75Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_95Th() uint32 {
	if m != nil && m.RxspeedNtile_95Th != nil {
		return *m.RxspeedNtile_95Th
	}
	return 0
}

func (m *CMsgSteamDatagramLinkLifetimeStats) GetRxspeedNtile_98Th() uint32 {
	if m != nil && m.RxspeedNtile_98Th != nil {
		return *m.RxspeedNtile_98Th
	}
	return 0
}

type CMsgSteamDatagramConnectionQuality struct {
	Instantaneous        *CMsgSteamDatagramLinkInstantaneousStats `protobuf:"bytes,1,opt,name=instantaneous" json:"instantaneous,omitempty"`
	Lifetime             *CMsgSteamDatagramLinkLifetimeStats      `protobuf:"bytes,2,opt,name=lifetime" json:"lifetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CMsgSteamDatagramConnectionQuality) Reset()         { *m = CMsgSteamDatagramConnectionQuality{} }
func (m *CMsgSteamDatagramConnectionQuality) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamDatagramConnectionQuality) ProtoMessage()    {}
func (*CMsgSteamDatagramConnectionQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{5}
}

func (m *CMsgSteamDatagramConnectionQuality) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamDatagramConnectionQuality.Unmarshal(m, b)
}
func (m *CMsgSteamDatagramConnectionQuality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamDatagramConnectionQuality.Marshal(b, m, deterministic)
}
func (m *CMsgSteamDatagramConnectionQuality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamDatagramConnectionQuality.Merge(m, src)
}
func (m *CMsgSteamDatagramConnectionQuality) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamDatagramConnectionQuality.Size(m)
}
func (m *CMsgSteamDatagramConnectionQuality) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamDatagramConnectionQuality.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamDatagramConnectionQuality proto.InternalMessageInfo

func (m *CMsgSteamDatagramConnectionQuality) GetInstantaneous() *CMsgSteamDatagramLinkInstantaneousStats {
	if m != nil {
		return m.Instantaneous
	}
	return nil
}

func (m *CMsgSteamDatagramConnectionQuality) GetLifetime() *CMsgSteamDatagramLinkLifetimeStats {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

type CMsgICERendezvous struct {
	Auth                 *CMsgICERendezvous_Auth      `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
	AddCandidate         *CMsgICERendezvous_Candidate `protobuf:"bytes,1,opt,name=add_candidate,json=addCandidate" json:"add_candidate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CMsgICERendezvous) Reset()         { *m = CMsgICERendezvous{} }
func (m *CMsgICERendezvous) String() string { return proto.CompactTextString(m) }
func (*CMsgICERendezvous) ProtoMessage()    {}
func (*CMsgICERendezvous) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{6}
}

func (m *CMsgICERendezvous) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgICERendezvous.Unmarshal(m, b)
}
func (m *CMsgICERendezvous) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgICERendezvous.Marshal(b, m, deterministic)
}
func (m *CMsgICERendezvous) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgICERendezvous.Merge(m, src)
}
func (m *CMsgICERendezvous) XXX_Size() int {
	return xxx_messageInfo_CMsgICERendezvous.Size(m)
}
func (m *CMsgICERendezvous) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgICERendezvous.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgICERendezvous proto.InternalMessageInfo

func (m *CMsgICERendezvous) GetAuth() *CMsgICERendezvous_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *CMsgICERendezvous) GetAddCandidate() *CMsgICERendezvous_Candidate {
	if m != nil {
		return m.AddCandidate
	}
	return nil
}

type CMsgICERendezvous_Auth struct {
	PwdFrag              *string  `protobuf:"bytes,1,opt,name=pwd_frag,json=pwdFrag" json:"pwd_frag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgICERendezvous_Auth) Reset()         { *m = CMsgICERendezvous_Auth{} }
func (m *CMsgICERendezvous_Auth) String() string { return proto.CompactTextString(m) }
func (*CMsgICERendezvous_Auth) ProtoMessage()    {}
func (*CMsgICERendezvous_Auth) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{6, 0}
}

func (m *CMsgICERendezvous_Auth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgICERendezvous_Auth.Unmarshal(m, b)
}
func (m *CMsgICERendezvous_Auth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgICERendezvous_Auth.Marshal(b, m, deterministic)
}
func (m *CMsgICERendezvous_Auth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgICERendezvous_Auth.Merge(m, src)
}
func (m *CMsgICERendezvous_Auth) XXX_Size() int {
	return xxx_messageInfo_CMsgICERendezvous_Auth.Size(m)
}
func (m *CMsgICERendezvous_Auth) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgICERendezvous_Auth.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgICERendezvous_Auth proto.InternalMessageInfo

func (m *CMsgICERendezvous_Auth) GetPwdFrag() string {
	if m != nil && m.PwdFrag != nil {
		return *m.PwdFrag
	}
	return ""
}

type CMsgICERendezvous_Candidate struct {
	Candidate            *string  `protobuf:"bytes,3,opt,name=candidate" json:"candidate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgICERendezvous_Candidate) Reset()         { *m = CMsgICERendezvous_Candidate{} }
func (m *CMsgICERendezvous_Candidate) String() string { return proto.CompactTextString(m) }
func (*CMsgICERendezvous_Candidate) ProtoMessage()    {}
func (*CMsgICERendezvous_Candidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{6, 1}
}

func (m *CMsgICERendezvous_Candidate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgICERendezvous_Candidate.Unmarshal(m, b)
}
func (m *CMsgICERendezvous_Candidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgICERendezvous_Candidate.Marshal(b, m, deterministic)
}
func (m *CMsgICERendezvous_Candidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgICERendezvous_Candidate.Merge(m, src)
}
func (m *CMsgICERendezvous_Candidate) XXX_Size() int {
	return xxx_messageInfo_CMsgICERendezvous_Candidate.Size(m)
}
func (m *CMsgICERendezvous_Candidate) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgICERendezvous_Candidate.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgICERendezvous_Candidate proto.InternalMessageInfo

func (m *CMsgICERendezvous_Candidate) GetCandidate() string {
	if m != nil && m.Candidate != nil {
		return *m.Candidate
	}
	return ""
}

type CMsgSteamNetworkingP2PRendezvous struct {
	FromIdentity          *string                                             `protobuf:"bytes,8,opt,name=from_identity,json=fromIdentity" json:"from_identity,omitempty"`
	FromConnectionId      *uint32                                             `protobuf:"fixed32,9,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	ToIdentity            *string                                             `protobuf:"bytes,10,opt,name=to_identity,json=toIdentity" json:"to_identity,omitempty"`
	ToConnectionId        *uint32                                             `protobuf:"fixed32,1,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	SdrRoutes             []byte                                              `protobuf:"bytes,2,opt,name=sdr_routes,json=sdrRoutes" json:"sdr_routes,omitempty"`
	AckPeerRoutesRevision *uint32                                             `protobuf:"varint,3,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	IceEnabled            *bool                                               `protobuf:"varint,7,opt,name=ice_enabled,json=iceEnabled" json:"ice_enabled,omitempty"`
	HostedServerTicket    []byte                                              `protobuf:"bytes,14,opt,name=hosted_server_ticket,json=hostedServerTicket" json:"hosted_server_ticket,omitempty"`
	ConnectRequest        *CMsgSteamNetworkingP2PRendezvous_ConnectRequest    `protobuf:"bytes,4,opt,name=connect_request,json=connectRequest" json:"connect_request,omitempty"`
	ConnectOk             *CMsgSteamNetworkingP2PRendezvous_ConnectOK         `protobuf:"bytes,5,opt,name=connect_ok,json=connectOk" json:"connect_ok,omitempty"`
	ConnectionClosed      *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed  `protobuf:"bytes,6,opt,name=connection_closed,json=connectionClosed" json:"connection_closed,omitempty"`
	AckReliableMsg        *uint32                                             `protobuf:"varint,11,opt,name=ack_reliable_msg,json=ackReliableMsg" json:"ack_reliable_msg,omitempty"`
	FirstReliableMsg      *uint32                                             `protobuf:"varint,12,opt,name=first_reliable_msg,json=firstReliableMsg" json:"first_reliable_msg,omitempty"`
	ReliableMessages      []*CMsgSteamNetworkingP2PRendezvous_ReliableMessage `protobuf:"bytes,13,rep,name=reliable_messages,json=reliableMessages" json:"reliable_messages,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                            `json:"-"`
	XXX_unrecognized      []byte                                              `json:"-"`
	XXX_sizecache         int32                                               `json:"-"`
}

func (m *CMsgSteamNetworkingP2PRendezvous) Reset()         { *m = CMsgSteamNetworkingP2PRendezvous{} }
func (m *CMsgSteamNetworkingP2PRendezvous) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamNetworkingP2PRendezvous) ProtoMessage()    {}
func (*CMsgSteamNetworkingP2PRendezvous) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{7}
}

func (m *CMsgSteamNetworkingP2PRendezvous) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous.Unmarshal(m, b)
}
func (m *CMsgSteamNetworkingP2PRendezvous) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous.Marshal(b, m, deterministic)
}
func (m *CMsgSteamNetworkingP2PRendezvous) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous.Merge(m, src)
}
func (m *CMsgSteamNetworkingP2PRendezvous) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous.Size(m)
}
func (m *CMsgSteamNetworkingP2PRendezvous) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous proto.InternalMessageInfo

func (m *CMsgSteamNetworkingP2PRendezvous) GetFromIdentity() string {
	if m != nil && m.FromIdentity != nil {
		return *m.FromIdentity
	}
	return ""
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetFromConnectionId() uint32 {
	if m != nil && m.FromConnectionId != nil {
		return *m.FromConnectionId
	}
	return 0
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetToIdentity() string {
	if m != nil && m.ToIdentity != nil {
		return *m.ToIdentity
	}
	return ""
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetToConnectionId() uint32 {
	if m != nil && m.ToConnectionId != nil {
		return *m.ToConnectionId
	}
	return 0
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetSdrRoutes() []byte {
	if m != nil {
		return m.SdrRoutes
	}
	return nil
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetAckPeerRoutesRevision() uint32 {
	if m != nil && m.AckPeerRoutesRevision != nil {
		return *m.AckPeerRoutesRevision
	}
	return 0
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetIceEnabled() bool {
	if m != nil && m.IceEnabled != nil {
		return *m.IceEnabled
	}
	return false
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetHostedServerTicket() []byte {
	if m != nil {
		return m.HostedServerTicket
	}
	return nil
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetConnectRequest() *CMsgSteamNetworkingP2PRendezvous_ConnectRequest {
	if m != nil {
		return m.ConnectRequest
	}
	return nil
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetConnectOk() *CMsgSteamNetworkingP2PRendezvous_ConnectOK {
	if m != nil {
		return m.ConnectOk
	}
	return nil
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetConnectionClosed() *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed {
	if m != nil {
		return m.ConnectionClosed
	}
	return nil
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetAckReliableMsg() uint32 {
	if m != nil && m.AckReliableMsg != nil {
		return *m.AckReliableMsg
	}
	return 0
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetFirstReliableMsg() uint32 {
	if m != nil && m.FirstReliableMsg != nil {
		return *m.FirstReliableMsg
	}
	return 0
}

func (m *CMsgSteamNetworkingP2PRendezvous) GetReliableMessages() []*CMsgSteamNetworkingP2PRendezvous_ReliableMessage {
	if m != nil {
		return m.ReliableMessages
	}
	return nil
}

type CMsgSteamNetworkingP2PRendezvous_ConnectRequest struct {
	Crypt                *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,6,opt,name=crypt" json:"crypt,omitempty"`
	Cert                 *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,7,opt,name=cert" json:"cert,omitempty"`
	ToVirtualPort        *uint32                                  `protobuf:"varint,9,opt,name=to_virtual_port,json=toVirtualPort" json:"to_virtual_port,omitempty"`
	FromVirtualPort      *uint32                                  `protobuf:"varint,10,opt,name=from_virtual_port,json=fromVirtualPort" json:"from_virtual_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) Reset() {
	*m = CMsgSteamNetworkingP2PRendezvous_ConnectRequest{}
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamNetworkingP2PRendezvous_ConnectRequest) ProtoMessage() {}
func (*CMsgSteamNetworkingP2PRendezvous_ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{7, 0}
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectRequest.Unmarshal(m, b)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectRequest.Merge(m, src)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectRequest.Size(m)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectRequest proto.InternalMessageInfo

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if m != nil {
		return m.Crypt
	}
	return nil
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetToVirtualPort() uint32 {
	if m != nil && m.ToVirtualPort != nil {
		return *m.ToVirtualPort
	}
	return 0
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetFromVirtualPort() uint32 {
	if m != nil && m.FromVirtualPort != nil {
		return *m.FromVirtualPort
	}
	return 0
}

type CMsgSteamNetworkingP2PRendezvous_ConnectOK struct {
	Crypt                *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,5,opt,name=crypt" json:"crypt,omitempty"`
	Cert                 *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,6,opt,name=cert" json:"cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectOK) Reset() {
	*m = CMsgSteamNetworkingP2PRendezvous_ConnectOK{}
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectOK) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamNetworkingP2PRendezvous_ConnectOK) ProtoMessage() {}
func (*CMsgSteamNetworkingP2PRendezvous_ConnectOK) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{7, 1}
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectOK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectOK.Unmarshal(m, b)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectOK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectOK.Marshal(b, m, deterministic)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectOK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectOK.Merge(m, src)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectOK) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectOK.Size(m)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectOK) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectOK.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectOK proto.InternalMessageInfo

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if m != nil {
		return m.Crypt
	}
	return nil
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if m != nil {
		return m.Cert
	}
	return nil
}

type CMsgSteamNetworkingP2PRendezvous_ConnectionClosed struct {
	Debug                *string  `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	ReasonCode           *uint32  `protobuf:"varint,6,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) Reset() {
	*m = CMsgSteamNetworkingP2PRendezvous_ConnectionClosed{}
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) ProtoMessage() {}
func (*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{7, 2}
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed.Unmarshal(m, b)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed.Marshal(b, m, deterministic)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed.Merge(m, src)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed.Size(m)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ConnectionClosed proto.InternalMessageInfo

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) GetDebug() string {
	if m != nil && m.Debug != nil {
		return *m.Debug
	}
	return ""
}

func (m *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) GetReasonCode() uint32 {
	if m != nil && m.ReasonCode != nil {
		return *m.ReasonCode
	}
	return 0
}

type CMsgSteamNetworkingP2PRendezvous_ReliableMessage struct {
	Ice                  *CMsgICERendezvous `protobuf:"bytes,1,opt,name=ice" json:"ice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) Reset() {
	*m = CMsgSteamNetworkingP2PRendezvous_ReliableMessage{}
}
func (m *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSteamNetworkingP2PRendezvous_ReliableMessage) ProtoMessage() {}
func (*CMsgSteamNetworkingP2PRendezvous_ReliableMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{7, 3}
}

func (m *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ReliableMessage.Unmarshal(m, b)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ReliableMessage.Marshal(b, m, deterministic)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ReliableMessage.Merge(m, src)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ReliableMessage.Size(m)
}
func (m *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ReliableMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamNetworkingP2PRendezvous_ReliableMessage proto.InternalMessageInfo

func (m *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) GetIce() *CMsgICERendezvous {
	if m != nil {
		return m.Ice
	}
	return nil
}

type CMsgSteamNetworkingICESessionSummary struct {
	FailureReasonCode          *uint32  `protobuf:"varint,7,opt,name=failure_reason_code,json=failureReasonCode" json:"failure_reason_code,omitempty"`
	LocalCandidateTypes        *uint32  `protobuf:"varint,1,opt,name=local_candidate_types,json=localCandidateTypes" json:"local_candidate_types,omitempty"`
	RemoteCandidateTypes       *uint32  `protobuf:"varint,2,opt,name=remote_candidate_types,json=remoteCandidateTypes" json:"remote_candidate_types,omitempty"`
	InitialRouteKind           *uint32  `protobuf:"varint,3,opt,name=initial_route_kind,json=initialRouteKind" json:"initial_route_kind,omitempty"`
	InitialPing                *uint32  `protobuf:"varint,4,opt,name=initial_ping,json=initialPing" json:"initial_ping,omitempty"`
	InitialScore               *uint32  `protobuf:"varint,6,opt,name=initial_score,json=initialScore" json:"initial_score,omitempty"`
	NegotiationMs              *uint32  `protobuf:"varint,5,opt,name=negotiation_ms,json=negotiationMs" json:"negotiation_ms,omitempty"`
	BestRouteKind              *uint32  `protobuf:"varint,16,opt,name=best_route_kind,json=bestRouteKind" json:"best_route_kind,omitempty"`
	BestPing                   *uint32  `protobuf:"varint,17,opt,name=best_ping,json=bestPing" json:"best_ping,omitempty"`
	BestScore                  *uint32  `protobuf:"varint,18,opt,name=best_score,json=bestScore" json:"best_score,omitempty"`
	BestTime                   *uint32  `protobuf:"varint,19,opt,name=best_time,json=bestTime" json:"best_time,omitempty"`
	SelectedSeconds            *uint32  `protobuf:"varint,12,opt,name=selected_seconds,json=selectedSeconds" json:"selected_seconds,omitempty"`
	UserSettings               *uint32  `protobuf:"varint,13,opt,name=user_settings,json=userSettings" json:"user_settings,omitempty"`
	IceEnableVar               *uint32  `protobuf:"varint,14,opt,name=ice_enable_var,json=iceEnableVar" json:"ice_enable_var,omitempty"`
	LocalCandidateTypesAllowed *uint32  `protobuf:"varint,15,opt,name=local_candidate_types_allowed,json=localCandidateTypesAllowed" json:"local_candidate_types_allowed,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *CMsgSteamNetworkingICESessionSummary) Reset()         { *m = CMsgSteamNetworkingICESessionSummary{} }
func (m *CMsgSteamNetworkingICESessionSummary) String() string { return proto.CompactTextString(m) }
func (*CMsgSteamNetworkingICESessionSummary) ProtoMessage()    {}
func (*CMsgSteamNetworkingICESessionSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_7656146f8b18bed3, []int{8}
}

func (m *CMsgSteamNetworkingICESessionSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgSteamNetworkingICESessionSummary.Unmarshal(m, b)
}
func (m *CMsgSteamNetworkingICESessionSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgSteamNetworkingICESessionSummary.Marshal(b, m, deterministic)
}
func (m *CMsgSteamNetworkingICESessionSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgSteamNetworkingICESessionSummary.Merge(m, src)
}
func (m *CMsgSteamNetworkingICESessionSummary) XXX_Size() int {
	return xxx_messageInfo_CMsgSteamNetworkingICESessionSummary.Size(m)
}
func (m *CMsgSteamNetworkingICESessionSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgSteamNetworkingICESessionSummary.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgSteamNetworkingICESessionSummary proto.InternalMessageInfo

func (m *CMsgSteamNetworkingICESessionSummary) GetFailureReasonCode() uint32 {
	if m != nil && m.FailureReasonCode != nil {
		return *m.FailureReasonCode
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetLocalCandidateTypes() uint32 {
	if m != nil && m.LocalCandidateTypes != nil {
		return *m.LocalCandidateTypes
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetRemoteCandidateTypes() uint32 {
	if m != nil && m.RemoteCandidateTypes != nil {
		return *m.RemoteCandidateTypes
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetInitialRouteKind() uint32 {
	if m != nil && m.InitialRouteKind != nil {
		return *m.InitialRouteKind
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetInitialPing() uint32 {
	if m != nil && m.InitialPing != nil {
		return *m.InitialPing
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetInitialScore() uint32 {
	if m != nil && m.InitialScore != nil {
		return *m.InitialScore
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetNegotiationMs() uint32 {
	if m != nil && m.NegotiationMs != nil {
		return *m.NegotiationMs
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetBestRouteKind() uint32 {
	if m != nil && m.BestRouteKind != nil {
		return *m.BestRouteKind
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetBestPing() uint32 {
	if m != nil && m.BestPing != nil {
		return *m.BestPing
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetBestScore() uint32 {
	if m != nil && m.BestScore != nil {
		return *m.BestScore
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetBestTime() uint32 {
	if m != nil && m.BestTime != nil {
		return *m.BestTime
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetSelectedSeconds() uint32 {
	if m != nil && m.SelectedSeconds != nil {
		return *m.SelectedSeconds
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetUserSettings() uint32 {
	if m != nil && m.UserSettings != nil {
		return *m.UserSettings
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetIceEnableVar() uint32 {
	if m != nil && m.IceEnableVar != nil {
		return *m.IceEnableVar
	}
	return 0
}

func (m *CMsgSteamNetworkingICESessionSummary) GetLocalCandidateTypesAllowed() uint32 {
	if m != nil && m.LocalCandidateTypesAllowed != nil {
		return *m.LocalCandidateTypesAllowed
	}
	return 0
}

func init() {
	proto.RegisterEnum("dota.ESteamNetworkingSocketsCipher", ESteamNetworkingSocketsCipher_name, ESteamNetworkingSocketsCipher_value)
	proto.RegisterEnum("dota.CMsgSteamDatagramSessionCryptInfo_EKeyType", CMsgSteamDatagramSessionCryptInfo_EKeyType_name, CMsgSteamDatagramSessionCryptInfo_EKeyType_value)
	proto.RegisterType((*CMsgSteamDatagramSessionCryptInfo)(nil), "dota.CMsgSteamDatagramSessionCryptInfo")
	proto.RegisterType((*CMsgSteamDatagramSessionCryptInfoSigned)(nil), "dota.CMsgSteamDatagramSessionCryptInfoSigned")
	proto.RegisterType((*CMsgSteamDatagramDiagnostic)(nil), "dota.CMsgSteamDatagramDiagnostic")
	proto.RegisterType((*CMsgSteamDatagramLinkInstantaneousStats)(nil), "dota.CMsgSteamDatagramLinkInstantaneousStats")
	proto.RegisterType((*CMsgSteamDatagramLinkLifetimeStats)(nil), "dota.CMsgSteamDatagramLinkLifetimeStats")
	proto.RegisterType((*CMsgSteamDatagramConnectionQuality)(nil), "dota.CMsgSteamDatagramConnectionQuality")
	proto.RegisterType((*CMsgICERendezvous)(nil), "dota.CMsgICERendezvous")
	proto.RegisterType((*CMsgICERendezvous_Auth)(nil), "dota.CMsgICERendezvous.Auth")
	proto.RegisterType((*CMsgICERendezvous_Candidate)(nil), "dota.CMsgICERendezvous.Candidate")
	proto.RegisterType((*CMsgSteamNetworkingP2PRendezvous)(nil), "dota.CMsgSteamNetworkingP2PRendezvous")
	proto.RegisterType((*CMsgSteamNetworkingP2PRendezvous_ConnectRequest)(nil), "dota.CMsgSteamNetworkingP2PRendezvous.ConnectRequest")
	proto.RegisterType((*CMsgSteamNetworkingP2PRendezvous_ConnectOK)(nil), "dota.CMsgSteamNetworkingP2PRendezvous.ConnectOK")
	proto.RegisterType((*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed)(nil), "dota.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed")
	proto.RegisterType((*CMsgSteamNetworkingP2PRendezvous_ReliableMessage)(nil), "dota.CMsgSteamNetworkingP2PRendezvous.ReliableMessage")
	proto.RegisterType((*CMsgSteamNetworkingICESessionSummary)(nil), "dota.CMsgSteamNetworkingICESessionSummary")
}

func init() {
	proto.RegisterFile("steamnetworkingsockets_messages.proto", fileDescriptor_7656146f8b18bed3)
}

var fileDescriptor_7656146f8b18bed3 = []byte{
	// 2445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xdb, 0x7a, 0xdb, 0xb8,
	0x11, 0x5e, 0xc5, 0xe7, 0x91, 0x25, 0xcb, 0x88, 0x93, 0xc0, 0x4e, 0xdc, 0xd8, 0x4e, 0xb6, 0x71,
	0x4e, 0x5e, 0x9a, 0x31, 0x2d, 0xbb, 0xdd, 0x43, 0x1d, 0xd9, 0x49, 0xbc, 0xf1, 0x69, 0x29, 0xc7,
	0xbb, 0xed, 0xb6, 0xcb, 0x8f, 0x26, 0x61, 0x09, 0x95, 0x44, 0x6a, 0x41, 0xc8, 0x89, 0x7b, 0xd5,
	0x27, 0xe8, 0xed, 0x3e, 0x42, 0x9f, 0xa2, 0x5f, 0x2f, 0xfa, 0x08, 0xbd, 0xec, 0x03, 0xf4, 0x35,
	0xfa, 0x01, 0x20, 0xa9, 0x03, 0xa1, 0x78, 0xdb, 0xaf, 0x77, 0xe2, 0xcc, 0xff, 0x0f, 0x07, 0x83,
	0x1f, 0x00, 0x31, 0x82, 0x4f, 0x23, 0x4e, 0xdc, 0x56, 0x40, 0xf8, 0xfb, 0x90, 0x35, 0x68, 0x50,
	0x8b, 0x42, 0xaf, 0x41, 0x78, 0xe4, 0xb4, 0x48, 0x14, 0xb9, 0x35, 0x12, 0xad, 0xb5, 0x59, 0xc8,
	0x43, 0x34, 0xea, 0x87, 0xdc, 0x5d, 0x78, 0x7a, 0x0d, 0xd8, 0xf1, 0x08, 0xe3, 0x31, 0x65, 0xe5,
	0x6f, 0x37, 0x60, 0xb9, 0x72, 0x18, 0xd5, 0xaa, 0x82, 0xb3, 0xeb, 0x72, 0xb7, 0xc6, 0xdc, 0x56,
	0x95, 0x44, 0x11, 0x0d, 0x83, 0x0a, 0xbb, 0x6a, 0xf3, 0xfd, 0xe0, 0x22, 0x44, 0xa7, 0x30, 0xd9,
	0x20, 0x57, 0x0e, 0xbf, 0x6a, 0x13, 0x9c, 0x5b, 0xca, 0xad, 0x16, 0x4d, 0x63, 0x4d, 0xbc, 0x6b,
	0xed, 0x5a, 0xea, 0xda, 0xde, 0x5b, 0x72, 0x75, 0x7a, 0xd5, 0x26, 0xbf, 0x9a, 0xd8, 0x3f, 0x3a,
	0xdb, 0x39, 0xd8, 0xdf, 0xb5, 0x27, 0x1a, 0xca, 0x82, 0xe6, 0x55, 0x54, 0xdf, 0xe5, 0x2e, 0xbe,
	0xb1, 0x94, 0x5b, 0x9d, 0x96, 0x2e, 0x11, 0x09, 0xcd, 0xc1, 0x58, 0x10, 0x06, 0x1e, 0xc1, 0x23,
	0x4b, 0xb9, 0xd5, 0x71, 0x5b, 0x3d, 0xa0, 0xc7, 0x50, 0x92, 0x59, 0x7b, 0x61, 0xd3, 0xb9, 0x24,
	0x4c, 0xbc, 0x08, 0x8f, 0x2e, 0xe5, 0x56, 0x0b, 0xf6, 0x4c, 0x62, 0x3f, 0x53, 0x66, 0xf4, 0x05,
	0x4c, 0x78, 0xb4, 0x5d, 0x27, 0x2c, 0xc2, 0x63, 0x4b, 0x23, 0xab, 0x45, 0xf3, 0x81, 0x4a, 0x78,
	0x4f, 0x66, 0x7b, 0x94, 0x16, 0xa7, 0xaa, 0x8a, 0x53, 0x91, 0x58, 0x3b, 0xe1, 0xac, 0x3c, 0x82,
	0xc9, 0x24, 0x71, 0x94, 0x87, 0x24, 0xf5, 0xd2, 0x27, 0xa8, 0x08, 0x50, 0x79, 0x67, 0x9f, 0xed,
	0x99, 0x96, 0xb5, 0xbe, 0x5d, 0xca, 0xad, 0x7c, 0x0f, 0x8f, 0xae, 0xad, 0x41, 0x95, 0xd6, 0x02,
	0xe2, 0x23, 0x04, 0xa3, 0x34, 0xb8, 0x08, 0x65, 0x01, 0xa7, 0x6d, 0xf9, 0x1b, 0xdd, 0x83, 0xa9,
	0x88, 0xd6, 0x02, 0x97, 0x77, 0x18, 0x89, 0x6b, 0xd0, 0x35, 0xac, 0x1c, 0xc2, 0xdd, 0x4c, 0xf0,
	0x5d, 0xea, 0xd6, 0x82, 0x30, 0xe2, 0xd4, 0x43, 0x0b, 0x30, 0x19, 0x91, 0x4b, 0xc2, 0x28, 0xbf,
	0x92, 0x41, 0x0b, 0x76, 0xfa, 0x2c, 0x5e, 0xc6, 0xc9, 0x07, 0x2e, 0x63, 0x4e, 0xd9, 0xf2, 0xf7,
	0xca, 0x4f, 0x23, 0x9a, 0x64, 0x0f, 0x68, 0xd0, 0xd8, 0x0f, 0x22, 0xee, 0x06, 0xdc, 0x0d, 0x48,
	0xd8, 0x89, 0xaa, 0xdc, 0xe5, 0x11, 0xda, 0x80, 0x3b, 0x61, 0x87, 0x3b, 0x6d, 0x57, 0x69, 0xa7,
	0x4d, 0x98, 0x13, 0x11, 0xcf, 0xf9, 0xb0, 0x6e, 0xc4, 0xaf, 0xba, 0x19, 0x76, 0xf8, 0x89, 0xf2,
	0x9e, 0x10, 0x56, 0x25, 0xde, 0x77, 0xeb, 0x06, 0x7a, 0x0c, 0xb3, 0x82, 0x75, 0x7e, 0xc5, 0x49,
	0xca, 0x91, 0x29, 0x14, 0xec, 0x62, 0xd8, 0xe1, 0x2f, 0x85, 0x5d, 0xa1, 0x91, 0x09, 0xb7, 0x69,
	0xa0, 0x8d, 0x3f, 0x22, 0xf1, 0x88, 0x06, 0x99, 0xf0, 0x8f, 0xa0, 0x44, 0x83, 0x81, 0xe8, 0x6a,
	0xfe, 0x0b, 0x34, 0xe8, 0x0d, 0x7e, 0x07, 0x26, 0xda, 0x34, 0xa8, 0x39, 0x2d, 0x31, 0xfb, 0xc2,
	0x3f, 0x2e, 0x1e, 0x0f, 0x23, 0xb4, 0x06, 0x37, 0x93, 0x57, 0xfa, 0x2c, 0x6c, 0xb7, 0x89, 0xef,
	0xb4, 0x3d, 0x8e, 0xc7, 0x25, 0x68, 0x36, 0x76, 0xed, 0x2a, 0xcf, 0x89, 0xc7, 0xd1, 0xaf, 0x61,
	0x21, 0xc1, 0xbf, 0x27, 0x94, 0xf9, 0x4e, 0x44, 0x7e, 0xec, 0x90, 0xc0, 0x23, 0x92, 0x36, 0x21,
	0x69, 0x77, 0x62, 0xc4, 0xb7, 0x02, 0x50, 0x8d, 0xfd, 0x82, 0xbc, 0x0a, 0xa5, 0x36, 0x71, 0x1b,
	0xce, 0x1f, 0x29, 0xe7, 0x84, 0x39, 0x1d, 0x91, 0xee, 0xa4, 0x2a, 0x86, 0xb0, 0x7f, 0x2d, 0xcd,
	0xef, 0x22, 0xe2, 0xad, 0xfc, 0xf3, 0x2e, 0xac, 0x68, 0x67, 0xe6, 0x80, 0x5e, 0x10, 0x4e, 0x5b,
	0x44, 0x4d, 0xca, 0x53, 0x98, 0xf5, 0xc2, 0x20, 0x20, 0x1e, 0x27, 0x22, 0x13, 0x2f, 0x0c, 0xfc,
	0x28, 0x2e, 0x6f, 0x29, 0x75, 0x54, 0x95, 0x1d, 0x2d, 0xc3, 0x74, 0x92, 0x7a, 0x44, 0x02, 0x2e,
	0xcb, 0x3a, 0x6a, 0xe7, 0x63, 0x5b, 0x95, 0x04, 0x5c, 0x94, 0xa9, 0x71, 0xae, 0xbc, 0xa3, 0xd2,
	0x3b, 0xde, 0x38, 0x97, 0x8e, 0x1e, 0x2e, 0x23, 0xde, 0xa5, 0x2c, 0x62, 0x97, 0x6b, 0x13, 0xef,
	0x32, 0xe6, 0x4a, 0xef, 0x78, 0xc2, 0x95, 0x8e, 0x0d, 0xb8, 0xdd, 0xcb, 0x4d, 0x2b, 0xe6, 0xcb,
	0x72, 0x8d, 0xda, 0x73, 0x3d, 0x51, 0x92, 0x6a, 0xf9, 0xc8, 0x80, 0xb9, 0x3e, 0x56, 0x3c, 0x3b,
	0xb2, 0x5e, 0xa3, 0x36, 0xea, 0xe1, 0xc4, 0xb3, 0x83, 0xb6, 0x60, 0xbe, 0x8f, 0x21, 0x84, 0x17,
	0x5e, 0x38, 0x21, 0xf3, 0x09, 0xc3, 0x53, 0x92, 0x76, 0xab, 0x87, 0x76, 0xdc, 0xe1, 0xc7, 0x17,
	0xc7, 0xc2, 0x99, 0xc9, 0xd0, 0xef, 0xb4, 0x9b, 0xd4, 0x73, 0x39, 0xc1, 0x90, 0xc9, 0x70, 0x37,
	0xf1, 0xa1, 0x67, 0x80, 0xfa, 0x58, 0xcd, 0x0e, 0xf3, 0xea, 0x38, 0x2f, 0x19, 0xa5, 0x1e, 0xc6,
	0x81, 0xb0, 0xa3, 0xd7, 0xb0, 0xd4, 0xea, 0x34, 0x39, 0x6d, 0xbb, 0xbc, 0xee, 0x0c, 0xa9, 0xc7,
	0xf4, 0xd2, 0xc8, 0xea, 0xa8, 0xbd, 0x98, 0xe2, 0x4e, 0x74, 0x85, 0xf9, 0x0a, 0xee, 0x0d, 0x09,
	0xd4, 0x74, 0x39, 0x61, 0xb8, 0x20, 0x83, 0xcc, 0xeb, 0x82, 0x1c, 0x08, 0x80, 0x18, 0x6d, 0x37,
	0x40, 0x44, 0x02, 0xdf, 0x21, 0x81, 0x7b, 0xde, 0x24, 0x3e, 0x2e, 0x4a, 0xe5, 0xcc, 0xa5, 0xde,
	0x2a, 0x09, 0xfc, 0x3d, 0xe5, 0x43, 0x26, 0xdc, 0xfa, 0xb1, 0xe3, 0x36, 0x29, 0xbf, 0x72, 0xea,
	0x34, 0xe2, 0xa1, 0x10, 0xa4, 0xb3, 0x6e, 0x18, 0xf8, 0x96, 0x5a, 0xfd, 0xb1, 0xf3, 0x4d, 0xe2,
	0x5b, 0x37, 0x0c, 0x31, 0x87, 0x59, 0xce, 0xf6, 0x36, 0xbe, 0xad, 0x16, 0xf4, 0x20, 0x65, 0x7b,
	0x7b, 0x08, 0xa3, 0x8c, 0xef, 0x0c, 0x61, 0x94, 0x87, 0x30, 0x2c, 0x8c, 0x87, 0x30, 0xac, 0x21,
	0x0c, 0x03, 0xcf, 0x0f, 0x61, 0x0c, 0x19, 0x47, 0xd9, 0xc2, 0x0b, 0x7a, 0x46, 0x79, 0xc8, 0x3b,
	0x2c, 0x03, 0xdf, 0xd5, 0x33, 0x2c, 0x43, 0x6c, 0x44, 0x9a, 0xfa, 0xe2, 0x7b, 0x6a, 0x23, 0xca,
	0x54, 0x57, 0xcc, 0x62, 0x16, 0xef, 0x13, 0xd7, 0xc7, 0x8b, 0x6a, 0x16, 0x07, 0x29, 0xbb, 0xc4,
	0xf5, 0xd1, 0x13, 0x48, 0x42, 0x39, 0x01, 0xa7, 0x4d, 0xe2, 0x98, 0x81, 0x8f, 0x7f, 0xa1, 0x4e,
	0xcc, 0xd8, 0x71, 0x24, 0xec, 0x66, 0xa0, 0xc1, 0x5a, 0xbc, 0x8e, 0xef, 0x67, 0xb1, 0x16, 0xaf,
	0x8b, 0xb5, 0x30, 0x10, 0x57, 0x80, 0x97, 0xd4, 0x4e, 0xd4, 0x17, 0x58, 0x8b, 0xb6, 0x0c, 0x5e,
	0xc7, 0xcb, 0x59, 0xb4, 0xb0, 0x8b, 0x3c, 0xe4, 0xde, 0xdd, 0x1d, 0xa6, 0x69, 0xe1, 0xc7, 0xf1,
	0x29, 0x4f, 0x83, 0x5a, 0x3a, 0x42, 0xd3, 0xd2, 0x60, 0x2d, 0x03, 0x3f, 0xd1, 0x60, 0x2d, 0x43,
	0x83, 0x2d, 0x5b, 0xf8, 0xa9, 0x06, 0x5b, 0xb6, 0xe4, 0x5a, 0xef, 0xc7, 0x0a, 0xe9, 0x3f, 0x53,
	0x19, 0xf7, 0x81, 0x85, 0xee, 0x35, 0x68, 0xd3, 0xc2, 0xcf, 0x75, 0x68, 0x53, 0x1b, 0xdb, 0x32,
	0xf0, 0x9a, 0x0e, 0x6d, 0xe9, 0x62, 0x9b, 0x86, 0x81, 0x3f, 0xd3, 0xa0, 0x4d, 0x6d, 0x26, 0x2f,
	0x0c, 0x03, 0x1b, 0x1a, 0xf4, 0x0b, 0x2d, 0xba, 0xe5, 0x7e, 0xc0, 0xeb, 0x1a, 0xf4, 0xa1, 0xfb,
	0x01, 0x3d, 0x84, 0xa2, 0x44, 0x77, 0xc5, 0x61, 0x4a, 0xe4, 0xb4, 0xb0, 0xa6, 0xca, 0xf8, 0x25,
	0xcc, 0xf4, 0xa2, 0xc4, 0x44, 0xbf, 0x50, 0x27, 0x74, 0x17, 0x66, 0x64, 0x70, 0x65, 0x11, 0x6e,
	0x63, 0x00, 0x57, 0xce, 0xc6, 0xdb, 0x16, 0x38, 0x6b, 0x00, 0xb7, 0xad, 0xc1, 0x6d, 0xf1, 0x3a,
	0xde, 0x1c, 0xc4, 0x6d, 0xf1, 0x3a, 0xfa, 0x12, 0xee, 0xc6, 0xc7, 0x71, 0x77, 0xd4, 0x01, 0xa9,
	0x35, 0x69, 0x8d, 0x9e, 0x37, 0x09, 0xfe, 0x42, 0x72, 0xe6, 0x15, 0x24, 0x1d, 0xfe, 0x51, 0x0a,
	0x10, 0x35, 0xcb, 0xf0, 0xd7, 0xf1, 0x97, 0xaa, 0x66, 0x03, 0xb4, 0x75, 0x2d, 0xda, 0xc4, 0x5f,
	0x69, 0xd1, 0xa6, 0x16, 0x6d, 0xe1, 0xdf, 0x68, 0xd1, 0x96, 0xd8, 0x41, 0xb2, 0x99, 0x18, 0x78,
	0x47, 0xed, 0x20, 0x83, 0xa9, 0x18, 0x5a, 0xbc, 0x69, 0xe0, 0x97, 0x5a, 0xbc, 0x69, 0xa0, 0xfb,
	0x90, 0xe7, 0x1f, 0xa2, 0x36, 0x21, 0xbe, 0x94, 0x45, 0x45, 0xe2, 0x20, 0x36, 0x09, 0x41, 0x18,
	0x30, 0x97, 0x00, 0x7a, 0x32, 0xd8, 0xc4, 0xbb, 0x6a, 0xd3, 0x8b, 0x7d, 0xdd, 0x14, 0x36, 0xf5,
	0x8c, 0x17, 0x26, 0xde, 0xd3, 0x33, 0x5e, 0x98, 0x7a, 0xc6, 0xe6, 0x06, 0x7e, 0xa5, 0x67, 0x6c,
	0x6e, 0x88, 0x83, 0x4b, 0x93, 0x95, 0xb9, 0x85, 0x5f, 0xab, 0x83, 0x2b, 0x93, 0x96, 0xb9, 0xa5,
	0xe7, 0x98, 0xd6, 0x26, 0x7e, 0xa3, 0xe7, 0x98, 0xd6, 0xa6, 0x9e, 0x63, 0xad, 0x9b, 0x78, 0x5f,
	0xcf, 0xb1, 0xd6, 0x4d, 0xb1, 0x89, 0x6b, 0x72, 0x33, 0xcc, 0x0d, 0xfc, 0xb5, 0xda, 0xc4, 0x33,
	0xc9, 0x19, 0xe6, 0x90, 0x11, 0x89, 0x29, 0x79, 0xab, 0x7f, 0x93, 0x98, 0x9b, 0x27, 0x30, 0x9b,
	0x70, 0xba, 0xeb, 0xf5, 0x40, 0x6d, 0x76, 0xb1, 0xa3, 0x77, 0x33, 0x1f, 0xc0, 0x8a, 0x55, 0x7b,
	0xa8, 0x64, 0xd7, 0x07, 0x36, 0x74, 0x68, 0xb9, 0x76, 0x8f, 0xb2, 0xe8, 0xb2, 0x36, 0xb6, 0x5c,
	0xc1, 0xc7, 0x59, 0xf4, 0xb6, 0x1e, 0x2d, 0xd6, 0xf1, 0x89, 0x06, 0x2d, 0x96, 0xf2, 0x7d, 0xc8,
	0xb3, 0x1e, 0x81, 0x7e, 0xa3, 0x04, 0xca, 0xfa, 0x04, 0xca, 0x74, 0x02, 0xb5, 0x95, 0x78, 0x98,
	0x56, 0xa0, 0x4c, 0x27, 0xd0, 0xaa, 0x9e, 0xa1, 0x04, 0xca, 0x74, 0x02, 0x3d, 0xd5, 0x33, 0x94,
	0x40, 0x99, 0x56, 0xa0, 0xef, 0xd4, 0x74, 0x32, 0xbd, 0x40, 0x99, 0x56, 0xa0, 0x67, 0x7a, 0x4e,
	0x2c, 0x50, 0xa6, 0x15, 0xe8, 0xb7, 0x7a, 0x4e, 0x2c, 0x50, 0xa6, 0x17, 0xe8, 0x77, 0x4a, 0xa0,
	0x6c, 0x88, 0x40, 0x99, 0x56, 0xa0, 0xbf, 0xd5, 0xbf, 0x29, 0x16, 0x28, 0xcb, 0x08, 0xf4, 0x77,
	0x4a, 0xa0, 0x2c, 0x2b, 0x50, 0x96, 0x15, 0xe8, 0xf7, 0x4a, 0x16, 0x4c, 0x23, 0x50, 0x96, 0x15,
	0xe8, 0xef, 0xb3, 0xe8, 0xb2, 0x36, 0xb6, 0x14, 0xe8, 0x1f, 0xb2, 0xe8, 0x6d, 0x3d, 0x5a, 0x08,
	0xf4, 0x07, 0x0d, 0x7a, 0x8b, 0xd7, 0x57, 0xfe, 0x9e, 0xd3, 0xdc, 0xea, 0x2a, 0xea, 0x9e, 0x46,
	0xc3, 0xe0, 0x1b, 0xf5, 0xe5, 0x83, 0xaa, 0x50, 0xa0, 0xbd, 0x17, 0x70, 0x79, 0xc1, 0xce, 0x9b,
	0xcf, 0x87, 0x74, 0x58, 0xf4, 0x17, 0x76, 0xbb, 0x3f, 0x06, 0xda, 0x85, 0xc9, 0x66, 0x7c, 0x77,
	0x94, 0x37, 0xc4, 0xbc, 0xb9, 0xfa, 0x91, 0x78, 0x7d, 0xd7, 0x4c, 0x3b, 0x65, 0xae, 0xfc, 0x2b,
	0x07, 0xb3, 0x82, 0xb0, 0x5f, 0xd9, 0xb3, 0x49, 0xe0, 0x93, 0x3f, 0x5d, 0x8a, 0xd8, 0x06, 0x8c,
	0xba, 0x1d, 0x5e, 0x8f, 0xe3, 0xde, 0xeb, 0xc6, 0xed, 0x83, 0xad, 0xed, 0x74, 0x78, 0xdd, 0x96,
	0x48, 0xf4, 0x0a, 0x0a, 0xae, 0xef, 0x3b, 0x9e, 0x1b, 0xf8, 0xd4, 0x17, 0x17, 0x2d, 0x35, 0xc4,
	0xe5, 0x61, 0xd4, 0x4a, 0x02, 0xb4, 0xa7, 0x5d, 0xdf, 0x4f, 0x9f, 0x16, 0x96, 0x61, 0x54, 0x44,
	0x45, 0xf3, 0x30, 0xd9, 0x7e, 0xef, 0x3b, 0x17, 0xcc, 0xad, 0xc9, 0x50, 0x53, 0xf6, 0x44, 0xfb,
	0xbd, 0xff, 0x8a, 0xb9, 0xb5, 0x85, 0xc7, 0x30, 0x95, 0xe2, 0xd1, 0x3d, 0x98, 0xea, 0xbe, 0x73,
	0x44, 0x02, 0xbb, 0x86, 0x95, 0x7f, 0x00, 0x2c, 0xa5, 0xe5, 0xe8, 0xb6, 0x84, 0x4e, 0xcc, 0x93,
	0x9e, 0xc1, 0x3e, 0x80, 0xc2, 0x05, 0x0b, 0x5b, 0x0e, 0xf5, 0x49, 0xc0, 0x29, 0xbf, 0x92, 0x37,
	0xd2, 0x29, 0x7b, 0x5a, 0x18, 0xf7, 0x63, 0x9b, 0xd0, 0x85, 0x04, 0x79, 0xe9, 0xe4, 0x3a, 0xd4,
	0x97, 0x97, 0xd0, 0x09, 0xbb, 0x24, 0x3c, 0xdd, 0x59, 0xdf, 0xf7, 0xe5, 0xc9, 0x1a, 0x76, 0x03,
	0x82, 0x0c, 0x08, 0x3c, 0x4c, 0xc3, 0xad, 0x42, 0x89, 0x87, 0x03, 0xc1, 0x72, 0x32, 0x58, 0x91,
	0x87, 0x7d, 0xa1, 0x16, 0x01, 0x22, 0x9f, 0x39, 0x2c, 0xec, 0x70, 0x12, 0xa5, 0x0d, 0x24, 0x9f,
	0xd9, 0xd2, 0x80, 0xca, 0x80, 0x5d, 0xaf, 0xe1, 0xb4, 0x09, 0x49, 0x30, 0x0e, 0x23, 0x97, 0x54,
	0x36, 0xce, 0x54, 0x9b, 0xe5, 0x96, 0xeb, 0x35, 0x4e, 0x08, 0x89, 0x09, 0x76, 0xec, 0x14, 0x29,
	0x52, 0x8f, 0xa4, 0x37, 0x45, 0x71, 0x73, 0x9f, 0xb4, 0x81, 0x7a, 0x24, 0xb9, 0x1f, 0x1a, 0x30,
	0x57, 0x0f, 0x23, 0xd5, 0x87, 0x60, 0x97, 0x84, 0x39, 0x9c, 0x8a, 0x7b, 0xa7, 0xbc, 0x53, 0x4e,
	0xdb, 0x48, 0xf9, 0xaa, 0xd2, 0x75, 0x2a, 0x3d, 0xe8, 0x07, 0x98, 0x89, 0x47, 0xe4, 0x30, 0x71,
	0xbb, 0x8d, 0x54, 0xd3, 0x21, 0x6f, 0x5a, 0x03, 0xc2, 0x1c, 0x32, 0x13, 0x6b, 0xf1, 0xc0, 0x6d,
	0x45, 0xb6, 0x8b, 0x5e, 0xdf, 0x33, 0x3a, 0x06, 0x48, 0xe2, 0x87, 0x0d, 0xd9, 0xb1, 0xc8, 0x67,
	0xba, 0x94, 0xd7, 0x84, 0x3e, 0x7e, 0x6b, 0x4f, 0xc5, 0x31, 0x8e, 0x1b, 0xc8, 0x4f, 0xbb, 0x2d,
	0x62, 0x0a, 0xbc, 0x66, 0x18, 0x11, 0x5f, 0xf6, 0x3a, 0xf2, 0x66, 0xf9, 0xbf, 0x8b, 0x4b, 0xc3,
	0xa0, 0x22, 0xe9, 0x69, 0x9b, 0x26, 0xb5, 0x88, 0xb9, 0x16, 0x53, 0xc4, 0x48, 0x93, 0x8a, 0xca,
	0x3a, 0xad, 0xa8, 0x26, 0x9b, 0x0a, 0x05, 0xbb, 0xe8, 0x7a, 0x0d, 0x3b, 0x36, 0x1f, 0x46, 0x35,
	0x29, 0x32, 0xca, 0x22, 0xde, 0x8f, 0x9d, 0x56, 0x9b, 0x8f, 0xf4, 0xf4, 0xa2, 0x3d, 0x98, 0xed,
	0xe2, 0xe2, 0xce, 0xaf, 0x6c, 0x16, 0xe4, 0xcd, 0xcd, 0x9f, 0x99, 0x7d, 0x1a, 0x4e, 0xd1, 0xed,
	0x12, 0xeb, 0x37, 0x44, 0x0b, 0xff, 0xce, 0x41, 0xb1, 0x7f, 0x5a, 0x50, 0x05, 0xc6, 0x3c, 0x76,
	0xd5, 0xe6, 0x71, 0xa5, 0x9e, 0xff, 0xcc, 0x3e, 0xb1, 0xea, 0x91, 0xda, 0x8a, 0x8b, 0x3e, 0x87,
	0x51, 0x8f, 0x30, 0xd5, 0x60, 0x1b, 0xbe, 0x73, 0x55, 0x08, 0xe3, 0xf4, 0x42, 0x76, 0x67, 0x62,
	0xba, 0x64, 0x89, 0xbb, 0x00, 0x0f, 0x9d, 0x4b, 0xca, 0x78, 0xc7, 0x6d, 0x3a, 0xed, 0x90, 0x71,
	0xb9, 0x14, 0x0b, 0x76, 0x81, 0x87, 0x67, 0xca, 0x7a, 0x12, 0x32, 0x2e, 0xce, 0x20, 0xb9, 0x6a,
	0xfb, 0x90, 0xa0, 0xce, 0x20, 0xe1, 0xe8, 0xc1, 0x2e, 0xfc, 0x25, 0x07, 0x53, 0xa9, 0x4a, 0xba,
	0x83, 0x1c, 0xfb, 0x3f, 0x0c, 0x72, 0xfc, 0x7f, 0x19, 0xe4, 0xc2, 0x3e, 0x94, 0x06, 0xd5, 0x85,
	0xe6, 0x60, 0xcc, 0x27, 0xe7, 0x9d, 0x9a, 0x4c, 0x6b, 0xca, 0x56, 0x0f, 0xf2, 0x3b, 0x89, 0xb8,
	0x91, 0xd0, 0x70, 0xe8, 0x93, 0xb8, 0xd7, 0x09, 0xca, 0x54, 0x09, 0x7d, 0xb2, 0xf0, 0x39, 0xcc,
	0x0c, 0x4c, 0x35, 0x7a, 0x0c, 0x23, 0xd4, 0x4b, 0xb6, 0xe9, 0x3b, 0x43, 0xb6, 0x69, 0x5b, 0x60,
	0x56, 0x7e, 0x1a, 0x83, 0x87, 0x1a, 0x29, 0xed, 0x57, 0xf6, 0xe2, 0xe1, 0x57, 0x3b, 0xad, 0x96,
	0xcb, 0xae, 0xc4, 0x05, 0xe4, 0xc2, 0xa5, 0xcd, 0x0e, 0x23, 0x4e, 0x6f, 0x3e, 0xaa, 0x89, 0x3a,
	0x1b, 0xbb, 0xec, 0x34, 0x2d, 0xf1, 0x59, 0xd1, 0x0c, 0x3d, 0xb7, 0xd9, 0x3d, 0x36, 0xe4, 0x1f,
	0x10, 0x51, 0xd2, 0x80, 0x96, 0xce, 0x74, 0xaf, 0x3f, 0x15, 0x2e, 0xf9, 0x01, 0x43, 0x5a, 0x21,
	0x27, 0x19, 0xd2, 0x8d, 0xf8, 0x03, 0x46, 0x7a, 0x07, 0x58, 0xcf, 0x00, 0xd1, 0x80, 0x72, 0xea,
	0x36, 0xd5, 0x2e, 0xe9, 0x34, 0x68, 0xe0, 0xc7, 0x1b, 0x64, 0x29, 0xf6, 0xc8, 0x0d, 0xf2, 0x2d,
	0x0d, 0x7c, 0xb4, 0x0c, 0xd3, 0x09, 0x5a, 0xdc, 0x2d, 0xe3, 0x0e, 0x74, 0x3e, 0xb6, 0x9d, 0xd0,
	0xa0, 0x26, 0x0e, 0x8d, 0x04, 0x12, 0x79, 0x21, 0x4b, 0x8a, 0x9e, 0xf0, 0xaa, 0xc2, 0x86, 0x3e,
	0x85, 0x62, 0x40, 0x6a, 0x21, 0xa7, 0xae, 0xdc, 0x60, 0xd2, 0x5e, 0x75, 0xa1, 0xc7, 0x7a, 0x18,
	0x09, 0x35, 0x9f, 0x13, 0xb1, 0xea, 0xbb, 0x99, 0x95, 0x14, 0x4e, 0x98, 0xbb, 0x69, 0xdd, 0x85,
	0x29, 0x89, 0x93, 0x39, 0xcd, 0xaa, 0xbf, 0x03, 0x84, 0x41, 0x26, 0xb4, 0x08, 0x20, 0x9d, 0x2a,
	0x1b, 0x24, 0xbd, 0x12, 0xae, 0x52, 0x49, 0xb8, 0xf2, 0x73, 0xe1, 0x66, 0x97, 0x7b, 0x4a, 0x5b,
	0xf2, 0x5f, 0x97, 0x88, 0x34, 0xfb, 0x9b, 0xce, 0x6a, 0xd7, 0x99, 0x49, 0xec, 0x49, 0xcf, 0xf9,
	0x01, 0x14, 0x3a, 0x91, 0x6c, 0xcc, 0x73, 0x4e, 0x83, 0x9a, 0xd8, 0x70, 0xe4, 0xb8, 0x85, 0xb1,
	0x1a, 0xdb, 0xd0, 0x43, 0x28, 0x76, 0xcf, 0x16, 0xe7, 0xd2, 0x65, 0x71, 0x23, 0x72, 0x3a, 0x3d,
	0x5e, 0xce, 0x5c, 0x86, 0x76, 0x60, 0x51, 0x3b, 0xfb, 0x8e, 0xdb, 0x6c, 0x86, 0xef, 0x89, 0x8f,
	0x67, 0x24, 0x69, 0x41, 0xa3, 0x82, 0x1d, 0x85, 0x78, 0xf2, 0xd7, 0x1c, 0x2c, 0x7e, 0xf4, 0xff,
	0x1e, 0xf4, 0x14, 0x1e, 0x35, 0x9c, 0x8f, 0x42, 0x9c, 0xee, 0x5f, 0x3f, 0xab, 0xf0, 0xf0, 0x3a,
	0xf0, 0xd1, 0xbb, 0x83, 0x83, 0x52, 0x0e, 0x7d, 0x06, 0x4f, 0xaf, 0x43, 0xee, 0xec, 0x55, 0xc5,
	0x07, 0xbc, 0xf3, 0xba, 0x72, 0x58, 0xba, 0xf1, 0x72, 0xec, 0x4d, 0xee, 0xcf, 0xb9, 0x4f, 0xfe,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x60, 0x9e, 0x6d, 0x7f, 0xe7, 0x1b, 0x00, 0x00,
}
